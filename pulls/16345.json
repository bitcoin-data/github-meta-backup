{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345",
    "id": 294940550,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk0OTQwNTUw",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16345",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16345.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16345.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/373401fa81e43886d43696d1a59cdd933a882b0d",
    "number": 16345,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "rpc: Add getblockbyheight method",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As such a feature get requested a lot (#16317, #14858 and #8457), I've implemented it into a **new** RPC call called `getblockbyheight` as it was discussed in #16317 \r\nIn the past this feature got requested for the `getblock` command but it isn't a good idea to interpret a string as a number because it breaks API consistency.\r\n\r\nThe function is basically just a duplicate of `getblock` with the exception that it gets the hash by the height (first parameter) and not by the hash as a parameter.\r\n\r\nIt also checks if the block exists by comparing the height with the total height or if the block is negative.\r\n\r\nEDIT: I improved the code with the help of fqlx so it no longer contains some of the getblock legacy.",
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-07-05T17:16:35Z",
    "updated_at": "2021-12-16T14:11:14Z",
    "closed_at": "2019-10-14T15:27:53Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "cca778ac0cf67256c83e77d606f7d6a095a0e7e1",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "emilengler:getblockbyheight",
      "ref": "getblockbyheight",
      "sha": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "51a6e2c4192913c9c18507d8dfb3302500b26cc3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 110,
    "deletions": 0,
    "changed_files": 3,
    "commits": 3,
    "review_comments": 81,
    "comments": 46
  },
  "events": [
    {
      "event": "reviewed",
      "id": 258536402,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTM2NDAy",
      "url": null,
      "actor": null,
      "commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-258536402",
      "submitted_at": "2019-07-05T20:31:37Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "reviewed",
      "id": 258542950,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTQyOTUw",
      "url": null,
      "actor": null,
      "commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-258542950",
      "submitted_at": "2019-07-05T20:34:44Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "commented",
      "id": 508871580,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg3MTU4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508871580",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:12:26Z",
      "updated_at": "2019-07-05T22:12:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fqlx Actually I do not think it is a good idea to move `int verbosity` to something else.\r\nThis could break the API backwards compatibility, maybe some 3rd party APIs are working with negative numbers for the verbosity. If we would use an unsigned variable it would cause an overflow and then the output would be the opposite",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508871580",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463616369,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzYxNjM2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463616369",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:12:26Z"
    },
    {
      "event": "subscribed",
      "id": 2463616370,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM2MTYzNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463616370",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:12:26Z"
    },
    {
      "event": "labeled",
      "id": 2463631417,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NjM2MzE0MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463631417",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:32:16Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 508873921,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg3MzkyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508873921",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:33:23Z",
      "updated_at": "2019-07-05T22:33:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fqlx I made some changes you've suggested.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508873921",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463632093,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzYzMjA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463632093",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:33:23Z"
    },
    {
      "event": "subscribed",
      "id": 2463632094,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM2MzIwOTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463632094",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:33:23Z"
    },
    {
      "event": "commented",
      "id": 508874932,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg3NDkzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508874932",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:42:52Z",
      "updated_at": "2019-07-06T04:48:03Z",
      "author_association": "NONE",
      "body": "Can you add tests?",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508874932",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463639276,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzYzOTI3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463639276",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:43:46Z"
    },
    {
      "event": "subscribed",
      "id": 2463639277,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM2MzkyNzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463639277",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:43:46Z"
    },
    {
      "event": "commented",
      "id": 508875950,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg3NTk1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508875950",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:52:29Z",
      "updated_at": "2019-07-05T22:52:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't see the need for a test for such a function.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508875950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 508877749,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg3Nzc0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508877749",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T23:10:23Z",
      "updated_at": "2019-07-05T23:10:23Z",
      "author_association": "MEMBER",
      "body": "@emilengler every change should have a test, especially a new RPC. Also in this case you should a release note too.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508877749",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463657143,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzY1NzE0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463657143",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T23:10:23Z"
    },
    {
      "event": "subscribed",
      "id": 2463657144,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM2NTcxNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463657144",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T23:10:23Z"
    },
    {
      "event": "commented",
      "id": 508879553,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg3OTU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508879553",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T23:30:01Z",
      "updated_at": "2019-07-05T23:30:01Z",
      "author_association": "NONE",
      "body": "The tests are good not only to increase confidence in our codebase but to also show a working example how to use it. The code will used by 1000s of people ",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508879553",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463736387,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzczNjM4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463736387",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T02:24:17Z"
    },
    {
      "event": "subscribed",
      "id": 2463736388,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM3MzYzODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463736388",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T02:24:17Z"
    },
    {
      "event": "commented",
      "id": 508898106,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg5ODEwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508898106",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T05:15:24Z",
      "updated_at": "2019-07-06T05:15:24Z",
      "author_association": "MEMBER",
      "body": "> I don't see the need for a test for such a function.\r\n\r\nThere should be at least a basic test that checks `getblockbyheight(height)` is consistent with `getblock(getblockhash(height))`",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508898106",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 508898725,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg5ODcyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508898725",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T05:29:05Z",
      "updated_at": "2019-07-06T05:29:05Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nfailing a linter:\r\n\r\n```\r\nThis diff appears to have added new lines with trailing whitespace.\r\nThe following changes were suspected:\r\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\r\n@@ -942,0 +943,97 @@ static UniValue getblock(const JSONRPCRequest& request)\r\n+\r\n+\r\n^---- failure generated from test/lint/lint-whitespace.sh\r\n```",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508898725",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463786394,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2Mzc4NjM5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463786394",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T05:31:20Z"
    },
    {
      "event": "subscribed",
      "id": 2463786395,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM3ODYzOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463786395",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T05:31:20Z"
    },
    {
      "event": "mentioned",
      "id": 2463877907,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2Mzg3NzkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463877907",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T10:20:41Z"
    },
    {
      "event": "subscribed",
      "id": 2463877908,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM4Nzc5MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463877908",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T10:20:41Z"
    },
    {
      "event": "commented",
      "id": 508926760,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODkyNjc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508926760",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z",
      "updated_at": "2019-07-06T13:30:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fqlx @promag @achow101 \r\nTest added, can someone take a look at it?",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508926760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2463944306,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2Mzk0NDMwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463944306",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z"
    },
    {
      "event": "subscribed",
      "id": 2463944307,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM5NDQzMDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463944307",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z"
    },
    {
      "event": "mentioned",
      "id": 2463944309,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2Mzk0NDMwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463944309",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z"
    },
    {
      "event": "subscribed",
      "id": 2463944310,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM5NDQzMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463944310",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z"
    },
    {
      "event": "mentioned",
      "id": 2463944311,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2Mzk0NDMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463944311",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z"
    },
    {
      "event": "subscribed",
      "id": 2463944312,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM5NDQzMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463944312",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T13:30:59Z"
    },
    {
      "event": "reviewed",
      "id": 258591275,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTkxMjc1",
      "url": null,
      "actor": null,
      "commit_id": "1404d1947a5f58092e36fca1da940a54b684da98",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "An alternative to overloading `hash` in `getblock` is to add an extra parameter to `getblock`, like:\r\n```\r\ngetblock hash ( height )\r\n```\r\nThen:\r\n - if `hash` is null then use height\r\n - if both are set then they must match.\r\n\r\nThis would look good if called with named parameter `getblock(height=20)`.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-258591275",
      "submitted_at": "2019-07-06T14:35:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "commented",
      "id": 508932427,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODkzMjQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508932427",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T14:59:05Z",
      "updated_at": "2019-07-06T14:59:05Z",
      "author_association": "MEMBER",
      "body": "I can't unresolve https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833726, but please address my comment there.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508932427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 508941343,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODk0MTM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508941343",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T17:18:13Z",
      "updated_at": "2019-07-06T17:18:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@promag I pushed a new commit which fix this and unresolved the conversation.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508941343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2464029884,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2NDAyOTg4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2464029884",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T17:18:13Z"
    },
    {
      "event": "subscribed",
      "id": 2464029885,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjQwMjk4ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2464029885",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T17:18:13Z"
    },
    {
      "event": "reviewed",
      "id": 258605854,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NjA1ODU0",
      "url": null,
      "actor": null,
      "commit_id": "3f3fc1121465e37b46fd8ec2d5baab5c046e4d74",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-258605854",
      "submitted_at": "2019-07-07T01:01:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "reviewed",
      "id": 258655431,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NjU1NDMx",
      "url": null,
      "actor": null,
      "commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "@emilengler Thanks for contributing. Before this can be merged, or reviewed, this PR needs a few changes.\r\n\r\nThe [macOS build](https://travis-ci.org/bitcoin/bitcoin/jobs/555275061), and others, are currently failing on Travis:\r\n```\r\nrpc/blockchain.cpp:1019:19: error: calling function 'LookupBlockIndex' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n    pblockindex = LookupBlockIndex(hash);\r\n                  ^\r\n1 error generated.\r\n```\r\n\r\nOnce you've fixed any problems, and you believe your code is ready for review, can you please [squash your commits](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits). You could either squash everything into a single commit, or two commits. One that adds the new `RPC` command and a second commit that adds the test. When you do so, make sure you use clear and meaningful commit messages. [The general convention is to prefix with the part of the code you are modifying](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#contributor-workflow).\r\n\r\nI've also updated the PR title and body. [We don't use @ mentions in commits](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#contributor-workflow) or PR text, because they just lead to spam when downstream projects pull our changes.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-258655431",
      "submitted_at": "2019-07-08T01:25:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "renamed",
      "id": 2464690074,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjQ2NDY5MDA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2464690074",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T01:25:48Z",
      "rename": {
        "from": "RPC: Add getblockbyheight",
        "to": "rpc: Add getblockbyheight method"
      }
    },
    {
      "event": "mentioned",
      "id": 2466701996,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2NjcwMTk5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2466701996",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T16:12:51Z"
    },
    {
      "event": "subscribed",
      "id": 2466701998,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjY3MDE5OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2466701998",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T16:12:51Z"
    },
    {
      "event": "reviewed",
      "id": 259027469,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MDI3NDY5",
      "url": null,
      "actor": null,
      "commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-259027469",
      "submitted_at": "2019-07-08T16:45:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "reviewed",
      "id": 259184689,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MTg0Njg5",
      "url": null,
      "actor": null,
      "commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-259184689",
      "submitted_at": "2019-07-08T22:16:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "reviewed",
      "id": 259185067,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MTg1MDY3",
      "url": null,
      "actor": null,
      "commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-259185067",
      "submitted_at": "2019-07-08T22:18:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "commented",
      "id": 509727480,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTcyNzQ4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509727480",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-09T17:10:10Z",
      "updated_at": "2019-07-09T17:10:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake Thank you for writing such an informative comment!\r\nI have fixed to compilation errors and squashed to commits.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-509727480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2470079538,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ3MDA3OTUzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2470079538",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-09T17:10:10Z"
    },
    {
      "event": "subscribed",
      "id": 2470079539,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NzAwNzk1Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2470079539",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-09T17:10:10Z"
    },
    {
      "event": "reviewed",
      "id": 259666535,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5NjY2NTM1",
      "url": null,
      "actor": null,
      "commit_id": "adb93ca9ddd09550b41af924010415d7ae015ec2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-259666535",
      "submitted_at": "2019-07-09T17:57:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "commented",
      "id": 509780431,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTc4MDQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509780431",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-09T19:43:42Z",
      "updated_at": "2019-07-09T19:43:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've also updated the commit messages with the rpc prefix",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-509780431",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 510162511,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDE2MjUxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510162511",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T17:49:44Z",
      "updated_at": "2019-07-10T17:49:44Z",
      "author_association": "MEMBER",
      "body": "> I don't see the need for a test for such a function.\r\n\r\nIs how we get RPC bugs into releases :D \r\n\r\nconcept ACK ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510162511",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "reviewed",
      "id": 260257626,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYwMjU3NjI2",
      "url": null,
      "actor": null,
      "commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-260257626",
      "submitted_at": "2019-07-10T18:00:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjNmZThjZjhhYjRkNThhZWEyOWRiMzQzMjk1NzNiZGI5NzQxYWNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a23fe8cf8ab4d58aea29db34329573bdb9741aca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a23fe8cf8ab4d58aea29db34329573bdb9741aca",
      "tree": {
        "sha": "2486bd5b5f3c1854cf84f54aede92f24e0e45488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2486bd5b5f3c1854cf84f54aede92f24e0e45488"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f378ac30cf66178564620b4a8ca9cad7f031cc3",
          "sha": "4f378ac30cf66178564620b4a8ca9cad7f031cc3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4f378ac30cf66178564620b4a8ca9cad7f031cc3"
        }
      ],
      "message": "rpc: Add getblockbyheight",
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-07-10T18:19:47Z"
      },
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-07-05T16:50:36Z"
      },
      "sha": "a23fe8cf8ab4d58aea29db34329573bdb9741aca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzEzYTc0YzZlMzVhY2ZjYTM5MDZlMDg1NmE4ZjdmNWUyM2EzMjMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "tree": {
        "sha": "7e1b820591ead83e5365cd066e0cbbc29b20a7fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e1b820591ead83e5365cd066e0cbbc29b20a7fa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a23fe8cf8ab4d58aea29db34329573bdb9741aca",
          "sha": "a23fe8cf8ab4d58aea29db34329573bdb9741aca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a23fe8cf8ab4d58aea29db34329573bdb9741aca"
        }
      ],
      "message": "rpc: Add test for getblockbyheight",
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-07-10T18:19:47Z"
      },
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-07-10T18:17:10Z"
      },
      "sha": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230"
    },
    {
      "event": "reviewed",
      "id": 260516295,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYwNTE2Mjk1",
      "url": null,
      "actor": null,
      "commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-260516295",
      "submitted_at": "2019-07-11T07:38:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "commented",
      "id": 510569594,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDU2OTU5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510569594",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-11T17:00:00Z",
      "updated_at": "2019-07-11T17:00:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Why does travis starts responding with errors?\r\nThe codebase hasn't changed",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510569594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 510840305,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDg0MDMwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510840305",
      "actor": {
        "login": "abitfan",
        "id": 10046315,
        "node_id": "MDQ6VXNlcjEwMDQ2MzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/10046315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abitfan",
        "html_url": "https://github.com/abitfan",
        "followers_url": "https://api.github.com/users/abitfan/followers",
        "following_url": "https://api.github.com/users/abitfan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/abitfan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/abitfan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/abitfan/subscriptions",
        "organizations_url": "https://api.github.com/users/abitfan/orgs",
        "repos_url": "https://api.github.com/users/abitfan/repos",
        "events_url": "https://api.github.com/users/abitfan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/abitfan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T10:40:54Z",
      "updated_at": "2019-07-12T10:40:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\nNACK for another rpc call. The reason #8457 was rejected was due to overloading APIs however this is invalidated by the existence of getblockstats.",
      "user": {
        "login": "abitfan",
        "id": 10046315,
        "node_id": "MDQ6VXNlcjEwMDQ2MzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/10046315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abitfan",
        "html_url": "https://github.com/abitfan",
        "followers_url": "https://api.github.com/users/abitfan/followers",
        "following_url": "https://api.github.com/users/abitfan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/abitfan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/abitfan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/abitfan/subscriptions",
        "organizations_url": "https://api.github.com/users/abitfan/orgs",
        "repos_url": "https://api.github.com/users/abitfan/repos",
        "events_url": "https://api.github.com/users/abitfan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/abitfan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510840305",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 510970526,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDk3MDUyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510970526",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T17:35:39Z",
      "updated_at": "2019-07-12T17:35:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@abitfan See #16317",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510970526",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2479731704,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ3OTczMTcwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479731704",
      "actor": {
        "login": "abitfan",
        "id": 10046315,
        "node_id": "MDQ6VXNlcjEwMDQ2MzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/10046315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abitfan",
        "html_url": "https://github.com/abitfan",
        "followers_url": "https://api.github.com/users/abitfan/followers",
        "following_url": "https://api.github.com/users/abitfan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/abitfan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/abitfan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/abitfan/subscriptions",
        "organizations_url": "https://api.github.com/users/abitfan/orgs",
        "repos_url": "https://api.github.com/users/abitfan/repos",
        "events_url": "https://api.github.com/users/abitfan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/abitfan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T17:35:39Z"
    },
    {
      "event": "subscribed",
      "id": 2479731706,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0Nzk3MzE3MDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479731706",
      "actor": {
        "login": "abitfan",
        "id": 10046315,
        "node_id": "MDQ6VXNlcjEwMDQ2MzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/10046315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abitfan",
        "html_url": "https://github.com/abitfan",
        "followers_url": "https://api.github.com/users/abitfan/followers",
        "following_url": "https://api.github.com/users/abitfan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/abitfan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/abitfan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/abitfan/subscriptions",
        "organizations_url": "https://api.github.com/users/abitfan/orgs",
        "repos_url": "https://api.github.com/users/abitfan/repos",
        "events_url": "https://api.github.com/users/abitfan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/abitfan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T17:35:39Z"
    },
    {
      "event": "mentioned",
      "id": 2479736571,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ3OTczNjU3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479736571",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T17:37:43Z"
    },
    {
      "event": "subscribed",
      "id": 2479736572,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0Nzk3MzY1NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479736572",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T17:37:43Z"
    },
    {
      "event": "commented",
      "id": 510992631,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDk5MjYzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510992631",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T18:45:04Z",
      "updated_at": "2019-07-12T18:45:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Seems that travis failed again, I will check the code again",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510992631",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 511036416,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTAzNjQxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511036416",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T21:18:05Z",
      "updated_at": "2019-07-12T21:18:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Finally Travis has succeeded. I will do some small changes to the code which were suggested above and then this can be merged I think.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511036416",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 511041222,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTA0MTIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511041222",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T21:36:00Z",
      "updated_at": "2019-07-12T21:36:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "What is wrong with `getblock(getblockhash(<height>))`?\r\nIs the intention of this PR to increase fetch performance by height?",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511041222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 511042233,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTA0MjIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511042233",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T21:39:52Z",
      "updated_at": "2019-07-12T21:39:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasschnelli Such a feature get requested a lot",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511042233",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2480255559,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ4MDI1NTU1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2480255559",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T21:39:52Z"
    },
    {
      "event": "subscribed",
      "id": 2480255561,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0ODAyNTU1NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2480255561",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T21:39:52Z"
    },
    {
      "event": "commented",
      "id": 511089299,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTA4OTI5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511089299",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-13T05:05:37Z",
      "updated_at": "2019-08-26T20:27:47Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16728](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16728.html) (move-only: move coins statistics utils out of RPC by jamesob)\n* [#16439](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16439.html) (RPC: support \"@height\" in place of blockhash for getblock etc by ajtowns)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511089299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 511861339,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTg2MTMzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511861339",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T15:16:48Z",
      "updated_at": "2019-07-16T15:16:48Z",
      "author_association": "MEMBER",
      "body": "> An alternative to overloading `hash` in `getblock` is to add an extra parameter to `getblock`, like:\r\n> \r\n> ```\r\n> getblock hash ( height )\r\n> ```\r\n> \r\n> Then:\r\n> \r\n>     * if `hash` is null then use height\r\n> \r\n>     * if both are set then they must match.\r\n> \r\n> \r\n> This would look good if called with named parameter `getblock(height=20)`.\r\n\r\nI think I agree with this -- here's a draft of what that might look like shamelessly built on top of this PR while removing most of it :) https://github.com/ajtowns/bitcoin/commit/cf0868719748e2bb4f0394924245d4212d0f4260 \r\n\r\n@emilengler Feel free to steal the patch, merge it into your own, take the credit, do what you like; or ignore it and get this merged, whatever :)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511861339",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2486535501,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ4NjUzNTUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2486535501",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T15:16:49Z"
    },
    {
      "event": "subscribed",
      "id": 2486535502,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0ODY1MzU1MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2486535502",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T15:16:49Z"
    },
    {
      "event": "commented",
      "id": 511867759,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTg2Nzc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511867759",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T15:32:07Z",
      "updated_at": "2019-07-16T15:32:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm unsure about this. Overlapping features for a machine-2-machine API (our RPC API) seems non-ideal to me.\r\nIMO `getblockhash` (or `/rest/blockhashbyheight`) is the one call that deals with heights.\r\n\r\nI would accept the argument that performance is an issue (since one needs to execute two calls for getting a block at a certain height),... but since the RPC interface with its JSON overhead is already slow, I don't think it matters that much.\r\n\r\nMy humble opinion is to avoid adding client features on the server-side.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511867759",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 512331736,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjMzMTczNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512331736",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:30:55Z",
      "updated_at": "2019-07-17T15:30:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasschnelli #16317 \r\nThe feature get requested a lot (around once or twice per semester).\r\nI think it should be added to to lots of requests.\r\nIt wouldn't make in terms of speed such a difference.\r\nIt is even slower to first call getblockhash and then getblock",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512331736",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2489877065,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ4OTg3NzA2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489877065",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:30:55Z"
    },
    {
      "event": "subscribed",
      "id": 2489877066,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0ODk4NzcwNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489877066",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:30:55Z"
    },
    {
      "event": "commented",
      "id": 512335808,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjMzNTgwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512335808",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:40:28Z",
      "updated_at": "2019-07-17T15:40:28Z",
      "author_association": "MEMBER",
      "body": "@emilengler note that this call can't be cached whereas getblock by hash can.\r\n\r\n> I think it should be added to to lots of requests.\r\n\r\nWhat you mean?\r\n\r\n> It is even slower to first call getblockhash and then getblock\r\n\r\nDo you have numbers to prove this? I suspect it is far from being a bottleneck.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512335808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2489908877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ4OTkwODg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489908877",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:40:28Z"
    },
    {
      "event": "subscribed",
      "id": 2489908878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0ODk5MDg4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489908878",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:40:28Z"
    },
    {
      "event": "commented",
      "id": 512337339,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjMzNzMzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512337339",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:44:00Z",
      "updated_at": "2019-07-17T15:44:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "@promag First there was a type sorry\r\nI meant:\r\n_I think it should be added due to lots of requests._\r\n\r\nTo the second point: I don't have numbers to prove it but I'm very sure that 2 separate calls are slower.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512337339",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2489920284,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ4OTkyMDI4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489920284",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:44:01Z"
    },
    {
      "event": "subscribed",
      "id": 2489920285,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0ODk5MjAyODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489920285",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:44:01Z"
    },
    {
      "event": "commented",
      "id": 512341362,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjM0MTM2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512341362",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T15:53:29Z",
      "updated_at": "2019-07-17T15:53:29Z",
      "author_association": "MEMBER",
      "body": "I know it's slower, but how much? How much this saves?",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512341362",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 512361535,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjM2MTUzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512361535",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T16:45:11Z",
      "updated_at": "2019-07-17T16:45:11Z",
      "author_association": "MEMBER",
      "body": "I don't think speed is a good rationale for this PR. If speed was really a concern, you wouldn't be using Bitcoin Core RPCs in the first place.\r\n\r\nThe only real reason to want this is convenience. I'm sure that's the real reason this is often requested, and I'm mildly in favor of it because of that.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512361535",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 512414974,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjQxNDk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512414974",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T17:16:52Z",
      "updated_at": "2019-07-17T17:16:52Z",
      "author_association": "MEMBER",
      "body": "See also \" GUI: Add generate method #16000 \".\r\n\r\nBasically it would be nice to have a way to set aliases like `generate=generatetoaddress(getnewaddress())` or `getblockbyheight=getblock(getblockhash($1))`.  This is really easy if you call the rpc from bash or python, but not when calling from the gui.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512414974",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 512624370,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjYyNDM3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512624370",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T01:05:19Z",
      "updated_at": "2019-07-18T01:05:19Z",
      "author_association": "MEMBER",
      "body": "> The only real reason to want this is convenience.\r\n\r\nHow about just treating a blockhash `\"@123\"` as a request of the block at height 123, rather than an error for not being 64 hex digits? That's pretty convenient for manual use from the cli and gui, and pretty easy to code (and thus to do for other RPCs that want a block hash):\r\n\r\n    $ bitcoin-cli -regtest getblock $(bitcoin-cli -regtest getblockhash 0) | grep ^...hash\r\n      \"hash\": \"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\",\r\n    $ bitcoin-cli -regtest getblock @0 | grep ^...hash\r\n      \"hash\":  \"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\",\r\n\r\n```diff\r\n+inline uint256 GetBlockHashFromParam(const UniValue& param, const std::string& name) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n+{\r\n+    const std::string& v = param.get_str();\r\n+    if (v.size() > 1 && v[0] == '@') {\r\n+        // treat as height, and lookup\r\n+        int32_t height;\r\n+        if (!ParseInt32(v.substr(1), &height)) {\r\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %s must be @ followed by a number\", v));\r\n+        }\r\n+        if (height < 0) {\r\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\r\n+        }\r\n+        const int current_tip = ::ChainActive().Height();\r\n+        if (height > current_tip) {\r\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\r\n+        }\r\n+        return *(::ChainActive()[height]->phashBlock);\r\n+    } else {\r\n+        return ParseHashV(param, name);\r\n+    }\r\n+}\r\n+\r\n static UniValue getblock(const JSONRPCRequest& request)\r\n {\r\n     const RPCHelpMan help{\"getblock\",\r\n@@ -904,8 +926,6 @@ static UniValue getblock(const JSONRPCRequest& request)\r\n         throw std::runtime_error(help.ToString());\r\n     }\r\n \r\n-    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\r\n-\r\n     int verbosity = 1;\r\n     if (!request.params[1].isNull()) {\r\n         if(request.params[1].isNum())\r\n@@ -919,6 +939,7 @@ static UniValue getblock(const JSONRPCRequest& request)\r\n     const CBlockIndex* tip;\r\n     {\r\n         LOCK(cs_main);\r\n+        uint256 hash(GetBlockHashFromParam(request.params[0], \"blockhash\"));\r\n         pblockindex = LookupBlockIndex(hash);\r\n         tip = ::ChainActive().Tip();\r\n```",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512624370",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 512871611,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjg3MTYxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512871611",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T15:42:23Z",
      "updated_at": "2019-07-18T15:42:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ajtowns I think it is better to have a seperate command for this. This could cause confusion",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512871611",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2493167048,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ5MzE2NzA0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2493167048",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T15:42:23Z"
    },
    {
      "event": "subscribed",
      "id": 2493167049,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0OTMxNjcwNDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2493167049",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T15:42:23Z"
    },
    {
      "event": "commented",
      "id": 512874508,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjg3NDUwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512874508",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T15:49:18Z",
      "updated_at": "2019-07-18T15:49:18Z",
      "author_association": "MEMBER",
      "body": "Concept NAK from me sorry, please provide benchmarks to support the new RPC - which IMO is the only valid reason to add redundancy to the RPC interface.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512874508",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 512962108,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjk2MjEwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512962108",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T19:51:44Z",
      "updated_at": "2019-07-18T19:51:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "This would make it even faster to get a block just by its height. Currently you need to execute two separate commands which is slower and more complicated in two ways: For the machine and for the user and such a feature get requested a lot",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512962108",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 513002784,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzAwMjc4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/513002784",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T21:52:04Z",
      "updated_at": "2019-07-18T21:53:38Z",
      "author_association": "MEMBER",
      "body": "I went ahead and made a quick profile:\r\n```py\r\ncount = 5000\r\nnode.generate(count)\r\n\r\nfor i in range(count):\r\n    node.getblock(self.nodes[0].getblockhash(i))\r\n\r\n# takes ~ 3742ms\r\n\r\nfor i in range(count):\r\n    node.getblockbyheight(i)\r\n\r\n# takes ~ 2193ms\r\n```\r\nNote that it fetches 5000 blocks but these are really small blocks and you should try with bigger blocks - I think it will make a difference in the comparison - I mean `getblockbyheight` would just be slightly faster.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-513002784",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 513275025,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzI3NTAyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/513275025",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T15:34:42Z",
      "updated_at": "2019-07-19T15:34:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "@promag Thanks for doing the test but it is even faster for the user to type the command",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-513275025",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2496223621,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ5NjIyMzYyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2496223621",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T15:34:42Z"
    },
    {
      "event": "subscribed",
      "id": 2496223622,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0OTYyMjM2MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2496223622",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T15:34:42Z"
    },
    {
      "event": "commented",
      "id": 513466136,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ2NjEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/513466136",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-20T13:06:55Z",
      "updated_at": "2019-07-20T13:06:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Currently there are:\r\n3 ACKs\r\n1 NACK",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-513466136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "reviewed",
      "id": 264805160,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY0ODA1MTYw",
      "url": null,
      "actor": null,
      "commit_id": "8d2c01f3413ad55c5b5056fb9aa6e801196a3a1b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#pullrequestreview-264805160",
      "submitted_at": "2019-07-22T13:13:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzM0MDFmYTgxZTQzODg2ZDQzNjk2ZDFhNTljZGQ5MzNhODgyYjBk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/373401fa81e43886d43696d1a59cdd933a882b0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/373401fa81e43886d43696d1a59cdd933a882b0d",
      "tree": {
        "sha": "8ceee535a9a2f375b72616c4051429415b56983e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ceee535a9a2f375b72616c4051429415b56983e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
          "sha": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac13a74c6e35acfca3906e0856a8f7f5e23a3230"
        }
      ],
      "message": "rpc: Code Improvement in getblockbyheight\n\nrpc: Fix whitespace in rpc/blockchain.cpp\n\nrpc: getblockbyheight: Remove hash",
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-07-22T18:59:19Z"
      },
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-07-12T21:52:51Z"
      },
      "sha": "373401fa81e43886d43696d1a59cdd933a882b0d"
    },
    {
      "event": "commented",
      "id": 514057030,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA1NzAzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514057030",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T05:14:01Z",
      "updated_at": "2019-07-23T05:14:01Z",
      "author_association": "MEMBER",
      "body": "> Note that it fetches 5000 blocks but these are really small blocks and you should try with bigger blocks - I think it will make a difference in the comparison - I mean `getblockbyheight` would just be slightly faster.\r\n\r\nIt looks like even with bigger blocks avoiding the two RPCs is a fair bit faster:\r\n\r\n```\r\n$ time for a in `seq 400000 400500`; do bitcoin-cli getblock $(bitcoin-cli getblockhash $a); done | grep -v '\"confirmations\":' | sha256sum\r\n28620dea517c27debd958345197dc911f2fe95934742293548e79cd673bfae40  -\r\n\r\nreal\t0m15.763s\r\n$ time for a in `seq 400000 400500`; do ./bitcoin-cli getblockbyheight $a; done | grep -v '\"confirmations\":' | sha256sum\r\n28620dea517c27debd958345197dc911f2fe95934742293548e79cd673bfae40  -\r\n\r\nreal\t0m11.514s\r\n$ time for a in `seq 400000 400500`; do bitcoin-cli getblock $(bitcoin-cli getblockhash $a); done | grep -v '\"confirmations\":' | sha256sum\r\n28620dea517c27debd958345197dc911f2fe95934742293548e79cd673bfae40  -\r\n\r\nreal\t0m15.408s\r\n```",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-514057030",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2501983542,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUwMTk4MzU0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2501983542",
      "actor": {
        "login": "height",
        "id": 1542746,
        "node_id": "MDQ6VXNlcjE1NDI3NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1542746?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/height",
        "html_url": "https://github.com/height",
        "followers_url": "https://api.github.com/users/height/followers",
        "following_url": "https://api.github.com/users/height/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/height/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/height/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/height/subscriptions",
        "organizations_url": "https://api.github.com/users/height/orgs",
        "repos_url": "https://api.github.com/users/height/repos",
        "events_url": "https://api.github.com/users/height/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/height/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T06:57:43Z"
    },
    {
      "event": "subscribed",
      "id": 2501983544,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MDE5ODM1NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2501983544",
      "actor": {
        "login": "height",
        "id": 1542746,
        "node_id": "MDQ6VXNlcjE1NDI3NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1542746?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/height",
        "html_url": "https://github.com/height",
        "followers_url": "https://api.github.com/users/height/followers",
        "following_url": "https://api.github.com/users/height/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/height/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/height/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/height/subscriptions",
        "organizations_url": "https://api.github.com/users/height/orgs",
        "repos_url": "https://api.github.com/users/height/repos",
        "events_url": "https://api.github.com/users/height/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/height/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T06:57:43Z"
    },
    {
      "event": "commented",
      "id": 514125792,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDEyNTc5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514125792",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T09:15:04Z",
      "updated_at": "2019-07-23T09:15:04Z",
      "author_association": "MEMBER",
      "body": "> @emilengler note that this call can't be cached whereas getblock by hash can.\r\n\r\nStrictly speaking, \"getblock(hash)\" can't be cached either, because it includes a \"confirmations\" key which changes every time a new block gets mined",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-514125792",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2502357603,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUwMjM1NzYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2502357603",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T09:15:04Z"
    },
    {
      "event": "subscribed",
      "id": 2502357605,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MDIzNTc2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2502357605",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T09:15:04Z"
    },
    {
      "event": "commented",
      "id": 516476034,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjQ3NjAzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516476034",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T15:42:14Z",
      "updated_at": "2019-07-30T15:42:14Z",
      "author_association": "MEMBER",
      "body": "I'm a mild concept NACK and an approach NACK on this.\r\n\r\n- mild concept NACK: unless there's a very compelling reason, I don't think the RPC interface should offer redundant ways to do the same thing. Increasing the surface area of the RPC interface increases the maintenance burden, so we should try to keep it minimal wherever possible.\r\n- approach NACK: this approach duplicates a lot of code, both in the implementation and in the RPC help text. That could be improved by factoring both the logic and help text out, and calling it from both `getblock` and `getblockatheight`.\r\n\r\nOverall, I prefer #16439. I'm not a fan of magic incantations like `@height` in general, but that PR seems like a pretty clean implementation and there's absolutely no ambiguity between `getblock @height` and `getblock hash`.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-516476034",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 516873288,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg3MzI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516873288",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T14:28:11Z",
      "updated_at": "2019-07-31T14:28:11Z",
      "author_association": "MEMBER",
      "body": "@emilengler re: your question in IRC\r\n\r\n> [01:04:54] \\<emilengler> How the CTRL+L shortcut is being handled in bitcoin-qt? Over a QAction or a QShortcut?\r\n\r\nIt's just a property of the clear button https://github.com/bitcoin/bitcoin/blob/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2/src/qt/forms/debugwindow.ui#L564-L566\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-516873288",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2523416870,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUyMzQxNjg3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2523416870",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T14:28:11Z"
    },
    {
      "event": "subscribed",
      "id": 2523416873,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MjM0MTY4NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2523416873",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T14:28:11Z"
    },
    {
      "event": "commented",
      "id": 516969568,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjk2OTU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516969568",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T18:36:44Z",
      "updated_at": "2019-07-31T18:36:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ryanofsky Thank you, already got this :)\r\nBut I don't think this is the right place to discuss this.\r\nAn IRC direct message had done the same",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-516969568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2524172028,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUyNDE3MjAyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2524172028",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T18:36:44Z"
    },
    {
      "event": "subscribed",
      "id": 2524172029,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MjQxNzIwMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2524172029",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T18:36:44Z"
    },
    {
      "event": "commented",
      "id": 522796363,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjc5NjM2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522796363",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-19T23:47:59Z",
      "updated_at": "2019-08-19T23:47:59Z",
      "author_association": "MEMBER",
      "body": "Concept NACK. getblock(getblockhash(1)) is simple enough.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-522796363",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "commented",
      "id": 523041051,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzA0MTA1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/523041051",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-20T14:29:03Z",
      "updated_at": "2019-08-20T14:29:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr It probably is but in my opinion it isn't really shown that using RPC commands as parameters is possible (at least I didn't saw something like this)",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-523041051",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "mentioned",
      "id": 2569909301,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU2OTkwOTMwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2569909301",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-20T14:29:04Z"
    },
    {
      "event": "subscribed",
      "id": 2569909303,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1Njk5MDkzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2569909303",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-20T14:29:04Z"
    },
    {
      "event": "labeled",
      "id": 2587934236,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODc5MzQyMzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2587934236",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-27T17:44:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 525409246,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTQwOTI0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525409246",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-27T17:44:36Z",
      "updated_at": "2019-08-27T17:44:36Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-525409246",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "labeled",
      "id": 2673004549,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2NzMwMDQ1NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2673004549",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T12:10:43Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "commented",
      "id": 541747028,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTc0NzAyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541747028",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-14T15:27:53Z",
      "updated_at": "2019-10-14T15:27:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closed because of lack of interest and merging conflicts",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-541747028",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16345"
    },
    {
      "event": "closed",
      "id": 2710855907,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjcxMDg1NTkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2710855907",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-14T15:27:53Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 2710856351,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQyNzEwODU2MzUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2710856351",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-14T15:27:59Z"
    },
    {
      "event": "unlabeled",
      "id": 2741491617,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc0MTQ5MTYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2741491617",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T16:49:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "locked",
      "id": 5778618789,
      "node_id": "LOE_lADOABII584bsxHAzwAAAAFYbrml",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778618789",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:11:14Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300786226",
      "pull_request_review_id": 258536402,
      "id": 300786226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4NjIyNg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {",
      "path": "src/rpc/blockchain.cpp",
      "position": 79,
      "original_position": 81,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not needed curly ",
      "created_at": "2019-07-05T20:03:38Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300786226",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300786226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1018,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300786641",
      "pull_request_review_id": 258536402,
      "id": 300786641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4NjY0MQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use the same curly brace formatting. Either all on the same line or all new line.",
      "created_at": "2019-07-05T20:06:02Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300786641",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300786641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300787061",
      "pull_request_review_id": 258536402,
      "id": 300787061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4NzA2MQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssBlock << block;",
      "path": "src/rpc/blockchain.cpp",
      "position": 93,
      "original_position": 96,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No assignment?",
      "created_at": "2019-07-05T20:08:26Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300787061",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300787061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1032,
      "original_line": 1031,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300788723",
      "pull_request_review_id": 258536402,
      "id": 300788723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4ODcyMw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 68,
      "original_position": 69,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Very strange params[1] is a union of a number and bool. I'm skeptical of this because it will cause more bugs down the line. ",
      "created_at": "2019-07-05T20:18:20Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300788723",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300788723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1007,
      "original_line": 1007,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789152",
      "pull_request_review_id": 258536402,
      "id": 300789152,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4OTE1Mg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why no check for param[0].isNull()?",
      "created_at": "2019-07-05T20:21:12Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789152",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789254",
      "pull_request_review_id": 258536402,
      "id": 300789254,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4OTI1NA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();",
      "path": "src/rpc/blockchain.cpp",
      "position": 86,
      "original_position": 84,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Place this assignment below the throw when checking pblockindex",
      "created_at": "2019-07-05T20:21:58Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789254",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1025,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789355",
      "pull_request_review_id": 258536402,
      "id": 300789355,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4OTM1NQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add the hash to the throw so we can debug why this statement would have failed ",
      "created_at": "2019-07-05T20:22:39Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789355",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1026,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789607",
      "pull_request_review_id": 258536402,
      "id": 300789607,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4OTYwNw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssBlock << block;\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        return strHex;",
      "path": "src/rpc/blockchain.cpp",
      "position": 95,
      "original_position": 98,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will std::string be converted to the univalue object? Do we need to cast to a JSON object?",
      "created_at": "2019-07-05T20:24:07Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789607",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1034,
      "original_line": 1033,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789988",
      "pull_request_review_id": 258536402,
      "id": 300789988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc4OTk4OA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is no documentation for when verbosity is less than 0. I don't think it can ever be? Should verbosity be an unsigned int or enum?",
      "created_at": "2019-07-05T20:26:40Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789988",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300789988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300790639",
      "pull_request_review_id": 258536402,
      "id": 300790639,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5MDYzOQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;",
      "path": "src/rpc/blockchain.cpp",
      "position": 63,
      "original_position": 64,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This verbosity level logging should be an enum of constants to help read instead of magic numbers.\r\n\r\ne.g. `int verbosity = LEVEL1_BLOCKHEIGHT`",
      "created_at": "2019-07-05T20:30:44Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300790639",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300790639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1002,
      "original_line": 1002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300790722",
      "pull_request_review_id": 258536402,
      "id": 300790722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5MDcyMg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();",
      "path": "src/rpc/blockchain.cpp",
      "position": 66,
      "original_position": 67,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't tell if this returns negative or >3",
      "created_at": "2019-07-05T20:31:12Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300790722",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300790722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1005,
      "original_line": 1005,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300791155",
      "pull_request_review_id": 258542950,
      "id": 300791155,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5MTE1NQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());",
      "path": "src/rpc/blockchain.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If help is null this toString will cause undefined behavior",
      "created_at": "2019-07-05T20:33:56Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300791155",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300791155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300791292",
      "pull_request_review_id": 258542950,
      "id": 300791292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5MTI5Mg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add what block/parameter that is not found for debugging",
      "created_at": "2019-07-05T20:34:36Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300791292",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300791292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300797511",
      "pull_request_review_id": 258551061,
      "id": 300797511,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5NzUxMQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 68,
      "original_position": 69,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300788723,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The code is mostly a fork from the getblock function which means that I copied this from this function as well but I personally think that this issue is a topic for another pull request.",
      "created_at": "2019-07-05T21:14:59Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300797511",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300797511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1007,
      "original_line": 1007,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300798341",
      "pull_request_review_id": 258552066,
      "id": 300798341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5ODM0MQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 68,
      "original_position": 69,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300788723,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The developer guidelines state that for new code, following the specified coding style is preferable. The only exception is commits which just move code around. See https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md",
      "created_at": "2019-07-05T21:21:03Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300798341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300798341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1007,
      "original_line": 1007,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801699",
      "pull_request_review_id": 258556297,
      "id": 300801699,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMTY5OQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789152,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean by isNull?\r\nIf the param is empty or if the user has selected block zero, which is a valid block",
      "created_at": "2019-07-05T21:47:54Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300801699",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802179",
      "pull_request_review_id": 258556853,
      "id": 300802179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMjE3OQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nope verbosity cannot be less than zero",
      "created_at": "2019-07-05T21:51:46Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802179",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802444",
      "pull_request_review_id": 258557159,
      "id": 300802444,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMjQ0NA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {",
      "path": "src/rpc/blockchain.cpp",
      "position": 79,
      "original_position": 81,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300786226,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, a legacy of getblock",
      "created_at": "2019-07-05T21:53:56Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1018,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802822",
      "pull_request_review_id": 258557634,
      "id": 300802822,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMjgyMg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;",
      "path": "src/rpc/blockchain.cpp",
      "position": 63,
      "original_position": 64,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300790639,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The input is an integer and the various types of verbosity are magic numbers.",
      "created_at": "2019-07-05T21:57:15Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802822",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1002,
      "original_line": 1002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802858",
      "pull_request_review_id": 258557683,
      "id": 300802858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMjg1OA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());",
      "path": "src/rpc/blockchain.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300791155,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How?",
      "created_at": "2019-07-05T21:57:35Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802885",
      "pull_request_review_id": 258557711,
      "id": 300802885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMjg4NQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300791292,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure",
      "created_at": "2019-07-05T21:57:43Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300802885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803375",
      "pull_request_review_id": 258558298,
      "id": 300803375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMzM3NQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we remove this check for less than zero and change verbosity to an unsigned short or preferably an enum of constants 0-3?",
      "created_at": "2019-07-05T22:02:13Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300803375",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300805732",
      "pull_request_review_id": 258561235,
      "id": 300805732,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwNTczMg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;",
      "path": "src/rpc/blockchain.cpp",
      "position": 63,
      "original_position": 64,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300790639,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes but we only have 4 types. 0-3. It could be an enum",
      "created_at": "2019-07-05T22:25:28Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300805732",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300805732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1002,
      "original_line": 1002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300807641",
      "pull_request_review_id": 258563524,
      "id": 300807641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwNzY0MQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789152,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\n`<= -1` should be `== BLOCK_DOESNT_EXIST` and define block doesn't exist to -1. I would also bet this constant is define in a header already. Find it please. We also can't have negative blocks so no need to check for less than -1.\r\n",
      "created_at": "2019-07-05T22:47:54Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300807641",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300807641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300814190",
      "pull_request_review_id": 258570836,
      "id": 300814190,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxNDE5MA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {",
      "path": "src/rpc/blockchain.cpp",
      "position": 79,
      "original_position": 81,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300786226,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hi - I may have made a mistake here.  It seems like the curly brace is needed to acquire tsc_main scope lock here. I'm not very familiar with this feature.\r\n\r\nSee: https://github.com/bitcoin/bitcoin/pull/16285#discussion_r300809662",
      "created_at": "2019-07-06T00:39:58Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300814190",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300814190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1018,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300817268",
      "pull_request_review_id": 258574009,
      "id": 300817268,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxNzI2OA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {",
      "path": "src/rpc/blockchain.cpp",
      "position": 79,
      "original_position": 81,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300786226,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@fqlx You seem very confused. The opening brace isn't needed to acquire the `cs_main` lock; It's to make the lock be released after the `GetBlockChecked` call. We want to minimize the time the lock is held for responsivity reasons.",
      "created_at": "2019-07-06T02:24:17Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300817268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300817268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1018,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820535",
      "pull_request_review_id": 258577626,
      "id": 300820535,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDUzNQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssBlock << block;",
      "path": "src/rpc/blockchain.cpp",
      "position": 93,
      "original_position": 96,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300787061,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`<<` is the correct operator to serialize an object to a stream.",
      "created_at": "2019-07-06T05:12:20Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1032,
      "original_line": 1031,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820557",
      "pull_request_review_id": 258577645,
      "id": 300820557,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDU1Nw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssBlock << block;\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        return strHex;",
      "path": "src/rpc/blockchain.cpp",
      "position": 95,
      "original_position": 98,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789607,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`std::string` is a valid `UniValue` object and is used in many other RPCs.",
      "created_at": "2019-07-06T05:13:21Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1034,
      "original_line": 1033,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820746",
      "pull_request_review_id": 258577852,
      "id": 300820746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDc0Ng==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC it is undefined behavior to cast an `int` to an `enum` that is out of range of the `enum`. Because any `int` can be entered in the RPC, it could be out of range of the `enum` and cause undesirable things. So I think it is actually better to just handle it as an int. Also, `UniValue` does not have a `get_short()` function so there would be no way to fetch a short from the request other than casting which I think is undesirable especially when it's easier to just handle it as an int.",
      "created_at": "2019-07-06T05:23:10Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820772",
      "pull_request_review_id": 258577874,
      "id": 300820772,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDc3Mg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();",
      "path": "src/rpc/blockchain.cpp",
      "position": 66,
      "original_position": 67,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300790722,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`get_int` can return any valid `int`.",
      "created_at": "2019-07-06T05:24:07Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1005,
      "original_line": 1005,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820876",
      "pull_request_review_id": 258577965,
      "id": 300820876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDg3Ng==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789152,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> `<= -1` should be `== BLOCK_DOESNT_EXIST` and define block doesn't exist to -1.\r\n\r\nWhy? This is a user entered value, it could literally be anything, not just `-1`. A user isn't going to search specifically for `-1` just so they can get an error. It could be `-16654` or whatever you want. It is safer to check whether the value is `<= -1` rather than `-1`.\r\n\r\nAlso, why would this need to be defined as a constant? It really isn't useful as one.\r\n\r\n> I would also bet this constant is define in a header already. Find it please. We also can't have negative blocks so no need to check for less than -1.\r\n\r\nIt probably isn't defined anywhere as there is no need to define it anywhere.",
      "created_at": "2019-07-06T05:27:56Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820929",
      "pull_request_review_id": 258578015,
      "id": 300820929,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDkyOQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I appreciate the response @achow101.  I would then suggest we add a validate and transform for the RPC call but that is out of the scope of the PR. Validation from the client is necessary in these cases so we don't get undesirable things and it would keep the code clean.",
      "created_at": "2019-07-06T05:31:20Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820929",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300821167",
      "pull_request_review_id": 258578275,
      "id": 300821167,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMTE2Nw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Validation from the client is not possible. The client is not necessarily `bitcoin-cli`. It could be any JSON-RPC client. Validation of this must happen server side.",
      "created_at": "2019-07-06T05:42:33Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300821167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300821167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300821308",
      "pull_request_review_id": 258578442,
      "id": 300821308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMTMwOA==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789152,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Why?\r\n\r\nIt's easier to read and maintain if we check for the valid paths.  The documentation says verbose 0-3, uses a weak type (int vs enum), then check for unrelated int values mid code - it's confusing. We can't just arbitrarily pick error cases to check for here. Why not check if the user inputted a string, emoji, a number greater than `INT_MAX` too? \r\n\r\n> It probably isn't defined anywhere as there is no need to define it anywhere.\r\n\r\nYou're right it's not define but it would be useful. \r\n",
      "created_at": "2019-07-06T05:50:20Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300821308",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300821308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300822307",
      "pull_request_review_id": 258579556,
      "id": 300822307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMjMwNw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789152,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It's easier to read and maintain if we check for the valid paths. The documentation says verbose 0-3, uses a weak type (int vs enum), then check for unrelated int values mid code - it's confusing.\r\n\r\nYou're getting your conversations mixed up. This isn't about verbosity.\r\n\r\n> We can't just arbitrarily pick error cases to check for here.\r\n\r\nWe aren't.\r\n\r\n> Why not check if the user inputted a string, emoji, a number greater than `INT_MAX` too?\r\n\r\nThat's why RPCs should use [`RPCTypeCheck`](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/util.cpp#L17). That (and `UniValue` itself) will handle type and integer out of bound errors.\r\n",
      "created_at": "2019-07-06T06:39:37Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300822307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300822307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300827307",
      "pull_request_review_id": 258584882,
      "id": 300827307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyNzMwNw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {",
      "path": "src/rpc/blockchain.cpp",
      "position": 79,
      "original_position": 81,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300786226,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa Ok, I've re-added it",
      "created_at": "2019-07-06T10:20:40Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300827307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300827307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1018,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300832926",
      "pull_request_review_id": 258591175,
      "id": 300832926,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgzMjkyNg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Validation from the client is necessary in these cases so we don't get undesirable things and it would keep the code clean.\r\n\r\nNo.",
      "created_at": "2019-07-06T14:29:31Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300832926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300832926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300833027",
      "pull_request_review_id": 258591275,
      "id": 300833027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgzMzAyNw==",
      "diff_hunk": "@@ -307,6 +309,17 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Getting block with height 20\")\n+        b20 = node.getblockbyheight(20)",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 26,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "1404d1947a5f58092e36fca1da940a54b684da98",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Something like the following should be enough:\r\n```py\r\nassert_equal(getblock(getblockhash(20)), getblockbyheight)\r\n```\r\nThen you could also test these errors:\r\n - calling without arguments\r\n - calling with extra arguments\r\n - calling with wrong type (string for instance).",
      "created_at": "2019-07-06T14:33:05Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300833027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300833423",
      "pull_request_review_id": 258591738,
      "id": 300833423,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgzMzQyMw==",
      "diff_hunk": "@@ -307,6 +309,17 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Getting block with height 20\")\n+        b20 = node.getblockbyheight(20)",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 26,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "1404d1947a5f58092e36fca1da940a54b684da98",
      "in_reply_to_id": 300833027,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you, I will edit it",
      "created_at": "2019-07-06T14:47:18Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300833423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300833726",
      "pull_request_review_id": 258592114,
      "id": 300833726,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgzMzcyNg==",
      "diff_hunk": "@@ -307,6 +309,17 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Getting block with height 20\")\n+        b20 = node.getblockbyheight(20)",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 26,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "1404d1947a5f58092e36fca1da940a54b684da98",
      "in_reply_to_id": 300833027,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You should assert the whole response, not just the hash.",
      "created_at": "2019-07-06T14:58:28Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300833726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300837447",
      "pull_request_review_id": 258596437,
      "id": 300837447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgzNzQ0Nw==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;",
      "path": "src/rpc/blockchain.cpp",
      "position": 63,
      "original_position": 64,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300790639,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Other functions use this as well, I think this should be improved in another PR",
      "created_at": "2019-07-06T17:24:09Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300837447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300837447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1002,
      "original_line": 1002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300846315",
      "pull_request_review_id": 258605854,
      "id": 300846315,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NjMxNQ==",
      "diff_hunk": "@@ -307,6 +309,16 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Test that getblockbyheight is getting block 20\")\n+        assert_equal(node.getblock(node.getblockhash(20)), node.getblockbyheight(20))\n+        self.log.info(\"The block is valid\")",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 27,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "3f3fc1121465e37b46fd8ec2d5baab5c046e4d74",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd recommend removing the logging on 317, 319 because it's not needed and will clutter the console logging.  Other than that, things look good.",
      "created_at": "2019-07-07T01:00:52Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300846315",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300846315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300863875",
      "pull_request_review_id": 258623671,
      "id": 300863875,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg2Mzg3NQ==",
      "diff_hunk": "@@ -307,6 +309,16 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Test that getblockbyheight is getting block 20\")\n+        assert_equal(node.getblock(node.getblockhash(20)), node.getblockbyheight(20))\n+        self.log.info(\"The block is valid\")",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 27,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "3f3fc1121465e37b46fd8ec2d5baab5c046e4d74",
      "in_reply_to_id": 300846315,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, removed!",
      "created_at": "2019-07-07T12:13:56Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300863875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300863875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300896491",
      "pull_request_review_id": 258655431,
      "id": 300896491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg5NjQ5MQ==",
      "diff_hunk": "@@ -307,6 +309,15 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        assert_equal(node.getblock(node.getblockhash(20)), node.getblockbyheight(20))\n+        self.log.info(\"The block is valid\")",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 26,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for the `The block is valid` logging, or the extra white space here.",
      "created_at": "2019-07-08T01:16:01Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300896491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300896491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301180681",
      "pull_request_review_id": 259010983,
      "id": 301180681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTE4MDY4MQ==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@fqlx from the server point of view, never trust the client.",
      "created_at": "2019-07-08T16:12:50Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301180681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301180681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301194131",
      "pull_request_review_id": 259027469,
      "id": 301194131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTE5NDEzMQ==",
      "diff_hunk": "@@ -940,6 +940,105 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do you translate the hash into hex and then parse the hex into a hash?",
      "created_at": "2019-07-08T16:44:04Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301194131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301194131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1016,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301194560",
      "pull_request_review_id": 259027469,
      "id": 301194560,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTE5NDU2MA==",
      "diff_hunk": "@@ -940,6 +940,105 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+\n+    pblockindex = LookupBlockIndex(hash);\n+\n+    if (!pblockindex)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block with hash \\\"\" + hash.ToString() + \"\\\" not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why would this happen? I'd say never, so it should not throw \"invalid key\", but an internal error. Also, missing `{}`",
      "created_at": "2019-07-08T16:45:06Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301194560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301194560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301265946",
      "pull_request_review_id": 259114572,
      "id": 301265946,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTI2NTk0Ng==",
      "diff_hunk": "@@ -940,6 +940,105 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+\n+    pblockindex = LookupBlockIndex(hash);\n+\n+    if (!pblockindex)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block with hash \\\"\" + hash.ToString() + \"\\\" not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "in_reply_to_id": 301194560,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right, was suggested by someone else",
      "created_at": "2019-07-08T19:36:49Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301265946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301265946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301266206",
      "pull_request_review_id": 259114894,
      "id": 301266206,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTI2NjIwNg==",
      "diff_hunk": "@@ -940,6 +940,105 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "in_reply_to_id": 301194131,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was doing it the same way as in `getblock()`",
      "created_at": "2019-07-08T19:37:31Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301266206",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301266206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1016,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301322612",
      "pull_request_review_id": 259183879,
      "id": 301322612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTMyMjYxMg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 68,
      "original_position": 69,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300788723,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Which is to say, you can make this argument just a number. No need to make this RPC strictly consistent with `getblock`. This behavior is only maintained in exceptional cases which do not apply here:\r\n\r\n```\r\n  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\r\n    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\r\n    true to 1 in this case.\r\n```",
      "created_at": "2019-07-08T22:14:31Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301322612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301322612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1007,
      "original_line": 1007,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301323333",
      "pull_request_review_id": 259184689,
      "id": 301323333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTMyMzMzMw==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(pblockindex->GetBlockHash());\n+    const CBlockIndex* tip;\n+\n+    if (!pblockindex)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: braceless `ifs` should be inline\r\n\r\n```\r\n  - If an `if` only has a single-statement `then`-clause, it can appear\r\n    on the same line as the `if`, without braces. In every other case,\r\n    braces are required, and the `then` and `else` clauses must appear\r\n    correctly indented on a new line.\r\n```",
      "created_at": "2019-07-08T22:16:52Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301323333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301323333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1019,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301323670",
      "pull_request_review_id": 259185067,
      "id": 301323670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTMyMzY3MA==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: having a `blockheight` local will make this more legible imo",
      "created_at": "2019-07-08T22:18:06Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301323670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301323670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301324382",
      "pull_request_review_id": 259185883,
      "id": 301324382,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTMyNDM4Mg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would test the argument for valid range and throw an rpc error if out of range. Better to accept just the valid values IMO.",
      "created_at": "2019-07-08T22:20:40Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301324382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301324382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301693757",
      "pull_request_review_id": 259635977,
      "id": 301693757,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTY5Mzc1Nw==",
      "diff_hunk": "@@ -307,6 +309,15 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+\n+        assert_equal(node.getblock(node.getblockhash(20)), node.getblockbyheight(20))\n+        self.log.info(\"The block is valid\")",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 26,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "33b2da3aec4d33c10b10f81e02db1a0585076b05",
      "in_reply_to_id": 300896491,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2019-07-09T16:59:03Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301693757",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301693757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301695052",
      "pull_request_review_id": 259637525,
      "id": 301695052,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTY5NTA1Mg==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "in_reply_to_id": 301323670,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is only used 2 times, I think it is not necessary.",
      "created_at": "2019-07-09T17:01:59Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301695052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301695052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301718362",
      "pull_request_review_id": 259666535,
      "id": 301718362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTcxODM2Mg==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(pblockindex->GetBlockHash());\n+    const CBlockIndex* tip;\n+\n+    if (!pblockindex)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid key\");\n+\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "adb93ca9ddd09550b41af924010415d7ae015ec2",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can remove this line. pblockindex is already the correct value",
      "created_at": "2019-07-09T17:57:26Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301718362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301718362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301756779",
      "pull_request_review_id": 259713546,
      "id": 301756779,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTc1Njc3OQ==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(pblockindex->GetBlockHash());\n+    const CBlockIndex* tip;\n+\n+    if (!pblockindex)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid key\");\n+\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "adb93ca9ddd09550b41af924010415d7ae015ec2",
      "in_reply_to_id": 301718362,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure thing",
      "created_at": "2019-07-09T19:30:28Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301756779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301756779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301891181",
      "pull_request_review_id": 259875962,
      "id": 301891181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTg5MTE4MQ==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "in_reply_to_id": 301323670,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4 times (see below)",
      "created_at": "2019-07-10T05:28:13Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301891181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301891181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302194093",
      "pull_request_review_id": 260257626,
      "id": 302194093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjE5NDA5Mw==",
      "diff_hunk": "@@ -1013,21 +1013,18 @@ static UniValue getblockbyheight(const JSONRPCRequest& request)\n \n     CBlock block;\n     CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n-    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is the wrong commit for logic changes(stick to tests only!), please split up this commit. Ask if you need help.",
      "created_at": "2019-07-10T17:50:17Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302194093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302194093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1016,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302195289",
      "pull_request_review_id": 260257626,
      "id": 302195289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjE5NTI4OQ==",
      "diff_hunk": "@@ -940,6 +940,105 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "f0a41d5853a0c98e210bd74d990c240c1c0dec67",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "feel-free-to-ignore-nit: error could be `RPC_INVALID_PARAMETER`",
      "created_at": "2019-07-10T17:53:01Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302195289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302195289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302196460",
      "pull_request_review_id": 260257626,
      "id": 302196460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjE5NjQ2MA==",
      "diff_hunk": "@@ -307,6 +309,13 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+        assert_equal(node.getblock(node.getblockhash(20)), node.getblockbyheight(20))\n+",
      "path": "test/functional/rpc_blockchain.py",
      "position": 25,
      "original_position": 25,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good follow-up testing would be to make sure `-1`, `0`, `getblockcount()`, and `getblockcount()+1` args respond properly.",
      "created_at": "2019-07-10T17:55:37Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302196460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302196460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 317,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302198402",
      "pull_request_review_id": 260257626,
      "id": 302198402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjE5ODQwMg==",
      "diff_hunk": "@@ -940,6 +940,106 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    CBlock block;\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+    {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n+    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        tip = ::ChainActive().Tip();\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        block = GetBlockChecked(pblockindex);\n+    }\n+\n+    if (verbosity <= 0)",
      "path": "src/rpc/blockchain.cpp",
      "position": 90,
      "original_position": 93,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "54cd63a5ff82e6ae0440919eba646bddadc47e4e",
      "in_reply_to_id": 300789988,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agreed on filtering for valid range",
      "created_at": "2019-07-10T17:59:34Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302198402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302198402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1029,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302198828",
      "pull_request_review_id": 260257626,
      "id": 302198828,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjE5ODgyOA==",
      "diff_hunk": "@@ -2388,6 +2487,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       {} },\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          {} },\n     { \"blockchain\",         \"getblock\",               &getblock,               {\"blockhash\",\"verbosity|verbose\"} },\n+    { \"blockchain\",         \"getblockbyheight\",       &getblockbyheight,       {\"blockheight\",\"verbosity|verbose\"} },",
      "path": "src/rpc/blockchain.cpp",
      "position": 108,
      "original_position": 110,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "f0a41d5853a0c98e210bd74d990c240c1c0dec67",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need to support both named args like getblock? I don't really know the story on this.",
      "created_at": "2019-07-10T18:00:32Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302198828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302198828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2488,
      "original_line": 2487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302199781",
      "pull_request_review_id": 260264569,
      "id": 302199781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjE5OTc4MQ==",
      "diff_hunk": "@@ -307,6 +309,13 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblockbyheight(self):\n+        self.log.info(\"Test getblockbyheight\")\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n+        assert_equal(node.getblock(node.getblockhash(20)), node.getblockbyheight(20))\n+",
      "path": "test/functional/rpc_blockchain.py",
      "position": 25,
      "original_position": 25,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "in_reply_to_id": 302196460,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, exercising the 2nd arg once in the test would be :+1: ",
      "created_at": "2019-07-10T18:02:45Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302199781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302199781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 317,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302201835",
      "pull_request_review_id": 260267077,
      "id": 302201835,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjIwMTgzNQ==",
      "diff_hunk": "@@ -1013,21 +1013,18 @@ static UniValue getblockbyheight(const JSONRPCRequest& request)\n \n     CBlock block;\n     CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n-    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "in_reply_to_id": 302194093,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've written you a message on freenode if you are `instagibbs` there. Can we discuss this here?\r\nI would post the chat log here afterwards with your permission",
      "created_at": "2019-07-10T18:07:30Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302201835",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302201835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1016,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302201939",
      "pull_request_review_id": 260267219,
      "id": 302201939,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjIwMTkzOQ==",
      "diff_hunk": "@@ -940,6 +940,105 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "f0a41d5853a0c98e210bd74d990c240c1c0dec67",
      "in_reply_to_id": 302195289,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok",
      "created_at": "2019-07-10T18:07:46Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302201939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302201939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302202611",
      "pull_request_review_id": 260268055,
      "id": 302202611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjIwMjYxMQ==",
      "diff_hunk": "@@ -2388,6 +2487,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       {} },\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          {} },\n     { \"blockchain\",         \"getblock\",               &getblock,               {\"blockhash\",\"verbosity|verbose\"} },\n+    { \"blockchain\",         \"getblockbyheight\",       &getblockbyheight,       {\"blockheight\",\"verbosity|verbose\"} },",
      "path": "src/rpc/blockchain.cpp",
      "position": 108,
      "original_position": 110,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "f0a41d5853a0c98e210bd74d990c240c1c0dec67",
      "in_reply_to_id": 302198828,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same, the reason why the RPC call is very similar to getblock is becuase I have forked it. That's why I also removed some of the legacy getblock stuff",
      "created_at": "2019-07-10T18:09:18Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302202611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302202611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2488,
      "original_line": 2487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302207953",
      "pull_request_review_id": 260274724,
      "id": 302207953,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjIwNzk1Mw==",
      "diff_hunk": "@@ -1013,21 +1013,18 @@ static UniValue getblockbyheight(const JSONRPCRequest& request)\n \n     CBlock block;\n     CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n-    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "in_reply_to_id": 302194093,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we fixed this on the interwebs :+1: ",
      "created_at": "2019-07-10T18:22:18Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302207953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302207953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1016,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302209396",
      "pull_request_review_id": 260276533,
      "id": 302209396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjIwOTM5Ng==",
      "diff_hunk": "@@ -1013,21 +1013,18 @@ static UniValue getblockbyheight(const JSONRPCRequest& request)\n \n     CBlock block;\n     CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];\n-    uint256 hash(ParseHashV(pblockindex->GetBlockHash().GetHex(), \"blockhash\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "6c1f05bd33c13c1c829f7e6a3b31586a41887d5a",
      "in_reply_to_id": 302194093,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For future readers: https://pastebin.com/33uYhx7i",
      "created_at": "2019-07-10T18:25:53Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302209396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302209396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1016,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302401670",
      "pull_request_review_id": 260516295,
      "id": 302401670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjQwMTY3MA==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👀 this should have `cs_main` locked?",
      "created_at": "2019-07-11T07:37:46Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302401670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302401670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302401871",
      "pull_request_review_id": 260516295,
      "id": 302401871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjQwMTg3MQ==",
      "diff_hunk": "@@ -940,6 +940,103 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "41c165266f86416fe96ad5f495b73ba9147843f2",
      "in_reply_to_id": 301323670,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, add `{}`",
      "created_at": "2019-07-11T07:38:23Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302401871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302401871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302648697",
      "pull_request_review_id": 260834140,
      "id": 302648697,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjY0ODY5Nw==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why?\r\n",
      "created_at": "2019-07-11T17:01:06Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302648697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302648697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302672478",
      "pull_request_review_id": 260864002,
      "id": 302672478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjY3MjQ3OA==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because the chain \"can\" change concurrently. Similarly, note that below `cs_main` is locked in order to access the chain tip.",
      "created_at": "2019-07-11T17:59:04Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302672478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302672478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302673916",
      "pull_request_review_id": 260865804,
      "id": 302673916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjY3MzkxNg==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also note that `getblockhash` RPC also locks `cs_main`.",
      "created_at": "2019-07-11T18:02:34Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302673916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302673916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302718574",
      "pull_request_review_id": 260923612,
      "id": 302718574,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjcxODU3NA==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I will change this tomorrow",
      "created_at": "2019-07-11T20:01:29Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302718574",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/302718574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303141331",
      "pull_request_review_id": 261465951,
      "id": 303141331,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzE0MTMzMQ==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where I need to LOCK?",
      "created_at": "2019-07-12T20:40:07Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303141331",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303141331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303143169",
      "pull_request_review_id": 261468231,
      "id": 303143169,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzE0MzE2OQ==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You could move this line down to where you already lock\r\n```suggestion\r\n    CBlockIndex* pblockindex;\r\n```",
      "created_at": "2019-07-12T20:45:56Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303143169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303143169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303145312",
      "pull_request_review_id": 261470980,
      "id": 303145312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzE0NTMxMg==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you, I thought I would need a new lock",
      "created_at": "2019-07-12T20:53:01Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303145312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303145312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303160775",
      "pull_request_review_id": 261490257,
      "id": 303160775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzE2MDc3NQ==",
      "diff_hunk": "@@ -940,6 +940,102 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = ::ChainActive()[request.params[0].get_int()];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "ac13a74c6e35acfca3906e0856a8f7f5e23a3230",
      "in_reply_to_id": 302401670,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-07-12T21:53:55Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303160775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303160775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/305837407",
      "pull_request_review_id": 264805160,
      "id": 305837407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTgzNzQwNw==",
      "diff_hunk": "@@ -940,6 +940,104 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+    }\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex;\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        // Get index and hash\n+        pblockindex = ::ChainActive()[request.params[0].get_int()];\n+        uint256 hash(pblockindex->GetBlockHash());",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "8d2c01f3413ad55c5b5056fb9aa6e801196a3a1b",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`hash` isn't used",
      "created_at": "2019-07-22T13:13:41Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r305837407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/305837407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/305982197",
      "pull_request_review_id": 264991512,
      "id": 305982197,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTk4MjE5Nw==",
      "diff_hunk": "@@ -940,6 +940,104 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n+static UniValue getblockbyheight(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"getblockbyheight\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <height> and information about each transaction. \\n\",\n+                {\n+                    {\"blockheight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'height'.\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockbyheight\", \"0\")\n+            + HelpExampleRpc(\"getblockbyheight\", \"42\")\n+                },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()))\n+        throw std::runtime_error(help.ToString());\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        if(request.params[1].isNum())\n+            verbosity = request.params[1].get_int();\n+        else\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+    }\n+\n+    // Check if block exists or is negative\n+    if(::ChainActive().Height() < request.params[0].get_int() || request.params[0].get_int() <= -1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block \" + std::to_string(request.params[0].get_int()) + \" not found\");\n+    }\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex;\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        // Get index and hash\n+        pblockindex = ::ChainActive()[request.params[0].get_int()];\n+        uint256 hash(pblockindex->GetBlockHash());",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "373401fa81e43886d43696d1a59cdd933a882b0d",
      "original_commit_id": "8d2c01f3413ad55c5b5056fb9aa6e801196a3a1b",
      "in_reply_to_id": 305837407,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right",
      "created_at": "2019-07-22T18:56:37Z",
      "updated_at": "2019-07-22T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16345#discussion_r305982197",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/305982197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16345"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1022,
      "side": "RIGHT"
    }
  ]
}