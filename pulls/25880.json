{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
    "id": 1031514995,
    "node_id": "PR_kwDOABII5849e6tz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25880",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25880.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25880.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
    "number": 25880,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "p2p: Make stalling timeout adaptive during IBD",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "During IBD, there is the following stalling mechanism if we can't proceed with assigning blocks from a 1024 lookahead window because all of these blocks are either already downloaded or in-flight: We'll mark the peer from which we expect the current block that would allow us to advance our tip (and thereby move the 1024 window ahead) as a possible staller. We then give this peer 2 more seconds to deliver a block (`BLOCK_STALLING_TIMEOUT`) and if it doesn't, disconnect it and assign the critical block we need to another peer. \r\n\r\nNow the problem is that this second peer is immediately marked as a potential staller using the same mechanism and given 2 seconds as well - if our own connection is so slow that it simply takes us more than 2 seconds to download this block, that peer will also be disconnected (and so on...), leading to repeated disconnections and no progress in IBD. This has been described in #9213, and I have observed this when doing IBD  on slower connections or with Tor - sometimes there would be several minutes without progress, where all we did was disconnect peers and find new ones.\r\n\r\nThe `2s` stalling timeout was introduced in #4468, when blocks weren't full and before Segwit increased the maximum possible physical size of blocks - so I think it made a lot of sense back then.\r\nBut it would be good to revisit this timeout now. \r\n\r\nThis PR makes the timout adaptive (idea by sipa):\r\nIf we disconnect a peer for stalling, we now double the timeout for the next peer (up to a maximum of 64s). If we connect a block, we half it again up to the old value of 2 seconds. That way, peers that are comparatively slower will still get disconnected, but long phases of disconnecting all peers shouldn't happen anymore.\r\n\r\nFixes #9213",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2022-08-19T19:44:59Z",
    "updated_at": "2023-01-27T20:56:15Z",
    "closed_at": "2023-01-27T06:54:24Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-01-27T06:54:23Z",
    "merge_commit_sha": "835212cd1d8f8fc7f19775f5ff8cc21c099122b2",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "mzumsande:202208_stalling_timeout",
      "ref": "202208_stalling_timeout",
      "sha": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 187673073,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODc2NzMwNzM=",
        "name": "bitcoin",
        "full_name": "mzumsande/bitcoin",
        "owner": {
          "login": "mzumsande",
          "id": 48763452,
          "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
          "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mzumsande",
          "html_url": "https://github.com/mzumsande",
          "followers_url": "https://api.github.com/users/mzumsande/followers",
          "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
          "organizations_url": "https://api.github.com/users/mzumsande/orgs",
          "repos_url": "https://api.github.com/users/mzumsande/repos",
          "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mzumsande/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/mzumsande/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mzumsande/bitcoin",
        "archive_url": "https://api.github.com/repos/mzumsande/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mzumsande/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mzumsande/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mzumsande/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mzumsande/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mzumsande/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mzumsande/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mzumsande/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mzumsande/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mzumsande/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mzumsande/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mzumsande/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mzumsande/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mzumsande/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mzumsande/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mzumsande/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mzumsande/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mzumsande/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mzumsande/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mzumsande/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mzumsande/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mzumsande/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mzumsande/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mzumsande/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mzumsande/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mzumsande/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mzumsande/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mzumsande/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mzumsande/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mzumsande/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mzumsande/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mzumsande/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mzumsande/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mzumsande/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mzumsande/bitcoin/hooks",
        "svn_url": "https://github.com/mzumsande/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 216760,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T17:01:53Z",
        "created_at": "2019-05-20T16:03:10Z",
        "updated_at": "2023-05-05T12:10:24Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "551c8e9526d2502f857e1ef6348c7f1380f37443",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 193,
    "deletions": 4,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 69,
    "comments": 20
  },
  "events": [
    {
      "event": "commented",
      "id": 1221043636,
      "node_id": "IC_kwDOABII585Ix6W0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221043636",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T19:51:37Z",
      "updated_at": "2022-08-19T19:51:37Z",
      "author_association": "MEMBER",
      "body": "Nice observation.\r\n\r\n(Brainstorm idea) How about something like doubling the timeout every time it causes a disconnection. And then reducing/resetting it when the window actually moves?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1221043636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "labeled",
      "id": 7224725292,
      "node_id": "LE_lADOABII585QKJJizwAAAAGuoI8s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7224725292",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T19:54:27Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 1221405113,
      "node_id": "IC_kwDOABII585IzSm5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221405113",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T20:40:59Z",
      "updated_at": "2022-08-20T20:40:59Z",
      "author_association": "MEMBER",
      "body": ">Collect statistics from recent block download times during IBD and have a dynamic timeout based on this. (Introduces more complexity, but might be better in certain situations, e.g. when 6s aren't sufficient either).\r\n\r\nRather than this, it might be better to track download speeds from each peer, and check the speeds of this peer after 2 seconds.\r\n\r\nFor an immediate fix, though, maybe just making the timeout configurable would be a good idea?\r\n\r\nPerhaps as an interim between these two ideas, if we disconnect N stalling peers, start increasing the timeout.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1221405113",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "commented",
      "id": 1222432129,
      "node_id": "IC_kwDOABII585I3NWB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222432129",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T14:21:31Z",
      "updated_at": "2022-08-22T14:21:31Z",
      "author_association": "MEMBER",
      "body": "> Rather than this, it might be better to track download speeds from each peer, and check the speeds of this peer after 2 seconds.\r\n\r\nWe would also have to compare it to the speed of others and have some criterion what deviation would be enough to disconnect.\r\n\r\n>How about something like doubling the timeout every time it causes a disconnection. And then reducing/resetting it when the window actually moves?\r\n\r\n> Perhaps as an interim between these two ideas, if we disconnect N stalling peers, start increasing the timeout.\r\n\r\nThanks! These suggestions are similar, make a lot of sense to me, and don't look very invasive to implement, planning to change to this approach and update soon.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1222432129",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "convert_to_draft",
      "id": 7233354246,
      "node_id": "CTDE_lADOABII585QKJJizwAAAAGvJDoG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7233354246",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T14:21:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7251762407,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAGwPRzn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7251762407",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T14:55:03Z"
    },
    {
      "event": "commented",
      "id": 1225853199,
      "node_id": "IC_kwDOABII585JEQkP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1225853199",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T15:06:29Z",
      "updated_at": "2022-08-24T15:08:42Z",
      "author_association": "MEMBER",
      "body": "I now implemented the suggestion by @sipa to double the timeout and updated the OP.\r\n\r\nI tested this manually by catching up to the best chain with an ~1 month old datadir with `-onlynet=tor` (slow, blocks take ~10s to download), while reducing `BLOCK_DOWNLOAD_WINDOW` and `MAX_BLOCKS_IN_TRANSIT_PER_PEER` to make stalling situations happen more quickly. ",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1225853199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "mentioned",
      "id": 7251881907,
      "node_id": "MEE_lADOABII585QKJJizwAAAAGwPu-z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7251881907",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T15:08:42Z"
    },
    {
      "event": "subscribed",
      "id": 7251881923,
      "node_id": "SE_lADOABII585QKJJizwAAAAGwPu_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7251881923",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T15:08:42Z"
    },
    {
      "event": "renamed",
      "id": 7251888625,
      "node_id": "RTE_lADOABII585QKJJizwAAAAGwPwnx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7251888625",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T15:09:28Z",
      "rename": {
        "from": "p2p: Increase `BLOCK_STALLING_TIMEOUT` timeout during IBD",
        "to": "p2p: Make `BLOCK_STALLING_TIMEOUT` timeout adaptive during IBD"
      }
    },
    {
      "event": "ready_for_review",
      "id": 7251890088,
      "node_id": "RFRE_lADOABII585QKJJizwAAAAGwPw-o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7251890088",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T15:09:38Z"
    },
    {
      "event": "renamed",
      "id": 7251967012,
      "node_id": "RTE_lADOABII585QKJJizwAAAAGwQDwk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7251967012",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T15:18:38Z",
      "rename": {
        "from": "p2p: Make `BLOCK_STALLING_TIMEOUT` timeout adaptive during IBD",
        "to": "p2p: Make stalling timeout adaptive during IBD"
      }
    },
    {
      "event": "commented",
      "id": 1228565836,
      "node_id": "IC_kwDOABII585JOm1M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1228565836",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-26T14:31:36Z",
      "updated_at": "2022-08-26T14:31:36Z",
      "author_association": "MEMBER",
      "body": "Nice! This seems a fine improvement.\r\n\r\nI think one way of looking at stalling is that it happens when one peer's bandwidth is less than 1/64th of the total bandwidth (64 = 1024/16 = window/max in transit) [0]. \r\n\r\nI think that means there might be a clever way of preventing slow nodes from stalling the download by reducing the in transit limit instead -- so that instead of supplying 16 blocks in the time it takes the other peers to supply 1008 to avoid stalling, the peer only needs to supply 8 or 4 blocks in the time it takes the other peers to supply 1016 or 1020. [1]\r\n\r\nI think adding the blocks only nodes probably made this slightly worse, since there are now 2 extra peers, so now you need something like 25% more bandwidth in order to still have 1/64th of the total...\r\n\r\n[0] Measured in blocks of course, so even if your bandwidth in bytes is fine, you might be unlucky to be asked for 16 blocks that are 2MB each, while everyone else is just being asked for 1008 50kB blocks at you (32MB total vs 7.2MB per peer).\r\n\r\n[1] Perhaps you could implement this by keeping a global and per-peer exponential rolling average of how many blocks you download per second; then you could set the peer's in-transit limit to `1024 * peer_avg / global_avg`; capping it at 16, and marking the peer as stalling and disconnecting if that value drops below 2 (in which case the remaining peers *each* have 50x this peer's bandwidth)?",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1228565836",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "reviewed",
      "id": 1087492146,
      "node_id": "PRR_kwDOABII585A0dAy",
      "url": null,
      "actor": null,
      "commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1087492146",
      "submitted_at": "2022-08-26T20:28:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "commented",
      "id": 1232235365,
      "node_id": "IC_kwDOABII585Jcmtl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232235365",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-30T22:30:01Z",
      "updated_at": "2022-08-30T22:30:01Z",
      "author_association": "MEMBER",
      "body": "> I think that means there might be a clever way of preventing slow nodes from stalling the download by reducing the in transit limit instead -- so that instead of supplying 16 blocks in the time it takes the other peers to supply 1008 to avoid stalling, the peer only needs to supply 8 or 4 blocks in the time it takes the other peers to supply 1016 or 1020. [1]\r\n\r\nThat sounds like a very interesting alternative approach. I'm not sure I understand it completely though: Are you suggesting to assign slower peers less blocks simultaneously, to help prevent stalling situations from occurring in the first place? And also move away from the concept that a stalling situation occurs only when we can't move the 1024 block window forward, but make it dependent on the other peers instead, so that we'd possibly disconnect slow peers much earlier than that if they are slower in comparison to faster ones?\r\n",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1232235365",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7291372279,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAGymYL3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7291372279",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-30T22:31:08Z"
    },
    {
      "event": "reviewed",
      "id": 1091129602,
      "node_id": "PRR_kwDOABII585BCVEC",
      "url": null,
      "actor": null,
      "commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/25880/commits/7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1091129602",
      "submitted_at": "2022-08-31T01:08:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1091419557,
      "node_id": "PRR_kwDOABII585BDb2l",
      "url": null,
      "actor": null,
      "commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nSome adaptivity seems to be warranted, because network throughput is rarely a constant.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1091419557",
      "submitted_at": "2022-08-31T08:18:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "commented",
      "id": 1232740885,
      "node_id": "IC_kwDOABII585JeiIV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232740885",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-31T10:10:14Z",
      "updated_at": "2022-08-31T10:10:14Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. I will give a code review ACK once you resolve vasil's comments :)",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1232740885",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "commented",
      "id": 1233119551,
      "node_id": "IC_kwDOABII585Jf-k_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233119551",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-31T15:51:33Z",
      "updated_at": "2022-08-31T15:51:33Z",
      "author_association": "MEMBER",
      "body": "> That sounds like a very interesting alternative approach.\r\n\r\nYeah, it shouldn't hold up this fix though, I think.\r\n\r\n> I'm not sure I understand it completely though: Are you suggesting to assign slower peers less blocks simultaneously, to help prevent stalling situations from occurring in the first place?\r\n\r\nYes.\r\n\r\n> And also move away from the concept that a stalling situation occurs only when we can't move the 1024 block window forward, but make it dependent on the other peers instead, so that we'd possibly disconnect slow peers much earlier than that if they are slower in comparison to faster ones?\r\n\r\nNot really. I think you need to keep the 1024 block window (since increasing that hurts pruning), and I think that if the window gets full you should still call that \"stalling\".\r\n\r\nBut I think if you change the `MAX_BLOCKS_IN_TRANSIT_PER_PEER` so that slower peers have fewer in-transit blocks, then you'll be stalling much less often, and may not need to disconnect them at all -- that lets you stay connected to tor peers during IBD (for partition/sybil resistance) even if your ipv4/ipv6 peers are *much* faster. Maybe you could disconnect them when their `max_blocks_in_transit` drops to 1 or 2, before they actually cause stalling?\r\n\r\nMaybe a more specific example would be worthwhile. As it stands, if your first peer will give you one block every 5 seconds, and your other 9 peers will collectively give you 14 blocks every second (on average, 7.8 times faster than the first peer, in total 70 times faster), then by the time that first peer has downloaded blocks 1..15 (which takes 75 seconds), the other peers will have given you blocks 17..1039 after 73.1 seconds, and stalling gets triggered. But if the slow peer had only queued up 8 blocks, then it would have supplied them in 40 seconds, which only gives the other peers enough time to supply 560 blocks, so they won't fill up the window. Hmm, I guess it ought to be possible to simulate that scenario via the functional test's `P2PInterface` stuff...",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1233119551",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "commented",
      "id": 1241745370,
      "node_id": "IC_kwDOABII585KA4fa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241745370",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-09T09:39:25Z",
      "updated_at": "2022-09-09T09:39:25Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI think it would be nice if this PR also added some tests, because it looks like we didn't have any tests for the stalling mechanism in the first place.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1241745370",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "commented",
      "id": 1244092572,
      "node_id": "IC_kwDOABII585KJ1ic",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1244092572",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-12T17:50:14Z",
      "updated_at": "2022-09-12T17:50:14Z",
      "author_association": "MEMBER",
      "body": "Will address feedback soon (and work on adding a test for the stalling logic).",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1244092572",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7388118614,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAG4Xb5W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7388118614",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-14T17:37:48Z"
    },
    {
      "event": "commented",
      "id": 1247119108,
      "node_id": "IC_kwDOABII585KVYcE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247119108",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-14T17:58:34Z",
      "updated_at": "2022-09-14T18:56:20Z",
      "author_association": "MEMBER",
      "body": "[a764c20 ](https://github.com/bitcoin/bitcoin/commit/a764c20f35e5c42edea6f5b75a74a77f7590ef57)to [48e5385](https://github.com/bitcoin/bitcoin/commit/48e538510b3c4339dde4c70a9ed1f83f031245c4):\r\n* Addressed review comments: In particular, don't halve the adaptive timeout each time a block is connected, but let it go back to the default value more slowly\r\n* Added a functional test for the stalling logic.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1247119108",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7388719533,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAG4Zumt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7388719533",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-14T18:55:19Z"
    },
    {
      "event": "commented",
      "id": 1247419418,
      "node_id": "IC_kwDOABII585KWhwa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247419418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-15T00:07:20Z",
      "updated_at": "2023-01-11T22:52:01Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1159651918), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1168121389), [achow101](https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379569979) |\n| Concept ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1241745370), [sipa](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1109637149), [RandyMcMillan](https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379584074) |\n| Stale ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1091129602), [luke-jr](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1114636676) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1247419418",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "reviewed",
      "id": 1109215242,
      "node_id": "PRR_kwDOABII585CHUgK",
      "url": null,
      "actor": null,
      "commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The net processing changes look good to me, left some comments on the test.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1109215242",
      "submitted_at": "2022-09-15T13:52:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1109637149,
      "node_id": "PRR_kwDOABII585CI7gd",
      "url": null,
      "actor": null,
      "commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1109637149",
      "submitted_at": "2022-09-15T18:04:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1111611110,
      "node_id": "PRR_kwDOABII585CQdbm",
      "url": null,
      "actor": null,
      "commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Reviewed for the pr club.",
      "user": {
        "login": "amovfx",
        "id": 45839100,
        "node_id": "MDQ6VXNlcjQ1ODM5MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/45839100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amovfx",
        "html_url": "https://github.com/amovfx",
        "followers_url": "https://api.github.com/users/amovfx/followers",
        "following_url": "https://api.github.com/users/amovfx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amovfx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amovfx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amovfx/subscriptions",
        "organizations_url": "https://api.github.com/users/amovfx/orgs",
        "repos_url": "https://api.github.com/users/amovfx/repos",
        "events_url": "https://api.github.com/users/amovfx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amovfx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1111611110",
      "submitted_at": "2022-09-18T23:44:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1113225192,
      "node_id": "PRR_kwDOABII585CWnfo",
      "url": null,
      "actor": null,
      "commit_id": "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1113225192",
      "submitted_at": "2022-09-20T06:44:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1114374631,
      "node_id": "PRR_kwDOABII585CbAHn",
      "url": null,
      "actor": null,
      "commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1114374631",
      "submitted_at": "2022-09-20T19:36:35Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7425739217,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAG6m8nR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7425739217",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-20T21:18:51Z"
    },
    {
      "event": "commented",
      "id": 1252924878,
      "node_id": "IC_kwDOABII585Krh3O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252924878",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-20T21:19:38Z",
      "updated_at": "2022-09-20T21:19:38Z",
      "author_association": "MEMBER",
      "body": "[48e5385 ](https://github.com/bitcoin/bitcoin/commit/48e538510b3c4339dde4c70a9ed1f83f031245c4)to [4b0dbc0](https://github.com/bitcoin/bitcoin/commit/4b0dbc0f3eb8c57944f9037e017b89c912048206): \r\nAddressed review feedback",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1252924878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "reviewed",
      "id": 1114636676,
      "node_id": "PRR_kwDOABII585CcAGE",
      "url": null,
      "actor": null,
      "commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1114636676",
      "submitted_at": "2022-09-21T01:17:31Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1115917613,
      "node_id": "PRR_kwDOABII585Cg40t",
      "url": null,
      "actor": null,
      "commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Reviewed changes for pr review club.",
      "user": {
        "login": "amovfx",
        "id": 45839100,
        "node_id": "MDQ6VXNlcjQ1ODM5MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/45839100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amovfx",
        "html_url": "https://github.com/amovfx",
        "followers_url": "https://api.github.com/users/amovfx/followers",
        "following_url": "https://api.github.com/users/amovfx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amovfx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amovfx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amovfx/subscriptions",
        "organizations_url": "https://api.github.com/users/amovfx/orgs",
        "repos_url": "https://api.github.com/users/amovfx/repos",
        "events_url": "https://api.github.com/users/amovfx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amovfx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1115917613",
      "submitted_at": "2022-09-21T18:32:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1118101728,
      "node_id": "PRR_kwDOABII585CpODg",
      "url": null,
      "actor": null,
      "commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1118101728",
      "submitted_at": "2022-09-23T08:37:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "commented",
      "id": 1255950306,
      "node_id": "IC_kwDOABII585K3Efi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255950306",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T08:48:13Z",
      "updated_at": "2022-09-23T08:48:13Z",
      "author_association": "MEMBER",
      "body": "utACK 4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1255950306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "review_requested",
      "id": 7574896929,
      "node_id": "RRE_lADOABII585QKJJizwAAAAHDf8Eh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574896929",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:58:21Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 7574898729,
      "node_id": "RRE_lADOABII585QKJJizwAAAAHDf8gp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574898729",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:58:39Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1147870452,
      "node_id": "PRR_kwDOABII585Eaxz0",
      "url": null,
      "actor": null,
      "commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 027abcfd846ad4939e823b492de8703504472bd7\r\n\r\nThis is the last but one commit, without the test (the last commit).\r\n\r\nThe test takes 1m45s on my laptop and deterministically fails with the following output:\r\n\r\n<details>\r\n<summary>test failure</summary>\r\n\r\n```\r\n2022-10-19T16:32:15.542000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_6vaknmm8\r\n2022-10-19T16:32:16.089000Z TestFramework (INFO): Prepare blocks without sending to the node\r\n2022-10-19T16:32:16.173000Z TestFramework (INFO): Check that stalling does not start the stalling logic yet if there is a 1024 block window.\r\n\r\n=== Note: 1m40s have passed ===\r\n\r\n2022-10-19T16:33:58.948000Z TestFramework (INFO): Check that increasing the window beyond 1024 blocks triggers stalling logic\r\n2022-10-19T16:34:00.977000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \".../test/functional/test_framework/test_framework.py\", line 133, in main\r\n    self.run_test()\r\n  File \"./test/functional/p2p_ibd_stalling.py\", line 91, in run_test\r\n    p.send_message(headers_message)\r\n  File \"/usr/local/lib/python3.8/contextlib.py\", line 120, in __exit__\r\n    next(self.gen)\r\n  File \".../test/functional/test_framework/test_node.py\", line 423, in assert_debug_log\r\n    self._raise_assertion_error('Expected messages \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(str(expected_msgs), print_log))\r\n  File \".../test/functional/test_framework/test_node.py\", line 167, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 0] Expected messages \"['Stall started peer=0']\" does not partially match log:\r\n\r\n - 2022-10-19T16:33:58.962946Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:33:58.963134Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0b0f67ff3588e364b00c1c3d81bf9c97f03a1be5e419e3a7ad30771264a2531e peer=4\r\n - 2022-10-19T16:33:58.990215Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:33:58.990423Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 28cdc0d0e9229e11a2acb27aedc48b1b8b0797f0aae951e2af19484e1657444a peer=3\r\n - 2022-10-19T16:33:59.017936Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:33:59.018141Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 1d774e4493f1a5479a887f2486e0b9c08ec551047b8bc3d0ec34a64ea4961d37 peer=7\r\n - 2022-10-19T16:33:59.045861Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:33:59.046067Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 1cb6855b049f1ad7ce3d6f3d387e667c5efe4fbe5f5ae58fad60ab270e29028c peer=5\r\n - 2022-10-19T16:33:59.073667Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:33:59.073861Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 2659080a77588a7961790375bd7e87665ce8bef110500b83ede37f8fcb78239d peer=6\r\n - 2022-10-19T16:33:59.098941Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:33:59.099112Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 789b3151fd14751ca737bc2f9404619348e8292c3a88dc7e223a1407eb160e50 peer=1\r\n - 2022-10-19T16:33:59.123602Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:33:59.123776Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 300a1c8ce3ec1487d024f9208b33329f4f516822c96f0668793b7d2b05dc29a9 peer=7\r\n - 2022-10-19T16:33:59.148051Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:33:59.148327Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 37cc7b66fb6822b94008f45e99c14a643e7c672d485dad3806487c7d1954d227 peer=5\r\n - 2022-10-19T16:33:59.172596Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:33:59.172769Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 04114e74efbe1632f13632b61637902a018b5b4783c359ceac6c4ba4a009cea1 peer=4\r\n - 2022-10-19T16:33:59.197258Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:33:59.197424Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 56a92992336e241ab1ca9847cb8ac49c32737642aff0daf6eeec9a0f36dbd6a9 peer=0\r\n - 2022-10-19T16:33:59.221526Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:33:59.221695Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 223935072469d097518309b24f4fdb55292879da781632f6342627036a587479 peer=2\r\n - 2022-10-19T16:33:59.245923Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:33:59.246110Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 2bbfff35767e9b833c0becfc7bfd471ed26bc301d8bf0d62f79489531c65dc96 peer=6\r\n - 2022-10-19T16:33:59.271447Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:33:59.271638Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 4d04d79bb11c0dcbb80a4dd75ebc1edf99e9e418ec320f1b00627a8e6048074d peer=3\r\n - 2022-10-19T16:33:59.296551Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:33:59.296724Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 561e40bdc4ae9ea5157017447f11d1c3a2ff0bf0d8946e9c23977f9bd237bac6 peer=7\r\n - 2022-10-19T16:33:59.320649Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:33:59.320815Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 2240ca37da79ebb62af65b3ccf64ede02646d9944903acb35d7f552172df3a5c peer=5\r\n - 2022-10-19T16:33:59.345287Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:33:59.345471Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 53fec40b1cc0906773a036205e6c43cf84777e5e6c9b3d1964af88292f934abe peer=1\r\n - 2022-10-19T16:33:59.370857Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:33:59.371040Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 2feb53f9a978d4b26fae6928fc233cb4bc1aa41fc3eaba37b8efe9456a4f356d peer=0\r\n - 2022-10-19T16:33:59.396133Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:33:59.396308Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 1ed11920cf800de1cd19fb7ab637fc4932c17e5dce3ffe37eb7cb21c88cfc0b2 peer=3\r\n - 2022-10-19T16:33:59.421024Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:33:59.421229Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 4ae79c9217806fd6120589ef5025b0b07b35b13f3f5fd94860e24668d2dcf9b6 peer=6\r\n - 2022-10-19T16:33:59.445160Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:33:59.445326Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 149c2e1b1fb8a27086466065f6272dc4628872b40c5981150fd839c702d0f27d peer=2\r\n - 2022-10-19T16:33:59.470239Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:33:59.470442Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 3b723e6be5ec0e7162deefa48363c601582ef674069f00208b22f15635657425 peer=4\r\n - 2022-10-19T16:33:59.494524Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:33:59.494718Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 61c11ae01b6fc69d1a12234463c5ca7b99a4886d42d2db2384f0426e64995e9c peer=0\r\n - 2022-10-19T16:33:59.520750Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:33:59.520936Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 51ebc573f486a5d3dc8481608af3b6807fc9e24cf9c7c1a8391bbe9d80797a74 peer=3\r\n - 2022-10-19T16:33:59.545276Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:33:59.545444Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 694424de8a6e1ad8506843500212048610c0b01311df7c9e13a7a91159ae7a88 peer=6\r\n - 2022-10-19T16:33:59.569763Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:33:59.569935Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 4d5f8c921bafba7a38bf8add0de97c47b3867a6ed22c46ef8df9ee91c371067b peer=1\r\n - 2022-10-19T16:33:59.594875Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:33:59.595051Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 27252479f5c989fa08bf50a9f863c8d36240ba03eee4be2dcdc1b668474982f9 peer=4\r\n - 2022-10-19T16:33:59.620172Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:33:59.620401Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 28fd48a46bbde9fe24fe631861b43a7ae0151b1b967bc36304e149177c6a9b59 peer=5\r\n - 2022-10-19T16:33:59.644291Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:33:59.644456Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 75aa0892be28704273dcdd5838822135bfa6616693791ad48bb5675c5003c866 peer=7\r\n - 2022-10-19T16:33:59.670471Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:33:59.670657Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 276e366ca671621fbc08621ee7728f80a4e9527837112210ea4db7750d72bd85 peer=2\r\n - 2022-10-19T16:33:59.695404Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:33:59.695579Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 76d7bdc226b02d83dcf8510b820509288dbb6d981be8481c5ca98ba15fc0c944 peer=5\r\n - 2022-10-19T16:33:59.719515Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:33:59.719703Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 04f543e95f6ae0ca18c5812969de94972497ca511f0d12286baae29ad4605d06 peer=3\r\n - 2022-10-19T16:33:59.743348Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:33:59.743514Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0324eb869b493b26cc853da6feb37843ec27c9944cbc06bf7d612efcee61176d peer=2\r\n - 2022-10-19T16:33:59.770223Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:33:59.770429Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 7a69577738e6151784dc66530cd9dc3466d8ef6f5b9267e112766b7aaf95c62c peer=7\r\n - 2022-10-19T16:33:59.795478Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:33:59.795653Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 7a9d485626ae39b50d6759538d662893325d2197bbdbd9eddb4915b5be44e3b0 peer=0\r\n - 2022-10-19T16:33:59.819725Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:33:59.819897Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 5c32d19f2d2ba45c41980a4df729cfcde43629e77c5eaf74cf5dfb5ea8355e5b peer=6\r\n - 2022-10-19T16:33:59.844126Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:33:59.844294Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 7616519ecdee1302ccf29c620faf3e646a010bc7ec5eb80296f871b1a484e70a peer=1\r\n - 2022-10-19T16:33:59.868194Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:33:59.868366Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 49de72a97770ba40900ff30ce77cc964fe6288087719d1070c71c97fc7e261f9 peer=4\r\n - 2022-10-19T16:33:59.892402Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:33:59.892577Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 139cffa9d8d84257e055fbcd71ecdd6813ca52f6ac774936d5faeca59bab4deb peer=2\r\n - 2022-10-19T16:33:59.916548Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:33:59.916723Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0e7b0d5ab8fe14f3e88f55d198cfacb76b80a9e5e5cb4c6af6165cbc136459c3 peer=7\r\n - 2022-10-19T16:33:59.941073Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:33:59.941248Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 1cd47ffbaeca18483cf019e113955a6d3462e030378fcf1183cd5d7c21abf749 peer=4\r\n - 2022-10-19T16:33:59.965355Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:33:59.965544Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 39b17af31068085d9eb0c0e9bca61d32fd0772b0e72880314ef514f266953cd9 peer=3\r\n - 2022-10-19T16:33:59.989803Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:33:59.989985Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 3b48f9f9934113353c763c0e7acb17958bdbbb0bc0ce8a48744d2aab0e917e0d peer=5\r\n - 2022-10-19T16:34:00.013752Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:34:00.013917Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 4acb6b528b8ae0aec99cdf53cec80e960e01ed6f55170d8f67c1682db4496aed peer=1\r\n - 2022-10-19T16:34:00.037851Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:34:00.038023Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 1c499198f890caf385f21569107d6c5ab6908c0c1c2bfb7804a0f7cdca1998d7 peer=0\r\n - 2022-10-19T16:34:00.064995Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:34:00.065266Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 5a0470c7b37492ef17fef835a90a508d195da1f94778eb58f819cbdd2e679a50 peer=6\r\n - 2022-10-19T16:34:00.090537Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:34:00.090711Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 148736dab33ceac12f53e6c77531ab4974aeecfc0573bce66104886b25b5c3a8 peer=5\r\n - 2022-10-19T16:34:00.114267Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:34:00.114432Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 599f0eefa6f2427de544d0c0f2d606c2cd38f367ae2b8df0462aaa970470a529 peer=3\r\n - 2022-10-19T16:34:00.138960Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:34:00.139141Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 3e7c9446183261888c02143e261307483bfe253cb0c35b481dd5b6eeed155aec peer=2\r\n - 2022-10-19T16:34:00.163578Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:34:00.163741Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 7ebfb4ed5d171579d32caadc83247fe62641ad0bcdeae3546f4b299ce2384f99 peer=1\r\n - 2022-10-19T16:34:00.187471Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:34:00.187646Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0a6de82d0e73df6aeeabda7905c3e8a76ac6354856aaa0adfe1a06bf9011d1d5 peer=6\r\n - 2022-10-19T16:34:00.212043Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:34:00.212213Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 449b2e9ac551d16e0ad61cafb858fa0964d4afb16add46a2a3db36322d256dea peer=4\r\n - 2022-10-19T16:34:00.235885Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:34:00.236067Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 4d14c1a17a8d17642a279960e9f67fe8f43f9c934a8a20abbecc334def4f6f63 peer=7\r\n - 2022-10-19T16:34:00.259926Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:34:00.260097Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 03e7cc131f6cf0dddbc484d09d102403fc7e34c1fd39d925b592d6560984231e peer=0\r\n - 2022-10-19T16:34:00.284742Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:34:00.284912Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 14a08a465e344aa6422c4ab8f318d35f3b13aecc33973aa8ae706f5581f64895 peer=2\r\n - 2022-10-19T16:34:00.309434Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:34:00.309622Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 093853d8fcbce5ab96f51397d9c23e18aa6be55a139c8e067a4b8ae049142b1c peer=3\r\n - 2022-10-19T16:34:00.333272Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:34:00.333438Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 39b9d7e4b9e98aad90142bb948d7d722446445f3d7085b1b022c9bc78656ba79 peer=5\r\n - 2022-10-19T16:34:00.357753Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:34:00.357934Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 30bcffd1cebd30eb70935fda6617309ecb706a2cdecd62a9e454d75eec503c01 peer=6\r\n - 2022-10-19T16:34:00.382750Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:34:00.382919Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0f2fc7fa7578caf56a71611c5c8b33a59d284d598d4dc4a8f963bf8cbe157ee0 peer=0\r\n - 2022-10-19T16:34:00.406745Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:34:00.406917Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 1b40884fb47a2537c61c7504770a5a7f13a806a37c3a876ea1e283e870746e27 peer=1\r\n - 2022-10-19T16:34:00.432092Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:34:00.432285Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 6623b5f52d96b06561aa098a065072c14faa6f2c9bb4f655c68cf0699ebd8a89 peer=7\r\n - 2022-10-19T16:34:00.456746Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:34:00.456921Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 684d2052d2cef9fe217c0218bf5eac19145d29656d8cae07158d0aedf3ac3b01 peer=4\r\n - 2022-10-19T16:34:00.481389Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:34:00.481578Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 6ae8c6448d3a3da973cb3a019d46d0fc945c6c68ce78b84757819beb02ff273a peer=1\r\n - 2022-10-19T16:34:00.505301Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:34:00.505472Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 6bd8dcf0649d38a5344626e114cf5a19f930b98236802199ba7fe0ee56f1c874 peer=4\r\n - 2022-10-19T16:34:00.529028Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:34:00.529208Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 4fdb5209ad3d5541aa4575c08592cc083b6fa891c8ab5c7906b764434d7bbb87 peer=7\r\n - 2022-10-19T16:34:00.552961Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:34:00.553131Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 273ebb6defbc1ab2c1a127bf354b287871caf8bdbf8b3aa733248870a1e0932d peer=5\r\n - 2022-10-19T16:34:00.577108Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:34:00.577277Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 71375bb705e9f500c34e40b292243d5af96a1c8ed274a41318d70877d3bc3a8e peer=3\r\n - 2022-10-19T16:34:00.601089Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:34:00.601261Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 2810c2d616e6eadd8cdafd2fa9619721f931ce0878cd9480ee2a7b3b8c2edd12 peer=6\r\n - 2022-10-19T16:34:00.625230Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:34:00.625404Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 22edc1556fac5bb72bd5956e99c4ba97cdba9944b456b0635464450da8a83065 peer=2\r\n - 2022-10-19T16:34:00.650258Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:34:00.650438Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 68f4ecf10bc6b7870cd29b08bf36aa4f02a12a88a874723bdb528d3916618c20 peer=0\r\n - 2022-10-19T16:34:00.674750Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:34:00.674920Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 3765435e040bf76c4e5d8ed8d5062a92f79b92ce926df4cdc2f412e726f068bc peer=1\r\n - 2022-10-19T16:34:00.699397Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=0\r\n - 2022-10-19T16:34:00.699567Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 2ad2276f3bbb64885dc403e0cbd2c04373c4ce6684b69513ab92ee2ab730ecee peer=0\r\n - 2022-10-19T16:34:00.722971Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:34:00.723138Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 46fd517915787dcb01c74ce4bca206430256f838e1fe798b7e3032abaf62668c peer=7\r\n - 2022-10-19T16:34:00.747254Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:34:00.747423Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 5139ec71264f1ace89cff79bde6b9c15140958415c048bc81d028c2e29e1680f peer=6\r\n - 2022-10-19T16:34:00.773599Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=3\r\n - 2022-10-19T16:34:00.773799Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 7049cf0ed83b30c32dc2d45e470dc01166182d11b9688895b51ee68b548aa984 peer=3\r\n - 2022-10-19T16:34:00.798494Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:34:00.798796Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 41b4aeba3f712952e794994f658cc7f10b435fda2be817c90cba612d5d51b926 peer=5\r\n - 2022-10-19T16:34:00.822235Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=4\r\n - 2022-10-19T16:34:00.822407Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0092e6bbd325d4a53ebf8bef982ee9ca265fcf954ccc45b5dfc0982bdf98f0fc peer=4\r\n - 2022-10-19T16:34:00.845863Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:34:00.846027Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 425400fdf59d978678caf140ba07c6d0f4c174c8cb6eff98d95ee04b88553bbe peer=2\r\n - 2022-10-19T16:34:00.869512Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=1\r\n - 2022-10-19T16:34:00.869736Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 139b69e04292b866d094aa1a45ec04bf194406f0cc3c3d8645ed6cd181e3124c peer=1\r\n - 2022-10-19T16:34:00.894308Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=7\r\n - 2022-10-19T16:34:00.894496Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 7015b275815789410e79481152125f3a8d749919012e20539cc2136c709f00bf peer=7\r\n - 2022-10-19T16:34:00.918507Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=6\r\n - 2022-10-19T16:34:00.918674Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0929efd49dc5f1cc048dff800a7711b065602fbb37090a478c950fa665643eae peer=6\r\n - 2022-10-19T16:34:00.943204Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=2\r\n - 2022-10-19T16:34:00.943384Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 115803feb52a86fb26558fa9e9b62db3565da69e59b4c2744d7029b1f4dae86f peer=2\r\n - 2022-10-19T16:34:00.967650Z [net_processing.cpp:2806] [ProcessMessage] [net] received: block (145 bytes) peer=5\r\n - 2022-10-19T16:34:00.967817Z [net_processing.cpp:4078] [ProcessMessage] [net] received block 0c89f3b8fb84a718d3aa4f030f9ae2b5b550a411f4fdbbe599bf8f122a4719eb peer=5\r\n\r\n\r\n2022-10-19T16:34:01.032000Z TestFramework (INFO): Stopping nodes\r\n2022-10-19T16:34:01.248000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_6vaknmm8\r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_6vaknmm8/test_framework.log\r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): \r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): Hint: Call .../test/functional/combine_logs.py '/tmp/bitcoin_func_test_6vaknmm8' to consolidate all logs\r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): \r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2022-10-19T16:34:01.249000Z TestFramework (ERROR): \r\n```\r\n</details>\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1147870452",
      "submitted_at": "2022-10-19T16:49:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1147961233,
      "node_id": "PRR_kwDOABII585EbH-R",
      "url": null,
      "actor": null,
      "commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1147961233",
      "submitted_at": "2022-10-19T16:52:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "reviewed",
      "id": 1149217595,
      "node_id": "PRR_kwDOABII585Ef6s7",
      "url": null,
      "actor": null,
      "commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> The test takes 1m45s on my laptop\r\n\r\nThat was when compiled with TSAN. Normal debug build takes only about 30 seconds. It still fails. There are some problems with the test:\r\n\r\n* First test (should not stall):\r\nthose `received: block...` messages in the log above (from the failure of the second test) are produced from the first test. The `sleep(0.5)` was apparently not enough, so I _fixed_ it to `sleep(5)` (just for testing, not to actually have it in the final test). This means that in practice it could stall and remain undetected by the first test because it will be happy to not see `Stall started` in the log even though it may be printed shortly after the first test has eagerly declared success. We want to check that there are 1023 `received: block` messages in the log and that afterwards the stalling logic from `SendMessages()` is executed and after that there is no \"Stall started\" in the log. I am not sure how to do that. Checking the bytes received for block messages seems to be better than the sleep, but could still end the wait too early.\r\n\r\n* Second test (should stall):\r\nit fails because there is no \"Stall started peer=0\" message. I added `sleep(10)` at the end of the `with...` block to wait even more for the stall. Then it fails with this error:\r\n\r\n```\r\nAssertionError: [node 0] Expected messages \"['Stall started peer=0']\" does not partially match log:\r\n\r\n - 2022-10-20T12:16:52.334202Z [net_processing.cpp:2806] [ProcessMessage] [net] received: headers (83028 bytes) peer=1\r\n - 2022-10-20T12:16:55.712397Z [validation.cpp:3686] [ProcessNewBlockHeaders] Synchronizing blockheaders, height: 1025 (~0.17%)\r\n - 2022-10-20T12:16:55.712923Z [net_processing.cpp:2806] [ProcessMessage] [net] received: headers (83028 bytes) peer=8\r\n - 2022-10-20T12:16:59.078114Z [net_processing.cpp:5328] [SendMessages] [net] Stall started peer=1\r\n - 2022-10-20T12:16:59.078214Z [net_processing.cpp:2806] [ProcessMessage] [net] received: headers (83028 bytes) peer=4\r\n```\r\n\r\nThere is a `Stall started peer=1` message but it comes 7 seconds after `received: headers` and is for a different peer. Maybe we should instead wait for the message to appear with `wait_for_debug_log()` and omit the ` peer=0` part.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1149217595",
      "submitted_at": "2022-10-20T13:15:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "commented",
      "id": 1285539185,
      "node_id": "IC_kwDOABII585Mn8Vx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285539185",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-20T13:27:22Z",
      "updated_at": "2022-10-20T13:27:22Z",
      "author_association": "MEMBER",
      "body": "I am ok to drop the test. It is good to have tests to ensure the code works as intended. But we can't have tests for everything and there is a _subjective_ threshold somewhere. If it is too difficult to implement properly or is more complicated than the actual code it tests, then it may be too expensive. There is maintenance cost for the test too. Developers could trash precious time investigating a sporadically failing test, fixing it or trying to figure out whether their (seemingly unrelated) changes broke the test. I am not saying to drop the test, just that I would be ok with that.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1285539185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7643965829,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAHHnamF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7643965829",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T22:12:39Z"
    },
    {
      "event": "commented",
      "id": 1287494641,
      "node_id": "IC_kwDOABII585MvZvx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1287494641",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T22:26:55Z",
      "updated_at": "2022-10-21T22:33:10Z",
      "author_association": "MEMBER",
      "body": "Addressed the test feedback (will get to the outstanding comment for the main commit a bit later).\r\n\r\n> * First test (should not stall):\r\n>   those `received: block...` messages in the log above (from the failure of the second test) are produced from the first test. The `sleep(0.5)` was apparently not enough, so I _fixed_ it to `sleep(5)` (just for testing, not to actually have it in the final test). This means that in practice it could stall and remain undetected by the first test because it will be happy to not see `Stall started` in the log even though it may be printed shortly after the first test has eagerly declared success. We want to check that there are 1023 `received: block` messages in the log and that afterwards the stalling logic from `SendMessages()` is executed and after that there is no \"Stall started\" in the log. I am not sure how to do that. Checking the bytes received for block messages seems to be better than the sleep, but could still end the wait too early.\r\n\r\nI rewrote the test such that it doesn't use the log anymore, but waits until all blocks are received, syncs (so that a peer could get mark as a staller), waits for 3s, syncs again (so that a peer could get disconnected), and then checks that no peer gets disconnected.\r\n\r\n> * Second test (should stall):\r\n>   it fails because there is no \"Stall started peer=0\" message. I added `sleep(10)` at the end of the `with...` block to wait even more for the stall. Then it fails with this error:\r\n\r\nI removed the `peer=0` part of the check and added a missing `self.all_sync_send_with_ping(peers)` to the `with` block. With that, the tests succeeds for me even with some slow sanitizers enabled - will do more runs over the weekend to check for intermittent failures.\r\n\r\n> I am ok to drop the test. It is good to have tests to ensure the code works as intended. But we can't have tests for everything and there is a subjective threshold somewhere. If it is too difficult to implement properly or is more complicated than the actual code it tests, then it may be too expensive. There is maintenance cost for the test too. Developers could trash precious time investigating a sporadically failing test, fixing it or trying to figure out whether their (seemingly unrelated) changes broke the test. I am not saying to drop the test, just that I would be ok with that.\r\n \r\nIf everyone agrees that would be ok with me. However, the stalling logic was completely untested before, which is not ideal, so the test doesn't just cover the changes from this PR. \r\n@dergoegge do you have an opinion, since you suggested the test? Do you think that the stalling logic could maybe better be covered by a unit test after #25515? (which would have less problems with timeouts).",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1287494641",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "mentioned",
      "id": 7644012980,
      "node_id": "MEE_lADOABII585QKJJizwAAAAHHnmG0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7644012980",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T22:26:55Z"
    },
    {
      "event": "subscribed",
      "id": 7644012986,
      "node_id": "SE_lADOABII585QKJJizwAAAAHHnmG6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7644012986",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T22:26:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1NjU5NTFmMzRlNmQxNTVkYzgyNTk2NGM1ZDhiMWRkMDA5MzE2ODI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0565951f34e6d155dc825964c5d8b1dd00931682",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0565951f34e6d155dc825964c5d8b1dd00931682",
      "tree": {
        "sha": "f2e5135b346ebced80ba94859749bc734823e854",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2e5135b346ebced80ba94859749bc734823e854"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d480586ecb1d4c265ffec278f10c46500d89382f",
          "sha": "d480586ecb1d4c265ffec278f10c46500d89382f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d480586ecb1d4c265ffec278f10c46500d89382f"
        }
      ],
      "message": "p2p: Make block stalling timeout adaptive\n\nThis makes the stalling detection mechanism (previously a fixed\ntimeout of 2s) adaptive:\nIf we disconnect a peer for stalling, double the timeout for the\nnext peer - and let it slowly relax back to its default\nvalue each time the tip advances. (Idea by Pieter Wuille)\n\nThis makes situations more unlikely in which we'd keep on\ndisconnecting many of our peers for stalling, even though our\nown bandwidth is insufficient to download a block in 2 seconds.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2022-10-24T20:15:22Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2022-08-23T17:47:04Z"
      },
      "sha": "0565951f34e6d155dc825964c5d8b1dd00931682"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7657396349,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAHIaph9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7657396349",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-24T20:27:29Z"
    },
    {
      "event": "commented",
      "id": 1289575526,
      "node_id": "IC_kwDOABII585M3Vxm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1289575526",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-24T20:29:46Z",
      "updated_at": "2022-10-25T02:34:22Z",
      "author_association": "MEMBER",
      "body": "[9339230 ](https://github.com/bitcoin/bitcoin/commit/9339230016c87a4e3b7df87caba74059854f20b6)to [aceff9e](https://github.com/bitcoin/bitcoin/commit/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4):\r\nAlso addressed the outstanding comments to the main commit (plus minor reformatting of comments) and fixed another source of spurious test failures - thanks for the reviews!",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1289575526",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7658776643,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAHIf6hD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7658776643",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-25T00:26:12Z"
    },
    {
      "event": "reviewed",
      "id": 1154213835,
      "node_id": "PRR_kwDOABII585Ey-fL",
      "url": null,
      "actor": null,
      "commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1154213835",
      "submitted_at": "2022-10-25T08:17:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM5YjkzNjQ5YzRiOThjZDgyYzY0Yjk1N2ZkOWY2YTZmZDNjMmEzNTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "tree": {
        "sha": "ffbbb619c421a91f1392ca01028386b52993dc7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffbbb619c421a91f1392ca01028386b52993dc7b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0565951f34e6d155dc825964c5d8b1dd00931682",
          "sha": "0565951f34e6d155dc825964c5d8b1dd00931682",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0565951f34e6d155dc825964c5d8b1dd00931682"
        }
      ],
      "message": "test: add functional test for IBD stalling logic",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2022-10-27T19:10:34Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2022-09-13T15:07:55Z"
      },
      "sha": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7685166920,
      "node_id": "HRFPE_lADOABII585QKJJizwAAAAHKEldI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7685166920",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T19:14:27Z"
    },
    {
      "event": "commented",
      "id": 1294155328,
      "node_id": "IC_kwDOABII585NIz5A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294155328",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T22:10:52Z",
      "updated_at": "2022-10-27T22:10:52Z",
      "author_association": "MEMBER",
      "body": "[aceff9e ](https://github.com/bitcoin/bitcoin/commit/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4)to [39b9364](https://github.com/bitcoin/bitcoin/commit/39b93649c4b98cd82c64b957fd9f6a6fd3c2a359): addressed feedback by @vasild - the CI failure is unrelated (I opened #26404 to fix it).",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1294155328",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "mentioned",
      "id": 7686181922,
      "node_id": "MEE_lADOABII585QKJJizwAAAAHKIdQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7686181922",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T22:10:53Z"
    },
    {
      "event": "subscribed",
      "id": 7686181932,
      "node_id": "SE_lADOABII585QKJJizwAAAAHKIdQs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7686181932",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T22:10:53Z"
    },
    {
      "event": "reviewed",
      "id": 1159651918,
      "node_id": "PRR_kwDOABII585FHuJO",
      "url": null,
      "actor": null,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1159651918",
      "submitted_at": "2022-10-28T08:15:08Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "review_requested",
      "id": 7690761898,
      "node_id": "RRE_lADOABII585QKJJizwAAAAHKZ7aq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7690761898",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-28T11:24:06Z",
      "requested_reviewer": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 7690764722,
      "node_id": "RRE_lADOABII585QKJJizwAAAAHKZ8Gy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7690764722",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-28T11:24:26Z",
      "requested_reviewer": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1168121389,
      "node_id": "PRR_kwDOABII585FoB4t",
      "url": null,
      "actor": null,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1168121389",
      "submitted_at": "2022-11-04T08:38:08Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "commented",
      "id": 1379569979,
      "node_id": "IC_kwDOABII585SOpE7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379569979",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T22:32:26Z",
      "updated_at": "2023-01-11T22:32:26Z",
      "author_association": "MEMBER",
      "body": "ACK 39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379569979",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "commented",
      "id": 1379584074,
      "node_id": "IC_kwDOABII585SOshK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379584074",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T22:51:57Z",
      "updated_at": "2023-01-11T22:51:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Strong Concept ACK 39b93649c4b98cd82c64b957fd9f6a6fd3c2a359\r\n\r\nWill do some tests ASAP.",
      "user": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379584074",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880"
    },
    {
      "event": "reviewed",
      "id": 1244733611,
      "node_id": "PRR_kwDOABII585KMSCr",
      "url": null,
      "actor": null,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1244733611",
      "submitted_at": "2023-01-11T22:56:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "merged",
      "id": 8370536750,
      "node_id": "ME_lADOABII585QKJJizwAAAAHy7EEu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8370536750",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "835212cd1d8f8fc7f19775f5ff8cc21c099122b2",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835212cd1d8f8fc7f19775f5ff8cc21c099122b2",
      "created_at": "2023-01-27T06:54:23Z"
    },
    {
      "event": "closed",
      "id": 8370536770,
      "node_id": "CE_lADOABII585QKJJizwAAAAHy7EFC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8370536770",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T06:54:24Z"
    },
    {
      "event": "referenced",
      "id": 8374405909,
      "node_id": "REFE_lADOABII585QKJJizwAAAAHzJ0sV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8374405909",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bbcf59ea73c20b2693aae86e5a1314707df8b8c3",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/bbcf59ea73c20b2693aae86e5a1314707df8b8c3",
      "created_at": "2023-01-27T15:22:52Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 8374429989,
      "node_id": "HRDE_lADOABII585QKJJizwAAAAHzJ6kl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8374429989",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T15:25:36Z"
    },
    {
      "event": "reviewed",
      "id": 1273098461,
      "node_id": "PRR_kwDOABII585L4fDd",
      "url": null,
      "actor": null,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1273098461",
      "submitted_at": "2023-01-27T17:13:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
    },
    {
      "event": "referenced",
      "id": 8386170876,
      "node_id": "REFE_lADOABII585QKJJizwAAAAHz2s_8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8386170876",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "37fea41bbf851ddda571af98c2a555ed2ecb676c",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/37fea41bbf851ddda571af98c2a555ed2ecb676c",
      "created_at": "2023-01-30T09:55:37Z"
    },
    {
      "event": "referenced",
      "id": 8389878678,
      "node_id": "REFE_lADOABII585QKJJizwAAAAH0E2OW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8389878678",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0f4f31a4f0c569f33b41fe51e18eecb9b42042aa",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/0f4f31a4f0c569f33b41fe51e18eecb9b42042aa",
      "created_at": "2023-01-30T16:06:44Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956425910",
      "pull_request_review_id": 1087492146,
      "id": 956425910,
      "node_id": "PRRC_kwDOABII5845Aea2",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would think only reduce the timeout if the block was in fact downloaded in less time (than the would-be *new* timeout).",
      "created_at": "2022-08-26T20:27:05Z",
      "updated_at": "2022-08-26T20:28:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r956425910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956425910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958962230",
      "pull_request_review_id": 1091011833,
      "id": 958962230,
      "node_id": "PRRC_kwDOABII5845KJo2",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I like about the current solution that it is very simple, prevents the node from getting stuck, and doesn't require additional bookkeeping of historical block download times.\r\n\r\nI think your suggestion wouldn't be completely straightforward to implement: The block being connected here might have been downloaded some time in the past, saved to disk, but only connected now (as a result of its predecessor being connected). So we'd need some data structure to keep track of download times for not-yet-connected blocks and add/remove entries from it during IBD.\r\n\r\nIf we did this, it would help us cycle through less peers in situations where we assign multiple blocks to a peer and halving the timeout after successfully downloading a block would lead to a stalling situation again - but note that there are also other sources of disconnections that could be improved if we kept track of this kind data during IBD: E.g. if doubling the timeout is not sufficient and we'd need to 4x or 8x it.\r\n\r\nSo if we want something better but more complicated (with bookkeeping), my feeling is that we should go for another approach altogether, like basing the stalling timeout on a running average over the last received block times from multiple peers instead of a doubling/halving approach.\r\n",
      "created_at": "2022-08-30T21:54:44Z",
      "updated_at": "2022-08-30T21:54:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958962230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958962230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958969743",
      "pull_request_review_id": 1091021888,
      "id": 958969743,
      "node_id": "PRRC_kwDOABII5845KLeP",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With this current code, it will stall, get a block, stall, get a block, stall, etc repeatedly...",
      "created_at": "2022-08-30T22:08:04Z",
      "updated_at": "2022-08-30T22:08:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958969743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958969743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958972383",
      "pull_request_review_id": 1091025263,
      "id": 958972383,
      "node_id": "PRRC_kwDOABII5845KMHf",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "Ellajoke",
        "id": 99142380,
        "node_id": "U_kgDOBejK7A",
        "avatar_url": "https://avatars.githubusercontent.com/u/99142380?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ellajoke",
        "html_url": "https://github.com/Ellajoke",
        "followers_url": "https://api.github.com/users/Ellajoke/followers",
        "following_url": "https://api.github.com/users/Ellajoke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ellajoke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ellajoke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ellajoke/subscriptions",
        "organizations_url": "https://api.github.com/users/Ellajoke/orgs",
        "repos_url": "https://api.github.com/users/Ellajoke/repos",
        "events_url": "https://api.github.com/users/Ellajoke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ellajoke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay ",
      "created_at": "2022-08-30T22:12:46Z",
      "updated_at": "2022-08-30T22:12:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958972383",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958972383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958991800",
      "pull_request_review_id": 1091051121,
      "id": 958991800,
      "node_id": "PRRC_kwDOABII5845KQ24",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> With this current code, it will stall, get a block, stall, get a block, stall, etc repeatedly...\r\n\r\nYes, but only a few times until the blocks preventing the tip from moving are downloaded, then the tip advances by connecting the large number of stashed blocks from the 1024 window, ending the stalling situation. If every peer is equally slow, it doesn't matter if you download a block in 2s or 1 minute from the viewpoint of the stalling logic.",
      "created_at": "2022-08-30T22:38:30Z",
      "updated_at": "2022-08-30T22:39:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958991800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958991800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958999282",
      "pull_request_review_id": 1091060970,
      "id": 958999282,
      "node_id": "PRRC_kwDOABII5845KSry",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe instead of halving the timeout, we should, on block connection, multiply it with a factor `0.5 < f < 1` to let it go back slower? ",
      "created_at": "2022-08-30T22:54:51Z",
      "updated_at": "2022-08-30T22:55:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958999282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958999282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959253273",
      "pull_request_review_id": 1091419557,
      "id": 959253273,
      "node_id": "PRRC_kwDOABII5845LQsZ",
      "diff_hunk": "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Once the max is reached, this would print repeated messages like\r\n```\r\nIncreased timeout to 64 seconds\r\nIncreased timeout to 64 seconds\r\nIncreased timeout to 64 seconds\r\n...\r\n```\r\n\r\nwhich would be misleading because the timeout was not _increased_.",
      "created_at": "2022-08-31T07:34:49Z",
      "updated_at": "2022-08-31T08:18:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959253273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959253273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959286134",
      "pull_request_review_id": 1091419557,
      "id": 959286134,
      "node_id": "PRRC_kwDOABII5845LYt2",
      "diff_hunk": "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This sequence is not atomic. If two threads execute concurrently the increase/decrease code it would lead to unexpected results. Consider this, it only does the inc/dec if no other thread changed the value in the meantime, otherwise leaves it untouched:\r\n\r\n<details>\r\n<summary>atomic</summary>\r\n\r\n```diff\r\ndiff --git i/src/net_processing.cpp w/src/net_processing.cpp\r\nindex 42686f0db0..fd2f22cdcd 100644\r\n--- i/src/net_processing.cpp\r\n+++ w/src/net_processing.cpp\r\n@@ -1726,14 +1726,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\r\n         LOCK(cs_main);\r\n         for (const auto& ptx : pblock->vtx) {\r\n             m_txrequest.ForgetTxHash(ptx->GetHash());\r\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\r\n         }\r\n     }\r\n-    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n-        m_block_stalling_timeout = std::max(m_block_stalling_timeout.load() / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);\r\n+    auto stalling_timeout = m_block_stalling_timeout.load();\r\n+    const auto new_timeout = std::max(stalling_timeout / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);\r\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {\r\n+        LogPrint(BCLog::NET, \"Decreased stalling timeout to %d seconds\\n\", new_timeout.count());\r\n     }\r\n }\r\n \r\n void PeerManagerImpl::BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex)\r\n {\r\n     // To avoid relay problems with transactions that were previously\r\n@@ -5231,22 +5233,25 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\r\n                 }\r\n         }\r\n         if (!vInv.empty())\r\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\r\n \r\n         // Detect whether we're stalling\r\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\r\n+        auto stalling_timeout = m_block_stalling_timeout.load();\r\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\r\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\r\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\r\n             // should only happen during initial block download.\r\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\r\n             pto->fDisconnect = true;\r\n             // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\r\n             // bandwidth is insufficient.\r\n-            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\r\n-            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());\r\n+            const auto new_timeout = std::min(2 * stalling_timeout, MAX_BLOCK_STALLING_TIMEOUT);\r\n+            if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {\r\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", new_timeout.count());\r\n+            }\r\n             return true;\r\n         }\r\n         // In case there is a block that has been in flight from this peer for block_interval * (1 + 0.5 * N)\r\n         // (with N the number of peers from which we're downloading validated blocks), disconnect due to timeout.\r\n         // We compensate for other peers to prevent killing off peers due to our own downstream link\r\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\r\n```\r\n</details>\r\n",
      "created_at": "2022-08-31T08:09:15Z",
      "updated_at": "2022-08-31T08:20:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959286134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959286134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 5245,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959291124",
      "pull_request_review_id": 1091419557,
      "id": 959291124,
      "node_id": "PRRC_kwDOABII5845LZ70",
      "diff_hunk": "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The increase would happen regardless of IBD, but decrease - only if IBD. In theory, this means that once out of IBD, the timeout could only increase or stay unchanged, but never decrease. Is this intended? \r\n\r\nMaybe better have the IBD condition on both inc/dec or remove it from both.",
      "created_at": "2022-08-31T08:13:38Z",
      "updated_at": "2022-08-31T08:18:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959291124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959291124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 5228,
      "start_side": "LEFT",
      "line": null,
      "original_line": 5237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959293576",
      "pull_request_review_id": 1091419557,
      "id": 959293576,
      "node_id": "PRRC_kwDOABII5845LaiI",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n+        m_block_stalling_timeout = std::max(m_block_stalling_timeout.load() / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The decrease does not log anything, but increase does. For symmetry and more log clarity, is it better to log both operations?\r\n",
      "created_at": "2022-08-31T08:15:48Z",
      "updated_at": "2022-08-31T08:18:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959293576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959293576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959300991",
      "pull_request_review_id": 1091484437,
      "id": 959300991,
      "node_id": "PRRC_kwDOABII5845LcV_",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree it seems better to decrease it slowly. If it was a single slow peer, then there would be many blocks coming on time afterwards.",
      "created_at": "2022-08-31T08:23:38Z",
      "updated_at": "2022-08-31T08:23:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959300991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959300991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971116652",
      "pull_request_review_id": 1107946552,
      "id": 971116652,
      "node_id": "PRRC_kwDOABII58454hBs",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "in_reply_to_id": 956425910,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With the latest push, I decrease it by a factor 0.85 with each connected block.",
      "created_at": "2022-09-14T17:39:26Z",
      "updated_at": "2022-09-14T17:39:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971116652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971116652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1732,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971117842",
      "pull_request_review_id": 1107948292,
      "id": 971117842,
      "node_id": "PRRC_kwDOABII58454hUS",
      "diff_hunk": "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": 959286134,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I took your suggestion and added you as coauthor - didn't know about `compare_exchange_strong` before.",
      "created_at": "2022-09-14T17:40:47Z",
      "updated_at": "2022-09-14T17:40:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971117842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971117842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 5245,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118033",
      "pull_request_review_id": 1107948584,
      "id": 971118033,
      "node_id": "PRRC_kwDOABII58454hXR",
      "diff_hunk": "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": 959291124,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the IBD condition",
      "created_at": "2022-09-14T17:41:01Z",
      "updated_at": "2022-09-14T17:41:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971118033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 5228,
      "start_side": "LEFT",
      "line": null,
      "original_line": 5237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118262",
      "pull_request_review_id": 1107948882,
      "id": 971118262,
      "node_id": "PRRC_kwDOABII58454ha2",
      "diff_hunk": "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n+        m_block_stalling_timeout = std::max(m_block_stalling_timeout.load() / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": 959293576,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-09-14T17:41:15Z",
      "updated_at": "2022-09-14T17:41:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971118262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971135953",
      "pull_request_review_id": 1107974917,
      "id": 971135953,
      "node_id": "PRRC_kwDOABII58454lvR",
      "diff_hunk": "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "in_reply_to_id": 959253273,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed according to your suggestion.",
      "created_at": "2022-09-14T17:59:09Z",
      "updated_at": "2022-09-14T17:59:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971135953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971135953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972000808",
      "pull_request_review_id": 1109215242,
      "id": 972000808,
      "node_id": "PRRC_kwDOABII5845744o",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not a fan of timeouts like this but in case i also don't see how to avoid it.",
      "created_at": "2022-09-15T13:39:28Z",
      "updated_at": "2022-09-15T13:52:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972000808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972000808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972007511",
      "pull_request_review_id": 1109215242,
      "id": 972007511,
      "node_id": "PRRC_kwDOABII584576hX",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 109,
      "original_position": 103,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This test actually almost passes for the previous stalling logic as well, it only fails on `Check that stalling timeout gets reduced back to 2 seconds after connecting several blocks` (because of the assertion on the debug log).\r\n\r\nMaybe add a condition to check that after 3 seconds the stalling peer is not disconnected? (same for the next doubling to 8 seconds)",
      "created_at": "2022-09-15T13:45:01Z",
      "updated_at": "2022-09-15T13:52:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972007511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972007511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 109,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972284322",
      "pull_request_review_id": 1109637149,
      "id": 972284322,
      "node_id": "PRRC_kwDOABII58458-Gi",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it intentional that this happens with an accuracy of 1 second?\r\n\r\nSo for example you could have the sequence 64, 54, 45, 38, 32, 27, 22, 18, 15, 12, 10, 8, 6, 5, 4, 3, 2... seconds.\r\n\r\nThe `stalling_timeout != new_timeout` condition can also be placed before the exchange, I think?",
      "created_at": "2022-09-15T18:01:08Z",
      "updated_at": "2022-09-15T18:04:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972284322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972284322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1735,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/974945067",
      "pull_request_review_id": 1113225192,
      "id": 974945067,
      "node_id": "PRRC_kwDOABII5846HHsr",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's say `compare_exchange_strong` triggers the `false` path, meaning `m_block_stalling_timeout` was updated elsewhere.\r\n\r\nIf I understand this method correctly, it will update `stalling_timeout` to the new value of `m_block_stalling_timeout`. Then, assuming `stalling_timeout != new_timeout` passes, the logging will be wrong?\r\n1. We haven't decreased the actual value *here*\r\n2. The latest value is *for sure* something different than `new_timeout`\r\n\r\nI suspect this event could be even impossible in our execution, but then I'm wondering if there's a way to express this observation in code, rather than having a meaningless code branch.",
      "created_at": "2022-09-20T06:44:20Z",
      "updated_at": "2022-09-20T06:44:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r974945067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/974945067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975712293",
      "pull_request_review_id": 1114328355,
      "id": 975712293,
      "node_id": "PRRC_kwDOABII5846KDAl",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "in_reply_to_id": 974945067,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "According to https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange, `compare_exchange_strong` returns `true` if the underlying atomic value was successfully changed, `false` otherwise.\r\nSo my understanding is that if nothing was updated because `m_block_stalling_timeout` was changed by some other thread, the logging statement won't be executed.",
      "created_at": "2022-09-20T18:56:05Z",
      "updated_at": "2022-09-20T19:06:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975712293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975712293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975743588",
      "pull_request_review_id": 1114374631,
      "id": 975743588,
      "node_id": "PRRC_kwDOABII5846KKpk",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the normal case, the timeout is already at the default, so probably good to optimise for that:\r\n\r\n```c++\r\nif (stalling_timeout > DEFAULT_BLOCK_STALLING_TIMEOUT) {\r\n```",
      "created_at": "2022-09-20T19:34:49Z",
      "updated_at": "2022-09-20T19:36:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975743588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975743588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975744322",
      "pull_request_review_id": 1114374631,
      "id": 975744322,
      "node_id": "PRRC_kwDOABII5846KK1C",
      "diff_hunk": "@@ -110,8 +110,11 @@ static constexpr auto GETDATA_TX_INTERVAL{60s};\n static const unsigned int MAX_GETDATA_SZ = 1000;\n /** Number of blocks that can be requested at any given time from a single peer. */\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Time during which a peer must stall block download progress before being disconnected. */\n-static constexpr auto BLOCK_STALLING_TIMEOUT{2s};\n+/** Default time during which a peer must stall block download progress before being disconnected.\n+  * the actual timeout is increased temporarily if peers are disconnected for hitting the timeout */\n+static constexpr auto DEFAULT_BLOCK_STALLING_TIMEOUT{2s};\n+/** Maximum timeout for stalling block download. */\n+static constexpr auto MAX_BLOCK_STALLING_TIMEOUT{64s};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Perhaps `BLOCK_STALLING_TIMEOUT_`{`DEFAULT`,`MAX`} would be better?",
      "created_at": "2022-09-20T19:35:22Z",
      "updated_at": "2022-09-20T19:36:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975744322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975744322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975745243",
      "pull_request_review_id": 1114374631,
      "id": 975745243,
      "node_id": "PRRC_kwDOABII5846KLDb",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972284322,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably should be IMO. Not sure how efficient std::atomic is with std::chrono units.",
      "created_at": "2022-09-20T19:36:03Z",
      "updated_at": "2022-09-20T19:36:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975745243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975745243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1735,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975761099",
      "pull_request_review_id": 1114398336,
      "id": 975761099,
      "node_id": "PRRC_kwDOABII5846KO7L",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972000808,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, I was looking for an RPC we could `wait_until` for to avoid this - but I didn't find a way of querying the number of blocks a node has downloaded (including those not connected to the chain yet).",
      "created_at": "2022-09-20T19:56:26Z",
      "updated_at": "2022-09-20T19:56:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975761099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975761099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820313",
      "pull_request_review_id": 1114484426,
      "id": 975820313,
      "node_id": "PRRC_kwDOABII5846KdYZ",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972284322,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is it intentional that this happens with an accuracy of 1 second?\r\n\r\nIt was kind of intentional, I first thought of changing `m_block_stalling_timeout` to microseconds, requiring conversions for the logging etc. but then I wondered whether a higher accuracy adds anything - I also thought of simply decreasing it constantly by one second per block received (instead of using a factor).\r\nDo you or others have a preference here?\r\n\r\n> The stalling_timeout != new_timeout condition can also be placed before the exchange, I think?\r\n\r\nDone - I changed the order within the `if` statements (in two places).",
      "created_at": "2022-09-20T21:15:22Z",
      "updated_at": "2022-09-20T21:15:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1735,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820561",
      "pull_request_review_id": 1114484791,
      "id": 975820561,
      "node_id": "PRRC_kwDOABII5846KdcR",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 109,
      "original_position": 103,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972007511,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done with the latest push.",
      "created_at": "2022-09-20T21:15:45Z",
      "updated_at": "2022-09-20T21:15:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 109,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820849",
      "pull_request_review_id": 1114485235,
      "id": 975820849,
      "node_id": "PRRC_kwDOABII5846Kdgx",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 975743588,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, makes sense to me.",
      "created_at": "2022-09-20T21:16:12Z",
      "updated_at": "2022-09-20T21:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975822057",
      "pull_request_review_id": 1114486811,
      "id": 975822057,
      "node_id": "PRRC_kwDOABII5846Kdzp",
      "diff_hunk": "@@ -110,8 +110,11 @@ static constexpr auto GETDATA_TX_INTERVAL{60s};\n static const unsigned int MAX_GETDATA_SZ = 1000;\n /** Number of blocks that can be requested at any given time from a single peer. */\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Time during which a peer must stall block download progress before being disconnected. */\n-static constexpr auto BLOCK_STALLING_TIMEOUT{2s};\n+/** Default time during which a peer must stall block download progress before being disconnected.\n+  * the actual timeout is increased temporarily if peers are disconnected for hitting the timeout */\n+static constexpr auto DEFAULT_BLOCK_STALLING_TIMEOUT{2s};\n+/** Maximum timeout for stalling block download. */\n+static constexpr auto MAX_BLOCK_STALLING_TIMEOUT{64s};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 975744322,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, maybe that makes it easier to see that they are used for the same thing.",
      "created_at": "2022-09-20T21:17:56Z",
      "updated_at": "2022-09-20T21:17:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975822057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975822057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976259314",
      "pull_request_review_id": 1115061678,
      "id": 976259314,
      "node_id": "PRRC_kwDOABII5846MIjy",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "in_reply_to_id": 974945067,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">According to https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange, compare_exchange_strong returns true if the underlying atomic value was successfully changed, false otherwise.\r\n\r\nI think this is only a part of what's happening, and if you consider the latter (also from your link), my example would make more sense?\r\n\r\nAtomically compares the [object representation](https://en.cppreference.com/w/cpp/language/object) (until C++20)[value representation](https://en.cppreference.com/w/cpp/language/object) (since C++20) of *this with that of expected, and if those are bitwise-equal, replaces the former with desired (performs read-modify-write operation). Otherwise, loads the actual value stored in *this into expected (performs load operation).\r\n\r\n",
      "created_at": "2022-09-21T09:09:45Z",
      "updated_at": "2022-09-21T09:10:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r976259314",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976259314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976654710",
      "pull_request_review_id": 1115639368,
      "id": 976654710,
      "node_id": "PRRC_kwDOABII5846NpF2",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "in_reply_to_id": 974945067,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought you meant `stalling_timeout` possibly being updated, which might have had an influence on the second condition (`stalling_timeout != new_timeout`).\r\nMy point was that this couldn't possibly matter here because if `stalling_timeout` is updated, that must go together with `compare_exchange_strong()` returning false, and the two conditions are combined with an `&&`-operator so the entire clause is false (and the second condition will not even be evaluated due to short-circuiting).\r\n\r\nNote that I changed the order of the two condition with the last push, so `stalling_timeout != new_timeout` is now the first of the two.",
      "created_at": "2022-09-21T15:24:52Z",
      "updated_at": "2022-09-21T15:24:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r976654710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976654710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978392189",
      "pull_request_review_id": 1118093700,
      "id": 978392189,
      "node_id": "PRRC_kwDOABII5846URR9",
      "diff_hunk": "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "in_reply_to_id": 974945067,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right, I was wrong about the previous version. The updated version is better anyway :) feel free to resolve this.",
      "created_at": "2022-09-23T08:30:45Z",
      "updated_at": "2022-09-23T08:30:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r978392189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978392189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978397817",
      "pull_request_review_id": 1118101728,
      "id": 978397817,
      "node_id": "PRRC_kwDOABII5846USp5",
      "diff_hunk": "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would probably replace this with the following code (haven't compiled):\r\n```\r\nAssume(stalling_timeout >= BLOCK_STALLING_TIMEOUT_DEFAULT);\r\nif (stalling_timeout != BLOCK_STALLING_TIMEOUT_DEFAULT)\r\n....\r\n```\r\n\r\nNo big deal though.",
      "created_at": "2022-09-23T08:37:41Z",
      "updated_at": "2022-09-23T08:37:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r978397817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978397817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983315571",
      "pull_request_review_id": 1124975223,
      "id": 983315571,
      "node_id": "PRRC_kwDOABII5846nDRz",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972000808,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`getpeerinfo()[0][\"bytesrecv_per_msg\"][\"block\"] ?`",
      "created_at": "2022-09-29T09:42:10Z",
      "updated_at": "2022-09-29T09:42:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r983315571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983315571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999653144",
      "pull_request_review_id": 1147870452,
      "id": 999653144,
      "node_id": "PRRC_kwDOABII5847lX8Y",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 42,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: missing space after `if`",
      "created_at": "2022-10-19T15:52:35Z",
      "updated_at": "2022-10-19T16:49:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999653144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999653144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999689947",
      "pull_request_review_id": 1147870452,
      "id": 999689947,
      "node_id": "PRRC_kwDOABII5847lg7b",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert(len(self.nodes[0].getpeerinfo()) == 7)",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 108,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "for consistency with earlier and because `assert_equal()` gives better error message:\r\n\r\n```suggestion\r\n        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\r\n```",
      "created_at": "2022-10-19T16:24:47Z",
      "updated_at": "2022-10-19T16:49:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999689947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999689947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999690410",
      "pull_request_review_id": 1147870452,
      "id": 999690410,
      "node_id": "PRRC_kwDOABII5847lhCq",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert(len(self.nodes[0].getpeerinfo()) == 7)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 6)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert(len(self.nodes[0].getpeerinfo()) == 6)",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 121,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "here too\r\n```suggestion\r\n        assert_equal(len(self.nodes[0].getpeerinfo()), 6)\r\n```",
      "created_at": "2022-10-19T16:25:13Z",
      "updated_at": "2022-10-19T16:49:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999690410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999690410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999716370",
      "pull_request_review_id": 1147960272,
      "id": 999716370,
      "node_id": "PRRC_kwDOABII5847lnYS",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972000808,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To follow @glozow's idea, this should work:\r\n\r\n```diff\r\ndiff --git i/test/functional/p2p_ibd_stalling.py w/test/functional/p2p_ibd_stalling.py\r\nindex 78626c003b..d593187d74 100755\r\n--- i/test/functional/p2p_ibd_stalling.py\r\n+++ w/test/functional/p2p_ibd_stalling.py\r\n@@ -79,13 +79,14 @@ class P2PIBDStallingTest(BitcoinTestFramework):\r\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\r\n             for id in range(8):\r\n                 peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\r\n                 peers[-1].block_store = block_dict\r\n                 peers[-1].send_message(headers_message)\r\n             self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\r\n-        time.sleep(0.5)  # Wait until all blocks have arrived at the node\r\n+            self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\r\n+\r\n \r\n         self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\r\n         headers_message.headers = [CBlockHeader(b) for b in blocks]\r\n         with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\r\n             for p in peers:\r\n                 p.send_message(headers_message)\r\n@@ -149,9 +150,15 @@ class P2PIBDStallingTest(BitcoinTestFramework):\r\n     def total_blocks_sent(self, peers):\r\n         num_blocks = 0\r\n         for p in peers:\r\n             num_blocks += p.blocks_sent\r\n         return num_blocks\r\n \r\n+    def total_bytes_recv_for_blocks(self):\r\n+        total = 0\r\n+        for info in self.nodes[0].getpeerinfo():\r\n+            total += info[\"bytesrecv_per_msg\"][\"block\"]\r\n+        return total\r\n+\r\n \r\n if __name__ == '__main__':\r\n     P2PIBDStallingTest().main()\r\n```\r\n\r\nand even better if we can put some formula behind the magic number.",
      "created_at": "2022-10-19T16:51:20Z",
      "updated_at": "2022-10-19T16:51:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999716370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999716370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999717042",
      "pull_request_review_id": 1147961233,
      "id": 999717042,
      "node_id": "PRRC_kwDOABII5847lniy",
      "diff_hunk": "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {\n+        const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds>(stalling_timeout * 0.85), BLOCK_STALLING_TIMEOUT_DEFAULT);\n+        if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `stalling_timeout != new_timeout` will always be true?",
      "created_at": "2022-10-19T16:52:03Z",
      "updated_at": "2022-10-19T16:52:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999717042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999717042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1738,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000371438",
      "pull_request_review_id": 1148875928,
      "id": 1000371438,
      "node_id": "PRRC_kwDOABII5847oHTu",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972000808,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or, more pythonish:\r\n\r\n```python\r\nself.wait_until(lambda: sum(e[\"bytesrecv_per_msg\"][\"block\"] for e in self.nodes[0].getpeerinfo()) == 172761)\r\n```",
      "created_at": "2022-10-20T09:16:34Z",
      "updated_at": "2022-10-20T09:16:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000371438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000371438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000606032",
      "pull_request_review_id": 1149217595,
      "id": 1000606032,
      "node_id": "PRRC_kwDOABII5847pAlQ",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 97,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \r\n```suggestion\r\n        assert_equal(self.nodes[0].num_test_p2p_connections(), 7)\r\n```",
      "created_at": "2022-10-20T13:11:14Z",
      "updated_at": "2022-10-20T13:15:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000606032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000606032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000607246",
      "pull_request_review_id": 1149217595,
      "id": 1000607246,
      "node_id": "PRRC_kwDOABII5847pA4O",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 55,
      "original_position": 57,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: even with this variable `self.nodes[0]` is used in some places below. I think it is better to use just one of them.",
      "created_at": "2022-10-20T13:12:12Z",
      "updated_at": "2022-10-20T13:15:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000607246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000607246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002179339",
      "pull_request_review_id": 1151543910,
      "id": 1002179339,
      "node_id": "PRRC_kwDOABII5847vAsL",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972000808,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, that works!\r\nWe send 1023 blocks, the formula would be `126 * 168 + 897 * 169 = 172761` (at some point the blocks get larger by 1 byte).\r\nNot super stable because `bytesrecv_per_msg` includes the extra 24 bytes magic etc. (not just the payload) - so I think the magic number would e.g. be different for BIP324 - but it's definitely better than a fixed timeout.",
      "created_at": "2022-10-21T20:53:11Z",
      "updated_at": "2022-10-21T20:53:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002179339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002179339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217383",
      "pull_request_review_id": 1151598681,
      "id": 1002217383,
      "node_id": "PRRC_kwDOABII5847vJ-n",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 97,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": 1000606032,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done everywhere",
      "created_at": "2022-10-21T22:12:50Z",
      "updated_at": "2022-10-21T22:12:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002217383",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217735",
      "pull_request_review_id": 1151599107,
      "id": 1002217735,
      "node_id": "PRRC_kwDOABII5847vKEH",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 55,
      "original_position": 57,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": 1000607246,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Used `node` everywhere.",
      "created_at": "2022-10-21T22:13:41Z",
      "updated_at": "2022-10-21T22:13:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002217735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002223585",
      "pull_request_review_id": 1151607331,
      "id": 1002223585,
      "node_id": "PRRC_kwDOABII5847vLfh",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 85,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "in_reply_to_id": 972000808,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I ended up using the less pythonish version because we also need a check that the \"block\" field exists in \"bytesrecv_per_msg\", and I find that easier to read. Added a comment for the magic number.",
      "created_at": "2022-10-21T22:29:54Z",
      "updated_at": "2022-10-21T22:29:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002223585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002223585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003725273",
      "pull_request_review_id": 1153739875,
      "id": 1003725273,
      "node_id": "PRRC_kwDOABII584706HZ",
      "diff_hunk": "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": 978397817,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, I agree that it should be impossible that `stalling_timeout` is below the default.",
      "created_at": "2022-10-24T20:17:20Z",
      "updated_at": "2022-10-24T20:17:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1003725273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003725273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003735470",
      "pull_request_review_id": 1153752881,
      "id": 1003735470,
      "node_id": "PRRC_kwDOABII584708mu",
      "diff_hunk": "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {\n+        const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds>(stalling_timeout * 0.85), BLOCK_STALLING_TIMEOUT_DEFAULT);\n+        if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "in_reply_to_id": 999717042,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree, it became unnecessary after moving the code into the `if` statement. Removed.",
      "created_at": "2022-10-24T20:26:10Z",
      "updated_at": "2022-10-24T20:26:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1003735470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003735470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1738,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004061522",
      "pull_request_review_id": 1154213835,
      "id": 1004061522,
      "node_id": "PRRC_kwDOABII58472MNS",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 33,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`self.is_stalling` is set to `True` and never changed, I guess it can be removed?",
      "created_at": "2022-10-25T06:38:25Z",
      "updated_at": "2022-10-25T08:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004061522",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004061522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004076095",
      "pull_request_review_id": 1154213835,
      "id": 1004076095,
      "node_id": "PRRC_kwDOABII58472Pw_",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 6)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 6)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 5)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()\n+\n+    def is_block_requested(self, peers, hash):\n+        for p in peers:\n+            if p.is_connected and (hash in p.getdata_requests):\n+                return True\n+        return False\n+\n+    def total_blocks_sent(self, peers):\n+        num_blocks = 0\n+        for p in peers:\n+            num_blocks += p.blocks_sent\n+        return num_blocks",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 168,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`total_blocks_sent()` is now unused, can be removed.",
      "created_at": "2022-10-25T06:57:13Z",
      "updated_at": "2022-10-25T08:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004076095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004076095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 164,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004079465",
      "pull_request_review_id": 1154213835,
      "id": 1004079465,
      "node_id": "PRRC_kwDOABII58472Qlp",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 92,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This `8` is the same as the `8` in `for id in range(8):` above (or `len(peers)`). Would be better to put it in a constant, similarly to `NUM_BLOCKS`. Also below, `7`, `6` and `5` are used which are that `8` minus `1`, `2` or `3`.",
      "created_at": "2022-10-25T07:01:28Z",
      "updated_at": "2022-10-25T08:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004079465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004079465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004152662",
      "pull_request_review_id": 1154213835,
      "id": 1004152662,
      "node_id": "PRRC_kwDOABII58472idW",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 78,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The test takes about 1 minute on my laptop. The slowest parts are:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4/test/functional/p2p_ibd_stalling.py#L78-L81\r\n\r\nand this\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4/test/functional/p2p_ibd_stalling.py#L99\r\n\r\neach one takes about 30 seconds.\r\n\r\nWhy 8 peers? We disconnect 3, so anything >=3 should be ok? I tried with 4 peers and the test passes, but I could be missing something. With 4 peers it takes about 30 seconds.",
      "created_at": "2022-10-25T08:17:30Z",
      "updated_at": "2022-10-25T08:17:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004152662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004152662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262383",
      "pull_request_review_id": 1158913003,
      "id": 1007262383,
      "node_id": "PRRC_kwDOABII5848CZqv",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 6)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 6)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 5)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()\n+\n+    def is_block_requested(self, peers, hash):\n+        for p in peers:\n+            if p.is_connected and (hash in p.getdata_requests):\n+                return True\n+        return False\n+\n+    def total_blocks_sent(self, peers):\n+        num_blocks = 0\n+        for p in peers:\n+            num_blocks += p.blocks_sent\n+        return num_blocks",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 168,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": 1004076095,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, and `blocks_sent` in `P2PStaller` as well. Done.",
      "created_at": "2022-10-27T19:08:10Z",
      "updated_at": "2022-10-27T19:08:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007262383",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": 164,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262520",
      "pull_request_review_id": 1158913226,
      "id": 1007262520,
      "node_id": "PRRC_kwDOABII5848CZs4",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 33,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": 1004061522,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2022-10-27T19:08:17Z",
      "updated_at": "2022-10-27T19:08:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007262520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007263242",
      "pull_request_review_id": 1158913927,
      "id": 1007263242,
      "node_id": "PRRC_kwDOABII5848CZ4K",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 92,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": 1004079465,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Introduced NUM_PEERS an used it.",
      "created_at": "2022-10-27T19:08:54Z",
      "updated_at": "2022-10-27T19:08:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007263242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007263242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007274866",
      "pull_request_review_id": 1158927169,
      "id": 1007274866,
      "node_id": "PRRC_kwDOABII5848Ccty",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": null,
      "original_position": 78,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "in_reply_to_id": 1004152662,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The original idea was to have a scenario similar to actual IBD with 8 full outbound peers. But it's obviously not necessary, and since it slows down the test (I didn't experience such a long runtime, for me it was like ~15 seconds) I reduced it to 4 peers.",
      "created_at": "2022-10-27T19:19:01Z",
      "updated_at": "2022-10-27T19:19:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007274866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007274866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013738635",
      "pull_request_review_id": 1168121389,
      "id": 1013738635,
      "node_id": "PRRC_kwDOABII5848bGyL",
      "diff_hunk": "@@ -5225,12 +5242,19 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        auto stalling_timeout = m_block_stalling_timeout.load();\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            const auto new_timeout = std::min(2 * stalling_timeout, BLOCK_STALLING_TIMEOUT_MAX);\n+            if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": 67,
      "original_position": 67,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "0565951f34e6d155dc825964c5d8b1dd00931682",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: why not use `new_timeout` here in logs?\r\n1. It has the same meaning, unless there was some crazy concurrency, in which case the log might not make sense anyway....\r\n2. It is shorted :)\r\n3. It is probably more efficient\r\n4. Reading the code is easier",
      "created_at": "2022-11-04T08:28:56Z",
      "updated_at": "2022-11-04T08:38:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1013738635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013738635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5256,
      "original_line": 5256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013742213",
      "pull_request_review_id": 1168121389,
      "id": 1013742213,
      "node_id": "PRRC_kwDOABII5848bHqF",
      "diff_hunk": "@@ -5225,12 +5242,19 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        auto stalling_timeout = m_block_stalling_timeout.load();\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            const auto new_timeout = std::min(2 * stalling_timeout, BLOCK_STALLING_TIMEOUT_MAX);\n+            if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": 67,
      "original_position": 67,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "0565951f34e6d155dc825964c5d8b1dd00931682",
      "in_reply_to_id": 1013738635,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "actually, you do what i suggest in the decreasing code :)",
      "created_at": "2022-11-04T08:33:20Z",
      "updated_at": "2022-11-04T08:38:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1013742213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013742213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5256,
      "original_line": 5256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067540101",
      "pull_request_review_id": 1244733611,
      "id": 1067540101,
      "node_id": "PRRC_kwDOABII584_oV6F",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure we should do this every time a block is connected. Whenever a staller got disconnected, and the missing block arrived from another peer, we may suddenly be able to connect dozens of blocks at once. Performing the timeout-reduction step here 16 times suffices to get it back from the maximum 64 to the minimum 2.\r\n\r\nI think it'd be better to drop it just once every time the download window moves, regardless of how much it moved.",
      "created_at": "2023-01-11T22:56:21Z",
      "updated_at": "2023-01-11T22:56:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1067540101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067540101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067706504",
      "pull_request_review_id": 1244968098,
      "id": 1067706504,
      "node_id": "PRRC_kwDOABII584_o-iI",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1067540101,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, thinking more about this, I don't think that's ideal either. The window will likely move many times between would-be stalls, even when the stalling timeout has adapted to be close to the \"correct\" value.\r\n\r\nWe should aim to be in a position where the stalling timeout is sort of in an equilibrium between triggering occasionally but not all the time. I think the best way to achieve that is to:\r\n* Increase it when it triggers due to being too low (reducing the probability of triggering in the future) [implemented]\r\n* Decrease it when it didn't trigger *due to being high enough*. And I think we have a way of measuring that: when the stalling detection triggers, and the stalling timer starts, but then the timeout is not reached. And by seeing how long it actually took for before the stalling state is resolved we can even do better than just applying a % drop; e.g. we could set the new timeout to (old_timeout + actual_time_used) / 2.\r\n",
      "created_at": "2023-01-12T05:13:31Z",
      "updated_at": "2023-01-12T05:13:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1067706504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067706504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069837209",
      "pull_request_review_id": 1248256552,
      "id": 1069837209,
      "node_id": "PRRC_kwDOABII584_xGuZ",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1067540101,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa Do you think that your proposed change should be implemented in this PR or can it be done in a followup? From my perspective, this PR seems to be strictly an improvement even if the stalling timeout backs off too aggressively.",
      "created_at": "2023-01-13T18:34:03Z",
      "updated_at": "2023-01-13T18:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1069837209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069837209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069848852",
      "pull_request_review_id": 1248269960,
      "id": 1069848852,
      "node_id": "PRRC_kwDOABII584_xJkU",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1067540101,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't had time to look into this feedback closely yet - but I am planning to do that next week.",
      "created_at": "2023-01-13T18:39:57Z",
      "updated_at": "2023-01-13T18:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1069848852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069848852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070902579",
      "pull_request_review_id": 1249658300,
      "id": 1070902579,
      "node_id": "PRRC_kwDOABII584_1K0z",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1067540101,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this could be a good follow-up, but anyway, here are my thoughts.\r\n\r\n>Decrease it when it didn't trigger due to being high enough.\r\n\r\nI think this is a very good abstract policy.\r\n\r\n>when the stalling detection triggers, and the stalling timer starts, but then the timeout is not reached.\r\n\r\nThis sounds more efficient at doing what it's supposed to do than what's implemented in this PR currently.\r\n\r\n>; e.g. we could set the new timeout to (old_timeout + actual_time_used) / 2.\r\n\r\nSounds like a good concrete policy, but not going lower than 2 seconds probably. One could do some math modeling, but I don't think it's that helpful:\r\n1) with random data, there is no ground truth — one would have to rely on the human sanity check of the inputs, which we already do verbally here;\r\n2) could be tested against a couple laggy nodes too, comparing between different policies, but eh.",
      "created_at": "2023-01-16T07:18:37Z",
      "updated_at": "2023-01-16T07:19:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1070902579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070902579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085845808",
      "pull_request_review_id": 1268186987,
      "id": 1085845808,
      "node_id": "PRRC_kwDOABII585AuLEw",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1067540101,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> From my perspective, this PR seems to be strictly an improvement even if the stalling timeout backs off too aggressively.\r\n\r\nI'd say that with its current approach, the PR improves behavior in isolated stalling situations where there are currently repeated disconnections of many/all of our peers without making any progress in getting blocks - but a previous stalling situation will not affect the behavior in future stalling situations because all memory of the previous stalling incident will be lost after a few blocks:\r\n\r\n@sipa's suggestion would introduce a long-lasting memory of previous stalling situations\r\n- I think that one downside of this approach is that the moving window algorithm should only lead to a stalling situation if one peer is significantly slower than the rest of the peers. We'd want to replace this first peer usually - giving it more time based on previous stalling situations is probably not beneficial, because if it was comparably fast to other peers, this would not have led to this peer being marked as a staller in the first place.\r\n- The upside is in situations where the actual time to download a block for us is significantly larger than 2 seconds - we'd churn through multiple peers / timeout doublings again in every stalling situation right now until we reach the \"correct\" timeout, but wouldn't anymore with a longer memory.\r\n\r\n> * Decrease it when it didn't trigger _due to being high enough_. And I think we have a way of measuring that: when the stalling detection triggers, and the stalling timer starts, but then the timeout is not reached. And by seeing how long it actually took for before the stalling state is resolved we can even do better than just applying a % drop; e.g. we could set the new timeout to (old_timeout + actual_time_used) / 2.\r\n\r\nI think this would mean moving to the decrease of the stalling timeout to `ProcessMessages` (`NetMsgType::BLOCK`) where `m_stalling_since` is currently reset back to 0. At this point we haven't validated the block yet or connected it to the chain, wo we'd likely would need to at least make sure that we only decrease it after receiving the actual block that allows us to extend our chain (the peer might also have been sending us another block).",
      "created_at": "2023-01-24T19:49:56Z",
      "updated_at": "2023-01-24T19:49:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1085845808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085845808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088187988",
      "pull_request_review_id": 1271553295,
      "id": 1088187988,
      "node_id": "PRRC_kwDOABII585A3G5U",
      "diff_hunk": "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "path": "src/net_processing.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1067540101,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@mzumsande I see. So the point isn't so much that you're trying to build something that tries to measure and converge towards an optimal long-term stalling timeout for your network conditions, but rather want something that deliberately gives a temporary \"cool down\" period after a stalling kick so it doesn't result in a flurry of disconnects.\r\n\r\nSo I think something like my suggestion still makes sense, but it's perhaps an orthogonal thing, and not for this PR.",
      "created_at": "2023-01-26T18:12:50Z",
      "updated_at": "2023-01-26T18:12:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1088187988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088187988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1734,
      "original_line": 1734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089217720",
      "pull_request_review_id": 1273098461,
      "id": 1089217720,
      "node_id": "PRRC_kwDOABII585A7CS4",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.stall_block = stall_block\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        NUM_PEERS = 4\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(NUM_PEERS):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 2)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 2)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 3)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 154,
      "original_position": 154,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This fails?\r\n\r\nhttps://cirrus-ci.com/task/4620776167440384?logs=ci#L2630\r\n\r\n```\r\n test  2023-01-27T16:28:47.291000Z TestFramework.p2p (DEBUG): Received message from 0:0: msg_pong(nonce=0000000f) \r\n node0 2023-01-27T16:28:47.340846Z (mocktime: 2023-01-27T16:29:01Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.347460Z (mocktime: 2023-01-27T16:29:01Z) [httpworker.0] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node0 2023-01-27T16:28:47.347940Z (mocktime: 2023-01-27T16:29:01Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.348962Z (mocktime: 2023-01-27T16:29:01Z) [httpworker.1] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=setmocktime user=__cookie__ \r\n node0 2023-01-27T16:28:47.349250Z (mocktime: 2023-01-27T16:29:03Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.349271Z (mocktime: 2023-01-27T16:29:03Z) [httpworker.2] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node0 2023-01-27T16:28:47.393691Z (mocktime: 2023-01-27T16:29:03Z) [msghand] [net_processing.cpp:5738] [SendMessages] Peer=1 is stalling block download, disconnecting \r\n node0 2023-01-27T16:28:47.398607Z (mocktime: 2023-01-27T16:29:03Z) [msghand] [net_processing.cpp:5744] [SendMessages] [net] Increased stalling timeout temporarily to 16 seconds \r\n node0 2023-01-27T16:28:47.406186Z (mocktime: 2023-01-27T16:29:03Z) [net] [net.cpp:573] [CloseSocketDisconnect] [net] disconnecting peer=1 \r\n test  2023-01-27T16:28:47.414000Z TestFramework.p2p (DEBUG): Send message to 0:0: msg_ping(nonce=00000010) \r\n test  2023-01-27T16:28:47.414000Z TestFramework.p2p (DEBUG): Closed connection to: 0:0 \r\n node0 2023-01-27T16:28:47.414007Z (mocktime: 2023-01-27T16:29:03Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.414037Z (mocktime: 2023-01-27T16:29:03Z) [httpworker.3] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node0 2023-01-27T16:28:47.414073Z (mocktime: 2023-01-27T16:29:03Z) [net] [net_processing.cpp:1541] [FinalizeNode] [net] Cleared nodestate for peer=1 \r\n test  2023-01-27T16:28:47.474000Z TestFramework (ERROR): Assertion failed \r\n                                   Traceback (most recent call last):\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/test_framework.py\", line 134, in main\r\n                                       self.run_test()\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/p2p_ibd_stalling.py\", line 133, in run_test\r\n                                       self.all_sync_send_with_ping(peers)\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/p2p_ibd_stalling.py\", line 154, in all_sync_send_with_ping\r\n                                       p.sync_send_with_ping()\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 560, in sync_send_with_ping\r\n                                       self.sync_with_ping()\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 570, in sync_with_ping\r\n                                       self.wait_until(test_function, timeout=timeout)\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 463, in wait_until\r\n                                       wait_until_helper(test_function, timeout=timeout, lock=p2p_lock, timeout_factor=self.timeout_factor)\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/util.py\", line 267, in wait_until_helper\r\n                                       if predicate():\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 460, in test_function\r\n                                       assert self.is_connected\r\n                                   AssertionError\r\n test  2023-01-27T16:28:47.489000Z TestFramework (DEBUG): Closing down network thread ",
      "created_at": "2023-01-27T17:13:32Z",
      "updated_at": "2023-01-27T17:13:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089217720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089217720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089306637",
      "pull_request_review_id": 1273272687,
      "id": 1089306637,
      "node_id": "PRRC_kwDOABII585A7YAN",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.stall_block = stall_block\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        NUM_PEERS = 4\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(NUM_PEERS):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 2)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 2)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 3)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 154,
      "original_position": 154,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1089217720,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "looks  like the p2p instance has been disconnected by bitcoind, but python hasn't received the callback yet, so it attempts to send a ping in between these events. I think counting the nodes with `is_connected` instead of using `num_test_p2p_connections()` will fix this. I'll open a PR.\r\n",
      "created_at": "2023-01-27T18:50:36Z",
      "updated_at": "2023-01-27T19:39:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089306637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089306637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089422186",
      "pull_request_review_id": 1273462436,
      "id": 1089422186,
      "node_id": "PRRC_kwDOABII585A70Nq",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.stall_block = stall_block\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        NUM_PEERS = 4\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(NUM_PEERS):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 2)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 2)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 3)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()",
      "path": "test/functional/p2p_ibd_stalling.py",
      "position": 154,
      "original_position": 154,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "in_reply_to_id": 1089217720,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed in #26982",
      "created_at": "2023-01-27T20:55:21Z",
      "updated_at": "2023-01-27T20:55:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089422186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089422186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089423032",
      "pull_request_review_id": 1273464206,
      "id": 1089423032,
      "node_id": "PRRC_kwDOABII585A70a4",
      "diff_hunk": "@@ -5225,12 +5242,19 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        auto stalling_timeout = m_block_stalling_timeout.load();\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            const auto new_timeout = std::min(2 * stalling_timeout, BLOCK_STALLING_TIMEOUT_MAX);\n+            if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "path": "src/net_processing.cpp",
      "position": 67,
      "original_position": 67,
      "commit_id": "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_commit_id": "0565951f34e6d155dc825964c5d8b1dd00931682",
      "in_reply_to_id": 1013738635,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I somehow missed this, sorry, but added it to #26982.",
      "created_at": "2023-01-27T20:56:15Z",
      "updated_at": "2023-01-27T20:56:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089423032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089423032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5256,
      "original_line": 5256,
      "side": "RIGHT"
    }
  ]
}