{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602",
    "id": 457382334,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDU3MzgyMzM0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19602",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19602.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19602.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/53e7ed075c49f853cc845afc7b2f058cabad0cb0",
    "number": 19602,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "wallet: Migrate legacy wallets to descriptor wallets",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR adds a new `migratewallet` RPC which migrates a legacy wallet to a descriptor wallet. Migrated wallets will need a new backup. If a wallet has watchonly stuff in it, a new watchonly descriptor wallet will be created containing those watchonly things. The related transactions, labels, and descriptors for those watchonly things will be removed from the original wallet. Migrated wallets will not have any of the legacy things be available for fetching from `getnewaddress` or `getrawchangeaddress`. Wallets that have private keys enabled will have newly generated descriptors. Wallets with private keys disabled will not have any active `ScriptPubKeyMan`s.\r\n\r\nFor the basic HD wallet case of just generated keys, in addition to the standard descriptor wallet descriptors using the master key derived from the pre-existing hd seed, the migration will also create 3 descriptors for each HD chain in: a ranged combo external, a ranged combo internal, and a single key combo for the seed (the seed is a valid key that we can receive coins at!). The migrated wallet will then have newly generated descriptors as the active `ScriptPubKeyMan`s. This is equivalent to creating a new descriptor wallet and importing the 3 descriptors for each HD chain. For wallets containing non-HD keys, each key will have its own combo descriptor.\r\n\r\nThere are also tests.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
      "id": 7150037,
      "node_id": "MI_kwDOABII584AbRnV",
      "number": 54,
      "state": "closed",
      "title": "24.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 159,
      "created_at": "2021-09-14T08:27:02Z",
      "updated_at": "2022-11-29T15:44:44Z",
      "closed_at": "2022-11-29T15:44:44Z"
    },
    "created_at": "2020-07-27T20:22:25Z",
    "updated_at": "2023-03-13T22:00:30Z",
    "closed_at": "2022-09-01T19:44:11Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-09-01T19:44:11Z",
    "merge_commit_sha": "7921026a24594765f603d14ef87ff4e4541d2b76",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:descriptor-wallet-migration",
      "ref": "descriptor-wallet-migration",
      "sha": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 34,
        "watchers_count": 34,
        "size": 238743,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T17:43:24Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-05-16T00:18:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e191fac4f3c37820f0618f72f0a8e8b524531ab8",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1458,
    "deletions": 34,
    "changed_files": 15,
    "commits": 11,
    "review_comments": 125,
    "comments": 50
  },
  "events": [
    {
      "event": "labeled",
      "id": 3591709531,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTE3MDk1MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3591709531",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T21:25:35Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 3591709532,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTE3MDk1MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3591709532",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T21:25:35Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "labeled",
      "id": 3591709533,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTE3MDk1MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3591709533",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T21:25:35Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3591709534,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTE3MDk1MzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3591709534",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T21:25:35Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 3591709536,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTE3MDk1MzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3591709536",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T21:25:35Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "labeled",
      "id": 3591709537,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTE3MDk1Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3591709537",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T21:25:35Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 664688852,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY4ODg1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664688852",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T23:26:05Z",
      "updated_at": "2022-09-01T06:32:39Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25957](https://github.com/bitcoin/bitcoin/pull/25957) (wallet: fast rescan with BIP157 block filters for descriptor wallets by theStack)\n* [#25907](https://github.com/bitcoin/bitcoin/pull/25907) (wallet: rpc to add automatically generated descriptors by achow101)\n* [#25297](https://github.com/bitcoin/bitcoin/pull/25297) (wallet: group independent db writes on single batched db transaction by furszy)\n* [#23417](https://github.com/bitcoin/bitcoin/pull/23417) (wallet, spkm: Move key management from DescriptorScriptPubKeyMan to wallet level KeyManager by achow101)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n* [#22341](https://github.com/bitcoin/bitcoin/pull/22341) (rpc: add getxpub by Sjors)\n* [#20205](https://github.com/bitcoin/bitcoin/pull/20205) (wallet: Properly support a wallet id by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-664688852",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 665595010,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTU5NTAxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665595010",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T10:55:14Z",
      "updated_at": "2020-07-29T10:55:14Z",
      "author_association": "MEMBER",
      "body": "@achow101 \r\nIt seems this PR has [problems](https://travis-ci.org/github/bitcoin/bitcoin/jobs/712335127) with linters.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-665595010",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "mentioned",
      "id": 3598480307,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU5ODQ4MDMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3598480307",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T10:55:14Z"
    },
    {
      "event": "subscribed",
      "id": 3598480310,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1OTg0ODAzMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3598480310",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T10:55:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3599782651,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU5OTc4MjY1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3599782651",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T16:09:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3600006476,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYwMDAwNjQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3600006476",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T17:05:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3600375198,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYwMDM3NTE5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3600375198",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T18:48:09Z"
    },
    {
      "event": "commented",
      "id": 666848115,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2Njg0ODExNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666848115",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T00:53:06Z",
      "updated_at": "2020-07-31T00:53:06Z",
      "author_association": "MEMBER",
      "body": "Why doesn't this extend `upgradewallet`?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-666848115",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 667273357,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzI3MzM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667273357",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T18:13:33Z",
      "updated_at": "2020-07-31T18:13:33Z",
      "author_association": "MEMBER",
      "body": "> Why doesn't this extend `upgradewallet`?\r\n\r\nIt didn't feel like it fit `upgradewallet` as I see that more for changing the wallet version number and using legacy wallet features. But this is changing a legacy wallet to something completely new.\r\n\r\nThis is also pretty invasive and fundamentally changes how the wallet is working, so I wanted to keep it separate from something that people might still want to use on legacy wallets.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-667273357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3617962861,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYxNzk2Mjg2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3617962861",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-03T23:46:54Z"
    },
    {
      "event": "commented",
      "id": 673029431,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzAyOTQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673029431",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-12T18:09:29Z",
      "updated_at": "2020-08-12T18:09:29Z",
      "author_association": "MEMBER",
      "body": "I think we should only add this functionality after `sqlite` wallets? Otherwise you'd keep migrating.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-673029431",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 673044201,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzA0NDIwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673044201",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-12T18:41:46Z",
      "updated_at": "2020-08-12T18:41:46Z",
      "author_association": "MEMBER",
      "body": "> I think we should only add this functionality after `sqlite` wallets? Otherwise you'd keep migrating.\r\n\r\nI think there's a question of whether we want to keep sqlite separate from descriptors. We might want to allow legacy wallets to migrate to sqlite without migrating to descriptors since they are orthogonal.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-673044201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 467528506,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NTI4NTA2",
      "url": null,
      "actor": null,
      "commit_id": "97e34cd88de254a0041d825b155cd98b6bcb1892",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Left a style-nit. Feel free to ignore.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-467528506",
      "submitted_at": "2020-08-14T12:17:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 674458755,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDQ1ODc1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674458755",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T23:49:41Z",
      "updated_at": "2020-08-15T23:49:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Do you know what the performance of a wallet would be like, in the case of a non-HD wallet being migrated? ",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-674458755",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 674479714,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDQ3OTcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674479714",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-16T05:05:00Z",
      "updated_at": "2020-08-16T05:05:00Z",
      "author_association": "MEMBER",
      "body": "> Do you know what the performance of a wallet would be like, in the case of a non-HD wallet being migrated?\r\n\r\nProbably worse.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-674479714",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 674634247,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDYzNDI0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674634247",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T03:19:02Z",
      "updated_at": "2020-08-17T03:19:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Probably worse.\r\n\r\nAlmost certainly, that's why I'm asking :) It would be nice to know how much worse it would be",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-674634247",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "unlabeled",
      "id": 3682646166,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY4MjY0NjE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3682646166",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-23T08:42:09Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 3710706242,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3MTA3MDYyNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3710706242",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T16:39:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 683946104,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4Mzk0NjEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683946104",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T18:18:39Z",
      "updated_at": "2020-08-31T18:18:39Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, but I prefer this to be in the wallet tool.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-683946104",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3711986145,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxMTk4NjE0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3711986145",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T22:56:56Z"
    },
    {
      "event": "commented",
      "id": 684085595,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDA4NTU5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684085595",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T22:58:08Z",
      "updated_at": "2020-08-31T22:58:08Z",
      "author_association": "MEMBER",
      "body": "> but I prefer this to be in the wallet tool.\r\n\r\nI would prefer this to be accessible to most users so that more people can move to using descriptor wallets. For most wallets, this should be painless and not result in a horribly bloated wallet.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-684085595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "unlabeled",
      "id": 3712300696,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzcxMjMwMDY5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3712300696",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T00:59:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 684805617,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDgwNTYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684805617",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T12:09:20Z",
      "updated_at": "2020-09-01T12:09:20Z",
      "author_association": "MEMBER",
      "body": "The wallet tool is just as available as the RPC. We can print the necessary incantation in the help if needed. It does make sense to have an upgrade button in the GUI though.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-684805617",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 684968120,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDk2ODEyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684968120",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T16:10:53Z",
      "updated_at": "2020-09-01T16:10:53Z",
      "author_association": "MEMBER",
      "body": "> The wallet tool is just as available as the RPC.\r\n\r\nNot really. The RPC has a dedicated window within the GUI. The wallet tool requires actually using a terminal.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-684968120",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 685075629,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTA3NTYyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685075629",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T19:09:50Z",
      "updated_at": "2020-10-01T19:39:59Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, a few quick thoughts before reviewing:\r\n- debug build clean and local tests green\r\n- the help in `bitcoin-cli help migratewallet` is pretty sparse? -- could benefit from a lot more helpful info to explain what/why/how to users, de-risk wallet migrations a bit and encourage users to move to descriptor wallets\r\n- agree with @meshcollider that performance info would be good here in the PR and in the doc (`descriptors.md` or a new one?) and/or rpc help \r\n- test is missing logging\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-685075629",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "mentioned",
      "id": 3716431923,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzcxNjQzMTkyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3716431923",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T19:09:51Z"
    },
    {
      "event": "subscribed",
      "id": 3716431929,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3MTY0MzE5Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3716431929",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T19:09:51Z"
    },
    {
      "event": "commented",
      "id": 692179872,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjE3OTg3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692179872",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-14T16:48:41Z",
      "updated_at": "2020-09-14T16:48:41Z",
      "author_association": "MEMBER",
      "body": "Hmm, I think the scriptPubKey set we are generating here is incorrect. I'm going to work on a slightly separate thing for LegacyScriptPubKeyMan that ensures we have the correct scriptPubKey set.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-692179872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3765549810,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc2NTU0OTgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3765549810",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-14T22:19:48Z"
    },
    {
      "event": "commented",
      "id": 692344229,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjM0NDIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692344229",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-14T22:20:38Z",
      "updated_at": "2020-09-14T22:20:38Z",
      "author_association": "MEMBER",
      "body": "Fixed the IsMine issue and added some tests for that. Also rebased onto master as there was a hidden merge conflict.\r\n\r\n>     * the help in `bitcoin-cli help migratewallet` is pretty sparse? -- could benefit from a lot more helpful info to explain what/why/how to users, de-risk wallet migrations a bit and encourage users to move to descriptor wallets\r\n\r\nAny suggestions?\r\n\r\n>     * agree with @meshcollider that performance info would be good here in the PR and in the doc (`descriptors.md` or a new one?) and/or rpc help\r\n\r\nI'll do that eventually. After I figure out how.\r\n\r\n>     * test is missing logging\r\n\r\nAdded some logging\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-692344229",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3826448958,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgyNjQ0ODk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3826448958",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T21:04:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3830585886,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzMDU4NTg4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3830585886",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T17:13:07Z"
    },
    {
      "event": "commented",
      "id": 702356461,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjM1NjQ2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702356461",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T19:41:41Z",
      "updated_at": "2020-10-01T19:41:41Z",
      "author_association": "MEMBER",
      "body": "Thanks @achow101, I need to review and test this.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-702356461",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "mentioned",
      "id": 3831157682,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgzMTE1NzY4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831157682",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T19:41:41Z"
    },
    {
      "event": "subscribed",
      "id": 3831157685,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MzExNTc2ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831157685",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T19:41:41Z"
    },
    {
      "event": "labeled",
      "id": 3880936404,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4ODA5MzY0MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3880936404",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T11:09:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3890492557,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg5MDQ5MjU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890492557",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T18:06:56Z"
    },
    {
      "event": "unlabeled",
      "id": 3890508889,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg5MDUwODg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890508889",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T18:24:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3916276579,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkxNjI3NjU3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3916276579",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-24T03:22:27Z"
    },
    {
      "event": "labeled",
      "id": 3974130913,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM5NzQxMzA5MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3974130913",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-09T14:47:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3974893182,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk3NDg5MzE4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3974893182",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-09T17:17:21Z"
    },
    {
      "event": "unlabeled",
      "id": 3975320307,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzk3NTMyMDMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3975320307",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-09T19:00:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 526774342,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2Nzc0MzQy",
      "url": null,
      "actor": null,
      "commit_id": "208c296a5770d6a343226f59330daff5feca66a9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-526774342",
      "submitted_at": "2020-11-10T01:02:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3976480738,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk3NjQ4MDczOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3976480738",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-10T01:05:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3980444196,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk4MDQ0NDE5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980444196",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-10T18:52:17Z"
    },
    {
      "event": "referenced",
      "id": 4199837330,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxOTk4MzczMzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4199837330",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8ffaf5c2f5aaa31c6ee6075689c5dbb89a7d16c6",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ffaf5c2f5aaa31c6ee6075689c5dbb89a7d16c6",
      "created_at": "2021-01-13T07:50:19Z"
    },
    {
      "event": "referenced",
      "id": 4202008718,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMDIwMDg3MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4202008718",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6a595aaab65cff2a6833e34b9c8faae508c18cc3",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6a595aaab65cff2a6833e34b9c8faae508c18cc3",
      "created_at": "2021-01-13T16:07:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4202380205,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIwMjM4MDIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4202380205",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T17:26:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4202854952,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIwMjg1NDk1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4202854952",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T19:26:00Z"
    },
    {
      "event": "unlabeled",
      "id": 4204854759,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIwNDg1NDc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204854759",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T07:50:06Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 4204854760,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIwNDg1NDc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204854760",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T07:50:06Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "unlabeled",
      "id": 4204854762,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIwNDg1NDc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204854762",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T07:50:06Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 4204854763,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIwNDg1NDc2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204854763",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T07:50:06Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "unlabeled",
      "id": 4204854764,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIwNDg1NDc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204854764",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T07:50:06Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 4204924297,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyMDQ5MjQyOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204924297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T08:07:55Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 4204924300,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyMDQ5MjQzMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4204924300",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T08:07:55Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "referenced",
      "id": 4229738968,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMjk3Mzg5Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4229738968",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6c60aa4ae417fa9512514970a8a9d16e0c5d5353",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6c60aa4ae417fa9512514970a8a9d16e0c5d5353",
      "created_at": "2021-01-20T20:07:23Z"
    },
    {
      "event": "labeled",
      "id": 4262661324,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyNjI2NjEzMjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4262661324",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T18:59:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4263269911,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2MzI2OTkxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4263269911",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:19:48Z"
    },
    {
      "event": "unlabeled",
      "id": 4263350676,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDI2MzM1MDY3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4263350676",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:40:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4345881672,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzNDU4ODE2NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4345881672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T10:06:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 593169597,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMTY5NTk3",
      "url": null,
      "actor": null,
      "commit_id": "1452840f940d2c6b106efd8a9cc96c35afe98b6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-593169597",
      "submitted_at": "2021-02-18T12:40:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4348180324,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM0ODE4MDMyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4348180324",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T17:59:26Z"
    },
    {
      "event": "unlabeled",
      "id": 4348291992,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDM0ODI5MTk5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4348291992",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T18:25:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4586487417,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ1ODY0ODc0MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4586487417",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T08:05:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4590103011,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDU5MDEwMzAxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4590103011",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T20:21:14Z"
    },
    {
      "event": "unlabeled",
      "id": 4590177834,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDU5MDE3NzgzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4590177834",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T20:40:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4934908119,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ5MzQ5MDgxMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4934908119",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-24T14:18:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4936183411,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkzNjE4MzQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4936183411",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-24T18:21:52Z"
    },
    {
      "event": "unlabeled",
      "id": 4936207781,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDkzNjIwNzc4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4936207781",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-24T18:27:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4963029223,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ5NjMwMjkyMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4963029223",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-01T02:23:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4967351294,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk2NzM1MTI5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4967351294",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-01T17:33:01Z"
    },
    {
      "event": "unlabeled",
      "id": 4967786372,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDk2Nzc4NjM3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4967786372",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-01T19:14:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 5127549226,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDUxMjc1NDkyMjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5127549226",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T04:02:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5171421040,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE3MTQyMTA0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5171421040",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T21:40:00Z"
    },
    {
      "event": "unlabeled",
      "id": 5171485705,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NTE3MTQ4NTcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5171485705",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T22:00:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 5264403918,
      "node_id": "LE_lADOABII584nuulHzwAAAAE5yG3O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5264403918",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-07T09:01:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5267043945,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAE58LZp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5267043945",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-07T17:03:21Z"
    },
    {
      "event": "unlabeled",
      "id": 5267124473,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAE58fD5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5267124473",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-07T17:21:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "milestoned",
      "id": 5278280976,
      "node_id": "MIE_lADOABII584nuulHzwAAAAE6nC0Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5278280976",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-09T12:47:02Z",
      "milestone": {
        "title": "23.0"
      }
    },
    {
      "event": "commented",
      "id": 916061137,
      "node_id": "IC_kwDOABII5842mfvR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916061137",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-09T12:49:22Z",
      "updated_at": "2021-09-09T12:49:22Z",
      "author_association": "MEMBER",
      "body": "Adding to the 23.0 milestone, I think it would be good to have optional migration in as soon as possible.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-916061137",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5281537965,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAE6zd-t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5281537965",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-09T23:24:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5281585894,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAE6zprm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5281585894",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-09T23:45:02Z"
    },
    {
      "event": "commented",
      "id": 916530840,
      "node_id": "IC_kwDOABII5842oSaY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916530840",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-10T00:21:26Z",
      "updated_at": "2021-09-10T00:21:26Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-916530840",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5281811486,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAE60gwe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5281811486",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-10T01:02:46Z"
    },
    {
      "event": "commented",
      "id": 927286673,
      "node_id": "IC_kwDOABII5843RUWR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927286673",
      "actor": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-26T11:12:28Z",
      "updated_at": "2021-09-26T11:12:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "What's the minimum wallet version this tool will support?\r\n",
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-927286673",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 928369685,
      "node_id": "IC_kwDOABII5843VcwV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928369685",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-27T22:29:17Z",
      "updated_at": "2021-09-27T22:29:17Z",
      "author_association": "MEMBER",
      "body": "> What's the minimum wallet version this tool will support?\r\n\r\nThe minimum that can be opened currently.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-928369685",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "labeled",
      "id": 5402721371,
      "node_id": "LE_lADOABII584nuulHzwAAAAFCBvxb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5402721371",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T09:51:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5405453409,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFCMKxh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5405453409",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T17:08:18Z"
    },
    {
      "event": "unlabeled",
      "id": 5405824040,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAFCNlQo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5405824040",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T18:16:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5407264627,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFCTE9z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5407264627",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T23:51:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5407532450,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFCUGWi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5407532450",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T01:23:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5407585226,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFCUTPK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5407585226",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T01:43:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5407772417,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFCVA8B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5407772417",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T02:54:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5436526248,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFECs6o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5436526248",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-08T19:32:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5467178667,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFF3oar",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5467178667",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T01:20:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5471155605,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFGGzWV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5471155605",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T17:39:12Z"
    },
    {
      "event": "commented",
      "id": 964526359,
      "node_id": "IC_kwDOABII5845fYEX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964526359",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T20:42:44Z",
      "updated_at": "2021-11-09T20:42:44Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-964526359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5592652749,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFNWRvN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592652749",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T20:42:54Z"
    },
    {
      "event": "commented",
      "id": 977180488,
      "node_id": "IC_kwDOABII5846PpdI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/977180488",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-23T21:22:59Z",
      "updated_at": "2021-11-23T21:23:10Z",
      "author_association": "MEMBER",
      "body": "> and a single key combo for the seed (the seed is a valid key that we can receive coins at!)\r\n\r\n🤦\r\n\r\nNice catch.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-977180488",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 825701730,
      "node_id": "PRR_kwDOABII584xNzVi",
      "url": null,
      "actor": null,
      "commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some nits/questions",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-825701730",
      "submitted_at": "2021-12-07T19:42:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5729806990,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFVheqO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5729806990",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:15:29Z"
    },
    {
      "event": "reviewed",
      "id": 825736447,
      "node_id": "PRR_kwDOABII584xN7z_",
      "url": null,
      "actor": null,
      "commit_id": "86e1ff3e7a053e6551f8d49db7bdc990ea0f52d6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-825736447",
      "submitted_at": "2021-12-07T20:18:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5730022208,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFViTNA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5730022208",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T21:10:20Z"
    },
    {
      "event": "labeled",
      "id": 5731553639,
      "node_id": "LE_lADOABII584nuulHzwAAAAFVoJFn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5731553639",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T05:23:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5734278909,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFVyib9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5734278909",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T14:38:37Z"
    },
    {
      "event": "unlabeled",
      "id": 5734821602,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAFV0m7i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5734821602",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T16:00:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 5872098025,
      "node_id": "LE_lADOABII584nuulHzwAAAAFeARrp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5872098025",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T10:38:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5875680837,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFeN8ZF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5875680837",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T19:05:48Z"
    },
    {
      "event": "unlabeled",
      "id": 5875737457,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAFeOKNx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5875737457",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T19:17:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5876070303,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFePbef",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5876070303",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T20:25:51Z"
    },
    {
      "event": "reviewed",
      "id": 850107034,
      "node_id": "PRR_kwDOABII584yq5qa",
      "url": null,
      "actor": null,
      "commit_id": "f07785d39bafc0580e70f4b2493abe6450a727dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-850107034",
      "submitted_at": "2022-01-12T08:26:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5889456229,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFfCfhl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5889456229",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-13T18:05:39Z"
    },
    {
      "event": "labeled",
      "id": 5951623922,
      "node_id": "LE_lADOABII584nuulHzwAAAAFivpLy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5951623922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T17:30:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5951954048,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFiw5yA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5951954048",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T18:23:04Z"
    },
    {
      "event": "unlabeled",
      "id": 5952357017,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAFiycKZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5952357017",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T19:37:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "demilestoned",
      "id": 6045008345,
      "node_id": "DEME_lADOABII584nuulHzwAAAAFoT4HZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6045008345",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T19:06:04Z",
      "milestone": {
        "title": "23.0"
      }
    },
    {
      "event": "milestoned",
      "id": 6045008349,
      "node_id": "MIE_lADOABII584nuulHzwAAAAFoT4Hd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6045008349",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T19:06:04Z",
      "milestone": {
        "title": "24.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6179027500,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAFwTHos",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6179027500",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-03T15:34:31Z"
    },
    {
      "event": "reviewed",
      "id": 904775528,
      "node_id": "PRR_kwDOABII58417cdo",
      "url": null,
      "actor": null,
      "commit_id": "df1dca43c277704d3959253037cba651ba2c0b46",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Went through this for the bitcoin pr review club",
      "user": {
        "login": "amovfx",
        "id": 45839100,
        "node_id": "MDQ6VXNlcjQ1ODM5MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/45839100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amovfx",
        "html_url": "https://github.com/amovfx",
        "followers_url": "https://api.github.com/users/amovfx/followers",
        "following_url": "https://api.github.com/users/amovfx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amovfx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amovfx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amovfx/subscriptions",
        "organizations_url": "https://api.github.com/users/amovfx/orgs",
        "repos_url": "https://api.github.com/users/amovfx/repos",
        "events_url": "https://api.github.com/users/amovfx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amovfx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-904775528",
      "submitted_at": "2022-03-09T18:06:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 1063214769,
      "node_id": "IC_kwDOABII584_X16x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063214769",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T18:11:02Z",
      "updated_at": "2022-03-09T18:14:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, Approach ACK. \r\n\r\nDefinitely need a migration tool from legacy and/or BDB to descriptor and sqlite. I haven't tested yet but the instructions I intend to follow are:\r\n\r\n- Create signet legacy-bdb wallet\r\n- Generate multiple signet addresses\r\n- Send funds to a particular signet address\r\n- Use the migratewallet RPC in this PR\r\n- Check the funds are now stored at the equivalent descriptor, the other generated descriptor equivalents are there too (the migration generally worked fine)",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1063214769",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "labeled",
      "id": 6499340387,
      "node_id": "LE_lADOABII584nuulHzwAAAAGDZBBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6499340387",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T14:24:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6501546610,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGDhbpy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6501546610",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T19:43:33Z"
    },
    {
      "event": "unlabeled",
      "id": 6501923272,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAGDi3nI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6501923272",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T20:50:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 6977573842,
      "node_id": "LE_lADOABII584nuulHzwAAAAGf5VPS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6977573842",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-12T13:17:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6981807986,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGgJe9y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6981807986",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T00:11:46Z"
    },
    {
      "event": "unlabeled",
      "id": 6982143961,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAGgKw_Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6982143961",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T01:49:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7136147689,
      "node_id": "LE_lADOABII584nuulHzwAAAAGpWPjp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7136147689",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T13:57:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7137786102,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGpcfj2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7137786102",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T18:22:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7148694458,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGqGGu6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7148694458",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T16:45:17Z"
    },
    {
      "event": "unlabeled",
      "id": 7148926484,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAGqG_YU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7148926484",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T17:20:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1211090035,
      "node_id": "IC_kwDOABII585IL8Rz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211090035",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T18:22:02Z",
      "updated_at": "2022-08-10T18:27:53Z",
      "author_association": "MEMBER",
      "body": "I'm tempted to suggest that we shouldn't touch the original wallet, especially with the way this handles watch-only addresses. Maybe it's better to create two new wallets (if there's any watch-only address), copy the relevant transactions over and then unload the original wallet. Perhaps we can even add a flag to the original wallet to disable new address generation?\r\n\r\nAlso, although we should still recommend a backup, if the user doesn't, it would be much safer if we just reuse the original seed instead generating a new one. Worst case they would find their old backup, upgrade it again, rescan the chain and find all their transactions.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211090035",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1211100280,
      "node_id": "IC_kwDOABII585IL-x4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211100280",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T18:31:09Z",
      "updated_at": "2022-08-10T18:31:09Z",
      "author_association": "MEMBER",
      "body": "> I'm tempted to suggest that we shouldn't touch the original wallet, especially with the way this handles watch-only addresses. Maybe it's better to create two new wallets (if there's any watch-only address), copy the relevant transactions over and then unload the original wallet. Perhaps we can even add a flag to the original wallet to disable new address generation?\r\n\r\nI think it might be confusing to have the original wallet under the original name, and then the migrated wallets with new names. Particularly if users have specified their wallet(s) in the bitcoin.conf file, as then the original would still always be opened. I suppose with settings.json we can at least ensure that the migrated ones are also always opened.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211100280",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1211120126,
      "node_id": "IC_kwDOABII585IMDn-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211120126",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T18:46:01Z",
      "updated_at": "2022-08-10T18:46:01Z",
      "author_association": "MEMBER",
      "body": "Maybe rename the old one to `…-archive-DATE`?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211120126",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1211121714,
      "node_id": "IC_kwDOABII585IMEAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211121714",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T18:47:13Z",
      "updated_at": "2022-08-10T18:47:13Z",
      "author_association": "MEMBER",
      "body": "> Maybe rename the old one to `…-archive-DATE`?\r\n\r\nWe already make a backup of it of the form `name-timestamp.legacy.bak`",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211121714",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1211131098,
      "node_id": "IC_kwDOABII585IMGTa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211131098",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T18:55:24Z",
      "updated_at": "2022-08-10T18:56:46Z",
      "author_association": "MEMBER",
      "body": "True. I suppose the upgrade is only potentially confusing for users with a mix of spendable and watch-only addresses. So perhaps there could be two seperate flows:\r\n1. Spendable OR watch-only wallets: as implemented\r\n2. Mixed wallet: keep the .legacy.bak wallet open and loaded, create the two wallets as you do now, but move the transactions to the correct wallet. Have a popup explain the split, and tell user they can should close .legacy.bak wallet when done.\r\n\r\nIn this case my suggestion to add a flag to prevent new address generation wouldn't work, because we probably shouldn't touch the backup at all. (we could have a convention of disabling the button for .bak files or something, but meh). Using the same master seed in the new wallet should work though?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211131098",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1211149092,
      "node_id": "IC_kwDOABII585IMKsk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211149092",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:12:30Z",
      "updated_at": "2022-08-10T19:12:30Z",
      "author_association": "MEMBER",
      "body": "> 2. Mixed wallet: keep the .legacy.bak wallet open and loaded,\r\n\r\nI don't think it's necessary to open the backup and then require the user to close it.\r\n\r\n> Using the same master seed in the new wallet should work though?\r\n\r\nThat can be done.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211149092",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166783388,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGrLG-c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7166783388",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:51:47Z"
    },
    {
      "event": "commented",
      "id": 1211681660,
      "node_id": "IC_kwDOABII585IOMt8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211681660",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T08:16:34Z",
      "updated_at": "2022-08-11T08:16:34Z",
      "author_association": "MEMBER",
      "body": "> I don't think it's necessary to open the backup and then require the user to close it.\r\n\r\nAnother idea could be to refuse the migration if the wallet contains a combination of private key and watch-only stuff. Or to require that user specifies what the behaviour should be (keeping them in the same wallet or moving them to a fresh watch-only wallet).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1211681660",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1212128820,
      "node_id": "IC_kwDOABII585IP540",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1212128820",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T15:13:44Z",
      "updated_at": "2022-08-11T15:13:44Z",
      "author_association": "MEMBER",
      "body": "> Another idea could be to refuse the migration if the wallet contains a combination of private key and watch-only stuff. Or to require that user specifies what the behaviour should be (keeping them in the same wallet or moving them to a fresh watch-only wallet).\r\n\r\nI think anything that prevents the user from migrating or requires the user to make decisions or jump through hoops to do the migration is just going to result in people not migrating their wallets. We need people to migrate their wallets, and for the process to go as smoothly as possible, so that we can get rid of the legacy wallet.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1212128820",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7174423333,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGroQMl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7174423333",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T19:35:55Z"
    },
    {
      "event": "commented",
      "id": 1212430160,
      "node_id": "IC_kwDOABII585IRDdQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1212430160",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T19:59:44Z",
      "updated_at": "2022-08-11T19:59:44Z",
      "author_association": "MEMBER",
      "body": "I've added an experimental warning on the RPC and some release notes describing what migratewallet will do and some additional warnings and instructions for users.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1212430160",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 1070374412,
      "node_id": "PRR_kwDOABII584_zJ4M",
      "url": null,
      "actor": null,
      "commit_id": "b52bcac9a0bc6d2634a1eb1da29e1b605ced59ff",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1070374412",
      "submitted_at": "2022-08-11T21:14:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7175340977,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGrrwOx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7175340977",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T22:26:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7175357389,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGrr0PN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7175357389",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T22:30:50Z"
    },
    {
      "event": "reviewed",
      "id": 1071019599,
      "node_id": "PRR_kwDOABII584_1nZP",
      "url": null,
      "actor": null,
      "commit_id": "7e33a54d6fe86cff49ad6959e1998a0cf8158975",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "had an issue during migration (unknown cause..) and half of the info got removed from disk while the other half remained there.\r\n\r\nnow every time that I start the wallet, I get \"seed not found\" which means that the key got removed but the hd chain seed id not.\r\n\r\nSo, left a comment to solve the non-recoverable state at least. We should either remove all the records in a single atomic write or not remove them at all and fail.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1071019599",
      "submitted_at": "2022-08-12T12:41:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7180093888,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGr94nA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7180093888",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T15:38:12Z"
    },
    {
      "event": "reviewed",
      "id": 1072659073,
      "node_id": "PRR_kwDOABII584_73qB",
      "url": null,
      "actor": null,
      "commit_id": "910e7396b3d1c11619067901babe44a48d7f7a64",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The PR description doesn't seems to be accurate to the current sources. It says:\r\n\r\n> For the basic HD wallet case of just generated keys, the migration will create 3 descriptors for each HD chain: a ranged combo external, a ranged combo internal, and a single key combo for the seed (the seed is a valid key that we can receive coins at!)\r\n\r\nAnd, for the basic case of an HD wallet, we are actually creating 11 descriptors on the migration process:\r\n\r\n* BIP32 descriptors; form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\r\n* BIP44 descriptors; \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\r\n* BIP49 descriptors, P2SH(P2WPKH);  form of \"49'/1'/0'/0/*\" and \"49'/1'/0'/1/*\" (2 descriptors)\r\n* BIP84 descriptors, P2WPKH; form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\r\n* BIP86 descriptors, P2TR; form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\r\n* A combo(PK) descriptor for the wallet master key. \r\n\r\nThen, while was checking what was going on, have expanded the test coverage of the basic HD wallet migration case with the 11 descriptors check and the following points:\r\n\r\n1) Test case for a wallet with balance received on the seed.\r\n   Receiving coins in different outputs created from the seed key (P2PKH, P2WPKH, P2SH(P2WPKH)) and verifying that after migration the wallet still has them.\r\n\r\n2) Verify `getaddressinfo` remains unchanged after migration.\r\n   (solvability, hdkeypath, ischange, hdmasterfingerprint)\r\n\r\n3) Verify that the migrated wallet was flushed to disk by restarting the node and checking that balance/txes are still there.\r\n\r\nIf you like it, can cherry-pick it from: https://github.com/furszy/bitcoin/commit/e31779c3edca96a4a3f26ab554f7b9824ea0338b\r\n\r\nThe more coverage we can get over this, the better.\r\nWill continue reviewing :).",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1072659073",
      "submitted_at": "2022-08-15T20:03:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 1215927913,
      "node_id": "IC_kwDOABII585IeZZp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215927913",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T22:26:42Z",
      "updated_at": "2022-08-15T22:32:50Z",
      "author_association": "MEMBER",
      "body": "> > For the basic HD wallet case of just generated keys, the migration will create 3 descriptors for each HD chain: a ranged combo external, a ranged combo internal, and a single key combo for the seed (the seed is a valid key that we can receive coins at!)\r\n> \r\n> And, for the basic case of an HD wallet, we are actually creating 11 descriptors on the migration process:\r\n\r\nIt was meant to be read as \"in addition to the usual descriptors\". I've updated the description to clarify that.\r\n\r\n> If you like it, can cherry-pick it from: furszy/bitcoin@e31779c\r\n\r\nSquashed it into the test commit.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1215927913",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7192322499,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGssiHD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7192322499",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T22:32:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7192475407,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGstHcP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7192475407",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T22:47:00Z"
    },
    {
      "event": "labeled",
      "id": 7201398176,
      "node_id": "LE_lADOABII584nuulHzwAAAAGtPJ2g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201398176",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T00:46:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7201595793,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGtP6GR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201595793",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T01:33:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7201657027,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGtQJDD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201657027",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T01:54:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7201790672,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGtQprQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201790672",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T02:36:44Z"
    },
    {
      "event": "unlabeled",
      "id": 7201834689,
      "node_id": "UNLE_lADOABII584nuulHzwAAAAGtQ0bB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201834689",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T02:51:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1075563133,
      "node_id": "PRR_kwDOABII585AG8p9",
      "url": null,
      "actor": null,
      "commit_id": "5729eb9c8cc998956d20eb4307de6ab02371920b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1075563133",
      "submitted_at": "2022-08-17T11:35:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 1217910479,
      "node_id": "IC_kwDOABII585Il9bP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217910479",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T11:54:30Z",
      "updated_at": "2022-08-17T11:54:30Z",
      "author_association": "MEMBER",
      "body": "@achow101 I sent you a signet wallet with some watch-only keys that didn't migrate correctly.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1217910479",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "mentioned",
      "id": 7205294181,
      "node_id": "MEE_lADOABII584nuulHzwAAAAGteBBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7205294181",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T11:54:30Z"
    },
    {
      "event": "subscribed",
      "id": 7205294197,
      "node_id": "SE_lADOABII584nuulHzwAAAAGteBB1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7205294197",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T11:54:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207923428,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGtoC7k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7207923428",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T17:27:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208248241,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGtpSOx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7208248241",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T18:10:58Z"
    },
    {
      "event": "commented",
      "id": 1218342344,
      "node_id": "IC_kwDOABII585Inm3I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218342344",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T18:11:21Z",
      "updated_at": "2022-08-17T18:11:21Z",
      "author_association": "MEMBER",
      "body": "> @achow101 I sent you a signet wallet with some watch-only keys that didn't migrate correctly.\r\n\r\nThis should be fixed now. Also added a few test cases for that failure.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1218342344",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "mentioned",
      "id": 7208251431,
      "node_id": "MEE_lADOABII584nuulHzwAAAAGtpTAn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7208251431",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T18:11:21Z"
    },
    {
      "event": "subscribed",
      "id": 7208251439,
      "node_id": "SE_lADOABII584nuulHzwAAAAGtpTAv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7208251439",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T18:11:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7209280899,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGttOWD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7209280899",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T21:14:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7209288621,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGttQOt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7209288621",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T21:16:03Z"
    },
    {
      "event": "commented",
      "id": 1218498304,
      "node_id": "IC_kwDOABII585IoM8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218498304",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T21:16:36Z",
      "updated_at": "2022-08-17T21:16:36Z",
      "author_association": "MEMBER",
      "body": "Latest push adds cleanup on failure.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1218498304",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7209373638,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGttk_G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7209373638",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T21:34:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7215644397,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGuFf7t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7215644397",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T15:58:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7215660968,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGuFj-o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7215660968",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T16:00:28Z"
    },
    {
      "event": "reviewed",
      "id": 1078920341,
      "node_id": "PRR_kwDOABII585ATwSV",
      "url": null,
      "actor": null,
      "commit_id": "9e66a06566466a2d55b67d9363392883483bb9c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I unfortunately won't have time to review the code before feature freeze, but at least i successfully tested this with a mainnet watchonly legacy wallet (with a couple hundred transactions and a couple thousands entries in the address book) along with a legacy testnet wallets (with private keys) with a few hundreds transactions and a couple dozen entries in the address book.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1078920341",
      "submitted_at": "2022-08-19T14:56:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7223439015,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGujO6n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223439015",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T16:15:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7223491494,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGujbum",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223491494",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T16:21:56Z"
    },
    {
      "event": "commented",
      "id": 1222491231,
      "node_id": "IC_kwDOABII585I3bxf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222491231",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T15:07:10Z",
      "updated_at": "2022-08-22T15:07:10Z",
      "author_association": "MEMBER",
      "body": "It would be good to explicitly test wallets with coinbase transactions on `pk()` \"addresses\", since afaik that's what the built-in miner used.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1222491231",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1222644635,
      "node_id": "IC_kwDOABII585I4BOb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222644635",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T17:02:17Z",
      "updated_at": "2022-08-22T17:02:17Z",
      "author_association": "MEMBER",
      "body": "> It would be good to explicitly test wallets with coinbase transactions on `pk()` \"addresses\", since afaik that's what the built-in miner used.\r\n\r\nDone",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1222644635",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7234691587,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGvOKID",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7234691587",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T17:02:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7244963232,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGv1V2g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7244963232",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-23T19:29:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7245091586,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGv11MC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7245091586",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-23T19:49:40Z"
    },
    {
      "event": "reviewed",
      "id": 1084285517,
      "node_id": "PRR_kwDOABII585AoOJN",
      "url": null,
      "actor": null,
      "commit_id": "5967384781c4d0392781be1d630c786955f58c2e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1084285517",
      "submitted_at": "2022-08-24T17:59:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7253612756,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGwWVjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7253612756",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T19:10:31Z"
    },
    {
      "event": "reviewed",
      "id": 1084620947,
      "node_id": "PRR_kwDOABII585ApgCT",
      "url": null,
      "actor": null,
      "commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1084620947",
      "submitted_at": "2022-08-24T23:37:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1084753433,
      "node_id": "PRR_kwDOABII585AqAYZ",
      "url": null,
      "actor": null,
      "commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1084753433",
      "submitted_at": "2022-08-25T04:01:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 1227263715,
      "node_id": "IC_kwDOABII585JJo7j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1227263715",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T13:30:48Z",
      "updated_at": "2022-08-25T13:35:11Z",
      "author_association": "MEMBER",
      "body": "I noticed that the migrated `combo()` descriptor and the `addr()` descriptor in the watch-only part of the migrated wallet uses timestamp 0. Can it use the original timestamps instead?\r\n\r\nThe new bech32m descriptor can't be used in the GUI unless you reload the wallet, since the dropdown is not updated.\r\n\r\nI sent some coins to the newly generated address and then repeated the migration (using the backup) while it was still in the mempool. That causes the new transaction to not show up as well as a warning in the log:\r\n\r\n```\r\n2022-08-25T13:32:06Z [main] GUI: TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\r\n2022-08-25T13:32:06Z [main] GUI: TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\r\n```\r\n\r\nA simple restart does the trick there. In any case, new funds are safu.\r\n\r\nOther than that it all works with my test wallet. Will look at the code.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1227263715",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 1085551351,
      "node_id": "PRR_kwDOABII585AtDL3",
      "url": null,
      "actor": null,
      "commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1085551351",
      "submitted_at": "2022-08-25T14:53:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1085632021,
      "node_id": "PRR_kwDOABII585AtW4V",
      "url": null,
      "actor": null,
      "commit_id": "7ab26895d879e8cadd70109bd84c0b7e586c31a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1085632021",
      "submitted_at": "2022-08-25T15:10:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7260572139,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGww4nr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7260572139",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T15:26:29Z"
    },
    {
      "event": "commented",
      "id": 1227454280,
      "node_id": "IC_kwDOABII585JKXdI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1227454280",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T15:47:46Z",
      "updated_at": "2022-08-25T15:47:46Z",
      "author_association": "MEMBER",
      "body": "> The new bech32m descriptor can't be used in the GUI unless you reload the wallet, since the dropdown is not updated.\r\n\r\nThis appears to be an issue in general. Importing a `tr` descriptor to a wallet that does not have one yet does not cause the dropdown to be updated.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1227454280",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7260757388,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGwxl2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7260757388",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T15:48:33Z"
    },
    {
      "event": "reviewed",
      "id": 1085717959,
      "node_id": "PRR_kwDOABII585Atr3H",
      "url": null,
      "actor": null,
      "commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1085717959",
      "submitted_at": "2022-08-25T16:05:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1085749530,
      "node_id": "PRR_kwDOABII585Atzka",
      "url": null,
      "actor": null,
      "commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1085749530",
      "submitted_at": "2022-08-25T16:15:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1085925719,
      "node_id": "PRR_kwDOABII585AuelX",
      "url": null,
      "actor": null,
      "commit_id": "2b2f6db2646af5c150241d5684c8bbe716a643c6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed fc33d306874ec3bca38c34ff5ac49cbcfa7d832f which looks mostly good. I skimmed over the multisig part though. Will review the other commits later.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1085925719",
      "submitted_at": "2022-08-25T19:03:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7262148172,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGw25ZM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7262148172",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T19:12:42Z"
    },
    {
      "event": "commented",
      "id": 1227660818,
      "node_id": "IC_kwDOABII585JLJ4S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1227660818",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T19:14:42Z",
      "updated_at": "2022-08-25T19:14:42Z",
      "author_association": "MEMBER",
      "body": "> I noticed that the migrated `combo()` descriptor and the `addr()` descriptor in the watch-only part of the migrated wallet uses timestamp 0. Can it use the original timestamps instead?\r\n\r\nDone\r\n\r\n\r\n\r\n> A simple restart does the trick there. In any case, new funds are safu.\r\n\r\nI've changed it to reload the wallet after migrating so that all of the signals and gui stuff get refreshed.\r\n\r\nThis happened to expose a bug where not all legacy records were being removed from all wallets. I've pushed a change to how we do the deletions to make sure there is no lingering data.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1227660818",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7262165466,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGw29na",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7262165466",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T19:15:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7262252216,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGw3Sy4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7262252216",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T19:28:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7262264907,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGw3V5L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7262264907",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T19:30:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7262440289,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGw4Ath",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7262440289",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T19:57:47Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2NjRhZjI5NzYwNTI3ZTc1Y2Q3ZTI5MGJlNWYxMDJiNmQyOWViZWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e664af29760527e75cd7e290be5f102b6d29ebee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e664af29760527e75cd7e290be5f102b6d29ebee",
      "tree": {
        "sha": "b450196ef352875dc25c8b7a6be527609ff4c3ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b450196ef352875dc25c8b7a6be527609ff4c3ba"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b56873b41974ced7aad87a4b38abe360c34eed3",
          "sha": "6b56873b41974ced7aad87a4b38abe360c34eed3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b56873b41974ced7aad87a4b38abe360c34eed3"
        }
      ],
      "message": "Apply label to all scriptPubKeys of imported combo()",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-25T20:25:53Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-25T19:40:08Z"
      },
      "sha": "e664af29760527e75cd7e290be5f102b6d29ebee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVhMWFiMzkwZTRkYWMxMjhlM2EzN2Q0ODg0NTI4YzNmNDEyOGVkODM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea1ab390e4dac128e3a37d4884528c3f4128ed83",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1ab390e4dac128e3a37d4884528c3f4128ed83",
      "tree": {
        "sha": "38fe066163f18aae67ff4beac54d30920cdafeb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38fe066163f18aae67ff4beac54d30920cdafeb0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e664af29760527e75cd7e290be5f102b6d29ebee",
          "sha": "e664af29760527e75cd7e290be5f102b6d29ebee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e664af29760527e75cd7e290be5f102b6d29ebee"
        }
      ],
      "message": "scriptpubkeyman: Implement GetScriptPubKeys in Legacy",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-25T20:25:53Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-06T19:54:15Z"
      },
      "sha": "ea1ab390e4dac128e3a37d4884528c3f4128ed83"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM1ZjQyOGZhZTY4YWQ5NzRhYmRjZTBmYTkwNTE0OGY2MjBhOTQ0M2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35f428fae68ad974abdce0fa905148f620a9443c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/35f428fae68ad974abdce0fa905148f620a9443c",
      "tree": {
        "sha": "756eea785c5ba484d4a1ba1f26f9910e540616b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/756eea785c5ba484d4a1ba1f26f9910e540616b6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea1ab390e4dac128e3a37d4884528c3f4128ed83",
          "sha": "ea1ab390e4dac128e3a37d4884528c3f4128ed83",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1ab390e4dac128e3a37d4884528c3f4128ed83"
        }
      ],
      "message": "Implement LegacyScriptPubKeyMan::MigrateToDescriptor",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-25T20:25:53Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-13T18:32:24Z"
      },
      "sha": "35f428fae68ad974abdce0fa905148f620a9443c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7262603800,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGw4ooY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7262603800",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T20:26:08Z"
    },
    {
      "event": "reviewed",
      "id": 1086153023,
      "node_id": "PRR_kwDOABII585AvWE_",
      "url": null,
      "actor": null,
      "commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1086153023",
      "submitted_at": "2022-08-25T21:52:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1086291889,
      "node_id": "PRR_kwDOABII585Av3-x",
      "url": null,
      "actor": null,
      "commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1086291889",
      "submitted_at": "2022-08-26T01:43:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1086303812,
      "node_id": "PRR_kwDOABII585Av65E",
      "url": null,
      "actor": null,
      "commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1086303812",
      "submitted_at": "2022-08-26T02:08:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1086570866,
      "node_id": "PRR_kwDOABII585Aw8Fy",
      "url": null,
      "actor": null,
      "commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for the changes. Reviewed another commit, will continue later.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1086570866",
      "submitted_at": "2022-08-26T08:46:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1086877223,
      "node_id": "PRR_kwDOABII585AyG4n",
      "url": null,
      "actor": null,
      "commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed up to a6c0e2f844f589df4f2d19e38c2e350952e1b4bf. Mostly happy. I'm a bit confused about how legacy wallets deal with (unwatched) solvable scripts, so I'll review that aspect again once I wrap my head around it.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1086877223",
      "submitted_at": "2022-08-26T14:01:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "comment_deleted",
      "id": 7268814375,
      "node_id": "CDE_lADOABII584nuulHzwAAAAGxQU4n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7268814375",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-26T16:07:41Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIyNDAxZjE3ZTAyNmVhZDRiYzNmZTk2OTY3ZWVjNTZhNzE5YTRmNzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22401f17e026ead4bc3fe96967eec56a719a4f75",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/22401f17e026ead4bc3fe96967eec56a719a4f75",
      "tree": {
        "sha": "af171262e7a0b0e5dc5935459660fe7a23fc27f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af171262e7a0b0e5dc5935459660fe7a23fc27f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35f428fae68ad974abdce0fa905148f620a9443c",
          "sha": "35f428fae68ad974abdce0fa905148f620a9443c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/35f428fae68ad974abdce0fa905148f620a9443c"
        }
      ],
      "message": "Implement LegacyScriptPubKeyMan::DeleteRecords",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-26T17:14:51Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-25T18:35:28Z"
      },
      "sha": "22401f17e026ead4bc3fe96967eec56a719a4f75"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViNjJmMDk1ZTc5MGEwZDRlMmE3MGVjZTg5NDY1YjY0ZmM2ODM1OGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b62f095e790a0d4e2a70ece89465b64fc68358a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5b62f095e790a0d4e2a70ece89465b64fc68358a",
      "tree": {
        "sha": "becbc1a78ef10ae248e2ed20ef3b8a369bbbecee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/becbc1a78ef10ae248e2ed20ef3b8a369bbbecee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22401f17e026ead4bc3fe96967eec56a719a4f75",
          "sha": "22401f17e026ead4bc3fe96967eec56a719a4f75",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/22401f17e026ead4bc3fe96967eec56a719a4f75"
        }
      ],
      "message": "wallet: Refactor SetupDescSPKMs to take CExtKey\n\nRefactors SetupDescSPKMs so that the DescSPKM loops are in their own\nfunction. This allows us to call it later during migration with a key\nthat was already generated.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-26T17:14:51Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-08-10T19:19:56Z"
      },
      "sha": "5b62f095e790a0d4e2a70ece89465b64fc68358a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7269686969,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGxTp65",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7269686969",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-26T18:43:55Z"
    },
    {
      "event": "comment_deleted",
      "id": 7269942632,
      "node_id": "CDE_lADOABII584nuulHzwAAAAGxUoVo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7269942632",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-26T19:30:38Z"
    },
    {
      "event": "reviewed",
      "id": 1087565612,
      "node_id": "PRR_kwDOABII585A0u8s",
      "url": null,
      "actor": null,
      "commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1087565612",
      "submitted_at": "2022-08-26T22:25:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 1230278345,
      "node_id": "IC_kwDOABII585JVI7J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230278345",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T13:12:17Z",
      "updated_at": "2022-08-29T13:12:17Z",
      "author_association": "MEMBER",
      "body": "I started the GUI, made some transactions and then called `migratewallet` from the command line. Between adding the watch-only wallet and setting the new spkMans there was a 9 minute gap in which nothing seemed to happen. The log then showed \"Wallet migration complete.\", but the RPC call still didn't return. The GUI was unresponive. Eventually it hit the RPC client timeout, but GUI remained unresponsive.\r\n\r\nI was unable to do a clean shutdown with ctrl+c from the terminal (where I started QT from). A gentle `kill` didn't work either (`kill -9` did).  I guess there's a lock order issue somewhere.\r\n\r\nI repeated the experiment calling from the GUI console. There was again a 9 minute gap after watch-only was created, and the console got stuck in Executing, except the GUI never times out.\r\n\r\n---\r\n\r\nAfter migration the watch-only labels were missing. This also happened when I repeated the migration using the GUI console. I'll send you the wallet (maybe it's related to the stuff I added below).\r\n\r\n---\r\n\r\n> Multisigs are special because we have `addmultisigaddress` which add the multisig but does not watch them. All of the import rpcs will watch.\r\n\r\nAlso, IIUC along with wrapped SegWit, multisig is the _only_ `p2sh` redeemscript our wallet knows how to spend.\r\n\r\nI played around a bit with `importmulti` on the legacy wallet, creating a p2sh address for a simple relative timelock. I used a key that's in the wallet, but because we don't recognize that script type, it's considered not solvable and watch-only. This causes it to be migrated to the watch-only wallet, away from its corresponding private key. We should probably warn about it in the documentation.\r\n\r\nInterestingly, once we have Miniscript support, there could be cases where a (P2W)SH script goes from watch-only and non-solvable to spendable, assuming the migration script picks it up.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230278345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 1088684045,
      "node_id": "PRR_kwDOABII585A5AAN",
      "url": null,
      "actor": null,
      "commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think it is expected that you run into deadlocks, given that the thread sanitizer doesn't pass CI. \r\n\r\nAlso, the Windows compilation fails, see u8string suggestion.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1088684045",
      "submitted_at": "2022-08-29T13:24:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1088691527,
      "node_id": "PRR_kwDOABII585A5B1H",
      "url": null,
      "actor": null,
      "commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1088691527",
      "submitted_at": "2022-08-29T13:25:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "reviewed",
      "id": 1088443426,
      "node_id": "PRR_kwDOABII585A4FQi",
      "url": null,
      "actor": null,
      "commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "As you said:\r\n\r\n> Multisigs are special because we have `addmultisigaddress` which add the multisig but does not watch them.\r\n\r\nThe test could use some comments around that behavior. It correctly demonstrates it though.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1088443426",
      "submitted_at": "2022-08-29T13:30:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "commented",
      "id": 1230380660,
      "node_id": "IC_kwDOABII585JVh50",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230380660",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T14:21:10Z",
      "updated_at": "2022-08-29T14:22:31Z",
      "author_association": "MEMBER",
      "body": "I was confused about the difference between solvable and watch-only.\r\n\r\n* solvable: anything we have _any_ (public) keys for _and_ we know who to spend (e.g. a multisig for which we have one public key, and we know the other two because we have the full redeemscript)\r\n* watch-only: may or may not be solvable, e.g. an unsolvable multisig is one for which we only know the address (scriptPubKey), not the full script, i.e. we don't know which keys it needs\r\n\r\nA solvable address is not automatically watch-only, but all import methods except `importmulti` ensure it _is_.\r\n\r\n`importmulti`  adds a `redeemscript` so it's solvable, but it's _not_ marked watch-only. The net-effect of that is that we see the full script with `getaddressinfo`, _the wallet ignores transactions to it_, but we can sign them. This may be useful if you're a co-signer and you don't want those transactions to show up.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230380660",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1230510949,
      "node_id": "IC_kwDOABII585JWBtl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230510949",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T15:58:55Z",
      "updated_at": "2022-08-29T15:58:55Z",
      "author_association": "MEMBER",
      "body": "I also noticed the label given by `addmultisigaddress` is not migrated to the solvables wallet. In fact it stays behind, as seen by getaddressinfo. The other info does move.\r\n\r\nWe should consider making the `solvables` wallet legacy for now. Because right now it's just another watch-only wallet, except without transaction history. But future transaction will show up and rescan will reveal the old ones. This particular use case of having scripts but not seeing their transactions, seems a legacy feature we can't migrate yet. And in that case, we might as well move or copy corresponding private keys over too. Unless I totally misunderstand this multisig use case, you need to keep those around.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230510949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7280343759,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGx8TrP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7280343759",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T16:31:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7280354085,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGx8WMl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7280354085",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T16:33:11Z"
    },
    {
      "event": "commented",
      "id": 1230554143,
      "node_id": "IC_kwDOABII585JWMQf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230554143",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T16:35:27Z",
      "updated_at": "2022-08-29T16:35:27Z",
      "author_association": "MEMBER",
      "body": "The issues with locks and hanging should be resolved now. I've changed it to just unload a wallet before migrating, then loading it but without connecting all of the signals, etc. for the migration itself. This should fix the issues with locks and hanging (which was caused by waiting for the shared_ptr to be released by the GUI).\r\n\r\n> We should consider making the `solvables` wallet legacy for now.\r\n\r\nI don't think we should. The point is to make it so that migrated wallets do not have any dependency on legacy stuff at all so that we can remove the legacy wallet. I agree that it can be confusing, but I don't think it is helpful or less confusing to make a new legacy wallet when the user is expecting everything to go to descriptors.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230554143",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1230581679,
      "node_id": "IC_kwDOABII585JWS-v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230581679",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T17:01:14Z",
      "updated_at": "2022-08-29T17:09:16Z",
      "author_association": "MEMBER",
      "body": "The problem is that the solvables wallet is completely useless. It can't sign things the legacy wallet could sign. You might as well put these things in the watch-only wallet, unless I'm missing something.\r\n\r\n\r\nAnother approach could be to handle the special (and only?) case of a multisig wallet more gracefully. The best substitute we can make for how that worked before, is to create a blank descriptor wallet and then import the (inferred) descriptor with the private keys that we have. They'll lose the \"feature\" of not seeing transactions, but they'll retain the ability to sign, which is more important.\r\n\r\n---\r\n\r\nThe locking issue seems resolved. It's also no longer freezing the UI while the migration is in progress. Labels\r\n\r\nIt's quite a slow call (several minutes), so a nice followup improvement would be a way to abort it and maybe a progress bar. It's a one-off task, but probably one that makes users very nervous.\r\n\r\nNotice one glitch: if you call this from GUI console, since it closes the wallet, you'll suddenly see a different wallet selected in the console, even though the command is still in progress. That's confusing, though maybe it's enough for now to just to warn the user to ignore that. It also crashes if you touch the dropdown though.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230581679",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1230607627,
      "node_id": "IC_kwDOABII585JWZUL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230607627",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T17:18:45Z",
      "updated_at": "2022-08-29T17:18:45Z",
      "author_association": "MEMBER",
      "body": "> The problem is that the solvables wallet is completely useless. It can't sign things the legacy wallet could sign. You might as well put these things in the watch-only wallet, unless I'm missing something.\r\n\r\nThe solvables wallet can update a PSBT with the UTXO, scripts, and pubkeys, for inputs that spend the any of the scripts it contains. Because the user had not watched those scripts when the wallet is a legacy wallet, it does not make sense to have them be in the watchonly wallet.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230607627",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "commented",
      "id": 1230693736,
      "node_id": "IC_kwDOABII585JWuVo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230693736",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T18:23:21Z",
      "updated_at": "2022-08-29T18:23:21Z",
      "author_association": "MEMBER",
      "body": "The slowness seems to be macOS thing, or even particular to _one_ of my machines.  The exact same wallet takes ~9 minutes to upgrade on one on my macOS machines, and less than a minute on the other and on Ubuntu. When the upgrade is fast, the labels are preserved fine too.\r\n\r\n---\r\n\r\nIt would be useful to know how people use(d) legacy multisig wallets, especially before PSBT. It's not clear to me with which wallet they would craft the transaction.\r\n\r\nA solveable-only legacy wallet can sign them and add more metadata, but because it lacks transaction history, they can't craft them. Presumably the user would have different wallet for that purpose, which they may or may not be upgrading separately. As long as that other wallet can produce a PSBT, then our upgraded main wallet can sign it just fine. The _solvable wallet's only purpose then is to backup the redeemscript. They should never need it.\r\n\r\nIf their other wallet can't produce a psbt, then the upgrade process breaks their ability to sign, since the private keys are now no longer in the same wallet as the redeemscript. So we should warn about that. And we could a utility that takes a raw unsigned transaction and transform it into a PSBT to address that potential problem.\r\n\r\nKnowing these use cases would also help us write upgrade documentation for them, to explain what new workflows they should consider.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1230693736",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 1089300385,
      "node_id": "PRR_kwDOABII585A7Weh",
      "url": null,
      "actor": null,
      "commit_id": "a2278c2d2f95d0e803cc199d30be87069090f900",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1089300385",
      "submitted_at": "2022-08-29T20:21:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU3YjE2ZjkyNWFlNWIxMTdlOGI3NGNlODE0YjYzZTE5YjE5YjUwZjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7b16f925ae5b117e8b74ce814b63e19b19b50f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e7b16f925ae5b117e8b74ce814b63e19b19b50f4",
      "tree": {
        "sha": "49d42195c832c044a4a714c4776a147be362a439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49d42195c832c044a4a714c4776a147be362a439"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b62f095e790a0d4e2a70ece89465b64fc68358a",
          "sha": "5b62f095e790a0d4e2a70ece89465b64fc68358a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5b62f095e790a0d4e2a70ece89465b64fc68358a"
        }
      ],
      "message": "Implement MigrateToSQLite",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-29T21:30:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-26T17:18:04Z"
      },
      "sha": "e7b16f925ae5b117e8b74ce814b63e19b19b50f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBiZjdiMzhiZmY0MjJlNzQxM2JjZDNkYzBhYmUyNTY4ZGQ5MThkZGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf7b38bff422e7413bcd3dc0abe2568dd918ddc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf7b38bff422e7413bcd3dc0abe2568dd918ddc",
      "tree": {
        "sha": "377440a19cb9300fccf5ec0a56c14255d98ce581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/377440a19cb9300fccf5ec0a56c14255d98ce581"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7b16f925ae5b117e8b74ce814b63e19b19b50f4",
          "sha": "e7b16f925ae5b117e8b74ce814b63e19b19b50f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e7b16f925ae5b117e8b74ce814b63e19b19b50f4"
        }
      ],
      "message": "Implement MigrateLegacyToDescriptor",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-29T21:30:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-13T20:38:39Z"
      },
      "sha": "0bf7b38bff422e7413bcd3dc0abe2568dd918ddc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxNzY0YzNmODcyZjRmMDFiNDhkNTA1ODVmODZlOTdjNDE1NTQ5NTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31764c3f872f4f01b48d50585f86e97c41554954",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/31764c3f872f4f01b48d50585f86e97c41554954",
      "tree": {
        "sha": "5fd2f8bd790f7550368d6bc8cfaebc018c431b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fd2f8bd790f7550368d6bc8cfaebc018c431b78"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf7b38bff422e7413bcd3dc0abe2568dd918ddc",
          "sha": "0bf7b38bff422e7413bcd3dc0abe2568dd918ddc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf7b38bff422e7413bcd3dc0abe2568dd918ddc"
        }
      ],
      "message": "Add migratewallet RPC",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-29T21:30:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-13T20:38:57Z"
      },
      "sha": "31764c3f872f4f01b48d50585f86e97c41554954"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBiMjZlN2NkZjI2NTlmZDhiNTRkMjFmZDJiZDc0OWY5ZjNlODdhZjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b26e7cdf2659fd8b54d21fd2bd749f9f3e87af8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0b26e7cdf2659fd8b54d21fd2bd749f9f3e87af8",
      "tree": {
        "sha": "8b29d28df07757076047617d5655b91b8928feda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b29d28df07757076047617d5655b91b8928feda"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31764c3f872f4f01b48d50585f86e97c41554954",
          "sha": "31764c3f872f4f01b48d50585f86e97c41554954",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/31764c3f872f4f01b48d50585f86e97c41554954"
        }
      ],
      "message": "descriptors: addr() and raw() should return false for ToPrivateString\n\nThey don't have any private data and they can't be nested so they\nshould return false for ToPrivateString.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-29T21:30:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-27T19:19:17Z"
      },
      "sha": "0b26e7cdf2659fd8b54d21fd2bd749f9f3e87af8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDljNDRiZmUyNDRmMzVmMDhiYTU3NmQ4Yjk3OWE5MGRjZDY4ZDJjNzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c44bfe244f35f08ba576d8b979a90dcd68d2c77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9c44bfe244f35f08ba576d8b979a90dcd68d2c77",
      "tree": {
        "sha": "b1f24ccaeb69ff106829847d742b92386b32d010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1f24ccaeb69ff106829847d742b92386b32d010"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b26e7cdf2659fd8b54d21fd2bd749f9f3e87af8",
          "sha": "0b26e7cdf2659fd8b54d21fd2bd749f9f3e87af8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0b26e7cdf2659fd8b54d21fd2bd749f9f3e87af8"
        }
      ],
      "message": "Test migratewallet\n\nCo-Authored-By: furszy <matiasfurszyfer@protonmail.com>",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-29T21:30:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-27T20:00:11Z"
      },
      "sha": "9c44bfe244f35f08ba576d8b979a90dcd68d2c77"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUzZTdlZDA3NWM0OWY4NTNjYzg0NWFmYzdiMmYwNThjYWJhZDBjYjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "tree": {
        "sha": "f11a23ef2dcb7cc531ba47993ba61f00999cc8f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f11a23ef2dcb7cc531ba47993ba61f00999cc8f1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c44bfe244f35f08ba576d8b979a90dcd68d2c77",
          "sha": "9c44bfe244f35f08ba576d8b979a90dcd68d2c77",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9c44bfe244f35f08ba576d8b979a90dcd68d2c77"
        }
      ],
      "message": "doc: Release notes and other docs for migration",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-29T21:30:38Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-08-11T19:59:01Z"
      },
      "sha": "53e7ed075c49f853cc845afc7b2f058cabad0cb0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7282310092,
      "node_id": "HRFPE_lADOABII584nuulHzwAAAAGyDzvM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7282310092",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T21:31:06Z"
    },
    {
      "event": "commented",
      "id": 1232840195,
      "node_id": "IC_kwDOABII585Je6YD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232840195",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-31T11:57:35Z",
      "updated_at": "2022-08-31T11:57:35Z",
      "author_association": "MEMBER",
      "body": "tACK 53e7ed075c49f853cc845afc7b2f058cabad0cb0\r\n\r\nI think this is good enough for an `experimental` RPC. Hopefully we can figure out why some macOS machines have difficulty with the RPC, but if not, we can just mention that in the release notes. Similarly we can revisit the way solvable multisig is handled; anyone using that feature will know how to restore the backup.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#issuecomment-1232840195",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602"
    },
    {
      "event": "reviewed",
      "id": 1092669320,
      "node_id": "PRR_kwDOABII585BIM-I",
      "url": null,
      "actor": null,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "reACK https://github.com/bitcoin/bitcoin/commit/53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1092669320",
      "submitted_at": "2022-09-01T01:28:54Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    },
    {
      "event": "merged",
      "id": 7308164112,
      "node_id": "ME_lADOABII584nuulHzwAAAAGzmbwQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7308164112",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7921026a24594765f603d14ef87ff4e4541d2b76",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7921026a24594765f603d14ef87ff4e4541d2b76",
      "created_at": "2022-09-01T19:44:11Z"
    },
    {
      "event": "closed",
      "id": 7308164138,
      "node_id": "CE_lADOABII584nuulHzwAAAAGzmbwq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7308164138",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T19:44:11Z"
    },
    {
      "event": "referenced",
      "id": 7309390854,
      "node_id": "REFE_lADOABII584nuulHzwAAAAGzrHQG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7309390854",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f32f4a466774a68c551b6546a723e2b845fb0c50",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/f32f4a466774a68c551b6546a723e2b845fb0c50",
      "created_at": "2022-09-01T23:49:35Z"
    },
    {
      "event": "referenced",
      "id": 7388758483,
      "node_id": "REFE_lADOABII584nuulHzwAAAAG4Z4HT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7388758483",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d19000370066dfa0aabea23f244628d0f54891e9",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/d19000370066dfa0aabea23f244628d0f54891e9",
      "created_at": "2022-09-14T19:00:54Z"
    },
    {
      "event": "reviewed",
      "id": 1337977991,
      "node_id": "PRR_kwDOABII585Pv-yH",
      "url": null,
      "actor": null,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#pullrequestreview-1337977991",
      "submitted_at": "2023-03-13T21:26:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470588563",
      "pull_request_review_id": 467528506,
      "id": 470588563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODU2Mw==",
      "diff_hunk": "@@ -4113,6 +4113,33 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error.original;\n }\n \n+static UniValue migratewallet(const JSONRPCRequest& request)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "97e34cd88de254a0041d825b155cd98b6bcb1892",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: might be good to use the non-deprecated constructor to avoid having to change this again. See e.g. #19528",
      "created_at": "2020-08-14T12:17:06Z",
      "updated_at": "2021-04-13T20:21:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r470588563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470588563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480291494",
      "pull_request_review_id": 478821040,
      "id": 480291494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5MTQ5NA==",
      "diff_hunk": "@@ -4113,6 +4113,33 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error.original;\n }\n \n+static UniValue migratewallet(const JSONRPCRequest& request)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "97e34cd88de254a0041d825b155cd98b6bcb1892",
      "in_reply_to_id": 470588563,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Getting a build error when I try to do this:\r\n\r\n```wallet/rpcwallet.cpp:4280:5: error: no matching constructor for initialization of 'const CRPCCommand'\r\n    { \"wallet\",             \"migratewallet\",                    &migratewallet,                 {} },\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n./rpc/server.h:120:5: note: candidate constructor not viable: no known conversion from 'RPCHelpMan (*)(const JSONRPCRequest &)' to 'rpcfn_type' (aka 'UniValue (*)(const JSONRPCRequest &)') for 3rd argument\r\n    CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)\r\n    ^\r\n./rpc/server.h:107:5: note: candidate constructor not viable: no known conversion from 'RPCHelpMan (*)(const JSONRPCRequest &)' to 'RpcMethodFnType' (aka 'RPCHelpMan (*)()') for 3rd argument\r\n    CRPCCommand(std::string category, std::string name_in, RpcMethodFnType fn, std::vector<std::string> args_in)\r\n    ^\r\n./rpc/server.h:100:5: note: candidate constructor not viable: requires 5 arguments, but 4 were provided\r\n    CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)\r\n    ^\r\n./rpc/server.h:91:7: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 4 were provided\r\nclass CRPCCommand\r\n      ^\r\n./rpc/server.h:91:7: note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 4 were provided\r\n1 error generated.\r\n```",
      "created_at": "2020-08-31T17:53:53Z",
      "updated_at": "2021-04-13T20:21:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r480291494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480291494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480309374",
      "pull_request_review_id": 478843483,
      "id": 480309374,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwOTM3NA==",
      "diff_hunk": "@@ -4113,6 +4113,33 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error.original;\n }\n \n+static UniValue migratewallet(const JSONRPCRequest& request)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "97e34cd88de254a0041d825b155cd98b6bcb1892",
      "in_reply_to_id": 470588563,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure why. This diff compiles for me:\r\n\r\n```diff\r\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\r\nindex cc89c4992b..1361955a4b 100644\r\n--- a/src/wallet/rpcwallet.cpp\r\n+++ b/src/wallet/rpcwallet.cpp\r\n@@ -4171,9 +4171,9 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\r\n     return error.original;\r\n }\r\n \r\n-static UniValue migratewallet(const JSONRPCRequest& request)\r\n+static RPCHelpMan migratewallet()\r\n {\r\n-    RPCHelpMan{\"migratewallet\",\r\n+    return RPCHelpMan{\"migratewallet\",\r\n         \"\\nMigrate the wallet to a descriptor wallet.\\n\"\r\n         \"A new wallet backup will need to be made.\",\r\n         {},\r\n@@ -4181,9 +4181,9 @@ static UniValue migratewallet(const JSONRPCRequest& request)\r\n         RPCExamples{\r\n             HelpExampleCli(\"migratewallet\", \"\")\r\n             + HelpExampleRpc(\"migratewallet\", \"\")\r\n-        }\r\n-    }.Check(request);\r\n-\r\n+        },\r\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n+{\r\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\r\n     if (!wallet) return NullUniValue;\r\n     CWallet* const pwallet = wallet.get();\r\n@@ -4196,6 +4196,8 @@ static UniValue migratewallet(const JSONRPCRequest& request)\r\n         throw JSONRPCError(RPC_WALLET_ERROR, error.original);\r\n     }\r\n     return error.original;\r\n+},\r\n+    };\r\n }\r\n \r\n RPCHelpMan abortrescan();\r\n",
      "created_at": "2020-08-31T18:27:35Z",
      "updated_at": "2021-04-13T20:21:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r480309374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480309374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480453983",
      "pull_request_review_id": 479024096,
      "id": 480453983,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1Mzk4Mw==",
      "diff_hunk": "@@ -4113,6 +4113,33 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error.original;\n }\n \n+static UniValue migratewallet(const JSONRPCRequest& request)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "97e34cd88de254a0041d825b155cd98b6bcb1892",
      "in_reply_to_id": 470588563,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I seem to have made a mistake somewhere.",
      "created_at": "2020-08-31T22:57:07Z",
      "updated_at": "2021-04-13T20:21:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r480453983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480453983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520218986",
      "pull_request_review_id": 526774342,
      "id": 520218986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIxODk4Ng==",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+\n+from test_framework.key import ECKey",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "208c296a5770d6a343226f59330daff5feca66a9",
      "in_reply_to_id": null,
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The linter is complaining this going unused.",
      "created_at": "2020-11-10T01:02:33Z",
      "updated_at": "2021-04-13T20:21:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r520218986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520218986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520220823",
      "pull_request_review_id": 526776653,
      "id": 520220823,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyMDgyMw==",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+\n+from test_framework.key import ECKey",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "208c296a5770d6a343226f59330daff5feca66a9",
      "in_reply_to_id": 520218986,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2020-11-10T01:07:49Z",
      "updated_at": "2021-04-13T20:21:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r520220823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520220823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578385022",
      "pull_request_review_id": 593169597,
      "id": 578385022,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODM4NTAyMg==",
      "diff_hunk": "@@ -4567,3 +4567,287 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return ret;\n }\n+\n+bool CWallet::MigrateToDescriptor(bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    LOCK(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet from Legacy to Descriptor.\\n\");\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(cs_wallets);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(vpwallets.begin(), vpwallets.end(), [this](std::shared_ptr<CWallet> w) {\n+                return w.get() == this;\n+            });\n+        assert(i != vpwallets.end());\n+        this_wallet = *i;\n+        vpwallets.erase(i);\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::path(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);",
      "path": "src/wallet/wallet.cpp",
      "position": 118,
      "original_position": 77,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "1452840f940d2c6b106efd8a9cc96c35afe98b6d",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This looks scary to me. Let's not delete the old wallet, but rename it. You know, just in case something with the migration didn't go well it's good to have a backup.",
      "created_at": "2021-02-18T12:40:27Z",
      "updated_at": "2021-04-13T20:21:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r578385022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578385022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3699,
      "original_line": 3699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578626248",
      "pull_request_review_id": 593491124,
      "id": 578626248,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODYyNjI0OA==",
      "diff_hunk": "@@ -4567,3 +4567,287 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return ret;\n }\n+\n+bool CWallet::MigrateToDescriptor(bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    LOCK(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet from Legacy to Descriptor.\\n\");\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(cs_wallets);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(vpwallets.begin(), vpwallets.end(), [this](std::shared_ptr<CWallet> w) {\n+                return w.get() == this;\n+            });\n+        assert(i != vpwallets.end());\n+        this_wallet = *i;\n+        vpwallets.erase(i);\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::path(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);",
      "path": "src/wallet/wallet.cpp",
      "position": 118,
      "original_position": 77,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "1452840f940d2c6b106efd8a9cc96c35afe98b6d",
      "in_reply_to_id": 578385022,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~20 lines earlier we make a backup of the wallet. So there is still a backup and we're just removing the original after it is backed up.",
      "created_at": "2021-02-18T17:50:19Z",
      "updated_at": "2021-04-13T20:21:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r578626248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578626248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3699,
      "original_line": 3699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578653465",
      "pull_request_review_id": 593525638,
      "id": 578653465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODY1MzQ2NQ==",
      "diff_hunk": "@@ -4567,3 +4567,287 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return ret;\n }\n+\n+bool CWallet::MigrateToDescriptor(bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    LOCK(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet from Legacy to Descriptor.\\n\");\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(cs_wallets);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(vpwallets.begin(), vpwallets.end(), [this](std::shared_ptr<CWallet> w) {\n+                return w.get() == this;\n+            });\n+        assert(i != vpwallets.end());\n+        this_wallet = *i;\n+        vpwallets.erase(i);\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::path(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);",
      "path": "src/wallet/wallet.cpp",
      "position": 118,
      "original_position": 77,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "1452840f940d2c6b106efd8a9cc96c35afe98b6d",
      "in_reply_to_id": 578385022,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, sounds good to me then.",
      "created_at": "2021-02-18T18:29:56Z",
      "updated_at": "2021-04-13T20:21:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r578653465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578653465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3699,
      "original_line": 3699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764305735",
      "pull_request_review_id": 825701730,
      "id": 764305735,
      "node_id": "PRRC_kwDOABII584tjmFH",
      "diff_hunk": "@@ -4839,6 +4839,37 @@ static RPCHelpMan walletdisplayaddress()\n }\n #endif // ENABLE_EXTERNAL_SIGNER\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n+    EnsureWalletIsUnlocked(*pwallet);\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is this ignored?",
      "created_at": "2021-12-07T19:37:02Z",
      "updated_at": "2021-12-07T19:42:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764305735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764305735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764307528",
      "pull_request_review_id": 825701730,
      "id": 764307528,
      "node_id": "PRRC_kwDOABII584tjmhI",
      "diff_hunk": "@@ -1613,6 +1613,351 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n+const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+\n+    // All keys have at least P2PK and P2PKH\n+    for (const auto& key_pair : mapKeys) {\n+        const CPubKey& pub = key_pair.second.GetPubKey();\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        const CPubKey& pub = key_pair.second.first;\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+\n+    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    // The watchonly ones will be in setWatchOnly which we deal with later\n+    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        if (IsMine(script) == ISMINE_SPENDABLE) {\n+            // Add ScriptHash for scripts that are not already P2SH\n+            if (!script.IsPayToScriptHash()) {\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n+            // For segwit scripts, we only consider them spendable if we have the segwit spk\n+            int wit_ver = -1;\n+            std::vector<unsigned char> witprog;\n+            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+                spks.insert(script);\n+            }\n+        } else {\n+            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+            // So check the P2SH of a multisig to see if we should insert it\n+            std::vector<std::vector<unsigned char>> sols;\n+            TxoutType type = Solver(script, sols);\n+            if (type == TxoutType::MULTISIG) {\n+                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n+                if (IsMine(ms_spk) != ISMINE_NO) {\n+                    spks.insert(ms_spk);\n+                }\n+            }\n+        }\n+    }\n+\n+    // All watchonly scripts are raw\n+    spks.insert(setWatchOnly.begin(), setWatchOnly.end());\n+\n+    return spks;\n+}\n+\n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    auto spks_temp = GetScriptPubKeys();\n+    spks.insert(spks_temp.begin(), spks_temp.end());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    auto spks{GetScriptPubKeys()};\r\n```\r\n\r\nDoes this not compile?",
      "created_at": "2021-12-07T19:39:37Z",
      "updated_at": "2021-12-07T19:42:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764307528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764307528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1678,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764309208",
      "pull_request_review_id": 825701730,
      "id": 764309208,
      "node_id": "PRRC_kwDOABII584tjm7Y",
      "diff_hunk": "@@ -3335,3 +3335,328 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords(error)) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        SetupDescriptorScriptPubKeyMans();\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& tx_pair : mapWallet) {\n+        if (!IsMine(*tx_pair.second.tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripst weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*tx_pair.second.tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(tx_pair.second.tx, tx_pair.second.m_confirm)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(tx_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = _(\"Error: Transaction in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        if (!IsMine(addr_pair.first)) {\n+            // Check the address book data is the watchonly wallet's\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Not ours, not in watchonly wallet, and not in solvable\n+            error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool MigrateLegacyToDescriptor(CWallet& wallet, WalletContext& context, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    LOCK(wallet.cs_wallet);\n+\n+    // First change to using SQLite\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(context.wallets_mutex);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(context.wallets.begin(), context.wallets.end(), [&wallet](std::shared_ptr<CWallet> w) {\n+                return w.get() == &wallet;\n+            });\n+        assert(i != context.wallets.end());\n+        this_wallet = *i;\n+        context.wallets.erase(i);\n+    }\n+    // Now do the database stuff\n+    if (!wallet.MigrateToSQLite(error ,warnings)) return false;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 257,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "clang-format?",
      "created_at": "2021-12-07T19:42:05Z",
      "updated_at": "2021-12-07T19:42:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764309208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764309208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764330580",
      "pull_request_review_id": 825734327,
      "id": 764330580,
      "node_id": "PRRC_kwDOABII584tjsJU",
      "diff_hunk": "@@ -4839,6 +4839,37 @@ static RPCHelpMan walletdisplayaddress()\n }\n #endif // ENABLE_EXTERNAL_SIGNER\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n+    EnsureWalletIsUnlocked(*pwallet);\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "in_reply_to_id": 764305735,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed, as well as in the `Migrate*` functions that aren't actually using `warnings`.",
      "created_at": "2021-12-07T20:15:41Z",
      "updated_at": "2021-12-07T20:15:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764330580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764330580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764330629",
      "pull_request_review_id": 825734412,
      "id": 764330629,
      "node_id": "PRRC_kwDOABII584tjsKF",
      "diff_hunk": "@@ -1613,6 +1613,351 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n+const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+\n+    // All keys have at least P2PK and P2PKH\n+    for (const auto& key_pair : mapKeys) {\n+        const CPubKey& pub = key_pair.second.GetPubKey();\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        const CPubKey& pub = key_pair.second.first;\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+\n+    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    // The watchonly ones will be in setWatchOnly which we deal with later\n+    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        if (IsMine(script) == ISMINE_SPENDABLE) {\n+            // Add ScriptHash for scripts that are not already P2SH\n+            if (!script.IsPayToScriptHash()) {\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n+            // For segwit scripts, we only consider them spendable if we have the segwit spk\n+            int wit_ver = -1;\n+            std::vector<unsigned char> witprog;\n+            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+                spks.insert(script);\n+            }\n+        } else {\n+            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+            // So check the P2SH of a multisig to see if we should insert it\n+            std::vector<std::vector<unsigned char>> sols;\n+            TxoutType type = Solver(script, sols);\n+            if (type == TxoutType::MULTISIG) {\n+                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n+                if (IsMine(ms_spk) != ISMINE_NO) {\n+                    spks.insert(ms_spk);\n+                }\n+            }\n+        }\n+    }\n+\n+    // All watchonly scripts are raw\n+    spks.insert(setWatchOnly.begin(), setWatchOnly.end());\n+\n+    return spks;\n+}\n+\n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    auto spks_temp = GetScriptPubKeys();\n+    spks.insert(spks_temp.begin(), spks_temp.end());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "in_reply_to_id": 764307528,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-12-07T20:15:48Z",
      "updated_at": "2021-12-07T20:15:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764330629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764330629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1678,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764330739",
      "pull_request_review_id": 825734528,
      "id": 764330739,
      "node_id": "PRRC_kwDOABII584tjsLz",
      "diff_hunk": "@@ -3335,3 +3335,328 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords(error)) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        SetupDescriptorScriptPubKeyMans();\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& tx_pair : mapWallet) {\n+        if (!IsMine(*tx_pair.second.tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripst weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*tx_pair.second.tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(tx_pair.second.tx, tx_pair.second.m_confirm)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(tx_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = _(\"Error: Transaction in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        if (!IsMine(addr_pair.first)) {\n+            // Check the address book data is the watchonly wallet's\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Not ours, not in watchonly wallet, and not in solvable\n+            error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool MigrateLegacyToDescriptor(CWallet& wallet, WalletContext& context, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    LOCK(wallet.cs_wallet);\n+\n+    // First change to using SQLite\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(context.wallets_mutex);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(context.wallets.begin(), context.wallets.end(), [&wallet](std::shared_ptr<CWallet> w) {\n+                return w.get() == &wallet;\n+            });\n+        assert(i != context.wallets.end());\n+        this_wallet = *i;\n+        context.wallets.erase(i);\n+    }\n+    // Now do the database stuff\n+    if (!wallet.MigrateToSQLite(error ,warnings)) return false;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 257,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "05d0543dd50e85c0bef89264d8e68b323cadefba",
      "in_reply_to_id": 764309208,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No longer relevant with warnings being removed",
      "created_at": "2021-12-07T20:15:58Z",
      "updated_at": "2021-12-07T20:16:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764330739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764330739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764332198",
      "pull_request_review_id": 825736447,
      "id": 764332198,
      "node_id": "PRRC_kwDOABII584tjsim",
      "diff_hunk": "@@ -3335,3 +3335,330 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords(error)) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        SetupDescriptorScriptPubKeyMans();\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& tx_pair : mapWallet) {\n+        if (!IsMine(*tx_pair.second.tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripst weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*tx_pair.second.tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(tx_pair.second.tx, tx_pair.second.m_confirm)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(tx_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = _(\"Error: Transaction in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        if (!IsMine(addr_pair.first)) {\n+            // Check the address book data is the watchonly wallet's\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Not ours, not in watchonly wallet, and not in solvable\n+            error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool MigrateLegacyToDescriptor(CWallet& wallet, WalletContext& context, bilingual_str& error)\n+{\n+    LOCK(wallet.cs_wallet);\n+\n+    // First change to using SQLite\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(context.wallets_mutex);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(context.wallets.begin(), context.wallets.end(), [&wallet](std::shared_ptr<CWallet> w) {\n+                return w.get() == &wallet;\n+            });\n+        assert(i != context.wallets.end());\n+        this_wallet = *i;\n+        context.wallets.erase(i);\n+    }\n+    // Now do the database stuff\n+    if (!wallet.MigrateToSQLite(error)) return false;\n+    // Put the wallet back in vpwallets because we are now done with messing with m_database\n+    {\n+        LOCK(context.wallets_mutex);\n+        context.wallets.push_back(this_wallet);\n+    }\n+\n+    // Then get all of the descriptors from the legacy wallet\n+    std::optional<MigrationData> data = wallet.GetDescriptorsForLegacy(error);\n+    if (data == std::nullopt) return false;\n+\n+    // Create the watchonly and solvable wallets if necessary\n+    if (data->watch_descs.size() > 0 || data->solvable_descs.size() > 0) {\n+        DatabaseOptions options;\n+        options.require_existing = false;\n+        options.require_create = true;\n+\n+        // Make the wallets\n+        options.create_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            options.create_flags |= WALLET_FLAG_AVOID_REUSE;\n+        }\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+            options.create_flags |= WALLET_FLAG_KEY_ORIGIN_METADATA;\n+        }\n+        if (data->watch_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the watched scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;",
      "path": "src/wallet/wallet.cpp",
      "position": 367,
      "original_position": 286,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "86e1ff3e7a053e6551f8d49db7bdc990ea0f52d6",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "well, now you are ignoring those?",
      "created_at": "2021-12-07T20:18:21Z",
      "updated_at": "2021-12-07T20:18:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764332198",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764332198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3948,
      "original_line": 3948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764358944",
      "pull_request_review_id": 825771174,
      "id": 764358944,
      "node_id": "PRRC_kwDOABII584tjzEg",
      "diff_hunk": "@@ -3335,3 +3335,330 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        std::vector<unsigned char> key(ss_key.begin(), ss_key.end());\n+        std::vector<unsigned char> value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Make a backup of the DB\n+    std::string backup_path = strprintf(\"%s-%d.legacy.bak\", m_database->Filename(), GetTime());\n+    if (!BackupWallet(backup_path)) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.branch_path();\n+    std::string db_filename = db_path.leaf().string();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords(error)) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        SetupDescriptorScriptPubKeyMans();\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& tx_pair : mapWallet) {\n+        if (!IsMine(*tx_pair.second.tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripst weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*tx_pair.second.tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(tx_pair.second.tx, tx_pair.second.m_confirm)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(tx_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = _(\"Error: Transaction in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        if (!IsMine(addr_pair.first)) {\n+            // Check the address book data is the watchonly wallet's\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                    // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                    std::string label = addr_pair.second.GetLabel();\n+                    std::string purpose = addr_pair.second.purpose;\n+                    if (!purpose.empty()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                    }\n+                    if (!addr_pair.second.IsChange()) {\n+                        data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                    }\n+                    dests_to_delete.push_back(addr_pair.first);\n+                    continue;\n+                }\n+            }\n+            // Not ours, not in watchonly wallet, and not in solvable\n+            error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+            return false;\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool MigrateLegacyToDescriptor(CWallet& wallet, WalletContext& context, bilingual_str& error)\n+{\n+    LOCK(wallet.cs_wallet);\n+\n+    // First change to using SQLite\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    std::shared_ptr<CWallet> this_wallet{nullptr};\n+    {\n+        LOCK(context.wallets_mutex);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(context.wallets.begin(), context.wallets.end(), [&wallet](std::shared_ptr<CWallet> w) {\n+                return w.get() == &wallet;\n+            });\n+        assert(i != context.wallets.end());\n+        this_wallet = *i;\n+        context.wallets.erase(i);\n+    }\n+    // Now do the database stuff\n+    if (!wallet.MigrateToSQLite(error)) return false;\n+    // Put the wallet back in vpwallets because we are now done with messing with m_database\n+    {\n+        LOCK(context.wallets_mutex);\n+        context.wallets.push_back(this_wallet);\n+    }\n+\n+    // Then get all of the descriptors from the legacy wallet\n+    std::optional<MigrationData> data = wallet.GetDescriptorsForLegacy(error);\n+    if (data == std::nullopt) return false;\n+\n+    // Create the watchonly and solvable wallets if necessary\n+    if (data->watch_descs.size() > 0 || data->solvable_descs.size() > 0) {\n+        DatabaseOptions options;\n+        options.require_existing = false;\n+        options.require_create = true;\n+\n+        // Make the wallets\n+        options.create_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            options.create_flags |= WALLET_FLAG_AVOID_REUSE;\n+        }\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+            options.create_flags |= WALLET_FLAG_KEY_ORIGIN_METADATA;\n+        }\n+        if (data->watch_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the watched scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;",
      "path": "src/wallet/wallet.cpp",
      "position": 367,
      "original_position": 286,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "86e1ff3e7a053e6551f8d49db7bdc990ea0f52d6",
      "in_reply_to_id": 764332198,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that those warnings matter. There aren't any warnings for newly created wallets. These were being ignored originally anyways.",
      "created_at": "2021-12-07T21:01:48Z",
      "updated_at": "2021-12-07T21:01:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r764358944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764358944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3948,
      "original_line": 3948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/782808718",
      "pull_request_review_id": 850107034,
      "id": 782808718,
      "node_id": "PRRC_kwDOABII584uqLaO",
      "diff_hunk": "@@ -0,0 +1,288 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        self.nodes[0].createwallet(wallet_name=\"basic0\")\n+        basic0 = self.nodes[0].get_wallet_rpc(\"basic0\")\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        assert_equal(basic0.getaddressinfo(addr)[\"ismine\"], True)\n+        assert_equal(basic0.getaddressinfo(change)[\"ismine\"], True)\n+\n+        basic0.migratewallet()\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        addr_info = basic0.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(basic0.getaddressinfo(change)[\"ismine\"], True)\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        self.nodes[0].createwallet(wallet_name=\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], False)\n+\n+        for i in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)",
      "path": "test/functional/wallet_migration.py",
      "position": 111,
      "original_position": 66,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "f07785d39bafc0580e70f4b2493abe6450a727dc",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "                                   test_framework.authproxy.JSONRPCException: Requested wallet does not exist or is not loaded (-18)\r\n\r\n\r\nhttps://cirrus-ci.com/task/6547488835371008?logs=ci#L4027",
      "created_at": "2022-01-12T08:26:29Z",
      "updated_at": "2022-01-12T08:26:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r782808718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/782808718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943945409",
      "pull_request_review_id": 1070374412,
      "id": 943945409,
      "node_id": "PRRC_kwDOABII5844Q3bB",
      "diff_hunk": "@@ -1707,6 +1707,241 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 107,
      "original_position": 41,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "b3c980690881361ab1db00d7693de6f6452cb0e1",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Guess that you are looping first through `mapKeys` and `mapCryptedKeys` because in non-HD wallets we were not storing an entry inside `mapKeyMetadata` for each key?\r\n\r\nBecause otherwise, if we always have an entry inside `mapKeyMetadata` for each key, we could just loop through `mapKeyMetadata` to generate each single key combo descriptor directly.",
      "created_at": "2022-08-11T21:14:29Z",
      "updated_at": "2022-08-11T21:14:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r943945409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943945409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": 1726,
      "original_start_line": 1721,
      "start_side": "RIGHT",
      "line": 1752,
      "original_line": 1752,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943949959",
      "pull_request_review_id": 1070380400,
      "id": 943949959,
      "node_id": "PRRC_kwDOABII5844Q4iH",
      "diff_hunk": "@@ -1707,6 +1707,241 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 107,
      "original_position": 41,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "b3c980690881361ab1db00d7693de6f6452cb0e1",
      "in_reply_to_id": 943945409,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are some situations where a key record can exist without a corresponding metadata record. So it's safer to go through all of the keys and pull up their metadata than just iterating `mapKeyMetadata`",
      "created_at": "2022-08-11T21:21:10Z",
      "updated_at": "2022-08-11T21:21:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r943949959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943949959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": 1726,
      "original_start_line": 1721,
      "start_side": "RIGHT",
      "line": 1752,
      "original_line": 1752,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944416019",
      "pull_request_review_id": 1071019599,
      "id": 944416019,
      "node_id": "PRRC_kwDOABII5844SqUT",
      "diff_hunk": "@@ -1947,6 +1947,69 @@ std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n     return out;\n }\n \n+bool LegacyScriptPubKeyMan::DeleteRecords(bilingual_str& error)\n+{\n+    LOCK(cs_KeyStore);\n+    WalletBatch batch(m_storage.GetDatabase());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 325,
      "original_position": 7,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "0e4f63e871225514a185de375cff1a777d52f552",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "let's begin a db txn here and commit it at the end of the function.\r\n\r\notherwise if an error arises in the middle, we will end up with half of the information removed.",
      "created_at": "2022-08-12T12:31:16Z",
      "updated_at": "2022-08-12T12:41:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r944416019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944416019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1970,
      "original_line": 1970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944587091",
      "pull_request_review_id": 1071272317,
      "id": 944587091,
      "node_id": "PRRC_kwDOABII5844TUFT",
      "diff_hunk": "@@ -1947,6 +1947,69 @@ std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n     return out;\n }\n \n+bool LegacyScriptPubKeyMan::DeleteRecords(bilingual_str& error)\n+{\n+    LOCK(cs_KeyStore);\n+    WalletBatch batch(m_storage.GetDatabase());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 325,
      "original_position": 7,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "0e4f63e871225514a185de375cff1a777d52f552",
      "in_reply_to_id": 944416019,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point.",
      "created_at": "2022-08-12T15:37:55Z",
      "updated_at": "2022-08-12T15:37:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r944587091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944587091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1970,
      "original_line": 1970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945714905",
      "pull_request_review_id": 1072659073,
      "id": 945714905,
      "node_id": "PRRC_kwDOABII5844XnbZ",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')",
      "path": "test/functional/wallet_migration.py",
      "position": 37,
      "original_position": 32,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "47b4eedc7534c8508a85dc6066bac9e01889d5f9",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "couldn't just do a `getwalletinfo()[\"format\"] == \"sqlite\"`?",
      "created_at": "2022-08-15T13:11:50Z",
      "updated_at": "2022-08-15T20:03:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r945714905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945714905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": 33,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/946177225",
      "pull_request_review_id": 1073288927,
      "id": 946177225,
      "node_id": "PRRC_kwDOABII5844ZYTJ",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')",
      "path": "test/functional/wallet_migration.py",
      "position": 37,
      "original_position": 32,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "47b4eedc7534c8508a85dc6066bac9e01889d5f9",
      "in_reply_to_id": 945714905,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For these upgrade tests, I prefer to have checks external to the actual code as in-memory state could be different from on-disk state.",
      "created_at": "2022-08-15T22:27:50Z",
      "updated_at": "2022-08-15T22:27:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r946177225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/946177225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": 33,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947819443",
      "pull_request_review_id": 1075563133,
      "id": 947819443,
      "node_id": "PRRC_kwDOABII5844fpOz",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+Wallet\n+======\n+\n+Migrating Legacy Wallets to Descriptor Wallets\n+---------------------------------------------\n+\n+An experimental RPC `migratewallet` has been added to migrate Legacy (non-descriptor) wallets to\n+Descriptor wallets. Migrated wallets will have all of their addresses and private keys added to\n+a newly created Descriptor wallet that has the same name as the original wallet. Because Descriptor\n+wallets do not support having private keys and watch-only scripts, there may be up to two\n+additional wallets created after migration. In addition to a descriptor wallet of the same name,\n+there may also be a wallet named `<name>_watchonly` and `<name>_solvables`. `<name>_watchonly`\n+contains all of the watchonly scripts. `<name>_solvables` contains any scripts which the wallet\n+knows the but is not watching the corresponding P2(W)SH scripts.\n+\n+Migrated wallets will also generate new addresses differently. While the same BIP 32 seed will be\n+used, the BIP 44, 49, 84, and 86 standard derivation paths will be used. After migrating, a new\n+backup of the wallet(s) will need to be created.\n+\n+Given that there is an extremely large number of possible configurations for the scripts that\n+Legacy wallets can know about, be watching for, and be able to sign for, `migratewallet` only\n+makes a best effort attempt to capture all of these things into Descriptor wallets. There may be\n+unforseen configurations which result in some scripts being excluded. If a migration fails\n+unexpectedly or otherwise misses any scripts, please create an issue on GitHub. A backup of the\n+original wallet can be found in the wallet directory with the name `<name>-<timestamp>.legacy.bak`.",
      "path": "doc/release-notes-19602.md",
      "position": null,
      "original_position": 25,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "5729eb9c8cc998956d20eb4307de6ab02371920b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What should the user do if there's a .log file? Delete it?",
      "created_at": "2022-08-17T11:35:39Z",
      "updated_at": "2022-08-17T11:35:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r947819443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947819443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947821491",
      "pull_request_review_id": 1075566165,
      "id": 947821491,
      "node_id": "PRRC_kwDOABII5844fpuz",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+Wallet\n+======\n+\n+Migrating Legacy Wallets to Descriptor Wallets\n+---------------------------------------------\n+\n+An experimental RPC `migratewallet` has been added to migrate Legacy (non-descriptor) wallets to\n+Descriptor wallets. Migrated wallets will have all of their addresses and private keys added to\n+a newly created Descriptor wallet that has the same name as the original wallet. Because Descriptor\n+wallets do not support having private keys and watch-only scripts, there may be up to two\n+additional wallets created after migration. In addition to a descriptor wallet of the same name,\n+there may also be a wallet named `<name>_watchonly` and `<name>_solvables`. `<name>_watchonly`\n+contains all of the watchonly scripts. `<name>_solvables` contains any scripts which the wallet\n+knows the but is not watching the corresponding P2(W)SH scripts.\n+\n+Migrated wallets will also generate new addresses differently. While the same BIP 32 seed will be\n+used, the BIP 44, 49, 84, and 86 standard derivation paths will be used. After migrating, a new\n+backup of the wallet(s) will need to be created.\n+\n+Given that there is an extremely large number of possible configurations for the scripts that\n+Legacy wallets can know about, be watching for, and be able to sign for, `migratewallet` only\n+makes a best effort attempt to capture all of these things into Descriptor wallets. There may be\n+unforseen configurations which result in some scripts being excluded. If a migration fails\n+unexpectedly or otherwise misses any scripts, please create an issue on GitHub. A backup of the\n+original wallet can be found in the wallet directory with the name `<name>-<timestamp>.legacy.bak`.",
      "path": "doc/release-notes-19602.md",
      "position": null,
      "original_position": 25,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "5729eb9c8cc998956d20eb4307de6ab02371920b",
      "in_reply_to_id": 947819443,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(in the context of restoring a backup, since it's a bit unclear if the log file belongs to the backup, the current version - could it interfere? -  or if it's just an artefact from before the backup was made, and safe to delete)",
      "created_at": "2022-08-17T11:38:08Z",
      "updated_at": "2022-08-17T11:38:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r947821491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947821491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948123820",
      "pull_request_review_id": 1075993331,
      "id": 948123820,
      "node_id": "PRRC_kwDOABII5844gzis",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+Wallet\n+======\n+\n+Migrating Legacy Wallets to Descriptor Wallets\n+---------------------------------------------\n+\n+An experimental RPC `migratewallet` has been added to migrate Legacy (non-descriptor) wallets to\n+Descriptor wallets. Migrated wallets will have all of their addresses and private keys added to\n+a newly created Descriptor wallet that has the same name as the original wallet. Because Descriptor\n+wallets do not support having private keys and watch-only scripts, there may be up to two\n+additional wallets created after migration. In addition to a descriptor wallet of the same name,\n+there may also be a wallet named `<name>_watchonly` and `<name>_solvables`. `<name>_watchonly`\n+contains all of the watchonly scripts. `<name>_solvables` contains any scripts which the wallet\n+knows the but is not watching the corresponding P2(W)SH scripts.\n+\n+Migrated wallets will also generate new addresses differently. While the same BIP 32 seed will be\n+used, the BIP 44, 49, 84, and 86 standard derivation paths will be used. After migrating, a new\n+backup of the wallet(s) will need to be created.\n+\n+Given that there is an extremely large number of possible configurations for the scripts that\n+Legacy wallets can know about, be watching for, and be able to sign for, `migratewallet` only\n+makes a best effort attempt to capture all of these things into Descriptor wallets. There may be\n+unforseen configurations which result in some scripts being excluded. If a migration fails\n+unexpectedly or otherwise misses any scripts, please create an issue on GitHub. A backup of the\n+original wallet can be found in the wallet directory with the name `<name>-<timestamp>.legacy.bak`.",
      "path": "doc/release-notes-19602.md",
      "position": null,
      "original_position": 25,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "5729eb9c8cc998956d20eb4307de6ab02371920b",
      "in_reply_to_id": 947819443,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's safe to delete. The backup uses our normal backup code which compacts everything into the db so log files are no longer needed.",
      "created_at": "2022-08-17T15:39:14Z",
      "updated_at": "2022-08-17T15:39:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r948123820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948123820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950255610",
      "pull_request_review_id": 1078920341,
      "id": 950255610,
      "node_id": "PRRC_kwDOABII5844o7_6",
      "diff_hunk": "@@ -701,6 +701,36 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\",",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "515dec58fbb299b926dea27288aaba467af408b0",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe this could mention that a backup will be created in the same manner as by using `backupwallet`, that can be restored using `restorewallet`?",
      "created_at": "2022-08-19T14:31:19Z",
      "updated_at": "2022-08-19T14:56:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r950255610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950255610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 707,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 709,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950262172",
      "pull_request_review_id": 1078920341,
      "id": 950262172,
      "node_id": "PRRC_kwDOABII5844o9mc",
      "diff_hunk": "@@ -120,4 +120,29 @@ After that, `getwalletinfo` can be used to check if the wallet has been fully re\n $ bitcoin-cli -rpcwallet=\"restored-wallet\" getwalletinfo\n ```\n \n-The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n\\ No newline at end of file\n+The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n+\n+## Migrating Legacy Wallets to Descriptor Wallets\n+\n+Legacy wallets (traditional non-descriptor wallets) can be migrated to become Descriptor wallets\n+through the use of the `migratewallet` RPC. Migrated wallets will have all of their addresses and private keys added to\n+a newly created Descriptor wallet that has the same name as the original wallet. Because Descriptor\n+wallets do not support having private keys and watch-only scripts, there may be up to two\n+additional wallets created after migration. In addition to a descriptor wallet of the same name,\n+there may also be a wallet named `<name>_watchonly` and `<name>_solvables`. `<name>_watchonly`\n+contains all of the watchonly scripts. `<name>_solvables` contains any scripts which the wallet\n+knows the but is not watching the corresponding P2(W)SH scripts.",
      "path": "doc/managing-wallets.md",
      "position": null,
      "original_position": 17,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "9e66a06566466a2d55b67d9363392883483bb9c9",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: typo \"knows the but is not watching\"",
      "created_at": "2022-08-19T14:37:14Z",
      "updated_at": "2022-08-19T14:56:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r950262172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950262172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950265763",
      "pull_request_review_id": 1078920341,
      "id": 950265763,
      "node_id": "PRRC_kwDOABII5844o-ej",
      "diff_hunk": "@@ -120,4 +120,29 @@ After that, `getwalletinfo` can be used to check if the wallet has been fully re\n $ bitcoin-cli -rpcwallet=\"restored-wallet\" getwalletinfo\n ```\n \n-The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n\\ No newline at end of file\n+The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n+\n+## Migrating Legacy Wallets to Descriptor Wallets",
      "path": "doc/managing-wallets.md",
      "position": 8,
      "original_position": 8,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "9e66a06566466a2d55b67d9363392883483bb9c9",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for adding documentation here.\r\n\r\nnit: instead of duplicating the text in the release notes, maybe we could link to this document? Also, we could link to this document from places were we say BDB is legacy (such as in build-UNIX.md for instance)?",
      "created_at": "2022-08-19T14:40:52Z",
      "updated_at": "2022-08-19T14:56:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r950265763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950265763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950367991",
      "pull_request_review_id": 1079070532,
      "id": 950367991,
      "node_id": "PRRC_kwDOABII5844pXb3",
      "diff_hunk": "@@ -701,6 +701,36 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\",",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "515dec58fbb299b926dea27288aaba467af408b0",
      "in_reply_to_id": 950255610,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added some text about that.",
      "created_at": "2022-08-19T16:21:58Z",
      "updated_at": "2022-08-19T16:21:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r950367991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950367991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 707,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 709,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950368045",
      "pull_request_review_id": 1079070629,
      "id": 950368045,
      "node_id": "PRRC_kwDOABII5844pXct",
      "diff_hunk": "@@ -120,4 +120,29 @@ After that, `getwalletinfo` can be used to check if the wallet has been fully re\n $ bitcoin-cli -rpcwallet=\"restored-wallet\" getwalletinfo\n ```\n \n-The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n\\ No newline at end of file\n+The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n+\n+## Migrating Legacy Wallets to Descriptor Wallets\n+\n+Legacy wallets (traditional non-descriptor wallets) can be migrated to become Descriptor wallets\n+through the use of the `migratewallet` RPC. Migrated wallets will have all of their addresses and private keys added to\n+a newly created Descriptor wallet that has the same name as the original wallet. Because Descriptor\n+wallets do not support having private keys and watch-only scripts, there may be up to two\n+additional wallets created after migration. In addition to a descriptor wallet of the same name,\n+there may also be a wallet named `<name>_watchonly` and `<name>_solvables`. `<name>_watchonly`\n+contains all of the watchonly scripts. `<name>_solvables` contains any scripts which the wallet\n+knows the but is not watching the corresponding P2(W)SH scripts.",
      "path": "doc/managing-wallets.md",
      "position": null,
      "original_position": 17,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "9e66a06566466a2d55b67d9363392883483bb9c9",
      "in_reply_to_id": 950262172,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-08-19T16:22:04Z",
      "updated_at": "2022-08-19T16:22:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r950368045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950368045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950368101",
      "pull_request_review_id": 1079070712,
      "id": 950368101,
      "node_id": "PRRC_kwDOABII5844pXdl",
      "diff_hunk": "@@ -120,4 +120,29 @@ After that, `getwalletinfo` can be used to check if the wallet has been fully re\n $ bitcoin-cli -rpcwallet=\"restored-wallet\" getwalletinfo\n ```\n \n-The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n\\ No newline at end of file\n+The restored wallet can also be loaded in the GUI via `File` ->`Open wallet`.\n+\n+## Migrating Legacy Wallets to Descriptor Wallets",
      "path": "doc/managing-wallets.md",
      "position": 8,
      "original_position": 8,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "9e66a06566466a2d55b67d9363392883483bb9c9",
      "in_reply_to_id": 950265763,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-19T16:22:10Z",
      "updated_at": "2022-08-19T16:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r950368101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950368101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954118657",
      "pull_request_review_id": 1084285517,
      "id": 954118657,
      "node_id": "PRRC_kwDOABII58443rIB",
      "diff_hunk": "@@ -1658,6 +1658,360 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n+const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+\n+    // All keys have at least P2PK and P2PKH\n+    for (const auto& key_pair : mapKeys) {\n+        const CPubKey& pub = key_pair.second.GetPubKey();\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        const CPubKey& pub = key_pair.second.first;\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+\n+    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    // The watchonly ones will be in setWatchOnly which we deal with later\n+    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        if (IsMine(script) == ISMINE_SPENDABLE) {\n+            // Add ScriptHash for scripts that are not already P2SH\n+            if (!script.IsPayToScriptHash()) {\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n+            // For segwit scripts, we only consider them spendable if we have the segwit spk\n+            int wit_ver = -1;\n+            std::vector<unsigned char> witprog;\n+            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+                spks.insert(script);\n+            }\n+        } else {\n+            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+            // So check the P2SH of a multisig to see if we should insert it\n+            std::vector<std::vector<unsigned char>> sols;\n+            TxoutType type = Solver(script, sols);\n+            if (type == TxoutType::MULTISIG) {\n+                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n+                if (IsMine(ms_spk) != ISMINE_NO) {\n+                    spks.insert(ms_spk);\n+                }\n+            }\n+        }\n+    }\n+\n+    // All watchonly scripts are raw\n+    spks.insert(setWatchOnly.begin(), setWatchOnly.end());\n+\n+    return spks;\n+}\n+\n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::set<CHDChain> chains;\n+    chains.insert(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.insert(chain_pair.second);\n+    }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "5967384781c4d0392781be1d630c786955f58c2e",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this be a vector, assuming `m_inactive_hd_chains` doesn't store repeated `CHDChain` items ?\r\nThis way, changing `src/wallet/walletdb.h` would not be necessary..\r\n\r\n```suggestion\r\n    std::vector<CHDChain> chains;\r\n    chains.push_back(m_hd_chain);\r\n    for (const auto& chain_pair : m_inactive_hd_chains) {\r\n        chains.push_back(chain_pair.second);\r\n    }\r\n```",
      "created_at": "2022-08-24T17:59:47Z",
      "updated_at": "2022-08-24T17:59:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954118657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954118657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1797,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954199278",
      "pull_request_review_id": 1084378039,
      "id": 954199278,
      "node_id": "PRRC_kwDOABII58443-zu",
      "diff_hunk": "@@ -1658,6 +1658,360 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n+const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+\n+    // All keys have at least P2PK and P2PKH\n+    for (const auto& key_pair : mapKeys) {\n+        const CPubKey& pub = key_pair.second.GetPubKey();\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        const CPubKey& pub = key_pair.second.first;\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+\n+    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    // The watchonly ones will be in setWatchOnly which we deal with later\n+    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        if (IsMine(script) == ISMINE_SPENDABLE) {\n+            // Add ScriptHash for scripts that are not already P2SH\n+            if (!script.IsPayToScriptHash()) {\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n+            // For segwit scripts, we only consider them spendable if we have the segwit spk\n+            int wit_ver = -1;\n+            std::vector<unsigned char> witprog;\n+            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+                spks.insert(script);\n+            }\n+        } else {\n+            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+            // So check the P2SH of a multisig to see if we should insert it\n+            std::vector<std::vector<unsigned char>> sols;\n+            TxoutType type = Solver(script, sols);\n+            if (type == TxoutType::MULTISIG) {\n+                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n+                if (IsMine(ms_spk) != ISMINE_NO) {\n+                    spks.insert(ms_spk);\n+                }\n+            }\n+        }\n+    }\n+\n+    // All watchonly scripts are raw\n+    spks.insert(setWatchOnly.begin(), setWatchOnly.end());\n+\n+    return spks;\n+}\n+\n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::set<CHDChain> chains;\n+    chains.insert(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.insert(chain_pair.second);\n+    }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "5967384781c4d0392781be1d630c786955f58c2e",
      "in_reply_to_id": 954118657,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-24T19:10:31Z",
      "updated_at": "2022-08-24T19:10:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954199278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954199278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1797,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954381720",
      "pull_request_review_id": 1084620947,
      "id": 954381720,
      "node_id": "PRRC_kwDOABII58444rWY",
      "diff_hunk": "@@ -1658,6 +1658,360 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n+const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+\n+    // All keys have at least P2PK and P2PKH\n+    for (const auto& key_pair : mapKeys) {\n+        const CPubKey& pub = key_pair.second.GetPubKey();\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        const CPubKey& pub = key_pair.second.first;\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+\n+    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    // The watchonly ones will be in setWatchOnly which we deal with later\n+    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        if (IsMine(script) == ISMINE_SPENDABLE) {\n+            // Add ScriptHash for scripts that are not already P2SH\n+            if (!script.IsPayToScriptHash()) {\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n+            // For segwit scripts, we only consider them spendable if we have the segwit spk\n+            int wit_ver = -1;\n+            std::vector<unsigned char> witprog;\n+            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+                spks.insert(script);\n+            }\n+        } else {\n+            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+            // So check the P2SH of a multisig to see if we should insert it\n+            std::vector<std::vector<unsigned char>> sols;\n+            TxoutType type = Solver(script, sols);\n+            if (type == TxoutType::MULTISIG) {\n+                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n+                if (IsMine(ms_spk) != ISMINE_NO) {\n+                    spks.insert(ms_spk);\n+                }\n+            }\n+        }\n+    }\n+\n+    // All watchonly scripts are raw\n+    spks.insert(setWatchOnly.begin(), setWatchOnly.end());\n+\n+    return spks;\n+}\n+\n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {\n+            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n+            CTxDestination witdest = WitnessV0ScriptHash(script);\n+            CScript witprog = GetScriptForDestination(witdest);\n+            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n+\n+            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n+            // For P2SH, a multisig is not ISMINE_NO when:\n+            // * All keys are in the wallet\n+            // * The multisig itself is watch only\n+            // * The P2SH is watch only\n+            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n+            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n+            // * The P2WSH script is in the wallet and it is being watched\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n+                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n+                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n+                continue;\n+            }\n+            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n+\n+            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n+            out.solvable_descs.push_back(sh_desc->ToString());\n+\n+            const auto desc = InferDescriptor(witprog, *this);\n+            if (desc->IsSolvable()) {\n+                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n+                out.solvable_descs.push_back(wsh_desc->ToString());\n+                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n+                out.solvable_descs.push_back(sh_wsh_desc->ToString());\n+            }\n+        }\n+    }\n+\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);\n+    return out;\n+}\n+\n+bool LegacyScriptPubKeyMan::DeleteRecords(bilingual_str& error)\n+{\n+    LOCK(cs_KeyStore);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.TxnBegin();\n+    // Remove the watchonly things\n+    for (const CScript& script : setWatchOnly) {\n+        if (!batch.EraseWatchOnly(script)) {\n+            error = strprintf(_(\"Error: Could not delete watch only script %s\"), HexStr(script));\n+            return false;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 302,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is `batch.Tx Abort();` required in case any deletion fails here?\r\n\r\n```suggestion\r\n            batch.TxnAbort();\r\n            return false;\r\n```",
      "created_at": "2022-08-24T23:36:57Z",
      "updated_at": "2022-08-24T23:37:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954381720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954381720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954384380",
      "pull_request_review_id": 1084624372,
      "id": 954384380,
      "node_id": "PRRC_kwDOABII58444r_8",
      "diff_hunk": "@@ -1658,6 +1658,360 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n+const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::unordered_set<CScript, SaltedSipHasher> spks;\n+\n+    // All keys have at least P2PK and P2PKH\n+    for (const auto& key_pair : mapKeys) {\n+        const CPubKey& pub = key_pair.second.GetPubKey();\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        const CPubKey& pub = key_pair.second.first;\n+        spks.insert(GetScriptForRawPubKey(pub));\n+        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    }\n+\n+    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    // The watchonly ones will be in setWatchOnly which we deal with later\n+    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        if (IsMine(script) == ISMINE_SPENDABLE) {\n+            // Add ScriptHash for scripts that are not already P2SH\n+            if (!script.IsPayToScriptHash()) {\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n+            // For segwit scripts, we only consider them spendable if we have the segwit spk\n+            int wit_ver = -1;\n+            std::vector<unsigned char> witprog;\n+            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+                spks.insert(script);\n+            }\n+        } else {\n+            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+            // So check the P2SH of a multisig to see if we should insert it\n+            std::vector<std::vector<unsigned char>> sols;\n+            TxoutType type = Solver(script, sols);\n+            if (type == TxoutType::MULTISIG) {\n+                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n+                if (IsMine(ms_spk) != ISMINE_NO) {\n+                    spks.insert(ms_spk);\n+                }\n+            }\n+        }\n+    }\n+\n+    // All watchonly scripts are raw\n+    spks.insert(setWatchOnly.begin(), setWatchOnly.end());\n+\n+    return spks;\n+}\n+\n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {\n+            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n+            CTxDestination witdest = WitnessV0ScriptHash(script);\n+            CScript witprog = GetScriptForDestination(witdest);\n+            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n+\n+            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n+            // For P2SH, a multisig is not ISMINE_NO when:\n+            // * All keys are in the wallet\n+            // * The multisig itself is watch only\n+            // * The P2SH is watch only\n+            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n+            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n+            // * The P2WSH script is in the wallet and it is being watched\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n+                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n+                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n+                continue;\n+            }\n+            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n+\n+            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n+            out.solvable_descs.push_back(sh_desc->ToString());\n+\n+            const auto desc = InferDescriptor(witprog, *this);\n+            if (desc->IsSolvable()) {\n+                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n+                out.solvable_descs.push_back(wsh_desc->ToString());\n+                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n+                out.solvable_descs.push_back(sh_wsh_desc->ToString());\n+            }\n+        }\n+    }\n+\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);\n+    return out;\n+}\n+\n+bool LegacyScriptPubKeyMan::DeleteRecords(bilingual_str& error)\n+{\n+    LOCK(cs_KeyStore);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.TxnBegin();\n+    // Remove the watchonly things\n+    for (const CScript& script : setWatchOnly) {\n+        if (!batch.EraseWatchOnly(script)) {\n+            error = strprintf(_(\"Error: Could not delete watch only script %s\"), HexStr(script));\n+            return false;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 302,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "in_reply_to_id": 954381720,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, `TxnAbort` will be called by the destructor.",
      "created_at": "2022-08-24T23:43:58Z",
      "updated_at": "2022-08-24T23:43:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954384380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954384380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954479292",
      "pull_request_review_id": 1084753433,
      "id": 954479292,
      "node_id": "PRRC_kwDOABII58445DK8",
      "diff_hunk": "@@ -1425,6 +1425,12 @@ bool CWallet::IsMine(const CTransaction& tx) const\n     for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n+    for (const CTxIn& txin : tx.vin) {\n+        const CWalletTx* wtx = GetWalletTx(txin.prevout.hash);\n+        if (wtx && wtx->tx->vout.size() > txin.prevout.n && IsMine(wtx->tx->vout[txin.prevout.n])) {\n+            return true;\n+        }\n+    }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The purpose here is to identify the transactions whose inputs belong to the wallet ?",
      "created_at": "2022-08-25T04:01:12Z",
      "updated_at": "2022-08-25T04:01:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954479292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954479292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1428,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1433,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954494003",
      "pull_request_review_id": 1084773529,
      "id": 954494003,
      "node_id": "PRRC_kwDOABII58445Gwz",
      "diff_hunk": "@@ -1425,6 +1425,12 @@ bool CWallet::IsMine(const CTransaction& tx) const\n     for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n+    for (const CTxIn& txin : tx.vin) {\n+        const CWalletTx* wtx = GetWalletTx(txin.prevout.hash);\n+        if (wtx && wtx->tx->vout.size() > txin.prevout.n && IsMine(wtx->tx->vout[txin.prevout.n])) {\n+            return true;\n+        }\n+    }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "in_reply_to_id": 954479292,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes",
      "created_at": "2022-08-25T04:39:42Z",
      "updated_at": "2022-08-25T04:39:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954494003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954494003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1428,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1433,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954902673",
      "pull_request_review_id": 1085350475,
      "id": 954902673,
      "node_id": "PRRC_kwDOABII58446qiR",
      "diff_hunk": "@@ -1425,6 +1425,12 @@ bool CWallet::IsMine(const CTransaction& tx) const\n     for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n+    for (const CTxIn& txin : tx.vin) {\n+        const CWalletTx* wtx = GetWalletTx(txin.prevout.hash);\n+        if (wtx && wtx->tx->vout.size() > txin.prevout.n && IsMine(wtx->tx->vout[txin.prevout.n])) {\n+            return true;\n+        }\n+    }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "in_reply_to_id": 954479292,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This `IsMine` change will have implications inside `AddToWalletIfInvolvingMe` as well.\r\nWe are checking tx ownership using the following conditions: `if (fExisted || IsMine(tx) || IsFromMe(tx))`\r\n\r\nSo, with this changes, the middle `IsMine` will check what `IsFromMe` currently checks. So.. either here or in a follow-up PR, can remove the `IsFromMe` function entirely.\r\n\r\nOther point is that you can simplify the code:\r\n```c++\r\nfor (const CTxIn& txin : tx.vin) {\r\n    if (IsMine(txin.prevout)) return true; \r\n}\r\n```",
      "created_at": "2022-08-25T12:25:46Z",
      "updated_at": "2022-08-25T12:25:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r954902673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954902673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1428,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1433,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955036992",
      "pull_request_review_id": 1085551351,
      "id": 955036992,
      "node_id": "PRRC_kwDOABII58447LVA",
      "diff_hunk": "@@ -242,6 +242,9 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n+    /** Returns a vector of all the scriptPubKeys that this ScriptPubKeyMan watches */\n+    virtual const std::unordered_set<CScript, SaltedSipHasher> GetScriptPubKeys() const { return {}; };",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad: I assume the goal here is to get faster lookups and random access deletions? E.g. in the `erase()` call in the next commit. \r\n\r\nAfaik there's no guarantee in the standard library that `std::unordered_set` will put elements in the same order between runs. So if deterministic behaviour is the goal of this change, it might be better to just stick to `std::vector` but call `sort()` on it before returning. But that's slower.\r\n\r\nCode comment nit: not a \"vector\"\r\n\r\nSuggest renaming commit to: \"scriptpubkeyman: Implement GetScriptPubKeys for Legacy\" (the current title suggests it's an entirely new method)",
      "created_at": "2022-08-25T14:25:09Z",
      "updated_at": "2022-08-25T14:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955036992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955036992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955067954",
      "pull_request_review_id": 1085551351,
      "id": 955067954,
      "node_id": "PRRC_kwDOABII58447S4y",
      "diff_hunk": "@@ -3633,7 +3633,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n \n         CTxDestination dest;\n-        if (!internal && ExtractDestination(script_pub_keys.at(0), dest)) {\n+        if (!internal && ExtractDestination(*script_pub_keys.begin(), dest)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad: shouldn't this be a loop over all elements anyway, for `combo()`. It seems it would always label the `P2PK` variant before (which `ExtractDestination` turns into `P2PKH`), and a random one after.",
      "created_at": "2022-08-25T14:50:06Z",
      "updated_at": "2022-08-25T14:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955067954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955067954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3636,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955092926",
      "pull_request_review_id": 1085632021,
      "id": 955092926,
      "node_id": "PRRC_kwDOABII58447Y--",
      "diff_hunk": "@@ -3946,7 +3946,7 @@ bool DoMigration(CWallet& wallet, WalletContext& context, bilingual_str& error,\n \n             DatabaseStatus status;\n             std::vector<bilingual_str> warnings;\n-            std::string wallet_name = wallet.Getname() + \"_watchonly\";\n+            std::string wallet_name = wallet.GetName() + \"_watchonly\";",
      "path": "src/wallet/wallet.cpp",
      "position": 368,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7ab26895d879e8cadd70109bd84c0b7e586c31a2",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps the change in `src/wallet/wallet.cpp` in https://github.com/bitcoin/bitcoin/commit/7ab26895d879e8cadd70109bd84c0b7e586c31a2 ('Add migratewallet RPC') could be squashed into https://github.com/bitcoin/bitcoin/commit/211c12bcd4545aa457a2efda17dfbf6a486407c3 ('Implement MigrateLegacyToDescriptor').\r\n\r\nCurrently, https://github.com/bitcoin/bitcoin/commit/211c12bcd4545aa457a2efda17dfbf6a486407c3 does not compile..",
      "created_at": "2022-08-25T15:10:19Z",
      "updated_at": "2022-08-25T15:10:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955092926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955092926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3949,
      "original_line": 3949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955098839",
      "pull_request_review_id": 1085642000,
      "id": 955098839,
      "node_id": "PRRC_kwDOABII58447abX",
      "diff_hunk": "@@ -242,6 +242,9 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n+    /** Returns a vector of all the scriptPubKeys that this ScriptPubKeyMan watches */\n+    virtual const std::unordered_set<CScript, SaltedSipHasher> GetScriptPubKeys() const { return {}; };",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": 955036992,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't need deterministic behavior. That's why I elected to use `std::unordered_set` and `SaltedSipHasher` (which is initialized with random salts).",
      "created_at": "2022-08-25T15:15:22Z",
      "updated_at": "2022-08-25T15:15:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955098839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955098839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955112456",
      "pull_request_review_id": 1085665665,
      "id": 955112456,
      "node_id": "PRRC_kwDOABII58447dwI",
      "diff_hunk": "@@ -242,6 +242,9 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n+    /** Returns a vector of all the scriptPubKeys that this ScriptPubKeyMan watches */\n+    virtual const std::unordered_set<CScript, SaltedSipHasher> GetScriptPubKeys() const { return {}; };",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": 955036992,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed the comment and commit message.",
      "created_at": "2022-08-25T15:26:39Z",
      "updated_at": "2022-08-25T15:26:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955112456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955112456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955112557",
      "pull_request_review_id": 1085665806,
      "id": 955112557,
      "node_id": "PRRC_kwDOABII58447dxt",
      "diff_hunk": "@@ -3633,7 +3633,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n \n         CTxDestination dest;\n-        if (!internal && ExtractDestination(script_pub_keys.at(0), dest)) {\n+        if (!internal && ExtractDestination(*script_pub_keys.begin(), dest)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": 955067954,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-25T15:26:45Z",
      "updated_at": "2022-08-25T15:26:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955112557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955112557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3636,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955112643",
      "pull_request_review_id": 1085665941,
      "id": 955112643,
      "node_id": "PRRC_kwDOABII58447dzD",
      "diff_hunk": "@@ -3946,7 +3946,7 @@ bool DoMigration(CWallet& wallet, WalletContext& context, bilingual_str& error,\n \n             DatabaseStatus status;\n             std::vector<bilingual_str> warnings;\n-            std::string wallet_name = wallet.Getname() + \"_watchonly\";\n+            std::string wallet_name = wallet.GetName() + \"_watchonly\";",
      "path": "src/wallet/wallet.cpp",
      "position": 368,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7ab26895d879e8cadd70109bd84c0b7e586c31a2",
      "in_reply_to_id": 955092926,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-25T15:26:49Z",
      "updated_at": "2022-08-25T15:26:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955112643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955112643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3949,
      "original_line": 3949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955148989",
      "pull_request_review_id": 1085717959,
      "id": 955148989,
      "node_id": "PRRC_kwDOABII58447mq9",
      "diff_hunk": "@@ -511,6 +513,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     std::set<CKeyID> GetKeys() const override;\n     const std::unordered_set<CScript, SaltedSipHasher> GetScriptPubKeys() const override;\n+\n+    /** Get the DescriptScriptPubKeyMans that have the same scriptPubKeys as this LegacyScriptPubKeyMan */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 14,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f nit: DescriptorScriptPubKeyMans",
      "created_at": "2022-08-25T15:55:52Z",
      "updated_at": "2022-08-25T16:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955148989",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955148989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955161856",
      "pull_request_review_id": 1085717959,
      "id": 955161856,
      "node_id": "PRRC_kwDOABII58447p0A",
      "diff_hunk": "@@ -3633,7 +3633,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n \n         CTxDestination dest;\n-        if (!internal && ExtractDestination(script_pub_keys.at(0), dest)) {\n+        if (!internal && ExtractDestination(*script_pub_keys.begin(), dest)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": 955067954,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That broke `tool_wallet.py —descriptors` because `Address Book: ` needs to be 3 now instead of 1.",
      "created_at": "2022-08-25T16:05:29Z",
      "updated_at": "2022-08-25T16:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955161856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955161856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3636,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955176491",
      "pull_request_review_id": 1085749530,
      "id": 955176491,
      "node_id": "PRRC_kwDOABII58447tYr",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 184,
      "original_position": 118,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f: I think you need to pass `chain_counter` here, because `DescriptorScriptPubKeyMan::TopUp` defaults to `-keypool`, not to the range you passed into the descriptor.",
      "created_at": "2022-08-25T16:15:44Z",
      "updated_at": "2022-08-25T16:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955176491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955176491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1829,
      "original_line": 1829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955217660",
      "pull_request_review_id": 1085809114,
      "id": 955217660,
      "node_id": "PRRC_kwDOABII584473b8",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 184,
      "original_position": 118,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955176491,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, it will account for the range_end.",
      "created_at": "2022-08-25T16:59:32Z",
      "updated_at": "2022-08-25T16:59:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955217660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955217660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1829,
      "original_line": 1829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955222126",
      "pull_request_review_id": 1085815620,
      "id": 955222126,
      "node_id": "PRRC_kwDOABII584474hu",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 184,
      "original_position": 118,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955176491,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh wait, I only looked at the first few lines where it sets `target_size`. But then later on it also looks at `m_wallet_descriptor.range_end`",
      "created_at": "2022-08-25T17:04:49Z",
      "updated_at": "2022-08-25T17:04:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955222126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955222126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1829,
      "original_line": 1829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955297763",
      "pull_request_review_id": 1085925719,
      "id": 955297763,
      "node_id": "PRRC_kwDOABII58448K_j",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 126,
      "original_position": 60,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f: `GetKeyOrigin` always returns `true` for `LegacyScriptPubKeyMan`, but we probably don't want to add spurious origin info for floating keys. So maybe `GetKeyOrigin` can return false instead, or you add a new `HasKeyOrigin` method.",
      "created_at": "2022-08-25T18:36:20Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955297763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955297763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1771,
      "original_line": 1771,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955302667",
      "pull_request_review_id": 1085925719,
      "id": 955302667,
      "node_id": "PRRC_kwDOABII58448MML",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 145,
      "original_position": 79,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f  Wouldn't this crash if for some reason the legacy wallet didn't have the full `combo` collection?\r\n\r\nHow did we handle uncompressed keys? Did we never have them? Do they have a different ID? In other words, `erased` can't be 2?",
      "created_at": "2022-08-25T18:42:34Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955302667",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955302667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1790,
      "original_line": 1790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955308719",
      "pull_request_review_id": 1085925719,
      "id": 955308719,
      "node_id": "PRRC_kwDOABII58448Nqv",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 161,
      "original_position": 95,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f: when can `seed_id` be absent?",
      "created_at": "2022-08-25T18:49:33Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955308719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955308719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1806,
      "original_line": 1806,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955312216",
      "pull_request_review_id": 1085925719,
      "id": 955312216,
      "node_id": "PRRC_kwDOABII58448OhY",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 179,
      "original_position": 113,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f: can we get a `creation_time` time from somewhere?",
      "created_at": "2022-08-25T18:53:52Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955312216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955312216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1824,
      "original_line": 1824,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955314167",
      "pull_request_review_id": 1085925719,
      "id": 955314167,
      "node_id": "PRRC_kwDOABII58448O_3",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f: can we get a `creation_time` time from somewhere?",
      "created_at": "2022-08-25T18:56:12Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955314167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955314167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955317714",
      "pull_request_review_id": 1085925719,
      "id": 955317714,
      "node_id": "PRRC_kwDOABII58448P3S",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {\n+            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n+            CTxDestination witdest = WitnessV0ScriptHash(script);\n+            CScript witprog = GetScriptForDestination(witdest);\n+            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n+\n+            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n+            // For P2SH, a multisig is not ISMINE_NO when:\n+            // * All keys are in the wallet\n+            // * The multisig itself is watch only\n+            // * The P2SH is watch only\n+            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n+            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n+            // * The P2WSH script is in the wallet and it is being watched\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n+                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n+                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n+                continue;\n+            }\n+            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n+\n+            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n+            out.solvable_descs.push_back(sh_desc->ToString());\n+\n+            const auto desc = InferDescriptor(witprog, *this);\n+            if (desc->IsSolvable()) {\n+                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n+                out.solvable_descs.push_back(wsh_desc->ToString());\n+                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n+                out.solvable_descs.push_back(sh_wsh_desc->ToString());\n+            }\n+        }\n+    }\n+\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 318,
      "original_position": 236,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f: we should probably fail more gracefully.",
      "created_at": "2022-08-25T19:00:01Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955317714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955317714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1963,
      "original_line": 1963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955320594",
      "pull_request_review_id": 1085925719,
      "id": 955320594,
      "node_id": "PRRC_kwDOABII58448QkS",
      "diff_hunk": "@@ -511,6 +513,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     std::set<CKeyID> GetKeys() const override;\n     const std::unordered_set<CScript, SaltedSipHasher> GetScriptPubKeys() const override;\n+\n+    /** Get the DescriptScriptPubKeyMans that have the same scriptPubKeys as this LegacyScriptPubKeyMan */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 14,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955148989,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f  Description could be slightly more elaborate. Maybe mention that it's non-invasive and requires the wallet to be unlocked.",
      "created_at": "2022-08-25T19:03:34Z",
      "updated_at": "2022-08-25T19:03:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955320594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955320594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955328827",
      "pull_request_review_id": 1085983280,
      "id": 955328827,
      "node_id": "PRRC_kwDOABII58448Sk7",
      "diff_hunk": "@@ -511,6 +513,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     std::set<CKeyID> GetKeys() const override;\n     const std::unordered_set<CScript, SaltedSipHasher> GetScriptPubKeys() const override;\n+\n+    /** Get the DescriptScriptPubKeyMans that have the same scriptPubKeys as this LegacyScriptPubKeyMan */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 14,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955148989,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-25T19:12:44Z",
      "updated_at": "2022-08-25T19:12:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955328827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955328827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955337650",
      "pull_request_review_id": 1085993904,
      "id": 955337650,
      "node_id": "PRRC_kwDOABII58448Uuy",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 145,
      "original_position": 79,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955302667,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No. This is a check that it erased something rather than it didn't erase more than one. `spks` is a set so it can't erase more than 1 anyways. This check ensures that the descriptors we create actually correspond to scriptPubKeys the legacy wallet watched.",
      "created_at": "2022-08-25T19:20:29Z",
      "updated_at": "2022-08-25T19:21:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955337650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955337650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1790,
      "original_line": 1790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955341034",
      "pull_request_review_id": 1085997164,
      "id": 955341034,
      "node_id": "PRRC_kwDOABII58448Vjq",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 161,
      "original_position": 95,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955308719,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Generally it can't be.",
      "created_at": "2022-08-25T19:23:39Z",
      "updated_at": "2022-08-25T19:23:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955341034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955341034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1806,
      "original_line": 1806,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955342086",
      "pull_request_review_id": 1085998141,
      "id": 955342086,
      "node_id": "PRRC_kwDOABII58448V0G",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 179,
      "original_position": 113,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955312216,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No. CHDChains do not have any time metadata.",
      "created_at": "2022-08-25T19:24:35Z",
      "updated_at": "2022-08-25T19:24:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955342086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955342086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1824,
      "original_line": 1824,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955342305",
      "pull_request_review_id": 1085998364,
      "id": 955342305,
      "node_id": "PRRC_kwDOABII58448V3h",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955314167,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-25T19:24:48Z",
      "updated_at": "2022-08-25T19:24:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955342305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955342305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955343403",
      "pull_request_review_id": 1085999389,
      "id": 955343403,
      "node_id": "PRRC_kwDOABII58448WIr",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {\n+            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n+            CTxDestination witdest = WitnessV0ScriptHash(script);\n+            CScript witprog = GetScriptForDestination(witdest);\n+            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n+\n+            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n+            // For P2SH, a multisig is not ISMINE_NO when:\n+            // * All keys are in the wallet\n+            // * The multisig itself is watch only\n+            // * The P2SH is watch only\n+            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n+            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n+            // * The P2WSH script is in the wallet and it is being watched\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n+                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n+                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n+                continue;\n+            }\n+            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n+\n+            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n+            out.solvable_descs.push_back(sh_desc->ToString());\n+\n+            const auto desc = InferDescriptor(witprog, *this);\n+            if (desc->IsSolvable()) {\n+                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n+                out.solvable_descs.push_back(wsh_desc->ToString());\n+                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n+                out.solvable_descs.push_back(sh_wsh_desc->ToString());\n+            }\n+        }\n+    }\n+\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 318,
      "original_position": 236,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955317714,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An assert is used here because it is a critical bug. The purpose is to have something that obviously fails during testing.",
      "created_at": "2022-08-25T19:25:41Z",
      "updated_at": "2022-08-25T19:25:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955343403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955343403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1963,
      "original_line": 1963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955348115",
      "pull_request_review_id": 1086004945,
      "id": 955348115,
      "node_id": "PRRC_kwDOABII58448XST",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 126,
      "original_position": 60,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955297763,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-25T19:30:58Z",
      "updated_at": "2022-08-25T19:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955348115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955348115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1771,
      "original_line": 1771,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955352438",
      "pull_request_review_id": 1086011321,
      "id": 955352438,
      "node_id": "PRRC_kwDOABII58448YV2",
      "diff_hunk": "@@ -1425,6 +1425,12 @@ bool CWallet::IsMine(const CTransaction& tx) const\n     for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n+    for (const CTxIn& txin : tx.vin) {\n+        const CWalletTx* wtx = GetWalletTx(txin.prevout.hash);\n+        if (wtx && wtx->tx->vout.size() > txin.prevout.n && IsMine(wtx->tx->vout[txin.prevout.n])) {\n+            return true;\n+        }\n+    }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "7427877158c936418d9a8f7b67e5df86875ed643",
      "in_reply_to_id": 954479292,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've removed this change and switched to using `IsFromMe` in addition to `IsMine`. Generally we should avoid changing `IsMine` semantics when possible.",
      "created_at": "2022-08-25T19:37:01Z",
      "updated_at": "2022-08-25T19:37:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955352438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955352438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 1428,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1433,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955367529",
      "pull_request_review_id": 1086033517,
      "id": 955367529,
      "node_id": "PRRC_kwDOABII58448cBp",
      "diff_hunk": "@@ -3633,7 +3633,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n \n         CTxDestination dest;\n-        if (!internal && ExtractDestination(script_pub_keys.at(0), dest)) {\n+        if (!internal && ExtractDestination(*script_pub_keys.begin(), dest)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "220fe61f70f6093a695fd8b6e38e928b63c2b6ad",
      "in_reply_to_id": 955067954,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Extracted to a separate commit and fixed the test.",
      "created_at": "2022-08-25T19:57:58Z",
      "updated_at": "2022-08-25T19:57:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955367529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955367529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3636,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955378613",
      "pull_request_review_id": 1086049860,
      "id": 955378613,
      "node_id": "PRRC_kwDOABII58448eu1",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {\n+            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n+            CTxDestination witdest = WitnessV0ScriptHash(script);\n+            CScript witprog = GetScriptForDestination(witdest);\n+            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n+\n+            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n+            // For P2SH, a multisig is not ISMINE_NO when:\n+            // * All keys are in the wallet\n+            // * The multisig itself is watch only\n+            // * The P2SH is watch only\n+            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n+            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n+            // * The P2WSH script is in the wallet and it is being watched\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n+                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n+                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n+                continue;\n+            }\n+            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n+\n+            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n+            out.solvable_descs.push_back(sh_desc->ToString());\n+\n+            const auto desc = InferDescriptor(witprog, *this);\n+            if (desc->IsSolvable()) {\n+                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n+                out.solvable_descs.push_back(wsh_desc->ToString());\n+                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n+                out.solvable_descs.push_back(sh_wsh_desc->ToString());\n+            }\n+        }\n+    }\n+\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 318,
      "original_position": 236,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955317714,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But can we really rule out that this happens in production on some obscure old weird wallet? If not, it would be better to have the RPC throw and maybe provide some info about the scripts that are left.",
      "created_at": "2022-08-25T20:12:26Z",
      "updated_at": "2022-08-25T20:12:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955378613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955378613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1963,
      "original_line": 1963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955380467",
      "pull_request_review_id": 1086052588,
      "id": 955380467,
      "node_id": "PRRC_kwDOABII58448fLz",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 179,
      "original_position": 113,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955312216,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sad, not even when they were first put in the keypool? Though perhaps that's too risky if we're upgrading a wallet that was itself restored from a backup. The downside of setting 0 is that if a user were to dump the descriptors and restore them into a fresh wallet, they'd have to rescan from genesis. Though that's not the  backup / recovery flow atm.",
      "created_at": "2022-08-25T20:15:06Z",
      "updated_at": "2022-08-25T20:15:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955380467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955380467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1824,
      "original_line": 1824,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955407752",
      "pull_request_review_id": 1086090954,
      "id": 955407752,
      "node_id": "PRRC_kwDOABII58448l2I",
      "diff_hunk": "@@ -1711,6 +1711,242 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + (has_info ? origin_str : \"\") + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back(desc->ToString());\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {\n+            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n+            CTxDestination witdest = WitnessV0ScriptHash(script);\n+            CScript witprog = GetScriptForDestination(witdest);\n+            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n+\n+            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n+            // For P2SH, a multisig is not ISMINE_NO when:\n+            // * All keys are in the wallet\n+            // * The multisig itself is watch only\n+            // * The P2SH is watch only\n+            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n+            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n+            // * The P2WSH script is in the wallet and it is being watched\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n+                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n+                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n+                continue;\n+            }\n+            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n+\n+            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n+            out.solvable_descs.push_back(sh_desc->ToString());\n+\n+            const auto desc = InferDescriptor(witprog, *this);\n+            if (desc->IsSolvable()) {\n+                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n+                out.solvable_descs.push_back(wsh_desc->ToString());\n+                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n+                out.solvable_descs.push_back(sh_wsh_desc->ToString());\n+            }\n+        }\n+    }\n+\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 318,
      "original_position": 236,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fc33d306874ec3bca38c34ff5ac49cbcfa7d832f",
      "in_reply_to_id": 955317714,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm pretty confident that we can.",
      "created_at": "2022-08-25T20:45:40Z",
      "updated_at": "2022-08-25T20:45:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955407752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955407752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1963,
      "original_line": 1963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955452249",
      "pull_request_review_id": 1086153023,
      "id": 955452249,
      "node_id": "PRRC_kwDOABII58448wtZ",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_wallet(self, wallet_name):",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 40,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: makes the purpose of the function clearer.\r\n\r\n```suggestion\r\n    def create_legacy_wallet(self, wallet_name):\r\n```",
      "created_at": "2022-08-25T21:52:37Z",
      "updated_at": "2022-08-25T21:52:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955452249",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955452249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955571409",
      "pull_request_review_id": 1086291889,
      "id": 955571409,
      "node_id": "PRRC_kwDOABII58449NzR",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig0\")\n+        multisig0 = self.nodes[0].get_wallet_rpc(\"multisig0\")\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 168,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: (or `create_legacy_wallet`, as suggested above).\r\n\r\n```suggestion\r\n        multisig0 = self.create_wallet(\"multisig0\")\r\n```",
      "created_at": "2022-08-26T01:43:48Z",
      "updated_at": "2022-08-26T01:43:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955571409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955571409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 166,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955580790",
      "pull_request_review_id": 1086303812,
      "id": 955580790,
      "node_id": "PRRC_kwDOABII58449QF2",
      "diff_hunk": "@@ -701,6 +701,40 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+\n+    EnsureWalletIsUnlocked(*wallet);\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    bilingual_str error;\n+    if (!MigrateLegacyToDescriptor(std::move(wallet), context, error)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n+    }\n+    return NullUniValue;",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe it can return a success message and others indicating the backup, watchonly, solvable and multisig file path?",
      "created_at": "2022-08-26T02:08:55Z",
      "updated_at": "2022-08-26T02:21:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955580790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955580790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955772741",
      "pull_request_review_id": 1086570866,
      "id": 955772741,
      "node_id": "PRRC_kwDOABII58449-9F",
      "diff_hunk": "@@ -59,6 +59,7 @@ const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n+const std::unordered_set<std::string> LEGACY_TYPES{CRYPTED_KEY, CSCRIPT, DEFAULTKEY, HDCHAIN, KEYMETA, KEY, OLD_KEY, POOL, WATCHMETA, WATCHS};",
      "path": "src/wallet/walletdb.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "c50135edb6414fa5fd598f65e13eaa0e639573b9",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c50135edb6414fa5fd598f65e13eaa0e639573b9: maybe add comment: `// These keys are deleted by the migratewallet RPC` to ensure we don't add more stuff to this list without making sure they get migrated.\r\n\r\nNote to other reviewers (plus some open questions), these types are captured by the backup as follows:\r\n* `CRYPTED_KEY`: when `walletdb.cpp` loads them, it puts them into `mapCryptedKeys` via `LoadCryptedKey()`. `MigrateToDescriptor()` iterates over that map.\r\n* `CSCRIPT`: when `walletdb.cpp` loads them, it puts them into `mapScripts` via `LoadCScript()`. \r\n   * `MigrateToDescriptor()` iterates over any multisig scripts in that map\r\n   * TODO: I'm unclear what happens to `mapScripts` entries that are not multisig (see comment on earlier commit)\r\n   * caveat: old records with `redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE` are lost in the upgrade (they're in the backup)\r\n* `DEFAULTKEY`: this is only used to detect corruption, and is not migrated, newer wallets don't have this key\r\n* `HDCHAIN`: `m_hd_chain` which we migrate\r\n* `KEYMETA`: ends up in `mapKeyMetadata` via `LoadKeyMetadata`, which we migrate (at least for every key we have).\r\n* `KEY`:  when `walletdb.cpp` loads them, it puts them into `mapKeys` via `LoadKey()`. `MigrateToDescriptor()` iterates over that map.\r\n* `OLD_KEY`: these can only be loaded with v0.18 and older. They are skipped during wallet load, so they are lost in the migration.\r\n* `POOL`: these are ignored, we regenerate the keypool using descriptors\r\n* `WATCHMETA`: put in `m_script_metadata` by  `LoadScriptMetadata`, and indexed by their `CScriptID`, TODO: same question as with `CSCRIPT`\r\n* `WATCHS` put in `mapWatchKeys`   via `LoadWatchOnly`, and its keys are used to monitor PKH, etc via `ImplicitlyLearnRelatedKeyScripts`. We don't iterate over `mapWatchKeys` directly, so I'm a bit confused how these are migrated.",
      "created_at": "2022-08-26T08:03:25Z",
      "updated_at": "2022-08-26T08:46:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955772741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955772741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955789201",
      "pull_request_review_id": 1086570866,
      "id": 955789201,
      "node_id": "PRRC_kwDOABII5844-C-R",
      "diff_hunk": "@@ -1711,6 +1712,258 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = has_info ? \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\" : \"\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + origin_str + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+\n+        // Get birthdate from script meta\n+        uint64_t creation_time = 0;\n+        const auto& mit = m_script_metadata.find(CScriptID(spk));\n+        if (mit != m_script_metadata.end()) {\n+            creation_time = mit->second.nCreateTime;\n+        }\n+\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back({desc->ToString(), creation_time});\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+\n+        // Get birthdate from script meta\n+        uint64_t creation_time = 0;\n+        const auto& it = m_script_metadata.find(CScriptID(script));\n+        if (it != m_script_metadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 282,
      "original_position": 229,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "35f428fae68ad974abdce0fa905148f620a9443c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "35f428fae68ad974abdce0fa905148f620a9443c  What happens to `mapScripts` entries that are not `MULTISIG`?",
      "created_at": "2022-08-26T08:22:47Z",
      "updated_at": "2022-08-26T08:46:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955789201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955789201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1927,
      "original_line": 1927,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955813687",
      "pull_request_review_id": 1086570866,
      "id": 955813687,
      "node_id": "PRRC_kwDOABII5844-I83",
      "diff_hunk": "@@ -1964,6 +1964,13 @@ std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n     return out;\n }\n \n+bool LegacyScriptPubKeyMan::DeleteRecords()",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 322,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "c50135edb6414fa5fd598f65e13eaa0e639573b9",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c50135edb6414fa5fd598f65e13eaa0e639573b9 : `DeleteLegacyRecords` (since we keep plenty of other stuff)",
      "created_at": "2022-08-26T08:44:59Z",
      "updated_at": "2022-08-26T08:46:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955813687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955813687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1967,
      "original_line": 1967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955988470",
      "pull_request_review_id": 1086877223,
      "id": 955988470,
      "node_id": "PRRC_kwDOABII5844-zn2",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords()) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        // Use the existing master key if we have it\n+        if (data.master_key.key.IsValid()) {\n+            SetupDescriptorScriptPubKeyMans(data.master_key);\n+        } else {\n+            // Setup with a new seed if we don't.\n+            SetupDescriptorScriptPubKeyMans();\n+        }\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    // We need to go through these in the tx insertion order so that lookups to spends works.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& [_pos, wtx] : wtxOrdered) {\n+        if (!IsMine(*wtx->tx) && !IsFromMe(*wtx->tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripts weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*wtx->tx) || data.watchonly_wallet->IsFromMe(*wtx->tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(wtx->tx, wtx->m_state)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(wtx->GetHash());\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = strprintf(_(\"Error: Transaction %s in wallet cannot be identified to belong to migrated wallets\"), wtx->GetHash().GetHex());\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+        // Tell the GUI of each tx\n+        for (const uint256& txid : deleted_txids) {\n+            NotifyTransactionChanged(txid, CT_UPDATED);\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        // Labels applied to receiving addresses should go based on IsMine\n+        if (addr_pair.second.purpose == \"receive\") {\n+            if (!IsMine(addr_pair.first)) {\n+                // Check the address book data is the watchonly wallet's\n+                if (data.watchonly_wallet) {\n+                    LOCK(data.watchonly_wallet->cs_wallet);\n+                    if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                if (data.solvable_wallet) {\n+                    LOCK(data.solvable_wallet->cs_wallet);\n+                    if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                // Not ours, not in watchonly wallet, and not in solvable\n+                error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+                return false;\n+            }\n+        } else {\n+            // Labels for everything else (send) should be cloned to all\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    // Connect the SPKM signals\n+    ConnectScriptPubKeyManNotifiers();\n+    NotifyCanGetAddressesChanged();\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool DoMigration(CWallet& wallet, WalletContext& context, bilingual_str& error, std::vector<std::shared_ptr<CWallet>> created_wallets) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    AssertLockHeld(wallet.cs_wallet);\n+\n+    // Get all of the descriptors from the legacy wallet\n+    std::optional<MigrationData> data = wallet.GetDescriptorsForLegacy(error);\n+    if (data == std::nullopt) return false;\n+\n+    // Create the watchonly and solvable wallets if necessary\n+    if (data->watch_descs.size() > 0 || data->solvable_descs.size() > 0) {\n+        DatabaseOptions options;\n+        options.require_existing = false;\n+        options.require_create = true;\n+\n+        // Make the wallets\n+        options.create_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            options.create_flags |= WALLET_FLAG_AVOID_REUSE;\n+        }\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+            options.create_flags |= WALLET_FLAG_KEY_ORIGIN_METADATA;\n+        }\n+        if (data->watch_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the watched scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;\n+            std::string wallet_name = wallet.GetName() + \"_watchonly\";\n+            data->watchonly_wallet = CreateWallet(context, wallet_name, std::nullopt, options, status, error, warnings);",
      "path": "src/wallet/wallet.cpp",
      "position": 369,
      "original_position": 295,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: bit of an aesthetic point, but I don't think the `MigrationData` struct should have the `CWallet` pointers. Instead you could just pass `watchonly_wallet` and `solvable_wallet` into `ApplyMigrationData`. That also makes it more clear _what_ the data is applied to.",
      "created_at": "2022-08-26T12:24:07Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r955988470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955988470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3950,
      "original_line": 3950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956001234",
      "pull_request_review_id": 1086877223,
      "id": 956001234,
      "node_id": "PRRC_kwDOABII5844-2vS",
      "diff_hunk": "@@ -920,6 +920,16 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Migrate a BDB wallet to SQLite wallet\n+    bool MigrateToSQLite(bilingual_str& error) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "path": "src/wallet/wallet.h",
      "position": 27,
      "original_position": 15,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf might be worth giving this its own commit. Ideally with a round-trip test, though something simpler might be fine too.\r\n\r\nTo distinguish this a bit better from the other \"DoMigrate\" like functions:\r\n\r\n```cpp\r\n/* Migrate all records from the BDB storage to a new SQLite wallet with the same file name.\r\n * Does not create a backup and deletes the original file. May crash at any point if something\r\n * unexpected happens in the filesystem. */\r\n```",
      "created_at": "2022-08-26T12:40:09Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956001234",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956001234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 929,
      "original_line": 929,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956012138",
      "pull_request_review_id": 1086877223,
      "id": 956012138,
      "node_id": "PRRC_kwDOABII5844-5Zq",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords()) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        // Use the existing master key if we have it\n+        if (data.master_key.key.IsValid()) {\n+            SetupDescriptorScriptPubKeyMans(data.master_key);\n+        } else {\n+            // Setup with a new seed if we don't.\n+            SetupDescriptorScriptPubKeyMans();\n+        }\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    // We need to go through these in the tx insertion order so that lookups to spends works.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& [_pos, wtx] : wtxOrdered) {\n+        if (!IsMine(*wtx->tx) && !IsFromMe(*wtx->tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripts weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*wtx->tx) || data.watchonly_wallet->IsFromMe(*wtx->tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(wtx->tx, wtx->m_state)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(wtx->GetHash());\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = strprintf(_(\"Error: Transaction %s in wallet cannot be identified to belong to migrated wallets\"), wtx->GetHash().GetHex());\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+        // Tell the GUI of each tx\n+        for (const uint256& txid : deleted_txids) {\n+            NotifyTransactionChanged(txid, CT_UPDATED);\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        // Labels applied to receiving addresses should go based on IsMine\n+        if (addr_pair.second.purpose == \"receive\") {\n+            if (!IsMine(addr_pair.first)) {\n+                // Check the address book data is the watchonly wallet's\n+                if (data.watchonly_wallet) {\n+                    LOCK(data.watchonly_wallet->cs_wallet);\n+                    if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                if (data.solvable_wallet) {\n+                    LOCK(data.solvable_wallet->cs_wallet);\n+                    if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                // Not ours, not in watchonly wallet, and not in solvable\n+                error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+                return false;\n+            }\n+        } else {\n+            // Labels for everything else (send) should be cloned to all\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    // Connect the SPKM signals\n+    ConnectScriptPubKeyManNotifiers();\n+    NotifyCanGetAddressesChanged();\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool DoMigration(CWallet& wallet, WalletContext& context, bilingual_str& error, std::vector<std::shared_ptr<CWallet>> created_wallets) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    AssertLockHeld(wallet.cs_wallet);\n+\n+    // Get all of the descriptors from the legacy wallet\n+    std::optional<MigrationData> data = wallet.GetDescriptorsForLegacy(error);\n+    if (data == std::nullopt) return false;\n+\n+    // Create the watchonly and solvable wallets if necessary\n+    if (data->watch_descs.size() > 0 || data->solvable_descs.size() > 0) {\n+        DatabaseOptions options;\n+        options.require_existing = false;\n+        options.require_create = true;\n+\n+        // Make the wallets\n+        options.create_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            options.create_flags |= WALLET_FLAG_AVOID_REUSE;\n+        }\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+            options.create_flags |= WALLET_FLAG_KEY_ORIGIN_METADATA;\n+        }\n+        if (data->watch_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the watched scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;\n+            std::string wallet_name = wallet.GetName() + \"_watchonly\";\n+            data->watchonly_wallet = CreateWallet(context, wallet_name, std::nullopt, options, status, error, warnings);\n+            if (status != DatabaseStatus::SUCCESS) {\n+                error = _(\"Error: Failed to create new watchonly wallet\");\n+                return false;\n+            }\n+            created_wallets.push_back(data->watchonly_wallet);\n+            LOCK(data->watchonly_wallet->cs_wallet);\n+\n+            // Parse the descriptors and add them to the new wallet\n+            for (const auto& [desc_str, creation_time] : data->watch_descs) {\n+                // Parse the descriptor\n+                FlatSigningProvider keys;\n+                std::string parse_err;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, parse_err, /* require_checksum */ true);\n+                assert(desc); // It shouldn't be possible to have the LegacyScriptPubKeyMan make an invalid descriptor\n+                assert(!desc->IsRange()); // It shouldn't be possible to have LegacyScriptPubKeyMan make a ranged watchonly descriptor\n+\n+                // Add to the wallet\n+                WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+                data->watchonly_wallet->AddWalletDescriptor(w_desc, keys, \"\", false);\n+            }\n+\n+            // Add the wallet to settings\n+            UpdateWalletSetting(*context.chain, wallet_name, /*load_on_startup=*/true, warnings);\n+        }\n+        if (data->solvable_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the unwatched solvable scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;\n+            std::string wallet_name = wallet.GetName() + \"_solvables\";\n+            data->solvable_wallet = CreateWallet(context, wallet_name, std::nullopt, options, status, error, warnings);\n+            if (status != DatabaseStatus::SUCCESS) {\n+                error = _(\"Error: Failed to create new watchonly wallet\");\n+                return false;\n+            }\n+            created_wallets.push_back(data->solvable_wallet);\n+            LOCK(data->solvable_wallet->cs_wallet);\n+\n+            // Parse the descriptors and add them to the new wallet\n+            for (const auto& [desc_str, creation_time] : data->solvable_descs) {\n+                // Parse the descriptor\n+                FlatSigningProvider keys;\n+                std::string parse_err;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, parse_err, /* require_checksum */ true);\n+                assert(desc); // It shouldn't be possible to have the LegacyScriptPubKeyMan make an invalid descriptor\n+                assert(!desc->IsRange()); // It shouldn't be possible to have LegacyScriptPubKeyMan make a ranged watchonly descriptor\n+\n+                // Add to the wallet\n+                WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+                data->solvable_wallet->AddWalletDescriptor(w_desc, keys, \"\", false);\n+            }\n+\n+            // Add the wallet to settings\n+            UpdateWalletSetting(*context.chain, wallet_name, /*load_on_startup=*/true, warnings);\n+        }\n+    }\n+\n+    // Add the descriptors to wallet, remove LegacyScriptPubKeyMan, and cleanup txs and address book data\n+    if (!wallet.ApplyMigrationData(*data, error)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool MigrateLegacyToDescriptor(std::shared_ptr<CWallet>&& wallet, WalletContext& context, bilingual_str& error)\n+{\n+    LOCK(wallet->cs_wallet);\n+\n+    // Make a backup of the DB\n+    fs::path this_wallet_dir = fs::absolute(fs::PathFromString(wallet->GetDatabase().Filename())).parent_path();\n+    fs::path backup_filename = fs::PathFromString(strprintf(\"%s-%d.legacy.bak\", wallet->GetName(), GetTime()));\n+    fs::path backup_path = this_wallet_dir / backup_filename;\n+    if (!wallet->BackupWallet(fs::PathToString(backup_path))) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // First change to using SQLite\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    {\n+        LOCK(context.wallets_mutex);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(context.wallets.begin(), context.wallets.end(), [&wallet](std::shared_ptr<CWallet> w) {\n+                return w == wallet;\n+            });\n+        assert(i != context.wallets.end());\n+        context.wallets.erase(i);\n+    }\n+    // Now do the database stuff\n+    if (!wallet->MigrateToSQLite(error)) return false;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 386,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: if this fails _after the file deletion_, can we try to move the backup back in place? If that fails too, have the RPC throw an error telling the user the name of the backup file and they need to copy / rename it.\r\n\r\nSimilarly the asserts inside `MigrateToSQLite` could return `false` instead, though in that case moving the backup file back might fail. \r\n\r\n`MigrateToSQLite` could take a second argument `bool& deleted` so we know whether or not the backup file needs to be moved.\r\n\r\nOr you could create a file with a different name, defer deleting all the way to the end, and then rename the new file to match the original name. But then the `m_database` hot swap stuff won't work.",
      "created_at": "2022-08-26T12:53:17Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956012138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956012138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4039,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956038424",
      "pull_request_review_id": 1086877223,
      "id": 956038424,
      "node_id": "PRRC_kwDOABII5844-_0Y",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);",
      "path": "src/wallet/wallet.cpp",
      "position": 125,
      "original_position": 53,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: maybe move the file creation to a common method, so that if we ever decide to use some new `opts` field, we don't forget to apply it here.",
      "created_at": "2022-08-26T13:22:45Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956038424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956038424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3706,
      "original_line": 3706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956039036",
      "pull_request_review_id": 1086877223,
      "id": 956039036,
      "node_id": "PRRC_kwDOABII5844-_98",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.",
      "path": "src/wallet/wallet.cpp",
      "position": 126,
      "original_position": 54,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: I don't understand this comment.\r\n\r\nAlso, should we check `db_status`?",
      "created_at": "2022-08-26T13:23:25Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956039036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956039036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3707,
      "original_line": 3707,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956043623",
      "pull_request_review_id": 1086877223,
      "id": 956043623,
      "node_id": "PRRC_kwDOABII5844_BFn",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: I know record sequence shouldn't matter, but at the same time it's trivial to write them back in the same order just in case, with a `std::vector<std::pair<SerializeData, SerializeData>>`",
      "created_at": "2022-08-26T13:28:02Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956043623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956043623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3671,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956050505",
      "pull_request_review_id": 1086877223,
      "id": 956050505,
      "node_id": "PRRC_kwDOABII5844_CxJ",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {",
      "path": "src/wallet/wallet.cpp",
      "position": 160,
      "original_position": 86,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: maybe just explicitly check for a lock before calling `MigrateToDescriptor`, so we can allow that function to fail and return nothing in other situations.",
      "created_at": "2022-08-26T13:35:18Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956050505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956050505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3741,
      "original_line": 3741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956065220",
      "pull_request_review_id": 1086877223,
      "id": 956065220,
      "node_id": "PRRC_kwDOABII5844_GXE",
      "diff_hunk": "@@ -920,6 +920,16 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Migrate a BDB wallet to SQLite wallet\n+    bool MigrateToSQLite(bilingual_str& error) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Get all of the descriptors from a legacy wallet\n+    std::optional<MigrationData> GetDescriptorsForLegacy(bilingual_str& error) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Adds the ScriptPubKeyMans given in MigrationData, removes LegacyScriptPubKeyMan, and moves tx and address book\n+    //! to their relevant wallets.",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 21,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf: could add this (doesn't?) requires the wallet storage to have been converted to SQLite. Also \"given in MigrationData to this wallet\"\r\n\r\n```\r\n//! , and where needed moves tx and address book entries to watchonly_wallet or solvable_wallet.\r\n```",
      "created_at": "2022-08-26T13:51:05Z",
      "updated_at": "2022-08-26T14:01:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956065220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956065220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 931,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956236539",
      "pull_request_review_id": 1087244562,
      "id": 956236539,
      "node_id": "PRRC_kwDOABII5844_wL7",
      "diff_hunk": "@@ -1711,6 +1712,258 @@ const std::unordered_set<CScript, SaltedSipHasher> LegacyScriptPubKeyMan::GetScr\n     return spks;\n }\n \n+std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n+{\n+    LOCK(cs_KeyStore);\n+    if (m_storage.IsLocked()) {\n+        return std::nullopt;\n+    }\n+\n+    MigrationData out;\n+\n+    std::unordered_set<CScript, SaltedSipHasher> spks{GetScriptPubKeys()};\n+\n+    // Get all key ids\n+    std::set<CKeyID> keyids;\n+    for (const auto& key_pair : mapKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+    for (const auto& key_pair : mapCryptedKeys) {\n+        keyids.insert(key_pair.first);\n+    }\n+\n+    // Get key metadata and figure out which keys don't have a seed\n+    // Note that we do not ignore the seeds themselves because they are considered IsMine!\n+    for (auto keyid_it = keyids.begin(); keyid_it != keyids.end();) {\n+        const CKeyID& keyid = *keyid_it;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            const CKeyMetadata& meta = it->second;\n+            if (meta.hdKeypath == \"s\" || meta.hdKeypath == \"m\") {\n+                keyid_it++;\n+                continue;\n+            }\n+            if (m_hd_chain.seed_id == meta.hd_seed_id || m_inactive_hd_chains.count(meta.hd_seed_id) > 0) {\n+                keyid_it = keyids.erase(keyid_it);\n+                continue;\n+            }\n+        }\n+        keyid_it++;\n+    }\n+\n+    // keyids is now all non-HD keys. Each key will have its own combo descriptor\n+    for (const CKeyID& keyid : keyids) {\n+        CKey key;\n+        if (!GetKey(keyid, key)) {\n+            assert(false);\n+        }\n+\n+        // Get birthdate from key meta\n+        uint64_t creation_time = 0;\n+        const auto& it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        // Get the key origin\n+        // Maybe this doesn't matter because floating keys here shouldn't have origins\n+        KeyOriginInfo info;\n+        bool has_info = GetKeyOrigin(keyid, info);\n+        std::string origin_str = has_info ? \"[\" + HexStr(info.fingerprint) + FormatHDKeypath(info.path) + \"]\" : \"\";\n+\n+        // Construct the combo descriptor\n+        std::string desc_str = \"combo(\" + origin_str + HexStr(key.GetPubKey()) + \")\";\n+        FlatSigningProvider keys;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+        WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+\n+        // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+        auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+        desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        desc_spk_man->TopUp();\n+        auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& spk : desc_spks) {\n+            size_t erased = spks.erase(spk);\n+            assert(erased == 1);\n+            assert(IsMine(spk) == ISMINE_SPENDABLE);\n+        }\n+\n+        out.desc_spkms.push_back(std::move(desc_spk_man));\n+    }\n+\n+    // Handle HD keys by using the CHDChains\n+    std::vector<CHDChain> chains;\n+    chains.push_back(m_hd_chain);\n+    for (const auto& chain_pair : m_inactive_hd_chains) {\n+        chains.push_back(chain_pair.second);\n+    }\n+    for (const CHDChain& chain : chains) {\n+        for (int i = 0; i < 2; ++i) {\n+            // Skip if doing internal chain and split chain is not supported\n+            if (chain.seed_id.IsNull() || (i == 1 && !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))) {\n+                continue;\n+            }\n+            // Get the master xprv\n+            CKey seed_key;\n+            if (!GetKey(chain.seed_id, seed_key)) {\n+                assert(false);\n+            }\n+            CExtKey master_key;\n+            master_key.SetSeed(seed_key);\n+\n+            // Make the combo descriptor\n+            std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+            std::string desc_str = \"combo(\" + xpub + \"/0'/\" + ToString(i) + \"'/*')\";\n+            FlatSigningProvider keys;\n+            std::string error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+            uint32_t chain_counter = std::max((i == 1 ? chain.nInternalChainCounter : chain.nExternalChainCounter), (uint32_t)0);\n+            WalletDescriptor w_desc(std::move(desc), 0, 0, chain_counter, 0);\n+\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            desc_spk_man->AddDescriptorKey(master_key.key, master_key.key.GetPubKey());\n+            desc_spk_man->TopUp();\n+            auto desc_spks = desc_spk_man->GetScriptPubKeys();\n+\n+            // Remove the scriptPubKeys from our current set\n+            for (const CScript& spk : desc_spks) {\n+                size_t erased = spks.erase(spk);\n+                assert(erased == 1);\n+                assert(IsMine(spk) == ISMINE_SPENDABLE);\n+            }\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+    }\n+    // Add the current master seed to the migration data\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        CKey seed_key;\n+        if (!GetKey(m_hd_chain.seed_id, seed_key)) {\n+            assert(false);\n+        }\n+        out.master_key.SetSeed(seed_key);\n+    }\n+\n+    // Handle the rest of the scriptPubKeys which must be imports and may not have all info\n+    for (auto it = spks.begin(); it != spks.end();) {\n+        const CScript& spk = *it;\n+\n+        // Get birthdate from script meta\n+        uint64_t creation_time = 0;\n+        const auto& mit = m_script_metadata.find(CScriptID(spk));\n+        if (mit != m_script_metadata.end()) {\n+            creation_time = mit->second.nCreateTime;\n+        }\n+\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+        // Get the private keys for this descriptor\n+        std::vector<CScript> scripts;\n+        FlatSigningProvider keys;\n+        if (!desc->Expand(0, DUMMY_SIGNING_PROVIDER, scripts, keys)) {\n+            assert(false);\n+        }\n+        std::set<CKeyID> privkeyids;\n+        for (const auto& key_orig_pair : keys.origins) {\n+            privkeyids.insert(key_orig_pair.first);\n+        }\n+\n+        std::vector<CScript> desc_spks;\n+\n+        // Make the descriptor string with private keys\n+        std::string desc_str;\n+        bool watchonly = !desc->ToPrivateString(*this, desc_str);\n+        if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            out.watch_descs.push_back({desc->ToString(), creation_time});\n+\n+            // Get the scriptPubKeys without writing this to the wallet\n+            FlatSigningProvider provider;\n+            desc->Expand(0, provider, desc_spks, provider);\n+        } else {\n+            // Make the DescriptorScriptPubKeyMan and get the scriptPubKeys\n+            WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+            auto desc_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(m_storage, w_desc));\n+            for (const auto& keyid : privkeyids) {\n+                CKey key;\n+                if (!GetKey(keyid, key)) {\n+                    continue;\n+                }\n+                desc_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+            }\n+            desc_spk_man->TopUp();\n+            auto desc_spks_set = desc_spk_man->GetScriptPubKeys();\n+            desc_spks.insert(desc_spks.end(), desc_spks_set.begin(), desc_spks_set.end());\n+\n+            out.desc_spkms.push_back(std::move(desc_spk_man));\n+        }\n+\n+        // Remove the scriptPubKeys from our current set\n+        for (const CScript& desc_spk : desc_spks) {\n+            auto del_it = spks.find(desc_spk);\n+            assert(del_it != spks.end());\n+            assert(IsMine(desc_spk) != ISMINE_NO);\n+            it = spks.erase(del_it);\n+        }\n+    }\n+\n+    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n+    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript script = script_pair.second;\n+\n+        // Get birthdate from script meta\n+        uint64_t creation_time = 0;\n+        const auto& it = m_script_metadata.find(CScriptID(script));\n+        if (it != m_script_metadata.end()) {\n+            creation_time = it->second.nCreateTime;\n+        }\n+\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::MULTISIG) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 282,
      "original_position": 229,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "35f428fae68ad974abdce0fa905148f620a9443c",
      "in_reply_to_id": 955789201,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They will be part of `spks` and added to the watchonly wallet. It is not possible to import other scripts without also watching them (and their P2(W)SH). Multisigs are special because we have `addmultisigaddress` which add the multisig but does not watch them. All of the import rpcs will watch.",
      "created_at": "2022-08-26T17:01:24Z",
      "updated_at": "2022-08-26T17:01:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956236539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956236539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1927,
      "original_line": 1927,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956238788",
      "pull_request_review_id": 1087247648,
      "id": 956238788,
      "node_id": "PRRC_kwDOABII5844_wvE",
      "diff_hunk": "@@ -1964,6 +1964,13 @@ std::optional<MigrationData> LegacyScriptPubKeyMan::MigrateToDescriptor()\n     return out;\n }\n \n+bool LegacyScriptPubKeyMan::DeleteRecords()",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 322,
      "original_position": 4,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "c50135edb6414fa5fd598f65e13eaa0e639573b9",
      "in_reply_to_id": 955813687,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We delete all of the `LegacyScriptPubKeyMan` records (which this function is a member of). There are no remaining LegacySPKM records after this.",
      "created_at": "2022-08-26T17:04:22Z",
      "updated_at": "2022-08-26T17:04:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956238788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956238788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1967,
      "original_line": 1967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956239952",
      "pull_request_review_id": 1087249565,
      "id": 956239952,
      "node_id": "PRRC_kwDOABII5844_xBQ",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords()) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        // Use the existing master key if we have it\n+        if (data.master_key.key.IsValid()) {\n+            SetupDescriptorScriptPubKeyMans(data.master_key);\n+        } else {\n+            // Setup with a new seed if we don't.\n+            SetupDescriptorScriptPubKeyMans();\n+        }\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    // We need to go through these in the tx insertion order so that lookups to spends works.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& [_pos, wtx] : wtxOrdered) {\n+        if (!IsMine(*wtx->tx) && !IsFromMe(*wtx->tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripts weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*wtx->tx) || data.watchonly_wallet->IsFromMe(*wtx->tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(wtx->tx, wtx->m_state)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(wtx->GetHash());\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = strprintf(_(\"Error: Transaction %s in wallet cannot be identified to belong to migrated wallets\"), wtx->GetHash().GetHex());\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+        // Tell the GUI of each tx\n+        for (const uint256& txid : deleted_txids) {\n+            NotifyTransactionChanged(txid, CT_UPDATED);\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        // Labels applied to receiving addresses should go based on IsMine\n+        if (addr_pair.second.purpose == \"receive\") {\n+            if (!IsMine(addr_pair.first)) {\n+                // Check the address book data is the watchonly wallet's\n+                if (data.watchonly_wallet) {\n+                    LOCK(data.watchonly_wallet->cs_wallet);\n+                    if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                if (data.solvable_wallet) {\n+                    LOCK(data.solvable_wallet->cs_wallet);\n+                    if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                // Not ours, not in watchonly wallet, and not in solvable\n+                error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+                return false;\n+            }\n+        } else {\n+            // Labels for everything else (send) should be cloned to all\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    // Connect the SPKM signals\n+    ConnectScriptPubKeyManNotifiers();\n+    NotifyCanGetAddressesChanged();\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool DoMigration(CWallet& wallet, WalletContext& context, bilingual_str& error, std::vector<std::shared_ptr<CWallet>> created_wallets) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    AssertLockHeld(wallet.cs_wallet);\n+\n+    // Get all of the descriptors from the legacy wallet\n+    std::optional<MigrationData> data = wallet.GetDescriptorsForLegacy(error);\n+    if (data == std::nullopt) return false;\n+\n+    // Create the watchonly and solvable wallets if necessary\n+    if (data->watch_descs.size() > 0 || data->solvable_descs.size() > 0) {\n+        DatabaseOptions options;\n+        options.require_existing = false;\n+        options.require_create = true;\n+\n+        // Make the wallets\n+        options.create_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            options.create_flags |= WALLET_FLAG_AVOID_REUSE;\n+        }\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+            options.create_flags |= WALLET_FLAG_KEY_ORIGIN_METADATA;\n+        }\n+        if (data->watch_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the watched scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;\n+            std::string wallet_name = wallet.GetName() + \"_watchonly\";\n+            data->watchonly_wallet = CreateWallet(context, wallet_name, std::nullopt, options, status, error, warnings);",
      "path": "src/wallet/wallet.cpp",
      "position": 369,
      "original_position": 295,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 955988470,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that's any clearer, and would like to keep the function signature small.",
      "created_at": "2022-08-26T17:06:06Z",
      "updated_at": "2022-08-26T17:06:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956239952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956239952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3950,
      "original_line": 3950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956241253",
      "pull_request_review_id": 1087251633,
      "id": 956241253,
      "node_id": "PRRC_kwDOABII5844_xVl",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);",
      "path": "src/wallet/wallet.cpp",
      "position": 125,
      "original_position": 53,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956038424,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps for a followup to do this everywhere we are making wallets.",
      "created_at": "2022-08-26T17:08:08Z",
      "updated_at": "2022-08-26T17:08:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956241253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956241253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3706,
      "original_line": 3706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956242007",
      "pull_request_review_id": 1087252719,
      "id": 956242007,
      "node_id": "PRRC_kwDOABII5844_xhX",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.",
      "path": "src/wallet/wallet.cpp",
      "position": 126,
      "original_position": 54,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956039036,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No. it just contains more granular errors. There's no \"success by with caveats\" that would be relevant here.",
      "created_at": "2022-08-26T17:09:15Z",
      "updated_at": "2022-08-26T17:09:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956242007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956242007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3707,
      "original_line": 3707,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956244425",
      "pull_request_review_id": 1087256750,
      "id": 956244425,
      "node_id": "PRRC_kwDOABII5844_yHJ",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {",
      "path": "src/wallet/wallet.cpp",
      "position": 160,
      "original_position": 86,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956050505,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand what you're talking about.",
      "created_at": "2022-08-26T17:12:52Z",
      "updated_at": "2022-08-26T17:12:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956244425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956244425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3741,
      "original_line": 3741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956331907",
      "pull_request_review_id": 1087389592,
      "id": 956331907,
      "node_id": "PRRC_kwDOABII5845AHeD",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords()) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        // Use the existing master key if we have it\n+        if (data.master_key.key.IsValid()) {\n+            SetupDescriptorScriptPubKeyMans(data.master_key);\n+        } else {\n+            // Setup with a new seed if we don't.\n+            SetupDescriptorScriptPubKeyMans();\n+        }\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    // We need to go through these in the tx insertion order so that lookups to spends works.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& [_pos, wtx] : wtxOrdered) {\n+        if (!IsMine(*wtx->tx) && !IsFromMe(*wtx->tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripts weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*wtx->tx) || data.watchonly_wallet->IsFromMe(*wtx->tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(wtx->tx, wtx->m_state)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(wtx->GetHash());\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = strprintf(_(\"Error: Transaction %s in wallet cannot be identified to belong to migrated wallets\"), wtx->GetHash().GetHex());\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+        // Tell the GUI of each tx\n+        for (const uint256& txid : deleted_txids) {\n+            NotifyTransactionChanged(txid, CT_UPDATED);\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        // Labels applied to receiving addresses should go based on IsMine\n+        if (addr_pair.second.purpose == \"receive\") {\n+            if (!IsMine(addr_pair.first)) {\n+                // Check the address book data is the watchonly wallet's\n+                if (data.watchonly_wallet) {\n+                    LOCK(data.watchonly_wallet->cs_wallet);\n+                    if (data.watchonly_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                if (data.solvable_wallet) {\n+                    LOCK(data.solvable_wallet->cs_wallet);\n+                    if (data.solvable_wallet->IsMine(addr_pair.first)) {\n+                        // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                        std::string label = addr_pair.second.GetLabel();\n+                        std::string purpose = addr_pair.second.purpose;\n+                        if (!purpose.empty()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                        }\n+                        if (!addr_pair.second.IsChange()) {\n+                            data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                        }\n+                        dests_to_delete.push_back(addr_pair.first);\n+                        continue;\n+                    }\n+                }\n+                // Not ours, not in watchonly wallet, and not in solvable\n+                error = _(\"Error: Address book data in wallet cannot be identified to belong to migrated wallets\");\n+                return false;\n+            }\n+        } else {\n+            // Labels for everything else (send) should be cloned to all\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                // Add to the watchonly. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.watchonly_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+            if (data.solvable_wallet) {\n+                LOCK(data.solvable_wallet->cs_wallet);\n+                // Add to the solvable. Preserve the labels, purpose, and change-ness\n+                std::string label = addr_pair.second.GetLabel();\n+                std::string purpose = addr_pair.second.purpose;\n+                if (!purpose.empty()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].purpose = purpose;\n+                }\n+                if (!addr_pair.second.IsChange()) {\n+                    data.solvable_wallet->m_address_book[addr_pair.first].SetLabel(label);\n+                }\n+                continue;\n+            }\n+        }\n+    }\n+    // Remove the things to delete\n+    if (dests_to_delete.size() > 0) {\n+        for (const auto& dest : dests_to_delete) {\n+            if (!DelAddressBook(dest)) {\n+                error = _(\"Error: Unable to remove watchonly address book data\");\n+                return false;\n+            }\n+        }\n+    }\n+\n+    // Connect the SPKM signals\n+    ConnectScriptPubKeyManNotifiers();\n+    NotifyCanGetAddressesChanged();\n+\n+    WalletLogPrintf(\"Wallet migration complete.\\n\");\n+\n+    return true;\n+}\n+\n+bool DoMigration(CWallet& wallet, WalletContext& context, bilingual_str& error, std::vector<std::shared_ptr<CWallet>> created_wallets) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    AssertLockHeld(wallet.cs_wallet);\n+\n+    // Get all of the descriptors from the legacy wallet\n+    std::optional<MigrationData> data = wallet.GetDescriptorsForLegacy(error);\n+    if (data == std::nullopt) return false;\n+\n+    // Create the watchonly and solvable wallets if necessary\n+    if (data->watch_descs.size() > 0 || data->solvable_descs.size() > 0) {\n+        DatabaseOptions options;\n+        options.require_existing = false;\n+        options.require_create = true;\n+\n+        // Make the wallets\n+        options.create_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            options.create_flags |= WALLET_FLAG_AVOID_REUSE;\n+        }\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+            options.create_flags |= WALLET_FLAG_KEY_ORIGIN_METADATA;\n+        }\n+        if (data->watch_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the watched scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;\n+            std::string wallet_name = wallet.GetName() + \"_watchonly\";\n+            data->watchonly_wallet = CreateWallet(context, wallet_name, std::nullopt, options, status, error, warnings);\n+            if (status != DatabaseStatus::SUCCESS) {\n+                error = _(\"Error: Failed to create new watchonly wallet\");\n+                return false;\n+            }\n+            created_wallets.push_back(data->watchonly_wallet);\n+            LOCK(data->watchonly_wallet->cs_wallet);\n+\n+            // Parse the descriptors and add them to the new wallet\n+            for (const auto& [desc_str, creation_time] : data->watch_descs) {\n+                // Parse the descriptor\n+                FlatSigningProvider keys;\n+                std::string parse_err;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, parse_err, /* require_checksum */ true);\n+                assert(desc); // It shouldn't be possible to have the LegacyScriptPubKeyMan make an invalid descriptor\n+                assert(!desc->IsRange()); // It shouldn't be possible to have LegacyScriptPubKeyMan make a ranged watchonly descriptor\n+\n+                // Add to the wallet\n+                WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+                data->watchonly_wallet->AddWalletDescriptor(w_desc, keys, \"\", false);\n+            }\n+\n+            // Add the wallet to settings\n+            UpdateWalletSetting(*context.chain, wallet_name, /*load_on_startup=*/true, warnings);\n+        }\n+        if (data->solvable_descs.size() > 0) {\n+            wallet.WalletLogPrintf(\"Making a new watchonly wallet containing the unwatched solvable scripts\\n\");\n+\n+            DatabaseStatus status;\n+            std::vector<bilingual_str> warnings;\n+            std::string wallet_name = wallet.GetName() + \"_solvables\";\n+            data->solvable_wallet = CreateWallet(context, wallet_name, std::nullopt, options, status, error, warnings);\n+            if (status != DatabaseStatus::SUCCESS) {\n+                error = _(\"Error: Failed to create new watchonly wallet\");\n+                return false;\n+            }\n+            created_wallets.push_back(data->solvable_wallet);\n+            LOCK(data->solvable_wallet->cs_wallet);\n+\n+            // Parse the descriptors and add them to the new wallet\n+            for (const auto& [desc_str, creation_time] : data->solvable_descs) {\n+                // Parse the descriptor\n+                FlatSigningProvider keys;\n+                std::string parse_err;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, parse_err, /* require_checksum */ true);\n+                assert(desc); // It shouldn't be possible to have the LegacyScriptPubKeyMan make an invalid descriptor\n+                assert(!desc->IsRange()); // It shouldn't be possible to have LegacyScriptPubKeyMan make a ranged watchonly descriptor\n+\n+                // Add to the wallet\n+                WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+                data->solvable_wallet->AddWalletDescriptor(w_desc, keys, \"\", false);\n+            }\n+\n+            // Add the wallet to settings\n+            UpdateWalletSetting(*context.chain, wallet_name, /*load_on_startup=*/true, warnings);\n+        }\n+    }\n+\n+    // Add the descriptors to wallet, remove LegacyScriptPubKeyMan, and cleanup txs and address book data\n+    if (!wallet.ApplyMigrationData(*data, error)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool MigrateLegacyToDescriptor(std::shared_ptr<CWallet>&& wallet, WalletContext& context, bilingual_str& error)\n+{\n+    LOCK(wallet->cs_wallet);\n+\n+    // Make a backup of the DB\n+    fs::path this_wallet_dir = fs::absolute(fs::PathFromString(wallet->GetDatabase().Filename())).parent_path();\n+    fs::path backup_filename = fs::PathFromString(strprintf(\"%s-%d.legacy.bak\", wallet->GetName(), GetTime()));\n+    fs::path backup_path = this_wallet_dir / backup_filename;\n+    if (!wallet->BackupWallet(fs::PathToString(backup_path))) {\n+        error = _(\"Error: Unable to make a backup of your wallet\");\n+        return false;\n+    }\n+\n+    // First change to using SQLite\n+\n+    // Remove this wallet from the list of wallets while we mess with the database\n+    // This is a workaround to prevent MaybeCompactWalletDB from accessing m_database while we are deleting and changing it\n+    {\n+        LOCK(context.wallets_mutex);\n+        std::vector<std::shared_ptr<CWallet>>::iterator i = std::find_if(context.wallets.begin(), context.wallets.end(), [&wallet](std::shared_ptr<CWallet> w) {\n+                return w == wallet;\n+            });\n+        assert(i != context.wallets.end());\n+        context.wallets.erase(i);\n+    }\n+    // Now do the database stuff\n+    if (!wallet->MigrateToSQLite(error)) return false;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 386,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956012138,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since these are filesystem errors, I don't think restoring the backup would actually work. Furthermore, because `m_database` has been swapped out, and potentially doesn't have a backing database, I don't think it's safe to continue execution in that state as the `CWallet` would still exist, but nowhere to write data to.",
      "created_at": "2022-08-26T18:42:35Z",
      "updated_at": "2022-08-26T18:42:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956331907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956331907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4039,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333098",
      "pull_request_review_id": 1087392673,
      "id": 956333098,
      "node_id": "PRRC_kwDOABII5845AHwq",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_wallet(self, wallet_name):",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 40,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "in_reply_to_id": 955452249,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-26T18:43:55Z",
      "updated_at": "2022-08-26T18:43:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956333098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333273",
      "pull_request_review_id": 1087393087,
      "id": 956333273,
      "node_id": "PRRC_kwDOABII5845AHzZ",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig0\")\n+        multisig0 = self.nodes[0].get_wallet_rpc(\"multisig0\")\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 168,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "in_reply_to_id": 955571409,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-26T18:44:05Z",
      "updated_at": "2022-08-26T18:44:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956333273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 166,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333338",
      "pull_request_review_id": 1087393233,
      "id": 956333338,
      "node_id": "PRRC_kwDOABII5845AH0a",
      "diff_hunk": "@@ -701,6 +701,40 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+\n+    EnsureWalletIsUnlocked(*wallet);\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    bilingual_str error;\n+    if (!MigrateLegacyToDescriptor(std::move(wallet), context, error)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n+    }\n+    return NullUniValue;",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb10bae0e68a38b7db833b1d16a2b478c371b375",
      "in_reply_to_id": 955580790,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-26T18:44:09Z",
      "updated_at": "2022-08-26T18:44:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956333338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333465",
      "pull_request_review_id": 1087393547,
      "id": 956333465,
      "node_id": "PRRC_kwDOABII5845AH2Z",
      "diff_hunk": "@@ -920,6 +920,16 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Migrate a BDB wallet to SQLite wallet\n+    bool MigrateToSQLite(bilingual_str& error) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "path": "src/wallet/wallet.h",
      "position": 27,
      "original_position": 15,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956001234,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-26T18:44:17Z",
      "updated_at": "2022-08-26T18:44:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956333465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 929,
      "original_line": 929,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333593",
      "pull_request_review_id": 1087393837,
      "id": 956333593,
      "node_id": "PRRC_kwDOABII5845AH4Z",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956043623,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-26T18:44:24Z",
      "updated_at": "2022-08-26T18:44:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956333593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3671,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333649",
      "pull_request_review_id": 1087394010,
      "id": 956333649,
      "node_id": "PRRC_kwDOABII5845AH5R",
      "diff_hunk": "@@ -920,6 +920,16 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Migrate a BDB wallet to SQLite wallet\n+    bool MigrateToSQLite(bilingual_str& error) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Get all of the descriptors from a legacy wallet\n+    std::optional<MigrationData> GetDescriptorsForLegacy(bilingual_str& error) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Adds the ScriptPubKeyMans given in MigrationData, removes LegacyScriptPubKeyMan, and moves tx and address book\n+    //! to their relevant wallets.",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 21,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956065220,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-26T18:44:29Z",
      "updated_at": "2022-08-26T18:44:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r956333649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956333649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 931,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957151552",
      "pull_request_review_id": 1088429066,
      "id": 957151552,
      "node_id": "PRRC_kwDOABII5845DPlA",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {",
      "path": "src/wallet/wallet.cpp",
      "position": 160,
      "original_position": 86,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956050505,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're assuming here that the reason `std::nullopt` is returned is that the wallet is locked, rather than some other failure.",
      "created_at": "2022-08-29T10:25:03Z",
      "updated_at": "2022-08-29T10:25:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957151552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957151552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3741,
      "original_line": 3741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957161829",
      "pull_request_review_id": 1088443426,
      "id": 957161829,
      "node_id": "PRRC_kwDOABII5845DSFl",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"wallet_name\", \"The name of the primary migrated wallet\"},\n+                {RPCResult::Type::STR, \"watchonly_name\", /*optional=*/true, \"The name of the migrated wallet containing the watchonly scripts\"},\n+                {RPCResult::Type::STR, \"solvables_name\", /*optional=*/true, \"The name of th migrated wallet containing solvable but not watched scripts\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "4aad336eefe0f0625d4f812a2e4029582f95acee",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4aad336eefe0f0625d4f812a2e4029582f95acee  nit: th",
      "created_at": "2022-08-29T10:38:04Z",
      "updated_at": "2022-08-29T13:30:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957161829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957161829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957321931",
      "pull_request_review_id": 1088443426,
      "id": 957321931,
      "node_id": "PRRC_kwDOABII5845D5LL",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 195,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fb5e0957e066bd0825947a399242242f1f1a2ae6: why do you need to call `importaddress` after `addmultisigaddress`? Is that makes it marked as `watch-only` (as oppose to the second address)? Why?\r\n\r\n(update: see above, but I still don't understand _why_)",
      "created_at": "2022-08-29T13:19:21Z",
      "updated_at": "2022-08-29T13:31:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957321931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957321931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957328132",
      "pull_request_review_id": 1088684045,
      "id": 957328132,
      "node_id": "PRRC_kwDOABII5845D6sE",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"wallet_name\", \"The name of the primary migrated wallet\"},\n+                {RPCResult::Type::STR, \"watchonly_name\", /*optional=*/true, \"The name of the migrated wallet containing the watchonly scripts\"},\n+                {RPCResult::Type::STR, \"solvables_name\", /*optional=*/true, \"The name of th migrated wallet containing solvable but not watched scripts\"},\n+                {RPCResult::Type::STR, \"backup_path\", \"The location of the backup of the original wallet\"},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+\n+    EnsureWalletIsUnlocked(*wallet);\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    util::Result<MigrationResult> res = MigrateLegacyToDescriptor(std::move(wallet), context);\n+    if (!res) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, util::ErrorString(res).original);\n+    }\n+\n+    UniValue r{UniValue::VOBJ};\n+    r.pushKV(\"wallet_name\", res->wallet_name);\n+    if (res->watchonly_wallet) {\n+        r.pushKV(\"watchonly_name\", res->watchonly_wallet->GetName());\n+    }\n+    if (res->solvables_wallet) {\n+        r.pushKV(\"solvables_name\", res->solvables_wallet->GetName());\n+    }\n+    r.pushKV(\"backup_path\", res->backup_path);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    r.pushKV(\"backup_path\", res->backup_path.u8string());\r\n```\r\n\r\nC:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\src\\wallet\\rpc\\wallet.cpp(753,1): message : Reason: cannot convert from 'fs::path' to 'const UniValue' [C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\build_msvc\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj]",
      "created_at": "2022-08-29T13:21:37Z",
      "updated_at": "2022-08-29T13:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957328132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957328132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 750,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957329335",
      "pull_request_review_id": 1088684045,
      "id": 957329335,
      "node_id": "PRRC_kwDOABII5845D6-3",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: No need for the `\\n`.\r\n```suggestion\r\n        \"EXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\r\n```",
      "created_at": "2022-08-29T13:22:07Z",
      "updated_at": "2022-08-29T13:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957329335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957329335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 707,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957330264",
      "pull_request_review_id": 1088443426,
      "id": 957330264,
      "node_id": "PRRC_kwDOABII5845D7NY",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], True)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        self.generate(self.nodes[0], 1)\n+        multisig1.gettransaction(txid)\n+        assert_equal(multisig1.getbalances()[\"watchonly\"][\"trusted\"], 10)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 202,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fb5e0957e066bd0825947a399242242f1f1a2ae6 : Maybe do `addr2 = ms_info2[\"address\"]` and rename `addr` to `addr1` for clarity.",
      "created_at": "2022-08-29T13:22:40Z",
      "updated_at": "2022-08-29T13:30:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957330264",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957330264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957331156",
      "pull_request_review_id": 1088684045,
      "id": 957331156,
      "node_id": "PRRC_kwDOABII5845D7bU",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"wallet_name\", \"The name of the primary migrated wallet\"},\n+                {RPCResult::Type::STR, \"watchonly_name\", /*optional=*/true, \"The name of the migrated wallet containing the watchonly scripts\"},\n+                {RPCResult::Type::STR, \"solvables_name\", /*optional=*/true, \"The name of th migrated wallet containing solvable but not watched scripts\"},\n+                {RPCResult::Type::STR, \"backup_path\", \"The location of the backup of the original wallet\"},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: For new code, can use correct spacing?\r\n\r\n```suggestion\r\n        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n        {\r\n            std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\r\n            if (!wallet) return NullUniValue;\r\n```",
      "created_at": "2022-08-29T13:23:11Z",
      "updated_at": "2022-08-29T13:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957331156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957331156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 728,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 731,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957334631",
      "pull_request_review_id": 1088691527,
      "id": 957334631,
      "node_id": "PRRC_kwDOABII5845D8Rn",
      "diff_hunk": "@@ -844,6 +897,7 @@ Span<const CRPCCommand> GetWalletRPCCommands()\n         {\"wallet\", &walletpassphrase},\n         {\"wallet\", &walletpassphrasechange},\n         {\"wallet\", &walletprocesspsbt},\n+        {\"wallet\", &migratewallet},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Keep this list sorted?",
      "created_at": "2022-08-29T13:25:44Z",
      "updated_at": "2022-08-29T13:25:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957334631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957334631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957335396",
      "pull_request_review_id": 1088443426,
      "id": 957335396,
      "node_id": "PRRC_kwDOABII5845D8dk",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], True)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        self.generate(self.nodes[0], 1)\n+        multisig1.gettransaction(txid)\n+        assert_equal(multisig1.getbalances()[\"watchonly\"][\"trusted\"], 10)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"iswatchonly\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"solvable\"], True)\n+\n+        # Migrating multisig1 should see the multisig is no longer part of multisig1\n+        # A new wallet multisig1_watchonly is created which has the multisig address\n+        # Transaction to multisig is in multisig1_watchonly and not multisig1\n+        multisig1.migratewallet()\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig1\")\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 212,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fb5e0957e066bd0825947a399242242f1f1a2ae6 : Maybe use `addr` instead of `ms_info[\"address\"]`",
      "created_at": "2022-08-29T13:26:27Z",
      "updated_at": "2022-08-29T13:30:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957335396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957335396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957337016",
      "pull_request_review_id": 1088443426,
      "id": 957337016,
      "node_id": "PRRC_kwDOABII5845D824",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], True)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        self.generate(self.nodes[0], 1)\n+        multisig1.gettransaction(txid)\n+        assert_equal(multisig1.getbalances()[\"watchonly\"][\"trusted\"], 10)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"iswatchonly\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"solvable\"], True)\n+\n+        # Migrating multisig1 should see the multisig is no longer part of multisig1\n+        # A new wallet multisig1_watchonly is created which has the multisig address\n+        # Transaction to multisig is in multisig1_watchonly and not multisig1\n+        multisig1.migratewallet()\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig1\")\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], False)\n+        assert_raises_rpc_error(-5, \"Invalid or non-wallet transaction id\", multisig1.gettransaction, txid)\n+        assert_equal(multisig1.getbalance(), 0)\n+        assert_equal(multisig1.listtransactions(), [])\n+\n+        assert_equal(\"multisig1_watchonly\" in self.nodes[0].listwallets(), True)\n+        ms1_watchonly = self.nodes[0].get_wallet_rpc(\"multisig1_watchonly\")\n+        ms1_wallet_info = ms1_watchonly.getwalletinfo()\n+        assert_equal(ms1_wallet_info['descriptors'], True)\n+        assert_equal(ms1_wallet_info['private_keys_enabled'], False)\n+        self.assert_is_sqlite(\"multisig1_watchonly\")\n+        assert_equal(ms1_watchonly.getaddressinfo(ms_info[\"address\"])[\"ismine\"], True)\n+        assert_equal(ms1_watchonly.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        assert_equal(ms1_watchonly.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 227,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fb5e0957e066bd0825947a399242242f1f1a2ae6: maybe comment here that, because it wasn't watch-only, it doesn't get moved to the watch-only wallet, but to the solvables wallet (as shown below in the test)",
      "created_at": "2022-08-29T13:27:54Z",
      "updated_at": "2022-08-29T13:30:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957337016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957337016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554698",
      "pull_request_review_id": 1089009632,
      "id": 957554698,
      "node_id": "PRRC_kwDOABII5845EyAK",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"wallet_name\", \"The name of the primary migrated wallet\"},\n+                {RPCResult::Type::STR, \"watchonly_name\", /*optional=*/true, \"The name of the migrated wallet containing the watchonly scripts\"},\n+                {RPCResult::Type::STR, \"solvables_name\", /*optional=*/true, \"The name of th migrated wallet containing solvable but not watched scripts\"},\n+                {RPCResult::Type::STR, \"backup_path\", \"The location of the backup of the original wallet\"},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+\n+    EnsureWalletIsUnlocked(*wallet);\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    util::Result<MigrationResult> res = MigrateLegacyToDescriptor(std::move(wallet), context);\n+    if (!res) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, util::ErrorString(res).original);\n+    }\n+\n+    UniValue r{UniValue::VOBJ};\n+    r.pushKV(\"wallet_name\", res->wallet_name);\n+    if (res->watchonly_wallet) {\n+        r.pushKV(\"watchonly_name\", res->watchonly_wallet->GetName());\n+    }\n+    if (res->solvables_wallet) {\n+        r.pushKV(\"solvables_name\", res->solvables_wallet->GetName());\n+    }\n+    r.pushKV(\"backup_path\", res->backup_path);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": 957328132,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:31:35Z",
      "updated_at": "2022-08-29T16:31:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957554698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 750,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554760",
      "pull_request_review_id": 1089009711,
      "id": 957554760,
      "node_id": "PRRC_kwDOABII5845EyBI",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": 957329335,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:31:38Z",
      "updated_at": "2022-08-29T16:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957554760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 707,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554829",
      "pull_request_review_id": 1089009803,
      "id": 957554829,
      "node_id": "PRRC_kwDOABII5845EyCN",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"wallet_name\", \"The name of the primary migrated wallet\"},\n+                {RPCResult::Type::STR, \"watchonly_name\", /*optional=*/true, \"The name of the migrated wallet containing the watchonly scripts\"},\n+                {RPCResult::Type::STR, \"solvables_name\", /*optional=*/true, \"The name of th migrated wallet containing solvable but not watched scripts\"},\n+                {RPCResult::Type::STR, \"backup_path\", \"The location of the backup of the original wallet\"},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"migratewallet\", \"\")\n+            + HelpExampleRpc(\"migratewallet\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": 957331156,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:31:42Z",
      "updated_at": "2022-08-29T16:31:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957554829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 728,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 731,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554898",
      "pull_request_review_id": 1089009897,
      "id": 957554898,
      "node_id": "PRRC_kwDOABII5845EyDS",
      "diff_hunk": "@@ -844,6 +897,7 @@ Span<const CRPCCommand> GetWalletRPCCommands()\n         {\"wallet\", &walletpassphrase},\n         {\"wallet\", &walletpassphrasechange},\n         {\"wallet\", &walletprocesspsbt},\n+        {\"wallet\", &migratewallet},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "3299574f5e27bdb6c12fffd541e7cbfd148ab883",
      "in_reply_to_id": 957334631,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:31:47Z",
      "updated_at": "2022-08-29T16:31:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957554898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957554898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555014",
      "pull_request_review_id": 1089010052,
      "id": 957555014,
      "node_id": "PRRC_kwDOABII5845EyFG",
      "diff_hunk": "@@ -701,6 +701,59 @@ RPCHelpMan simulaterawtransaction()\n     };\n }\n \n+static RPCHelpMan migratewallet()\n+{\n+    return RPCHelpMan{\"migratewallet\",\n+        \"\\nEXPERIMENTAL warning: This call may not work as expected and may be changed in future releases\\n\"\n+        \"\\nMigrate the wallet to a descriptor wallet.\\n\"\n+        \"A new wallet backup will need to be made.\\n\"\n+        \"\\nThe migration process will create a backup of the wallet before migrating. This backup\\n\"\n+        \"file will be named <wallet name>-<timestamp>.legacy.bak and can be found in the directory\\n\"\n+        \"for this wallet. In the event of an incorrect migration, the backup can be restored using restorewallet.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"wallet_name\", \"The name of the primary migrated wallet\"},\n+                {RPCResult::Type::STR, \"watchonly_name\", /*optional=*/true, \"The name of the migrated wallet containing the watchonly scripts\"},\n+                {RPCResult::Type::STR, \"solvables_name\", /*optional=*/true, \"The name of th migrated wallet containing solvable but not watched scripts\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "4aad336eefe0f0625d4f812a2e4029582f95acee",
      "in_reply_to_id": 957161829,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:31:54Z",
      "updated_at": "2022-08-29T16:31:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957555014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555384",
      "pull_request_review_id": 1089010652,
      "id": 957555384,
      "node_id": "PRRC_kwDOABII5845EyK4",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 195,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": 957321931,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So that this particular address is being watched and will end up in the `_watchonly` wallet.",
      "created_at": "2022-08-29T16:32:18Z",
      "updated_at": "2022-08-29T16:32:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957555384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555451",
      "pull_request_review_id": 1089010739,
      "id": 957555451,
      "node_id": "PRRC_kwDOABII5845EyL7",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], True)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        self.generate(self.nodes[0], 1)\n+        multisig1.gettransaction(txid)\n+        assert_equal(multisig1.getbalances()[\"watchonly\"][\"trusted\"], 10)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 202,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": 957330264,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:32:23Z",
      "updated_at": "2022-08-29T16:32:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957555451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555516",
      "pull_request_review_id": 1089010836,
      "id": 957555516,
      "node_id": "PRRC_kwDOABII5845EyM8",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], True)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        self.generate(self.nodes[0], 1)\n+        multisig1.gettransaction(txid)\n+        assert_equal(multisig1.getbalances()[\"watchonly\"][\"trusted\"], 10)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"iswatchonly\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"solvable\"], True)\n+\n+        # Migrating multisig1 should see the multisig is no longer part of multisig1\n+        # A new wallet multisig1_watchonly is created which has the multisig address\n+        # Transaction to multisig is in multisig1_watchonly and not multisig1\n+        multisig1.migratewallet()\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig1\")\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 212,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": 957335396,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:32:27Z",
      "updated_at": "2022-08-29T16:32:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957555516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957555516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957556002",
      "pull_request_review_id": 1089011497,
      "id": 957556002,
      "node_id": "PRRC_kwDOABII5845EyUi",
      "diff_hunk": "@@ -0,0 +1,405 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Migrating a wallet from legacy to descriptor.\"\"\"\n+\n+import os\n+import random\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class WalletMigrationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+        self.skip_if_no_bdb()\n+\n+    def assert_is_sqlite(self, wallet_name):\n+        wallet_file_path = os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name, self.wallet_data_filename)\n+        with open(wallet_file_path, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert_equal(file_magic, b'SQLite format 3\\x00')\n+        assert_equal(self.nodes[0].get_wallet_rpc(wallet_name).getwalletinfo()[\"format\"], \"sqlite\")\n+\n+    def create_legacy_wallet(self, wallet_name):\n+        self.nodes[0].createwallet(wallet_name=wallet_name)\n+        wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+        assert_equal(wallet.getwalletinfo()[\"descriptors\"], False)\n+        assert_equal(wallet.getwalletinfo()[\"format\"], \"bdb\")\n+        return wallet\n+\n+    def assert_addr_info_equal(self, addr_info, addr_info_old):\n+        assert_equal(addr_info[\"address\"], addr_info_old[\"address\"])\n+        assert_equal(addr_info[\"scriptPubKey\"], addr_info_old[\"scriptPubKey\"])\n+        assert_equal(addr_info[\"ismine\"], addr_info_old[\"ismine\"])\n+        assert_equal(addr_info[\"hdkeypath\"], addr_info_old[\"hdkeypath\"])\n+        assert_equal(addr_info[\"solvable\"], addr_info_old[\"solvable\"])\n+        assert_equal(addr_info[\"ischange\"], addr_info_old[\"ischange\"])\n+        assert_equal(addr_info[\"hdmasterfingerprint\"], addr_info_old[\"hdmasterfingerprint\"])\n+\n+    def assert_list_txs_equal(self, received_list_txs, expected_list_txs):\n+        for d in received_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        for d in expected_list_txs:\n+            if \"parent_descs\" in d:\n+                del d[\"parent_descs\"]\n+        assert_equal(received_list_txs, expected_list_txs)\n+\n+    def test_basic(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.log.info(\"Test migration of a basic keys only wallet without balance\")\n+        basic0 = self.create_legacy_wallet(\"basic0\")\n+\n+        addr = basic0.getnewaddress()\n+        change = basic0.getrawchangeaddress()\n+\n+        old_addr_info = basic0.getaddressinfo(addr)\n+        old_change_addr_info = basic0.getaddressinfo(change)\n+        assert_equal(old_addr_info[\"ismine\"], True)\n+        assert_equal(old_addr_info[\"hdkeypath\"], \"m/0'/0'/0'\")\n+        assert_equal(old_change_addr_info[\"ismine\"], True)\n+        assert_equal(old_change_addr_info[\"hdkeypath\"], \"m/0'/1'/0'\")\n+\n+        # Note: migration could take a while.\n+        basic0.migratewallet()\n+\n+        # Verify created descriptors\n+        assert_equal(basic0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic0\")\n+\n+        # The wallet should create the following descriptors:\n+        # * BIP32 descriptors in the form of \"0'/0'/*\" and \"0'/1'/*\" (2 descriptors)\n+        # * BIP44 descriptors in the form of \"44'/1'/0'/0/*\" and \"44'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP49 descriptors, P2SH(P2WPKH), in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP84 descriptors, P2WPKH, in the form of \"84'/1'/0'/1/*\" and \"84'/1'/0'/1/*\" (2 descriptors)\n+        # * BIP86 descriptors, P2TR, in the form of \"86'/1'/0'/0/*\" and \"86'/1'/0'/1/*\" (2 descriptors)\n+        # * A combo(PK) descriptor for the wallet master key.\n+        # So, should have a total of 11 descriptors on it.\n+        assert_equal(len(basic0.listdescriptors()[\"descriptors\"]), 11)\n+\n+        # Compare addresses info\n+        addr_info = basic0.getaddressinfo(addr)\n+        change_addr_info = basic0.getaddressinfo(change)\n+        self.assert_addr_info_equal(addr_info, old_addr_info)\n+        self.assert_addr_info_equal(change_addr_info, old_change_addr_info)\n+\n+        addr_info = basic0.getaddressinfo(basic0.getnewaddress(\"\", \"bech32\"))\n+        assert_equal(addr_info[\"hdkeypath\"], \"m/84'/1'/0'/0/0\")\n+\n+        self.log.info(\"Test migration of a basic keys only wallet with a balance\")\n+        basic1 = self.create_legacy_wallet(\"basic1\")\n+\n+        for _ in range(0, 10):\n+            default.sendtoaddress(basic1.getnewaddress(), 1)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        for _ in range(0, 5):\n+            basic1.sendtoaddress(default.getnewaddress(), 0.5)\n+\n+        self.generate(self.nodes[0], 1)\n+        bal = basic1.getbalance()\n+        txs = basic1.listtransactions()\n+\n+        basic1.migratewallet()\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        # restart node and verify that everything is still there\n+        self.restart_node(0)\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].loadwallet(\"basic1\")\n+        basic1 = self.nodes[0].get_wallet_rpc(\"basic1\")\n+        assert_equal(basic1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic1\")\n+        assert_equal(basic1.getbalance(), bal)\n+        self.assert_list_txs_equal(basic1.listtransactions(), txs)\n+\n+        self.log.info(\"Test migration of a wallet with balance received on the seed\")\n+        basic2 = self.create_legacy_wallet(\"basic2\")\n+        basic2_seed = get_generate_key()\n+        basic2.sethdseed(True, basic2_seed.privkey)\n+        assert_equal(basic2.getbalance(), 0)\n+\n+        # Receive coins on different output types for the same seed\n+        basic2_balance = 0\n+        for addr in [basic2_seed.p2pkh_addr, basic2_seed.p2wpkh_addr, basic2_seed.p2sh_p2wpkh_addr]:\n+            send_value = random.randint(1, 4)\n+            default.sendtoaddress(addr, send_value)\n+            basic2_balance += send_value\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(basic2.getbalance(), basic2_balance)\n+        basic2_txs = basic2.listtransactions()\n+\n+        # Now migrate and test that we still see have the same balance/transactions\n+        basic2.migratewallet()\n+        assert_equal(basic2.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"basic2\")\n+        assert_equal(basic2.getbalance(), basic2_balance)\n+        self.assert_list_txs_equal(basic2.listtransactions(), basic2_txs)\n+\n+    def test_multisig(self):\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        # Contrived case where all the multisig keys are in a single wallet\n+        self.log.info(\"Test migration of a wallet with all keys for a multisig\")\n+        multisig0 = self.create_legacy_wallet(\"multisig0\")\n+        addr1 = multisig0.getnewaddress()\n+        addr2 = multisig0.getnewaddress()\n+        addr3 = multisig0.getnewaddress()\n+\n+        ms_info = multisig0.addmultisigaddress(2, [addr1, addr2, addr3])\n+\n+        multisig0.migratewallet()\n+        assert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig0\")\n+        ms_addr_info = multisig0.getaddressinfo(ms_info[\"address\"])\n+        assert_equal(ms_addr_info[\"ismine\"], True)\n+        assert_equal(ms_addr_info[\"desc\"], ms_info[\"descriptor\"])\n+        assert_equal(\"multisig0_watchonly\" in self.nodes[0].listwallets(), False)\n+        assert_equal(\"multisig0_solvables\" in self.nodes[0].listwallets(), False)\n+\n+        pub1 = multisig0.getaddressinfo(addr1)[\"pubkey\"]\n+        pub2 = multisig0.getaddressinfo(addr2)[\"pubkey\"]\n+\n+        # Some keys in multisig do not belong to this wallet\n+        self.log.info(\"Test migration of a wallet that has some keys in a multisig\")\n+        self.nodes[0].createwallet(wallet_name=\"multisig1\")\n+        multisig1 = self.nodes[0].get_wallet_rpc(\"multisig1\")\n+        ms_info = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        ms_info2 = multisig1.addmultisigaddress(2, [multisig1.getnewaddress(), pub1, pub2])\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], False)\n+\n+        addr = ms_info[\"address\"]\n+        txid = default.sendtoaddress(addr, 10)\n+        multisig1.importaddress(addr)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], True)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        self.generate(self.nodes[0], 1)\n+        multisig1.gettransaction(txid)\n+        assert_equal(multisig1.getbalances()[\"watchonly\"][\"trusted\"], 10)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"iswatchonly\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info2[\"address\"])[\"solvable\"], True)\n+\n+        # Migrating multisig1 should see the multisig is no longer part of multisig1\n+        # A new wallet multisig1_watchonly is created which has the multisig address\n+        # Transaction to multisig is in multisig1_watchonly and not multisig1\n+        multisig1.migratewallet()\n+        assert_equal(multisig1.getwalletinfo()[\"descriptors\"], True)\n+        self.assert_is_sqlite(\"multisig1\")\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"ismine\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"iswatchonly\"], False)\n+        assert_equal(multisig1.getaddressinfo(ms_info[\"address\"])[\"solvable\"], False)\n+        assert_raises_rpc_error(-5, \"Invalid or non-wallet transaction id\", multisig1.gettransaction, txid)\n+        assert_equal(multisig1.getbalance(), 0)\n+        assert_equal(multisig1.listtransactions(), [])\n+\n+        assert_equal(\"multisig1_watchonly\" in self.nodes[0].listwallets(), True)\n+        ms1_watchonly = self.nodes[0].get_wallet_rpc(\"multisig1_watchonly\")\n+        ms1_wallet_info = ms1_watchonly.getwalletinfo()\n+        assert_equal(ms1_wallet_info['descriptors'], True)\n+        assert_equal(ms1_wallet_info['private_keys_enabled'], False)\n+        self.assert_is_sqlite(\"multisig1_watchonly\")\n+        assert_equal(ms1_watchonly.getaddressinfo(ms_info[\"address\"])[\"ismine\"], True)\n+        assert_equal(ms1_watchonly.getaddressinfo(ms_info[\"address\"])[\"solvable\"], True)\n+        assert_equal(ms1_watchonly.getaddressinfo(ms_info2[\"address\"])[\"ismine\"], False)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 227,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "fb5e0957e066bd0825947a399242242f1f1a2ae6",
      "in_reply_to_id": 957337016,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-29T16:33:02Z",
      "updated_at": "2022-08-29T16:33:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957556002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957556002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957754797",
      "pull_request_review_id": 1089300385,
      "id": 957754797,
      "node_id": "PRRC_kwDOABII5845Fi2t",
      "diff_hunk": "@@ -3654,4 +3654,74 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::vector<std::pair<SerializeData, SerializeData>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records.emplace_back(key, value);\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& [key, value] : records) {\n+        CDataStream ss_key(key, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(value, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "feaf85a8adcbc3ce21698806b6c6702fc00c919e",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`TxnCommit` can fail and return false (same as `TxnBegin`).\r\n\r\nSame as it's done above, could throw a critical error.",
      "created_at": "2022-08-29T20:13:50Z",
      "updated_at": "2022-08-29T20:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957754797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957754797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 3724,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3727,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957760324",
      "pull_request_review_id": 1089300385,
      "id": 957760324,
      "node_id": "PRRC_kwDOABII5845FkNE",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {",
      "path": "src/wallet/wallet.cpp",
      "position": 160,
      "original_position": 86,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956050505,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> You're assuming here that the reason std::nullopt is returned is that the wallet is locked, rather than some other failure.\r\n\r\nThe RPC handler is ensuring that the wallet is unlocked (third line there). This check is redundant for now, and might be useful when a migration button is implemented on the GUI.",
      "created_at": "2022-08-29T20:19:28Z",
      "updated_at": "2022-08-29T20:22:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957760324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957760324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3741,
      "original_line": 3741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957811243",
      "pull_request_review_id": 1089377619,
      "id": 957811243,
      "node_id": "PRRC_kwDOABII5845Fwor",
      "diff_hunk": "@@ -3654,4 +3654,454 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::map<SerializeData, SerializeData> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records[key] = value;\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& kv_pair : records) {\n+        CDataStream ss_key(kv_pair.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(kv_pair.second, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;\n+}\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {",
      "path": "src/wallet/wallet.cpp",
      "position": 160,
      "original_position": 86,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "a6c0e2f844f589df4f2d19e38c2e350952e1b4bf",
      "in_reply_to_id": 956050505,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think the message implies that the only reason it would return `nullopt` is because it is locked. However, it is likely that a failure would be due to being locked, hence the message. We do this in a couple of other places too where failure is often being locked, but could be some weird db condition that actually happened.",
      "created_at": "2022-08-29T21:29:08Z",
      "updated_at": "2022-08-29T21:29:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957811243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957811243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3741,
      "original_line": 3741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957812315",
      "pull_request_review_id": 1089379189,
      "id": 957812315,
      "node_id": "PRRC_kwDOABII5845Fw5b",
      "diff_hunk": "@@ -3654,4 +3654,74 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+bool CWallet::MigrateToSQLite(bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    WalletLogPrintf(\"Migrating wallet storage database from BerkeleyDB to SQLite.\\n\");\n+\n+    if (m_database->Format() == \"sqlite\") {\n+        error = _(\"Error: This wallet already uses SQLite\");\n+        return false;\n+    }\n+\n+    // Get all of the records for DB type migration\n+    std::unique_ptr<DatabaseBatch> batch = m_database->MakeBatch();\n+    std::vector<std::pair<SerializeData, SerializeData>> records;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Unable to begin reading all records in the database\");\n+        return false;\n+    }\n+    bool complete = false;\n+    while (true) {\n+        CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+        bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+        if (!ret) {\n+            break;\n+        }\n+        SerializeData key(ss_key.begin(), ss_key.end());\n+        SerializeData value(ss_value.begin(), ss_value.end());\n+        records.emplace_back(key, value);\n+    }\n+    batch->CloseCursor();\n+    batch.reset();\n+    if (!complete) {\n+        error = _(\"Error: Unable to read all records in the database\");\n+        return false;\n+    }\n+\n+    // Close this database and delete the file\n+    fs::path db_path = fs::PathFromString(m_database->Filename());\n+    fs::path db_dir = db_path.parent_path();\n+    m_database->Close();\n+    fs::remove(db_path);\n+\n+    // Make new DB\n+    DatabaseOptions opts;\n+    opts.require_create = true;\n+    opts.require_format = DatabaseFormat::SQLITE;\n+    DatabaseStatus db_status;\n+    std::unique_ptr<WalletDatabase> new_db = MakeDatabase(db_dir, opts, db_status, error);\n+    assert(new_db); // This is to prevent doing anything further with this wallet. The original file was deleted, but a backup exists.\n+    m_database.reset();\n+    m_database = std::move(new_db);\n+\n+    // Write existing records into the new DB\n+    batch = m_database->MakeBatch();\n+    batch->TxnBegin();\n+    for (const auto& [key, value] : records) {\n+        CDataStream ss_key(key, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(value, SER_DISK, CLIENT_VERSION);\n+        if (!batch->Write(ss_key, ss_value)) {\n+            batch->TxnAbort();\n+            m_database->Close();\n+            fs::remove(m_database->Filename());\n+            assert(false); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n+        }\n+    }\n+    batch->TxnCommit();\n+    return true;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "feaf85a8adcbc3ce21698806b6c6702fc00c919e",
      "in_reply_to_id": 957754797,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added some asserts for this and `TxnBegin`.",
      "created_at": "2022-08-29T21:30:51Z",
      "updated_at": "2022-08-29T21:30:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r957812315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957812315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": 3724,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3727,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1134633292",
      "pull_request_review_id": 1337977991,
      "id": 1134633292,
      "node_id": "PRRC_kwDOABII585DoSFM",
      "diff_hunk": "@@ -3726,4 +3726,400 @@ bool CWallet::MigrateToSQLite(bilingual_str& error)\n     assert(committed); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n     return true;\n }\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords()) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        // Use the existing master key if we have it\n+        if (data.master_key.key.IsValid()) {\n+            SetupDescriptorScriptPubKeyMans(data.master_key);\n+        } else {\n+            // Setup with a new seed if we don't.\n+            SetupDescriptorScriptPubKeyMans();\n+        }\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    // We need to go through these in the tx insertion order so that lookups to spends works.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& [_pos, wtx] : wtxOrdered) {\n+        if (!IsMine(*wtx->tx) && !IsFromMe(*wtx->tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripts weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*wtx->tx) || data.watchonly_wallet->IsFromMe(*wtx->tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(wtx->tx, wtx->m_state)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(wtx->GetHash());\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = strprintf(_(\"Error: Transaction %s in wallet cannot be identified to belong to migrated wallets\"), wtx->GetHash().GetHex());\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+        // Tell the GUI of each tx\n+        for (const uint256& txid : deleted_txids) {\n+            NotifyTransactionChanged(txid, CT_UPDATED);\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        // Labels applied to receiving addresses should go based on IsMine\n+        if (addr_pair.second.purpose == \"receive\") {\n+            if (!IsMine(addr_pair.first)) {",
      "path": "src/wallet/wallet.cpp",
      "position": 254,
      "original_position": 110,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "0bf7b38bff422e7413bcd3dc0abe2568dd918ddc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement MigrateLegacyToDescriptor\" (0bf7b38bff422e7413bcd3dc0abe2568dd918ddc)\r\n\r\nIt seems like this should say `IsMine` not `!IsMine`. Also I'm not sure why `addr_pair.second.purpose == \"receive\"` check is necessary. It seems like just checking IsMine should be enough, and it would be less robust to rely on purpose field being present.",
      "created_at": "2023-03-13T21:25:00Z",
      "updated_at": "2023-03-13T21:26:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r1134633292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1134633292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3835,
      "original_line": 3835,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1134644466",
      "pull_request_review_id": 1337994773,
      "id": 1134644466,
      "node_id": "PRRC_kwDOABII585DoUzy",
      "diff_hunk": "@@ -3726,4 +3726,400 @@ bool CWallet::MigrateToSQLite(bilingual_str& error)\n     assert(committed); // This is a critical error, the new db could not be written to. The original db exists as a backup, but we should not continue execution.\n     return true;\n }\n+\n+std::optional<MigrationData> CWallet::GetDescriptorsForLegacy(bilingual_str& error) const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return std::nullopt;\n+    }\n+\n+    std::optional<MigrationData> res = legacy_spkm->MigrateToDescriptor();\n+    if (res == std::nullopt) {\n+        error = _(\"Error: Unable to produce descriptors for this legacy wallet. Make sure the wallet is unlocked first\");\n+        return std::nullopt;\n+    }\n+    return res;\n+}\n+\n+bool CWallet::ApplyMigrationData(MigrationData& data, bilingual_str& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    LegacyScriptPubKeyMan* legacy_spkm = GetLegacyScriptPubKeyMan();\n+    if (!legacy_spkm) {\n+        error = _(\"Error: This wallet is already a descriptor wallet\");\n+        return false;\n+    }\n+\n+    for (auto& desc_spkm : data.desc_spkms) {\n+        if (m_spk_managers.count(desc_spkm->GetID()) > 0) {\n+            error = _(\"Error: Duplicate descriptors created during migration. Your wallet may be corrupted.\");\n+            return false;\n+        }\n+        m_spk_managers[desc_spkm->GetID()] = std::move(desc_spkm);\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from disk\n+    if (!legacy_spkm->DeleteRecords()) {\n+        return false;\n+    }\n+\n+    // Remove the LegacyScriptPubKeyMan from memory\n+    m_spk_managers.erase(legacy_spkm->GetID());\n+    m_external_spk_managers.clear();\n+    m_internal_spk_managers.clear();\n+\n+    // Setup new descriptors\n+    SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    if (!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        // Use the existing master key if we have it\n+        if (data.master_key.key.IsValid()) {\n+            SetupDescriptorScriptPubKeyMans(data.master_key);\n+        } else {\n+            // Setup with a new seed if we don't.\n+            SetupDescriptorScriptPubKeyMans();\n+        }\n+    }\n+\n+    // Check if the transactions in the wallet are still ours. Either they belong here, or they belong in the watchonly wallet.\n+    // We need to go through these in the tx insertion order so that lookups to spends works.\n+    std::vector<uint256> txids_to_delete;\n+    for (const auto& [_pos, wtx] : wtxOrdered) {\n+        if (!IsMine(*wtx->tx) && !IsFromMe(*wtx->tx)) {\n+            // Check it is the watchonly wallet's\n+            // solvable_wallet doesn't need to be checked because transactions for those scripts weren't being watched for\n+            if (data.watchonly_wallet) {\n+                LOCK(data.watchonly_wallet->cs_wallet);\n+                if (data.watchonly_wallet->IsMine(*wtx->tx) || data.watchonly_wallet->IsFromMe(*wtx->tx)) {\n+                    // Add to watchonly wallet\n+                    if (!data.watchonly_wallet->AddToWallet(wtx->tx, wtx->m_state)) {\n+                        error = _(\"Error: Could not add watchonly tx to watchonly wallet\");\n+                        return false;\n+                    }\n+                    // Mark as to remove from this wallet\n+                    txids_to_delete.push_back(wtx->GetHash());\n+                    continue;\n+                }\n+            }\n+            // Both not ours and not in the watchonly wallet\n+            error = strprintf(_(\"Error: Transaction %s in wallet cannot be identified to belong to migrated wallets\"), wtx->GetHash().GetHex());\n+            return false;\n+        }\n+    }\n+    // Do the removes\n+    if (txids_to_delete.size() > 0) {\n+        std::vector<uint256> deleted_txids;\n+        if (ZapSelectTx(txids_to_delete, deleted_txids) != DBErrors::LOAD_OK) {\n+            error = _(\"Error: Could not delete watchonly transactions\");\n+            return false;\n+        }\n+        if (deleted_txids != txids_to_delete) {\n+            error = _(\"Error: Not all watchonly txs could be deleted\");\n+            return false;\n+        }\n+        // Tell the GUI of each tx\n+        for (const uint256& txid : deleted_txids) {\n+            NotifyTransactionChanged(txid, CT_UPDATED);\n+        }\n+    }\n+\n+    // Check the address book data in the same way we did for transactions\n+    std::vector<CTxDestination> dests_to_delete;\n+    for (const auto& addr_pair : m_address_book) {\n+        // Labels applied to receiving addresses should go based on IsMine\n+        if (addr_pair.second.purpose == \"receive\") {\n+            if (!IsMine(addr_pair.first)) {",
      "path": "src/wallet/wallet.cpp",
      "position": 254,
      "original_position": 110,
      "commit_id": "53e7ed075c49f853cc845afc7b2f058cabad0cb0",
      "original_commit_id": "0bf7b38bff422e7413bcd3dc0abe2568dd918ddc",
      "in_reply_to_id": 1134633292,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's because the migration process divides data between different wallets.\r\nIt first deletes and unloads the legacy spkm from the main wallet (check the beginning of the function), and setup new descriptors. Then moves the data to two possible wallets; a solvable and a watch-only wallet.\r\n\r\nSo the `!IsMine` means that the record in the addressbook is from the legacy spkm (not loaded anymore), so it needs migration to the new wallets.\r\n\r\nIt also took me a while to get it while was rewriting it for #26836.\r\n(sorry for the double PR mention, saw late your response in the other PR)",
      "created_at": "2023-03-13T21:40:13Z",
      "updated_at": "2023-03-13T22:00:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19602#discussion_r1134644466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1134644466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3835,
      "original_line": 3835,
      "side": "RIGHT"
    }
  ]
}