{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
    "id": 129301264,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTI5MzAxMjY0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10757",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/10757.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/10757.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/41d0476f62269027ec2193a5f80d508d789de8aa",
    "number": 10757,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "RPC: Introduce getblockstats to plot things",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It returns per block statistics about several things. It should be easy to add more if people think of other things to add or remove some if I went too far (but once written, why not keep it? EDIT: answer: not to test or maintain them).\r\n\r\nThe currently available options are: minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs (EDIT: see updated list in the rpc call documentation)\r\n\r\nFor the x axis, one can use height or block.nTime (I guess I could add mediantime if there's interest [EDIT: nobody showed interest but I implemented mediantime nonetheless, in fact there's no distinction between x or y axis anymore, that's for the caller to judge]).\r\n\r\nTo calculate fees, -txindex is required.\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2017-07-06T23:21:21Z",
    "updated_at": "2021-12-16T15:10:46Z",
    "closed_at": "2018-05-23T17:01:21Z",
    "mergeable_state": "unknown",
    "merged_at": "2018-05-23T17:01:21Z",
    "merge_commit_sha": "41d0476f62269027ec2193a5f80d508d789de8aa",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jtimon:b15-rpc-plotter",
      "ref": "b15-rpc-plotter",
      "sha": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 17504501,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNzUwNDUwMQ==",
        "name": "bitcoin",
        "full_name": "jtimon/bitcoin",
        "owner": {
          "login": "jtimon",
          "id": 1008458,
          "node_id": "MDQ6VXNlcjEwMDg0NTg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jtimon",
          "html_url": "https://github.com/jtimon",
          "followers_url": "https://api.github.com/users/jtimon/followers",
          "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
          "organizations_url": "https://api.github.com/users/jtimon/orgs",
          "repos_url": "https://api.github.com/users/jtimon/repos",
          "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jtimon/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jtimon/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jtimon/bitcoin",
        "archive_url": "https://api.github.com/repos/jtimon/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jtimon/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jtimon/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jtimon/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jtimon/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jtimon/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jtimon/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jtimon/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jtimon/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jtimon/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jtimon/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jtimon/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jtimon/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jtimon/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jtimon/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jtimon/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jtimon/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jtimon/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jtimon/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jtimon/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jtimon/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jtimon/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jtimon/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jtimon/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jtimon/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jtimon/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jtimon/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jtimon/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jtimon/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jtimon/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jtimon/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jtimon/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jtimon/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jtimon/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jtimon/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jtimon/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jtimon/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jtimon/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jtimon/bitcoin/hooks",
        "svn_url": "https://github.com/jtimon/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 129931,
        "default_branch": "0.13-new-testchain",
        "open_issues_count": 4,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2020-02-19T20:49:57Z",
        "created_at": "2014-03-07T06:02:15Z",
        "updated_at": "2023-05-27T14:30:08Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6916024768ec57a00f54224640ab4e4871d2a30a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 688,
    "deletions": 11,
    "changed_files": 5,
    "commits": 4,
    "review_comments": 108,
    "comments": 49
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 1153689194,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE1MzY4OTE5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1153689194",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T00:01:05Z"
    },
    {
      "event": "labeled",
      "id": 1153748996,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDExNTM3NDg5OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1153748996",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T01:25:35Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 313707397,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcwNzM5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313707397",
      "actor": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T15:03:31Z",
      "updated_at": "2017-07-07T15:03:31Z",
      "author_association": "NONE",
      "body": "Some ideas for additions:\r\n- Non-fee total output amount\r\n- Coinbase reward\r\n- Money supply including this block\r\n- Transaction weight `txweight` (it can be derived from existing fields, however)\r\n\r\nI would prefer to see both `time` and `mediantime` returned, since they are available.\r\n\r\nShould we return non-independent fields, such as `avgfee` when also including `totalfee` and `txs`?\r\n\r\nI find that for bitcoin-related data, the median is often more useful than the average of a distribution. Including `medianweight`, `medianfee`, `medianfeerate`, `medianoutput` etc would expose these useful quantities to the user.",
      "user": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313707397",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 313714215,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcxNDIxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313714215",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T15:28:30Z",
      "updated_at": "2017-07-07T15:28:30Z",
      "author_association": "MEMBER",
      "body": "> but once written, why not keep it?\r\n\r\nBecause more code => more bugs and more maintenance effort. I prefer:\r\n\r\nIf it's not really needed, why add it?\r\n\r\nThis is perhaps a nice-to-have, but since #8704, `getblock` can return all transactions in a block (without requiring `txindex`). Those can then be parsed and analysed offline.\r\n\r\nIs there a compelling use-case I'm missing here? This seems like a feature only a small subset of users would be interested in, in which case an offline tools seems more appropriate.\r\n\r\nSorry - not meaning to be negative, but my default reaction to new RPCs/arguments tends towards NACK unless I can see a compelling and widespread use-case.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313714215",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 313720092,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcyMDA5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313720092",
      "actor": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T15:50:38Z",
      "updated_at": "2017-07-07T15:50:38Z",
      "author_association": "NONE",
      "body": "> This is perhaps a nice-to-have, but since #8704, getblock can return all transactions in a block (without requiring txindex). Those can then be parsed and analysed offline.\r\n\r\nThis code pulls each transaction input's previous outpoint in order to compute transaction fees. Replicating that in RPC would require thousands of calls for most blocks.",
      "user": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720092",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 313720976,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcyMDk3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313720976",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T15:53:50Z",
      "updated_at": "2018-05-08T14:44:00Z",
      "author_association": "MEMBER",
      "body": "> This code pulls each transaction input's previous outpoint\r\n\r\nAh yes, of course. ~Concept ACK~ in that case. Doing this with `getblock` / `getrawtransaction` is infeasible.\r\n\r\nEDIT: I'm going to reverse myself again: I don't think +700 lines is worthwhile for something with limited usage for most users. I'm -0 on this.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720976",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 313729916,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcyOTkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313729916",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T16:29:24Z",
      "updated_at": "2017-07-07T16:30:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Because more code => more bugs and more maintenance effort. I prefer:\r\n\r\nSure, but I mean, removing for example the avgfee or avgfeerate won't  safe much code or testing code, just a few lines. Forget I said this, if there's specific functions to remove because nobody will want them, let's remove those and focus on the ones people want. Adding specific things only a few people want can also happen in their own branches, so it's no big deal.\r\n\r\nThe only use case is gather statistics, presumably to plot things, create charts. That is, at least, compelling to me, but I don't think that will have widespread usage. I also don't think all rpc calls have it. Is getchaintxstats, for example, a widespread use case?\r\n\r\nIf that's enough reason not to merge this, it's fine, I can maintain it as a separate branch that I periodically rebase, it is simple enough, so that won't be a big deal. On the other hand, if I can get it reviewed and merged it'll be less work for me in the long run and I also get the review.\r\n\r\n> Non-fee total output amount\r\n> Coinbase reward\r\n\r\nSounds good.\r\n\r\n> Money supply including this block\r\n\r\nMhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintxstats ?\r\n\r\n> Transaction weight txweight (it can be derived from existing fields, however)\r\n\r\nIn fact I'm using weight for everything. I should s/size/weight/ and probably also show size separately. \r\nMaybe separate feerates in by weight and serialize size? I don't know...\r\n\r\n> I would prefer to see both time and mediantime returned, since they are available.\r\n\r\nYeah, the mediantime takes a little bit longer to be calculated but not much and one can always disable anything. In fact, the height and time shouldn't be treated in any special way for being \"the x axis\" and should be allowed to be disabled like the rest.\r\n\r\n> Should we return non-independent fields, such as avgfee when also including totalfee and txs?\r\n\r\nThis is a good question. This is mostly what I meant by \"why not if it's this easy?\".\r\nBut yeah, I guess non-independent are good candidates to be removed.\r\n\r\nre median: yeah, that sounds interesting too, good idea!\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313729916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 313731922,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzczMTkyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313731922",
      "actor": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-07T16:37:46Z",
      "updated_at": "2017-07-07T16:37:46Z",
      "author_association": "NONE",
      "body": "> Mhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintxstats ?\r\n\r\nI was thinking of the more trivial version, rather than the `supply - provably_unspendable` version, so keeping that as external code makes more sense. Maintaining the sum of spendable outputs against block height is a much more ambitious idea, and it may make sense in the future. However, it is probably out of scope of this PR.",
      "user": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313731922",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "reviewed",
      "id": 48733116,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzMxMTY=",
      "url": null,
      "actor": null,
      "commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Partial review, suggestion to use `std::set`.\r\n\r\nNit, rename `allowed_plot_values` to `valid_plot_values`.\r\nNit, rename `getperblockstats` to just `getblockstats`?",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-48733116",
      "submitted_at": "2017-07-07T23:07:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1155410687,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE1NTQxMDY4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155410687",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T06:06:03Z"
    },
    {
      "event": "commented",
      "id": 313840344,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzg0MDM0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313840344",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z",
      "updated_at": "2017-07-08T07:32:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks again for the great feedback!\r\n\r\n@promag I think I solved all your nits except for https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101\r\n\r\n@clarkmoody I think I added most of your suggestions, explicitly excluding anything that involved accumulations neither from height=1 nor from height=start.\r\nThe former potentially implies a world of complexity and the latter can be trivially calculated on the visual side: I would completely discard any accumulator redundancy in this rpc beforehand.\r\n\r\nAnd for the rest of the redundancies, @jnewbery and @clarkmoody - thanks again for pointing it out -, it's never too late to remove them before merging like a trivial squash and it's never too soon to start saying which ones you would bikesay* out first. Also bikesay the names for the curves and even the order in the list (duplicated for c++ and python).\r\n\r\nIn the meantime, I embraced redundancy since, as said, it will be trivial for me to remove later. And also the pertinent optimizations to skip calculations when plot_values.count(\"minfee\") == 0 or actually only when the extra calculation is more expensive than the searching in plot_values which is a set of strings.\r\n\r\nFor example, we have blockfees, reward, subsidy, complying with consensus rule ```reward == blockfees + subsidy```. Only 2 of the 3 are necessary, at least one is redundant. My personal preference is removing either subsidy or reward or subsidy, but not blockfees. But at said once written there's no problem with me in just making sure their tests don't surprise me until we decide which ones didn't deserve it. \r\n\r\nWhich one seems bikesaying in principle. But not in this case. \r\nblockfees/total_fees serves for other calculations like avgfeerate. Let's not remove that one, just rename it.\r\n\r\nBut it is more interesting to propose new ones than to rename or vote for removal IMO. I believe the most interesting addition to this point was utxo_size_inc, which would welcomed some review from people who measures sizes more carefully like @sipa , since this doesn't use GetSerializeSize for Coin intentionally, independently of the optimization to read Coin if available in the utxo before calling RpcGetTx. I'm still not sure what to do with pre/post segwit feerates, does anybody care about the pre ones? which one needs the scale factor? none?\r\n\r\nREM CalculateTruncatedMedian doesn't need to be a template at this point, but there's no harm being static IMO\r\n\r\nEDIT: still some TODOs, mostly documentation and pending decisions\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313840344",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1155428132,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE1NTQyODEzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428132",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "subscribed",
      "id": 1155428133,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNTU0MjgxMzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428133",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "mentioned",
      "id": 1155428134,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE1NTQyODEzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428134",
      "actor": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "subscribed",
      "id": 1155428135,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNTU0MjgxMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428135",
      "actor": {
        "login": "clarkmoody",
        "id": 1562417,
        "node_id": "MDQ6VXNlcjE1NjI0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkmoody",
        "html_url": "https://github.com/clarkmoody",
        "followers_url": "https://api.github.com/users/clarkmoody/followers",
        "following_url": "https://api.github.com/users/clarkmoody/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/clarkmoody/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/clarkmoody/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/clarkmoody/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkmoody/orgs",
        "repos_url": "https://api.github.com/users/clarkmoody/repos",
        "events_url": "https://api.github.com/users/clarkmoody/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/clarkmoody/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "mentioned",
      "id": 1155428136,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE1NTQyODEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428136",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "subscribed",
      "id": 1155428137,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNTU0MjgxMzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428137",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "mentioned",
      "id": 1155428138,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE1NTQyODEzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428138",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "subscribed",
      "id": 1155428139,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNTU0MjgxMzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155428139",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:27:36Z"
    },
    {
      "event": "commented",
      "id": 313840707,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzg0MDcwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313840707",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:36:50Z",
      "updated_at": "2017-07-08T07:36:50Z",
      "author_association": "MEMBER",
      "body": "@jtimon no problem. There are some nits to fix but I'll review more in depth later.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313840707",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1155429908,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE1NTQyOTkwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155429908",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:36:50Z"
    },
    {
      "event": "subscribed",
      "id": 1155429909,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNTU0Mjk5MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1155429909",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-08T07:36:50Z"
    },
    {
      "event": "reviewed",
      "id": 48766531,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjY1MzE=",
      "url": null,
      "actor": null,
      "commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-48766531",
      "submitted_at": "2017-07-10T15:56:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "commented",
      "id": 314581913,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDU4MTkxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314581913",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-11T21:47:09Z",
      "updated_at": "2017-07-11T21:49:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Here are some images generated using this branch in combination with (WIP): https://github.com/jtimon/rpc-explorer\r\n\r\nGUI detail:\r\n\r\n![screenshot_plotter](https://user-images.githubusercontent.com/1008458/28092233-ed1cb2ca-6692-11e7-9374-38a98cd6c258.png)\r\n\r\nGUI detail zoom:\r\n\r\n![screenshot_plotter_zoom](https://user-images.githubusercontent.com/1008458/28092271-048e594a-6693-11e7-9572-81f80980a087.png)\r\n\r\nHide some:\r\n\r\n![plotter1](https://user-images.githubusercontent.com/1008458/28092276-083a4518-6693-11e7-815d-c45d0acbfc4d.png)\r\n\r\nHide more:\r\n\r\n![plotter2](https://user-images.githubusercontent.com/1008458/28092279-0ac02fd2-6693-11e7-87c5-84d230985d6c.png)\r\n\r\nFees:\r\n\r\n![plotterfees](https://user-images.githubusercontent.com/1008458/28092284-0d22c2a8-6693-11e7-937d-451bfe0c5da5.png)\r\n\r\nUtxo size increase:\r\n\r\n![plotter_utxo](https://user-images.githubusercontent.com/1008458/28092288-0f6bc3d4-6693-11e7-910e-b18e3bfa44a2.png)\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-314581913",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "renamed",
      "id": 1159717687,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTE1OTcxNzY4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1159717687",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-11T22:36:19Z",
      "rename": {
        "from": "RPC: Introduce getperblockstats to plot things",
        "to": "RPC: Introduce getblockstats to plot things"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1159832706,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE1OTgzMjcwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1159832706",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-12T00:51:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1159882373,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE1OTg4MjM3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1159882373",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-12T01:56:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1160044799,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE2MDA0NDc5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1160044799",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-12T05:43:59Z"
    },
    {
      "event": "commented",
      "id": 314659201,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDY1OTIwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314659201",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-12T05:54:14Z",
      "updated_at": "2017-07-12T05:54:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Without the documentation for the result it was impossible to distinguish a weird choice to spring discussion from an implementation mistake. Removed the other TODO comments.\r\nCoded more pending suggestions by @promag (hopefully all pending ones? if not, please insist) with some extra bikeshedding derived from s/plotvalues/stats/ and adapt tests to start and end being allowed to be negative.\r\n\r\nMore cleanups can be done, specially in the tests if we go further with https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126462704 and not calculate in inverse order (there's no point if we don't get the slight optimization).\r\n\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-314659201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1160062906,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE2MDA2MjkwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1160062906",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-12T05:54:14Z"
    },
    {
      "event": "subscribed",
      "id": 1160062907,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNjAwNjI5MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1160062907",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-12T05:54:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1220425170,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIyMDQyNTE3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1220425170",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-24T20:15:35Z"
    },
    {
      "event": "commented",
      "id": 324747757,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDc0Nzc1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/324747757",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-24T20:27:13Z",
      "updated_at": "2017-08-24T20:27:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needed rebase.\r\nIf somebody made a web for it, it may be interesting to show number of segwit txs too http://segwit.5gbfree.com/countsegwit\r\n\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-324747757",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 325594164,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTU5NDE2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325594164",
      "actor": {
        "login": "forklol",
        "id": 31221696,
        "node_id": "MDQ6VXNlcjMxMjIxNjk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/31221696?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/forklol",
        "html_url": "https://github.com/forklol",
        "followers_url": "https://api.github.com/users/forklol/followers",
        "following_url": "https://api.github.com/users/forklol/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/forklol/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/forklol/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/forklol/subscriptions",
        "organizations_url": "https://api.github.com/users/forklol/orgs",
        "repos_url": "https://api.github.com/users/forklol/repos",
        "events_url": "https://api.github.com/users/forklol/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/forklol/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-29T08:35:27Z",
      "updated_at": "2017-08-29T08:35:27Z",
      "author_association": "NONE",
      "body": "Just wanted to say that this would be massively helpful to track statistics. I hope this finds it's way into a release soon.",
      "user": {
        "login": "forklol",
        "id": 31221696,
        "node_id": "MDQ6VXNlcjMxMjIxNjk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/31221696?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/forklol",
        "html_url": "https://github.com/forklol",
        "followers_url": "https://api.github.com/users/forklol/followers",
        "following_url": "https://api.github.com/users/forklol/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/forklol/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/forklol/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/forklol/subscriptions",
        "organizations_url": "https://api.github.com/users/forklol/orgs",
        "repos_url": "https://api.github.com/users/forklol/repos",
        "events_url": "https://api.github.com/users/forklol/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/forklol/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-325594164",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1228804124,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIyODgwNDEyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1228804124",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-31T03:54:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1228825911,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIyODgyNTkxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1228825911",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-31T04:28:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1228876988,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIyODg3Njk4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1228876988",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-31T05:37:31Z"
    },
    {
      "event": "commented",
      "id": 326207756,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjIwNzc1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326207756",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-31T06:57:27Z",
      "updated_at": "2017-08-31T06:57:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reversed the order of the values to the natural one, since as discussed the optimization of doing fetching the blocks in reverse order is not worth the loss in clarity of the code.\r\nAdded segwit tx counter stat, and also the total size and weight for those txs (txs that at least have one sw input, txs sending to sw outputs don't count).\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326207756",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 326610892,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYxMDg5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326610892",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-01T15:29:09Z",
      "updated_at": "2017-09-01T15:29:09Z",
      "author_association": "NONE",
      "body": "Perhaps a better name for \\<stat\\>_old is \\<stat\\>_virtual, _virt or _v. Or perhaps prepend it with \"v\"  just like the tx size in the output of `getrawtransaction` (vsize).\r\n\r\nFor example:\r\n\r\n`avgfeerate_old` becomes `vavgfeerate`\r\n`maxfeerate_old` becomes `vmaxfeerate`\r\n`medianfeerate_old` becomes `vmedianfeerate`\r\n\r\netc.",
      "user": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326610892",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 326819183,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjgxOTE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326819183",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-03T17:34:35Z",
      "updated_at": "2017-09-03T17:37:54Z",
      "author_association": "NONE",
      "body": "I just finished calling `getblockstats` on every block in the chain and saving it into a database. I didn't encounter any issues and the performance is quite good (100-1000ms per \"full\" block on an i7 6900k /w 32gb ram + nvme ssd).\r\n\r\nBtw, if anyone is interested in the dataset I can share it. Just convo me at freenode irc (nick: \"trippysalmon\"). It includes some other stats as well, like rolling average hashrates.",
      "user": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326819183",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "reviewed",
      "id": 60305113,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzMDUxMTM=",
      "url": null,
      "actor": null,
      "commit_id": "b2d93e4dfa647a4223ee37bd233d373f2cde25b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-60305113",
      "submitted_at": "2017-09-03T21:19:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "commented",
      "id": 326834401,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjgzNDQwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326834401",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-03T22:09:21Z",
      "updated_at": "2017-09-03T22:09:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just noticed this PR; I'll definitely be incorporating it into Statoshi once it's merged! :+1: ",
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326834401",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 327655184,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzY1NTE4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327655184",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T01:19:18Z",
      "updated_at": "2017-09-07T01:19:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "@trippysalmon I think you mean replacing s/<stat>feerate/v<stat>feerate/ and s/<stat>feerate_old/<stat>feerate/.\r\nAs discussed with @sipa the *feerate_old are using old size and the *feerate ones are using vsize.\r\n\r\nHow much interest there is in maintaining the old ones?\r\nPre-segwit both are identical and post segwit the old ones mean the how high the feerate would have been for mempool and mining purposes if you weren't using segwit.\r\nFor example, the same tx can have feerate 4 sat/vbyte (new) and 2 sat/byte (old), meaning for the same fee, your tx gets propagated/mined as if you had paid twice as much thanks to segwit's discount.\r\n\r\nIf there's not much interest, perhaps it's just better to just remove all the old ones.\r\nBy the way, I said before that we hold on removing redundant or uninteresting stats.\r\nI would start with reward, which the caller can calculate by simply adding subsidy and totalfees.\r\n\r\nNeeds rebase.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327655184",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1237921613,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIzNzkyMTYxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1237921613",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T01:19:18Z"
    },
    {
      "event": "subscribed",
      "id": 1237921614,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMzc5MjE2MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1237921614",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T01:19:18Z"
    },
    {
      "event": "mentioned",
      "id": 1237921615,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIzNzkyMTYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1237921615",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T01:19:18Z"
    },
    {
      "event": "subscribed",
      "id": 1237921616,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMzc5MjE2MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1237921616",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T01:19:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1238153454,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIzODE1MzQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1238153454",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T06:21:46Z"
    },
    {
      "event": "commented",
      "id": 327699176,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzY5OTE3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327699176",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T06:22:49Z",
      "updated_at": "2017-09-07T06:22:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327699176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 327829878,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzgyOTg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327829878",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T15:10:58Z",
      "updated_at": "2017-09-07T15:51:20Z",
      "author_association": "NONE",
      "body": "@jtimon ah yes, I got it now. I misinterpreted the meaning of the `_old` statistics.\r\n\r\nIn that case the `_old` statistics are indeed not that interesting. I would however like to see a pre segwit `total_size` statistic. That one is currently missing and it's kind of a hassle to calculate it through RPC calls.\r\n\r\nI will update my pre segwit total_vsize [PR](https://github.com/jtimon/bitcoin/pull/9) soon.",
      "user": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327829878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1238996999,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIzODk5Njk5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1238996999",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T15:10:58Z"
    },
    {
      "event": "subscribed",
      "id": 1238997000,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMzg5OTcwMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1238997000",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-07T15:10:58Z"
    },
    {
      "event": "commented",
      "id": 328109201,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyODEwOTIwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328109201",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T13:53:43Z",
      "updated_at": "2017-09-08T13:53:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "@trippysalmon not sure what you mean by \"pre segwit total size\". Total size is included, but size it's size post and pre segwit. You mean you want a stat for total vsize ? Not sure that's very interesting...",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328109201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1240832805,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTI0MDgzMjgwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1240832805",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T13:53:43Z"
    },
    {
      "event": "subscribed",
      "id": 1240832807,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyNDA4MzI4MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1240832807",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T13:53:43Z"
    },
    {
      "event": "commented",
      "id": 328142732,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyODE0MjczMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328142732",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T15:54:52Z",
      "updated_at": "2017-09-08T21:28:20Z",
      "author_association": "NONE",
      "body": "@jtimon yes I'm talking about total_vsize. Perhaps it depends on my particular use-case (comparing and graphing total_size vs total_vsize). My reasoning is that it is easy to add and compute inside core but not so much through RPC calls.\r\n\r\nIf you think total_vsize is not useful/interesting to others I don't mind maintaining it in a custom patch. I'm actually already using it in a project atm.\r\n\r\nedit: never mind, total_vsize can be calculated by `total_weight / 4`",
      "user": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328142732",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1241053061,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTI0MTA1MzA2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1241053061",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T15:54:52Z"
    },
    {
      "event": "subscribed",
      "id": 1241053062,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyNDEwNTMwNjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1241053062",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T15:54:52Z"
    },
    {
      "event": "commented",
      "id": 328238904,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyODIzODkwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328238904",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T23:52:20Z",
      "updated_at": "2017-09-08T23:52:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Removed reward and *feerate_old as discussed, but didn't squashed just in case.\r\nDiscussing with @trippysalmon we thought could show vsize instead of weight, but the former is just the latter / 4 (ie WITNESS_SCALE_FACTOR) and presenting the weight we can completely forget about rounding concerns (plus that's what getblock presents too, perhaps that's a reason to exclude it here).\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328238904",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1241663657,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTI0MTY2MzY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1241663657",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T23:52:20Z"
    },
    {
      "event": "subscribed",
      "id": 1241663658,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyNDE2NjM2NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1241663658",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-08T23:52:20Z"
    },
    {
      "event": "commented",
      "id": 334499898,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDQ5OTg5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/334499898",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-05T15:23:54Z",
      "updated_at": "2017-10-15T15:13:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Using this branch more, at first a range of heights was convenient but I was ready to wait even if I had to call this rpc block by block.\r\nRight now, that's what I'm doing since once you start caching, calling this function is never a success but a cache failure. It is completely understandable that one doesn't want to manage failure ranges when failures can be discovered individually and thus processed in parallel.\r\nThat's probably opinionated, but perhaps others trying to use this got many errors forgetting \"[0]\" in some places.\r\n\r\nSupporting ranges may be an optimization for users, but since I have been lucky enough to attract some potential users of this rpc call, I can ask: will anybody miss the height ranges?\r\n\r\nSince I'm indexing my cache by block height and that's inherently \"reorg unfriendly\" I mostly see 2 options going forward:\r\n\r\n1) Subscribe to the zmq interface, detect reorgs and remove block stats above the reorg height (while at it, one can put new blocks in the cache preemtively even if nobody asked for them yet)\r\n\r\n2) Stop indexing the block stat cache by  height, do it by block hash. This is compatible with reorgs (more space but less disk writing and it's also required for advanced features like plotting abandoned/orphan chains).\r\n\r\nI am inclined to trying both as a user since I want to subscribe to blocks but I also don't want to erase blocks I have seen and don't want to lose the option to chart reorged chains.\r\n\r\nA second question is simply, assuming the height ranges are removed, would anyone else apart from me use the option to search by single block hash instead of single height?\r\n\r\nAnyway, that would be my preference: replace height ranges with single height or single block hash (both options).\r\nPlease let me know what you think.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-334499898",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 336553230,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjU1MzIzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336553230",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-13T20:00:48Z",
      "updated_at": "2017-10-13T20:00:48Z",
      "author_association": "NONE",
      "body": "I use this RPC call extensively (and persist the results in a DB) and never used the block height range, only single blocks.\r\n\r\n> Anyway, that would be my preference: replace height ranges with single height or single block height (both options).\r\n\r\nI think you meant block hash as the second option? For my use-case it doesn't really matter if I have to use the block height or block hash. Either option works for me.\r\n\r\n--\r\n\r\nAlso, something that I needed today was the median transaction size. I don't think it can be calculated using the existing statistics or am I wrong?\r\n\r\nIt's only a [minor change](https://github.com/trippysalmon/bitcoin/commit/4a1d4d06e4c20356fe0e4359a3af2acfda06b1fc) and could be interesting to track over time to see it change when more complex scripts are made available.",
      "user": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-336553230",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1296735175,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTI5NjczNTE3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1296735175",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-17T12:08:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1296738546,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTI5NjczODU0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1296738546",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-17T12:10:38Z"
    },
    {
      "event": "commented",
      "id": 337212106,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzIxMjEwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337212106",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-17T12:15:05Z",
      "updated_at": "2017-10-17T12:18:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased, squashed, added \"mintxsize\", \"maxtxsize\", \"mediantxsize\" and \"avgtxsize\" stats.\r\n\r\nRegarding the ranges, thanks for the feedback, I'll wait to hear from other people.\r\n\r\nEDIT: btw, some of the tests are commented because tx sizes don't seem to be deterministic, I suspect due to coin selection. Not sure what to do about that.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-337212106",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "reviewed",
      "id": 70447630,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0NDc2MzA=",
      "url": null,
      "actor": null,
      "commit_id": "caeaf86de426f9b71c0828be23253827dd0149fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-70447630",
      "submitted_at": "2017-10-19T07:51:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "reviewed",
      "id": 70489270,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0ODkyNzA=",
      "url": null,
      "actor": null,
      "commit_id": "2497afa41126fd4e5cf17b095980c19fc1b813a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Suggestions at https://github.com/jtimon/bitcoin/pull/10\r\n\r\nI think requesting by height/blockhash makes more sense than a height range. (I was expecting a range to give me aggregate statistics over the entire range before looking into it)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-70489270",
      "submitted_at": "2017-10-19T10:30:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1314694965,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTMxNDY5NDk2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1314694965",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-27T21:08:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1315187216,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTMxNTE4NzIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1315187216",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-28T14:13:36Z"
    },
    {
      "event": "reviewed",
      "id": 73199569,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMxOTk1Njk=",
      "url": null,
      "actor": null,
      "commit_id": "ced73054c5690e2c46caf1389700e9832f528881",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 44dcea038b44890e5f49c71ff26cfcb4ecf0da15. Left some comments but all are minor (feel free to ignore them) except the height + 1 bug.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-73199569",
      "submitted_at": "2017-10-31T17:00:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1425418572,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQyNTQxODU3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1425418572",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-16T04:28:07Z"
    },
    {
      "event": "commented",
      "id": 357851666,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzg1MTY2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357851666",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-16T04:37:00Z",
      "updated_at": "2018-01-16T04:37:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed all nits by @ryanofsky except for https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148039141 . Instead of solving it, I added a few new commits for people to discuss on.\r\n\r\nThe tests still can't test size or feerates while passing/failing in a deterministic fashion, but just by rebasing now \"swtxs\" seems to be actually tested without me doing anything (probably by https://github.com/bitcoin/bitcoin/pull/11403 being merged), as requested in  https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145659877\r\n\r\nI thought of a simpler way to deterministacally get sizes and feerates: simply force the desired/expected size for each of the few txs this test creates. Using something like:\r\n\r\n```\r\nwhile not desired_size(tx, desired_size)\r\n     tx = try_creating_tx_again()\r\n```\r\n\r\nor something of the sort. \r\n\r\nI'll try that next, but please comment on the latest commits.\r\n ",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-357851666",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1425424631,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQyNTQyNDYzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1425424631",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-16T04:37:00Z"
    },
    {
      "event": "subscribed",
      "id": 1425424633,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MjU0MjQ2MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1425424633",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-16T04:37:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1427065305,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQyNzA2NTMwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1427065305",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-16T21:21:32Z"
    },
    {
      "event": "commented",
      "id": 362085037,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjA4NTAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362085037",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-31T21:59:09Z",
      "updated_at": "2018-01-31T21:59:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "This needs rebase, but some feedback on the latest things and potential squashes would be nice before doing so.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362085037",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 362160709,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjE2MDcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362160709",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-01T05:13:23Z",
      "updated_at": "2018-02-01T05:13:23Z",
      "author_association": "MEMBER",
      "body": "What do you think about using a static blockchain so that testing is deterministic? I added some code to save the generated chain, and to reuse it if it's present and it doesn't seem too bad -- just using getblock(__,0) to get hex encoded blocks, and dumping them gives a 56kB file (or 10kB gzipped). That seems within the ballpark of something that could easily just be added as a static data file to the test suite?\r\n\r\nI don't think `while tx_isnt_what_i_want: try_again()` is a good approach -- it seems a bit too easy to accidentally become `while i_trigger_a_bug: try_again()` which kind-of defeats the point of testing.\r\n\r\nI'm not a huge fan of the `for(stat:stats) { if (stat == \"x\") m[stat] = x(); else if ...; }` approach. What about something along the lines of:\r\n\r\n```\r\n    auto set_stat = [&](const char* stat, const UniValue val)\r\n                    { if (stats.count(stat) != 0) map_stats[stat] = val; };\r\n\r\n    set_stat(\"height\", (int64_t)pindex->nHeight);\r\n    set_stat(\"time\", pindex->GetBlockTime());\r\n    set_stat(\"mediantime\", pindex->GetMedianTimePast());\r\n    ...\r\n```\r\n? I don't think any of the calculations at that point are particularly heavy, so it shouldn't make things much slower (and any that are could probably just be put in an `if (is_loop_outputs_required) { .. }` block or similar).\r\n\r\nI think the optimisation commits make sense. Maybe add bools for `medianfeerate`, `medianfee`, `mediantxsize` so you're not calling `.count()` inside the loops. The naming of the bools is annoyingly ungrammatical (\"is_loop_inputs_required\" should be \"are_loop_inputs_required\" in english), but I don't have a better suggestion.\r\n\r\nMight be good to explicitly say which stats want -txindex enabled and won't work with pruning in the help (fee related and utxo size I think?) Could make the default be \"whatever stats we can output efficiently\" rather than \"everything\", though not sure that's a good idea.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362160709",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 362928394,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjkyODM5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362928394",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-04T18:29:59Z",
      "updated_at": "2018-02-04T18:29:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "> What do you think about using a static blockchain so that testing is deterministic? I added some code to save the generated chain, and to reuse it if it's present and it doesn't seem too bad -- just using getblock(__,0) to get hex encoded blocks, and dumping them gives a 56kB file (or 10kB gzipped). That seems within the ballpark of something that could easily just be added as a static data file to the test suite?\r\n\r\nI didn't found the time to try that but if you can share that code that would be great. What you're saying seems reasonable to me, I don't know if other people would have a problem with that. And I cannot think of a simpler way to make this test deterministic.\r\n\r\nI will look into the other suggestions, thanks.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362928394",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 375233914,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTIzMzkxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375233914",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T09:35:28Z",
      "updated_at": "2018-03-22T09:35:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke what is the status of this in terms of testing?\r\n\r\nI think @ajtowns is right that *size, and *feerate fields can only be deterministically tested, but I don't have the time to write that at this point. I would be happy to review and test if anybody wants to take over though.\r\n\r\nIn the meantime, I would be happy to include the new call even if it's without any stat that depends on signature size or coin selection for deterministic testing and those fields and their tests are already written.\r\n  ",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-375233914",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1535119007,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUzNTExOTAwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1535119007",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T09:35:28Z"
    },
    {
      "event": "subscribed",
      "id": 1535119008,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzUxMTkwMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1535119008",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T09:35:28Z"
    },
    {
      "event": "mentioned",
      "id": 1535119009,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUzNTExOTAwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1535119009",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T09:35:28Z"
    },
    {
      "event": "subscribed",
      "id": 1535119010,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzUxMTkwMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1535119010",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T09:35:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1549188833,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU0OTE4ODgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1549188833",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T04:03:23Z"
    },
    {
      "event": "commented",
      "id": 377440180,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzQ0MDE4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377440180",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T04:07:52Z",
      "updated_at": "2018-03-30T04:07:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needed rebase. And still needs squashing pending on requested feedback.\r\n\r\nAlso, since testing some of the stats deterministically is not trivial, I think the new rpc call should be introduced only with the stats that can be deterministacally tested (even though we will miss some of the most interesting ones like sizes, fees and feerates) and then make the tests deterministic and add the missing stats.\r\nThoughts?\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-377440180",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1549209636,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU0OTIwOTYzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1549209636",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T04:39:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1549210229,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU0OTIxMDIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1549210229",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T04:40:58Z"
    },
    {
      "event": "commented",
      "id": 377468912,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzQ2ODkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377468912",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T07:45:42Z",
      "updated_at": "2018-03-30T07:47:28Z",
      "author_association": "MEMBER",
      "body": "Proposed patch that makes testing of the stats kind of deterministic at https://github.com/jtimon/bitcoin/pull/11/commits\r\n\r\nIdea is you do `./feature_rpc_getblockstats --gen-test-data` to  generate a test blockchain and the expected statistics for that blockchain, and will write it to data/rpc_getblockstats.json file (about 50kB uncompressed text). You then check the stats look reasonable, and commit that file to git, and then when you/travis runs the test case without --gen-test-data it will load the chain from the file and check that the calculated stats still match what was recorded as being expected.\r\n\r\nIf additional stats are added, you'll need to edit the test case to update the EXPECTED_STATS variable; and you'll need to add the expected values to the json file (by hand I guess), both of which should show up nicely in git diff.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-377468912",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1561967278,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU2MTk2NzI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1561967278",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-07T00:38:44Z"
    },
    {
      "event": "commented",
      "id": 379419446,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQxOTQ0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379419446",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-07T00:41:13Z",
      "updated_at": "2018-04-07T00:41:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot, incorporated those changes. Fixed some older nits too.\r\nPlease re-review.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-379419446",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1561980587,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU2MTk4MDU4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1561980587",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-07T01:06:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1562736768,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU2MjczNjc2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1562736768",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-08T19:53:39Z"
    },
    {
      "event": "added_to_project",
      "id": 1571759003,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQxNTcxNzU5MDAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1571759003",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-12T19:09:41Z",
      "project_card": {
        "id": 8924492,
        "url": "https://api.github.com/projects/columns/cards/8924492",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 111864271,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTExODY0Mjcx",
      "url": null,
      "actor": null,
      "commit_id": "cf6585a6ec6497467f5d26a76fc09b14897f191f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-111864271",
      "submitted_at": "2018-04-16T04:04:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1583449496,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU4MzQ0OTQ5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1583449496",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-19T10:22:30Z"
    },
    {
      "event": "commented",
      "id": 382685844,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjY4NTg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382685844",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-19T10:22:52Z",
      "updated_at": "2018-04-19T10:22:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed @jimpo 's nits, thanks.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-382685844",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1583450288,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU4MzQ1MDI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1583450288",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-19T10:22:53Z"
    },
    {
      "event": "subscribed",
      "id": 1583450290,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1ODM0NTAyOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1583450290",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-19T10:22:53Z"
    },
    {
      "event": "reviewed",
      "id": 113844660,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTEzODQ0NjYw",
      "url": null,
      "actor": null,
      "commit_id": "3699947a9e5a9b8bf4871298dc14e415e50174d6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I'm a bit confused by the bit about the x-axis in the PR description -- isn't plotting stuff in a different PR? \r\n\r\nSeems a bit strange to exclude the coinbase from total_out; there's no way to tell from the output you've got if the coinbase failed to claim all its reward.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-113844660",
      "submitted_at": "2018-04-20T04:42:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1586908148,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU4NjkwODE0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1586908148",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T19:45:51Z"
    },
    {
      "event": "commented",
      "id": 383203196,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzIwMzE5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383203196",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T19:48:45Z",
      "updated_at": "2018-04-20T19:48:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed nits. The latest commit I did not squash because I'm not convinced it is an improvement even though is +32-48 (see https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942644 )",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383203196",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 383211697,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzIxMTY5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383211697",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T20:21:56Z",
      "updated_at": "2018-04-21T15:07:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm a bit confused by the bit about the x-axis in the PR description -- isn't plotting stuff in a different PR?\r\n\r\nSorry about the confusing edits. At first, height, time and mediantime were treated separately as I was using them as potential x-axis with my caller. Now they're just treated as like any other stat.\r\n\r\n> Seems a bit strange to exclude the coinbase from total_out; there's no way to tell from the output you've got if the coinbase failed to claim all its reward.\r\n\r\nIf the coinbase tx doesn't claim subsidy + totalfee then it failed to claim all its reward.\r\nFor seeing if miners claimed all the reward, perhaps we can add a new stat coinbase_total_out or better, unclaimed_reward, since subsidy + totalfee = coinbase_total_out + unclaimed_reward.\r\n\r\nI don't see how adding the claimed reward to the total_out helps with this. The idea of discarding the coinbase is that, even if we can't discard change outputs or pay to yourself txs or similar to approximate real throughput, we definitely can clearly discard the subsidy and the fees, but if people feel strongly about this it is easy to change. Perhaps we can have this as \"total_moved\" or \"total_paid\"\r\nAnd another redundant one total_out that's total_moved + coinbase_total_out (redundant only assuming we add coinbase_total_out or unclaimed_reward).\r\n\r\nBtw, the only person who answered the question about selecting by height or block hash was @trippysalmon who said he didn't care.\r\nShould I move from height to block hash to be more consistent with getblock ?\r\nShould both options be allowed?\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383211697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1586969589,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU4Njk2OTU4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1586969589",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T20:21:56Z"
    },
    {
      "event": "subscribed",
      "id": 1586969590,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1ODY5Njk1OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1586969590",
      "actor": {
        "login": "trippysalmon",
        "id": 31451072,
        "node_id": "MDQ6VXNlcjMxNDUxMDcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/31451072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trippysalmon",
        "html_url": "https://github.com/trippysalmon",
        "followers_url": "https://api.github.com/users/trippysalmon/followers",
        "following_url": "https://api.github.com/users/trippysalmon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/trippysalmon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/trippysalmon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/trippysalmon/subscriptions",
        "organizations_url": "https://api.github.com/users/trippysalmon/orgs",
        "repos_url": "https://api.github.com/users/trippysalmon/repos",
        "events_url": "https://api.github.com/users/trippysalmon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/trippysalmon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T20:21:56Z"
    },
    {
      "event": "reviewed",
      "id": 114165877,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE0MTY1ODc3",
      "url": null,
      "actor": null,
      "commit_id": "f80bb3cf6d6c727870dd8e7954d15285876a12a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-114165877",
      "submitted_at": "2018-04-21T07:45:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "reviewed",
      "id": 114166121,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE0MTY2MTIx",
      "url": null,
      "actor": null,
      "commit_id": "3402b0dc83e37fd3eac97efc49b857b13aabc2e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-114166121",
      "submitted_at": "2018-04-21T07:55:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "commented",
      "id": 383276415,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzI3NjQxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383276415",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-21T08:03:37Z",
      "updated_at": "2018-04-21T08:03:37Z",
      "author_association": "MEMBER",
      "body": "I don't really have a strong opinion on `total_out`, I guess I just found it a little weird it doesn't include the coinbase outputs.\r\n\r\nAs far as height vs blockhash is concerned, I think specifying by height is probably easiest for people using the api, but maybe it would be good to include the blockhash in the output (so if you get different results for a given height due to a reorg, it's easy to tell why), and/or allow either height/hash as the first param? I don't feel strongly about this either way, either.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383276415",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 383304176,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzMwNDE3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383304176",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-21T15:12:56Z",
      "updated_at": "2018-04-21T15:12:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, my concern is precisely that, asking for a given height and getting the results for a block it's not what you were expecting, and yeah, both solutions (optionally accepting hash instead of height or always returning the block hash work) solve that problem.\r\nI guess I like more the first option because it's less data sent, but I guess the \"hash_or_height\" param name is ugly. I will do that and ask for \"squash or remove\"?\r\n\r\nBy the way, thoughts on the \"squash or remove\" for \"?? f'RPC: Introduce getblockstats'\"?\r\nIs that what you were expecting? Oh, wait, you have a nit on that commit. I'll solve them and then ask again (unless you say \"yeah it's not worth it\" now and I skip solving that nit).\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383304176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1590339321,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MDMzOTMyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1590339321",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-23T22:59:26Z"
    },
    {
      "event": "commented",
      "id": 383749798,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc0OTc5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383749798",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-23T23:03:11Z",
      "updated_at": "2018-04-23T23:03:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Since all the stats are optional anyway, I ended up doing both adding an optional blockhash in the result and my preference, which was moving from height to hash_or_height.\r\nAlso did some squashing and did further simplifications on both the rpc and the tests, including inling the function, since it didn't sense anymore after moving away from height ranges and removing the hardcoded list of expected stats from the tests (since they're already hardcoded in the data file).\r\n\r\nSince the diff from last review was kind of big, I took the opportunity to rebase too.\r\n ",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383749798",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1590409864,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MDQwOTg2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1590409864",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T00:04:28Z"
    },
    {
      "event": "commented",
      "id": 383761037,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc2MTAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383761037",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T00:07:14Z",
      "updated_at": "2018-04-24T00:07:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed the remaining nits: test when there's no txindex and give a specific error when txindex is required but not set as suggested by @jimpo.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383761037",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1590412485,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU5MDQxMjQ4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1590412485",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T00:07:14Z"
    },
    {
      "event": "subscribed",
      "id": 1590412487,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1OTA0MTI0ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1590412487",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T00:07:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1590417891,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MDQxNzg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1590417891",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T00:11:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1591570499,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MTU3MDQ5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1591570499",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T13:17:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1591589249,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MTU4OTI0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1591589249",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T13:25:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1591621756,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MTYyMTc1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1591621756",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T13:35:48Z"
    },
    {
      "event": "commented",
      "id": 383932982,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzkzMjk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383932982",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T13:36:38Z",
      "updated_at": "2018-04-24T13:36:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed the tests with the node 1 in travis (in my computer the sync_all wasn't needed, oops) and did some bikeshedding.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383932982",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1591649463,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MTY0OTQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1591649463",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T13:45:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1591842294,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MTg0MjI5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1591842294",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T14:56:07Z"
    },
    {
      "event": "reviewed",
      "id": 114895489,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE0ODk1NDg5",
      "url": null,
      "actor": null,
      "commit_id": "e73e374b23e7765f10d1e0ad087dc270549a53ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code looks good, some nits though. I'll try it out so I can give a tested ACK.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-114895489",
      "submitted_at": "2018-04-24T19:43:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "reviewed",
      "id": 114941850,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE0OTQxODUw",
      "url": null,
      "actor": null,
      "commit_id": "ddfe0918b0d65881c897e57e83505f7054fcbfe2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Looks good aside from the CLI usage. I'd ACK with that change.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-114941850",
      "submitted_at": "2018-04-24T20:07:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1592819216,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5MjgxOTIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1592819216",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T23:05:29Z"
    },
    {
      "event": "commented",
      "id": 384107667,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEwNzY2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384107667",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-24T23:06:22Z",
      "updated_at": "2018-04-24T23:06:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hopefully fixed all the newest nits, thanks again.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384107667",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 384129427,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEyOTQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384129427",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-25T01:15:52Z",
      "updated_at": "2018-04-25T01:15:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK ddfe091",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384129427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "commented",
      "id": 384440743,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ0MDc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384440743",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-25T21:30:56Z",
      "updated_at": "2018-04-25T21:30:56Z",
      "author_association": "MEMBER",
      "body": "Weird. I'm getting consistent failures with 2dffcdc2afd7ee98f170af933b94186c455425bc on the `sync_all()` after `load_test_data()` -- it just hangs, because node 1 is never actually seeing the blocks. If I add a `node.generate(1)` beforehand, things work. The problem seems to be that the node doing the `submitblock` calls is never leaving InitialBlockDownload, and while it's in IBD it's not relaying blocks to its peer. Ah, it looks like this only shows up when it's been more than 24 hours since `--gen-test-data` was run -- so rerunning travis or running it locally should fail reliably now, I think.\r\n\r\nAdding a call to `node.generate(1)` at the start of `load_test_data` should fix this:\r\n\r\n```\r\n     def load_test_data(self, filename):\r\n         node = self.nodes[0]\r\n+        node.generate(1) # finish IBD; will get reorged out\r\n```",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384440743",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1597536468,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5NzUzNjQ2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1597536468",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-26T21:14:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1597834336,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5NzgzNDMzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1597834336",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-27T01:34:14Z"
    },
    {
      "event": "commented",
      "id": 384837468,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDgzNzQ2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384837468",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-27T01:36:59Z",
      "updated_at": "2018-04-27T01:36:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ajtowns I think I solved it with mocktime as discussed, but since the time is in the file generated again, I advice not to merge it after we test it again after 24 of the data file being created (last time it only started failing after that),",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384837468",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1597837030,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU5NzgzNzAzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1597837030",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-27T01:36:59Z"
    },
    {
      "event": "subscribed",
      "id": 1597837031,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1OTc4MzcwMzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1597837031",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-27T01:36:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1597908983,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU5NzkwODk4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1597908983",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-27T03:02:06Z"
    },
    {
      "event": "reviewed",
      "id": 116116976,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE2MTE2OTc2",
      "url": null,
      "actor": null,
      "commit_id": "866c1c886106a8f0757ae688b816e3824c2f52f5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-116116976",
      "submitted_at": "2018-04-28T01:49:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "reviewed",
      "id": 116208294,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE2MjA4Mjk0",
      "url": null,
      "actor": null,
      "commit_id": "f8ad78ad4b8733258540fe88d55a3c286660edf6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-116208294",
      "submitted_at": "2018-04-30T07:06:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1601954787,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYwMTk1NDc4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1601954787",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-30T16:58:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1603968168,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYwMzk2ODE2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1603968168",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-01T19:11:22Z"
    },
    {
      "event": "commented",
      "id": 385763015,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc2MzAxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385763015",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-01T19:20:05Z",
      "updated_at": "2018-05-01T19:20:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ajtowns now it seems to work 24 hours after generating the data\r\n\r\n@TheBlueMatt yeah, it looks simpler now without using CFeeRate or CFeeRate::GetTruncatedFee. Thanks\r\n\r\nIndependently of that, if we want more precision for feerates (say, move from sat/vbyte to sat/vKB or whatever), now it's the right time to decide so.\r\nI guess we could also support arbitrary precision with an optional feerates_precision parameter that defaults to 1 (ie sat/vbyte), or 1000 (ie sat/vKB) or 1024 or whatever.\r\nOr we can simply leave the latter for later if anybody asks, but it's a simple change if people want more precision.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-385763015",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "mentioned",
      "id": 1603982188,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYwMzk4MjE4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1603982188",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-01T19:20:05Z"
    },
    {
      "event": "subscribed",
      "id": 1603982189,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MDM5ODIxODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1603982189",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-01T19:20:05Z"
    },
    {
      "event": "mentioned",
      "id": 1603982191,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYwMzk4MjE5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1603982191",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-01T19:20:05Z"
    },
    {
      "event": "subscribed",
      "id": 1603982193,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MDM5ODIxOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1603982193",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-01T19:20:05Z"
    },
    {
      "event": "reviewed",
      "id": 116683857,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE2NjgzODU3",
      "url": null,
      "actor": null,
      "commit_id": "de63105609df02f1d74e2e133201a80126470df1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Matt was here.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-116683857",
      "submitted_at": "2018-05-01T20:11:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1612563561,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxMjU2MzU2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1612563561",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-07T09:51:51Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGE4ZTM2ZjAxOWRkMTgxZTVjMzc3NDk2MWI0ZjEzMzVlNTYwMmNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda8e36f019dd181e5c3774961b4f1335e5602cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cda8e36f019dd181e5c3774961b4f1335e5602cb",
      "tree": {
        "sha": "d1d90e9901d042a60dc3edf53414cd1222bad9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1d90e9901d042a60dc3edf53414cd1222bad9c5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d1d90e9901d042a60dc3edf53414cd1222bad9c5\nparent 66cc47be982aa431b72494f5d655c20eea17a0f5\nauthor Jorge Timón <jtimon@jtimon.cc> 1496589240 +0200\ncommitter Jorge Timón <jtimon@jtimon.cc> 1525688562 +0200\n\nRefactor: RPC: Separate GetBlockChecked() from getblock()\n\nThis does not change functionality\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJa8Cj5AAoJEKT10UHAGgOHI/QQAKTAiMrQgs7j8oe41aUYbMpg\npRhi76SGamTzyyuHrdr9jpn2iEIw2lg7X/BswPlymuZu0kQ7vb7gH6Zv3mFR4mIy\nVnikJGQhQ3nWx4JZ4TdeZ5ynG5Ogy7JYgZ5bqWiIDE5NyaOGO7FUSd6khkMfcN/v\nm3pegabWATs2zx0na6L9XNAXTNxqovGv6U0G9mUpJpuEF6lRL5uJqftsJ+rOJ0kB\n7tq+bJgkpHsfl19QHp8RYPlU8bH0UQGe7jf0m8BSTNl4Ee9pq6ogJbD+YTBSTIKx\nIjYlUVc6sfd9gbGc3n5HpjbGHlphIRGJOouGR9G7zKm8uboLYDx9bNBKXE2LmfiX\noo14d8CCsbixdU4xnToCfKT0xk88Ib5kUtrfLOggzlXeYx/nwV/QXw5ly9pzjrxG\nUDZQ+VmntRiYu3IHdDaIUvdpCPc2zSWZyvkAydFSVbujF3NTEDdIwgPfOq6V7iJl\nFxbMvNW50VLXPA4PFg6xL4ymqjXC5SIFOfXEZzCynW8FwTi1UMQULavpUIcfLuN2\nRQGVyjwAba20YIEO0CzIiOBnH3oBBvDIlx5pF3ZHoRTpn2qR0chXHgDX3dVqMuzn\nNhLse8+Y4UolVnkjg/Goa7CWST7H/WGPgBU05yYPOsuePcik04rVx1LIV79Ow+ZL\n7gtQXO9OmByGqn6Uv3kn\n=zNC7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66cc47be982aa431b72494f5d655c20eea17a0f5",
          "sha": "66cc47be982aa431b72494f5d655c20eea17a0f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66cc47be982aa431b72494f5d655c20eea17a0f5"
        }
      ],
      "message": "Refactor: RPC: Separate GetBlockChecked() from getblock()\n\nThis does not change functionality",
      "committer": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2018-05-07T10:22:42Z"
      },
      "author": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-04T15:14:00Z"
      },
      "sha": "cda8e36f019dd181e5c3774961b4f1335e5602cb"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1612654976,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxMjY1NDk3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1612654976",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-07T10:50:26Z"
    },
    {
      "event": "commented",
      "id": 387029644,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzAyOTY0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387029644",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-07T10:53:46Z",
      "updated_at": "2018-05-07T10:53:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed last 2 nits. Added a test for when blocks aren't found.\r\nAlso needed rebase.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-387029644",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "reviewed",
      "id": 117988186,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE3OTg4MTg2",
      "url": null,
      "actor": null,
      "commit_id": "4523b5d9c47d877a037b1e1cf718727e4c4aa864",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-117988186",
      "submitted_at": "2018-05-07T13:04:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1616433272,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxNjQzMzI3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1616433272",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-08T22:41:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1616524095,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxNjUyNDA5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1616524095",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T00:00:58Z"
    },
    {
      "event": "commented",
      "id": 389164302,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTE2NDMwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389164302",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-15T13:21:53Z",
      "updated_at": "2018-05-15T13:21:53Z",
      "author_association": "MEMBER",
      "body": "Lightly tested ACK 563eee9.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-389164302",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "reviewed",
      "id": 120931011,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTIwOTMxMDEx",
      "url": null,
      "actor": null,
      "commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 563eee92c9ddc5b537fca1ce08bce811d97aed97 w/ minor nits",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-120931011",
      "submitted_at": "2018-05-17T08:19:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "reviewed",
      "id": 121306577,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTIxMzA2NTc3",
      "url": null,
      "actor": null,
      "commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 563eee92c9ddc5b537fca1ce08bce811d97aed97 modulo nits",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#pullrequestreview-121306577",
      "submitted_at": "2018-05-18T07:23:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWU3N2EwMjg4YmNhYzU1OTRmZjI1YzEwYzk2NzlhMTYxY2I3MzBi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35e77a0288bcac5594ff25c10c9679a161cb730b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/35e77a0288bcac5594ff25c10c9679a161cb730b",
      "tree": {
        "sha": "9f93e0c8da431da01f90777cf1f23a570abec0c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f93e0c8da431da01f90777cf1f23a570abec0c7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9f93e0c8da431da01f90777cf1f23a570abec0c7\nparent cda8e36f019dd181e5c3774961b4f1335e5602cb\nauthor Jorge Timón <jtimon@jtimon.cc> 1496528755 +0200\ncommitter Jorge Timón <jtimon@jtimon.cc> 1527024392 +0200\n\nRPC: Introduce getblockstats\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbBIsIAAoJEIhmwY6hyUSil/YQALL8dwCIzF098bzv4bGqB6/R\nPX2MMKJ58xddj6eZdUE7opr1uBHeJe4Ie7jP/feYkzAXuja/rTEn1pufGQeLr/hF\nNBM0AymwluBMyeqfUQSoSWYrCmXBQvNV1PqevJlxm9qzJJuvAFDnDcF91sKFTQ45\nnJDbgY2+RYp0nCX0vppKs/G41y6cShpA7bkIG6Nx3H+glGGLkm1Hcnh1XsYQwso2\n6W9hpEuuhAhLF6LStIrtgGC6Dbs+JVAwK9I8MRpGNjh0qse+zD7bqdCgOw2cJBh8\n7ferjMugmq60XlD6J/0dIe6kSoN1Fwmnu4tzVFJBeBXw98y5K1zvgJErik2mO79e\nReP0LvU74feHzNT2pIV5XXY3ViyodGp+B7B3HnSnyw3L7CDUWFPS6jTFeQtIaOIB\nidLPXq8XdNQyv88CzgBLJWEhetgeYPSxcAIuyKzDQji8R4B0OKRyqBKGhGgnZ6oN\nGRH4/ZVx37RSQSgNwveI7mdVKuJkD48AUosJX5JUeckcS24kvBY1IUBr/NMR6abJ\nNKTEX6SQ6BHRpupm9Qogxw5kz7HayrMub/4EQoAR/wRESOmAXGpTjGIgrho/v7BN\nvu4YHkKBCYmbmG015xBjPXLwiFaeuw9Mal0rI9OM3b6iPVpxhuYqdbXn5oaYjB4c\nvXEtMqKIANutPhY2bZwn\n=G/7f\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda8e36f019dd181e5c3774961b4f1335e5602cb",
          "sha": "cda8e36f019dd181e5c3774961b4f1335e5602cb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cda8e36f019dd181e5c3774961b4f1335e5602cb"
        }
      ],
      "message": "RPC: Introduce getblockstats",
      "committer": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2018-05-22T21:26:32Z"
      },
      "author": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-03T22:25:55Z"
      },
      "sha": "35e77a0288bcac5594ff25c10c9679a161cb730b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2JmYjZhYWQ5YmE4ZmExN2I1ZTdlZDNlOWEzNmRjOGEyNGYxZmNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf",
      "tree": {
        "sha": "585d0bfb280ebe5b16a2c554e4e7891c43bb6e6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/585d0bfb280ebe5b16a2c554e4e7891c43bb6e6b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 585d0bfb280ebe5b16a2c554e4e7891c43bb6e6b\nparent 35e77a0288bcac5594ff25c10c9679a161cb730b\nauthor Jorge Timón <jtimon@jtimon.cc> 1498007285 +0200\ncommitter Jorge Timón <jtimon@jtimon.cc> 1527024393 +0200\n\nTests: Test new getblockstats RPC\n\nIncludes commit from Anthony Towns @ajtowns:\n\nTests: Save and load block and corresponding expected statistics\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbBIsJAAoJEIhmwY6hyUSiIrgQAJqncFuNERC9J0Hb0eY4PAMX\nhKRJSVzTp6bqBcoI3byoeA+EDVjqNkwGEti0U8Y2SmrZMt0PgnoNlMlW2wscnSTu\nMfp4NuRrU4Li9tJnN8idwiUVKBdIdrH8mOYXDtRpgZTOOUsdl7f73oWGxzGHsRXg\n/Oy0pAEhXFG0VGzqq9SJ7XIRDvjFHtyIiyMSXcXb7hT3wzYJMFw5tS1jxGdvpZJE\nZq8Yi6REzK2qTMlzWTbNtZtOlEHmEBK+Pu71gsbnzgqNaq329Mo8siBeyDXtHkCW\noWBTpad5p3aB0I9mA0WLAnl+C/9GVrNlkF3o70hbBFHK+sc5dnGK/Vi/tl0SfjPF\nUcpzi6zdKu/x7H1dJWKJDuQgEVDHdPi1Mm1Cr3UtrFFgDxBwu3xmi8dan7ReIo0I\nd2D5TquUMMz1yObElX2rQYlEJ+mqXS9i/tsY2vzxETlbkzoKcXSHhDunyAYxpJa+\nqh33O1dwE5N3lAksoo56UkFtfzOOoAt6tphN1I5Cbajwo48cAqobV/UkTXlSrhRd\nSbSlN4ls9h+exduXWTOyG71Dx/Vq+/8YHP2EptSa2+BjefkH+w0b3YU9Jei/cJU1\nlVddLwmOcNrvxwRQ2i9c/uRC05fJSxNHNZgJ9cvPJ/m5NYIMWu+zSyU5tMX1Mbq3\n4K3rVHkfQdl5mBqq6gtR\n=upiz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35e77a0288bcac5594ff25c10c9679a161cb730b",
          "sha": "35e77a0288bcac5594ff25c10c9679a161cb730b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/35e77a0288bcac5594ff25c10c9679a161cb730b"
        }
      ],
      "message": "Tests: Test new getblockstats RPC\n\nIncludes commit from Anthony Towns @ajtowns:\n\nTests: Save and load block and corresponding expected statistics",
      "committer": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2018-05-22T21:26:33Z"
      },
      "author": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-21T01:08:05Z"
      },
      "sha": "4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWQwNDc2ZjYyMjY5MDI3ZWMyMTkzYTVmODBkNTA4ZDc4OWRlOGFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41d0476f62269027ec2193a5f80d508d789de8aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/41d0476f62269027ec2193a5f80d508d789de8aa",
      "tree": {
        "sha": "cbb103f486813cdc03822e64bd9a6f376442fc71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbb103f486813cdc03822e64bd9a6f376442fc71"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cbb103f486813cdc03822e64bd9a6f376442fc71\nparent 4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf\nauthor Anthony Towns <aj@erisian.com.au> 1522395283 +1000\ncommitter Jorge Timón <jtimon@jtimon.cc> 1527024394 +0200\n\nTests: Add data file\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbBIsKAAoJEIhmwY6hyUSi6+gP/3yR7DB9SkE21COP8OrEGePe\ny+FPUlRU4SOITHQYsJ/gCbIghri0h8eXiNsaddlTzwrdbEmktHJVGDP9eOTYXjE+\n68zv7dG8/AjX/WSn6mjHrcqDM5YKU9+bA/7VP0zgtNx9Xay7GIJg/Y4xYVg8NYvI\nUoqVC/1VuR70MVyTMwpzNqB8OTHvq7XuJm2M+5c1YKsOnI5ez7yhfi5X+41Fk59K\n1o0686rMCDC0RCKX5J+cvFB8QPEHwmXGxJOGdy8l4oEYi9ec0R8RycQNRWO3AWbE\nfqTlM3zTHw9WllTdEwNz1MAtci+pCnEryyiMBXE/DXIeWc5tO6WmfuyMP0tr//MS\nvGQ9G+C7M9up7X3DsyUnImvxGw7KS0Os4ySXYjQWxm60gmwaeKkdIDIjLPLgy2LP\nUjevc63sGTa36/u8ITdYgqCtJYP7Xol5fZ5ndxjafr0ezvE3Mgp55Swg6LWmqZRT\nwxfLy67WoD4VueDIE2fFi0UYPCxtY6b0x0lJ2NpOOvS0AYcaSD5rzQ1zpu49GOyR\ni1w3H6MWgerq8D9jDR3H3XobszAcRH2V8df5oQx84+4Pca9SEW+2IaGBMf5PYW2C\nNfzjPL4WY9VzHLhjMmGLjyDyH1W6NvNPvTNrWfDffRAd96zQUzh5ZAtIu+TaVT3W\nNVS0il/FrHDGvMOJPR9W\n=ZZlO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf",
          "sha": "4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbfb6aad9ba8fa17b5e7ed3e9a36dc8a24f1fcf"
        }
      ],
      "message": "Tests: Add data file",
      "committer": {
        "name": "Jorge Timón",
        "email": "jtimon@jtimon.cc",
        "date": "2018-05-22T21:26:34Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-03-30T07:34:43Z"
      },
      "sha": "41d0476f62269027ec2193a5f80d508d789de8aa"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1640410499,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY0MDQxMDQ5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1640410499",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-22T21:28:28Z"
    },
    {
      "event": "commented",
      "id": 391147219,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTE0NzIxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391147219",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-22T21:29:58Z",
      "updated_at": "2018-05-22T21:29:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed help nits (also made other improvements, some other things in the help were ugly).\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-391147219",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10757"
    },
    {
      "event": "merged",
      "id": 1642336356,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTY0MjMzNjM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1642336356",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d0476f62269027ec2193a5f80d508d789de8aa",
      "created_at": "2018-05-23T17:01:21Z"
    },
    {
      "event": "closed",
      "id": 1642336358,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTY0MjMzNjM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1642336358",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T17:01:21Z"
    },
    {
      "event": "referenced",
      "id": 1642337971,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE2NDIzMzc5NzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1642337971",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b9551d3663fcf8c9aea70c43c6ac22924a9698dc",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9551d3663fcf8c9aea70c43c6ac22924a9698dc",
      "created_at": "2018-05-23T17:02:11Z"
    },
    {
      "event": "removed_from_project",
      "id": 1643085134,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MTY0MzA4NTEzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1643085134",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-24T00:09:43Z",
      "project_card": {
        "id": 8924492,
        "url": "https://api.github.com/projects/columns/cards/8924492",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 1670713883,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE2NzA3MTM4ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1670713883",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "121cbaacc28eeea4b04ab79233bf4d3a0c399a63",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/121cbaacc28eeea4b04ab79233bf4d3a0c399a63",
      "created_at": "2018-06-08T11:47:04Z"
    },
    {
      "event": "referenced",
      "id": 2559553037,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI1NTk1NTMwMzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2559553037",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0aa34ea89cf3630342e9ed6aa49291652cdccc83",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/0aa34ea89cf3630342e9ed6aa49291652cdccc83",
      "created_at": "2019-08-15T13:48:21Z"
    },
    {
      "event": "referenced",
      "id": 2571260767,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI1NzEyNjA3Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2571260767",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7918327c2a8d36d8ebe5283a65e08cb2fdd2b3b9",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/7918327c2a8d36d8ebe5283a65e08cb2fdd2b3b9",
      "created_at": "2019-08-20T22:30:21Z"
    },
    {
      "event": "referenced",
      "id": 2590235644,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI1OTAyMzU2NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2590235644",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f2dcac3a4fefd84f7c26d66570d3434d2a54a2d0",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/f2dcac3a4fefd84f7c26d66570d3434d2a54a2d0",
      "created_at": "2019-08-28T11:51:05Z"
    },
    {
      "event": "referenced",
      "id": 2971477019,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzE0NzcwMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2971477019",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b7353b4885a4291bed3de47af2efe236a6560396",
      "commit_url": "https://api.github.com/repos/PACGlobalOfficial/PAC/commits/b7353b4885a4291bed3de47af2efe236a6560396",
      "created_at": "2020-01-22T20:22:23Z"
    },
    {
      "event": "referenced",
      "id": 3451967629,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NTE5Njc2Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3451967629",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b2c3237b1c1980f06b7f7cb3719a47c3e13d8722",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/b2c3237b1c1980f06b7f7cb3719a47c3e13d8722",
      "created_at": "2020-06-17T06:06:45Z"
    },
    {
      "event": "referenced",
      "id": 3504914691,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MDQ5MTQ2OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3504914691",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "000b2794a59b3f0f1e4c85c175d0287127cd42cb",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/000b2794a59b3f0f1e4c85c175d0287127cd42cb",
      "created_at": "2020-07-02T01:38:59Z"
    },
    {
      "event": "locked",
      "id": 5779034093,
      "node_id": "LOE_lADOABII584OXxuHzwAAAAFYdQ_t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5779034093",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T15:10:46Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126259127",
      "pull_request_review_id": 48733116,
      "id": 126259127,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI1OTEyNw==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove.",
      "created_at": "2017-07-07T22:37:58Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126259127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126259127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1637,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260721",
      "pull_request_review_id": 48733116,
      "id": 126260721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MDcyMQ==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 150,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```cpp\r\nstd::set<std::string> allowed_plot_values = {\"minfee\", \"maxfee\", \"...\"};\r\n```",
      "created_at": "2017-07-07T22:52:25Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260851",
      "pull_request_review_id": 48733116,
      "id": 126260851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MDg1MQ==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove.",
      "created_at": "2017-07-07T22:53:29Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261000",
      "pull_request_review_id": 48733116,
      "id": 126261000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MTAwMA==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 160,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```cpp\r\n\"...\" + boost::join(allowed_plot_values, \",\")\r\n```",
      "created_at": "2017-07-07T22:54:32Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261085",
      "pull_request_review_id": 48733116,
      "id": 126261085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MTA4NQ==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 163,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing result example.",
      "created_at": "2017-07-07T22:55:17Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1869,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261101",
      "pull_request_review_id": 48733116,
      "id": 126261101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MTEwMQ==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Duplicate.",
      "created_at": "2017-07-07T22:55:25Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1654,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261710",
      "pull_request_review_id": 48733116,
      "id": 126261710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MTcxMA==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+    } else {\n+        end = chainActive.Height();\n+    }\n+    if (end < 0 || end > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+    }\n+\n+    std::string str_plot_values = str_allowed_plot_values;\n+    if (request.params.size() > 2) {\n+        str_plot_values = request.params[2].get_str();\n+    }\n+    std::vector<std::string> plot_values;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 190,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```cpp\r\nstd::set<std::string> plot_values;\r\nif (request.params.size() > 2) {\r\n  boost::split(plot_values, request.params[2].get_str(), boost::is_any_of(\",\"));\r\n\r\n  // only validate in this case\r\n  // ... \r\n} else {\r\n  plot_values = allowed_plot_values;\r\n}\r\n```",
      "created_at": "2017-07-07T23:00:26Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1678,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262049",
      "pull_request_review_id": 48733116,
      "id": 126262049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MjA0OQ==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove.",
      "created_at": "2017-07-07T23:03:29Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262450",
      "pull_request_review_id": 48733116,
      "id": 126262450,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2MjQ1MA==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+    } else {\n+        end = chainActive.Height();\n+    }\n+    if (end < 0 || end > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+    }\n+\n+    std::string str_plot_values = str_allowed_plot_values;\n+    if (request.params.size() > 2) {\n+        str_plot_values = request.params[2].get_str();\n+    }\n+    std::vector<std::string> plot_values;\n+    boost::split(plot_values, str_plot_values, boost::is_any_of(\",\"));\n+    for (const std::string plot_value : plot_values) {\n+        if (!IsAllowedPlotValue(plot_value, allowed_plot_values)) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```cpp\r\nif (allowed_plot_values.count(plot_value) == 0) {\r\n```",
      "created_at": "2017-07-07T23:07:37Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262450",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1681,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126267402",
      "pull_request_review_id": 48741927,
      "id": 126267402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2NzQwMg==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": 126261101,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One is HelpExampleCli and the other is HelpExampleRpc",
      "created_at": "2017-07-08T00:08:10Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126267402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126267402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1654,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126267869",
      "pull_request_review_id": 48742472,
      "id": 126267869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2Nzg2OQ==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": 126261101,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ops sorry, overlooked it.",
      "created_at": "2017-07-08T00:16:40Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126267869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126267869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1654,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126269648",
      "pull_request_review_id": 48744410,
      "id": 126269648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI2OTY0OA==",
      "diff_hunk": "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+    } else {\n+        end = chainActive.Height();\n+    }\n+    if (end < 0 || end > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+    }\n+\n+    std::string str_plot_values = str_allowed_plot_values;\n+    if (request.params.size() > 2) {\n+        str_plot_values = request.params[2].get_str();\n+    }\n+    std::vector<std::string> plot_values;\n+    boost::split(plot_values, str_plot_values, boost::is_any_of(\",\"));\n+    for (const std::string plot_value : plot_values) {\n+        if (!IsAllowedPlotValue(plot_value, allowed_plot_values)) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "in_reply_to_id": 126262450,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "duh, I was so much over-complicating things so much for no good reason...thank you!",
      "created_at": "2017-07-08T00:57:06Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126269648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126269648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1681,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126292902",
      "pull_request_review_id": 48766531,
      "id": 126292902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI5MjkwMg==",
      "diff_hunk": "@@ -20,20 +20,22 @@ CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nBytes_) const\n+CAmount CFeeRate::GetTruncatedFee(size_t nBytes_) const",
      "path": "src/policy/feerate.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Drop `_`? Same below.",
      "created_at": "2017-07-09T00:11:49Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126292902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126292902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126292910",
      "pull_request_review_id": 48766531,
      "id": 126292910,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI5MjkxMA==",
      "diff_hunk": "@@ -685,6 +686,22 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     return blockheaderToJSON(pblockindex);\n }\n \n+static void ReadBlockCheckPruned(const CBlockIndex* pblockindex, CBlock& block)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Keep argument order as `ReadBlockFromDisk`? Is there a convention for where the *output arguments* should be?",
      "created_at": "2017-07-09T00:13:04Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126292910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126292910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126292958",
      "pull_request_review_id": 48766531,
      "id": 126292958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI5Mjk1OA==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit, could sort only after `size == 1` case.",
      "created_at": "2017-07-09T00:19:36Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126292958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126292958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457455",
      "pull_request_review_id": 48766531,
      "id": 126457455,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1NzQ1NQ==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`static constexpr ...`",
      "created_at": "2017-07-10T15:34:29Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126457455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457503",
      "pull_request_review_id": 48766531,
      "id": 126457503,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1NzUwMw==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove empty line.",
      "created_at": "2017-07-10T15:34:43Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126457503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126462550",
      "pull_request_review_id": 48766531,
      "id": 126462550,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ2MjU1MA==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+        }\n+    } else {\n+        end = chainActive.Height();\n+    }\n+\n+    std::set<std::string> plot_values;\n+    if (request.params.size() > 2) {\n+        boost::split(plot_values, request.params[2].get_str(), boost::is_any_of(\",\"));\n+\n+        for (const std::string& plot_value : plot_values) {\n+            if (valid_plot_values.count(plot_value) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid plot value %s\", plot_value));\n+            }\n+        }\n+    } else {\n+        plot_values = valid_plot_values;\n+    }\n+\n+    std::map<std::string, UniValue> map_stats;\n+    for (const std::string& plot_value : plot_values) {\n+        map_stats[plot_value] = UniValue(UniValue::VARR);\n+    }\n+\n+    CBlockIndex* pindex = chainActive[end];",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 296,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove.",
      "created_at": "2017-07-10T15:51:49Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126462550",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126462550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1784,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126462704",
      "pull_request_review_id": 48766531,
      "id": 126462704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ2MjcwNA==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+        }\n+    } else {\n+        end = chainActive.Height();\n+    }\n+\n+    std::set<std::string> plot_values;\n+    if (request.params.size() > 2) {\n+        boost::split(plot_values, request.params[2].get_str(), boost::is_any_of(\",\"));\n+\n+        for (const std::string& plot_value : plot_values) {\n+            if (valid_plot_values.count(plot_value) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid plot value %s\", plot_value));\n+            }\n+        }\n+    } else {\n+        plot_values = valid_plot_values;\n+    }\n+\n+    std::map<std::string, UniValue> map_stats;\n+    for (const std::string& plot_value : plot_values) {\n+        map_stats[plot_value] = UniValue(UniValue::VARR);\n+    }\n+\n+    CBlockIndex* pindex = chainActive[end];\n+    for (int i = end; i >= start; i--) {\n+        UpdateBlockStats(pindex, plot_values, map_stats);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 298,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```cpp\r\nUpdateBlockStats(chainActive[i], ...);\r\n```",
      "created_at": "2017-07-10T15:52:22Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126462704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126462704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1786,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126463400",
      "pull_request_review_id": 48766531,
      "id": 126463400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ2MzQwMA==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replace `plotvalues` with `stats`? Also, 3rd argument could be object `options`?",
      "created_at": "2017-07-10T15:54:58Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126463400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126463400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1737,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126463865",
      "pull_request_review_id": 48766531,
      "id": 126463865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ2Mzg2NQ==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit, negative block could mean `end = height - end` to avoid early blocks (not new concept here I believe)?",
      "created_at": "2017-07-10T15:56:31Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126463865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126463865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126492736",
      "pull_request_review_id": 48982074,
      "id": 126492736,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ5MjczNg==",
      "diff_hunk": "@@ -685,6 +686,22 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     return blockheaderToJSON(pblockindex);\n }\n \n+static void ReadBlockCheckPruned(const CBlockIndex* pblockindex, CBlock& block)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126292910,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not that I know of, but your proposed change sounds good to me.",
      "created_at": "2017-07-10T17:56:12Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126492736",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126492736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126493273",
      "pull_request_review_id": 48982680,
      "id": 126493273,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ5MzI3Mw==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126457455,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what's the gain? https://stackoverflow.com/a/41132221/935325 says it's the same...",
      "created_at": "2017-07-10T17:58:25Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126493273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126493273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126493852",
      "pull_request_review_id": 48983341,
      "id": 126493852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ5Mzg1Mg==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+        }\n+    } else {\n+        end = chainActive.Height();\n+    }\n+\n+    std::set<std::string> plot_values;\n+    if (request.params.size() > 2) {\n+        boost::split(plot_values, request.params[2].get_str(), boost::is_any_of(\",\"));\n+\n+        for (const std::string& plot_value : plot_values) {\n+            if (valid_plot_values.count(plot_value) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid plot value %s\", plot_value));\n+            }\n+        }\n+    } else {\n+        plot_values = valid_plot_values;\n+    }\n+\n+    std::map<std::string, UniValue> map_stats;\n+    for (const std::string& plot_value : plot_values) {\n+        map_stats[plot_value] = UniValue(UniValue::VARR);\n+    }\n+\n+    CBlockIndex* pindex = chainActive[end];\n+    for (int i = end; i >= start; i--) {\n+        UpdateBlockStats(pindex, plot_values, map_stats);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 298,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126462704,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This will be slightly less efficient, no?",
      "created_at": "2017-07-10T18:00:48Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126493852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126493852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1786,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126494452",
      "pull_request_review_id": 48984019,
      "id": 126494452,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ5NDQ1Mg==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126463865,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mhmm, interesting. To be clear you mean start=-10 end=200 would be equivalent to start=190 end=200, right?\r\n",
      "created_at": "2017-07-10T18:03:16Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126494452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126494452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126494613",
      "pull_request_review_id": 48984210,
      "id": 126494613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ5NDYxMw==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126463400,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't the string simpler?",
      "created_at": "2017-07-10T18:03:56Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126494613",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126494613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1737,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126569538",
      "pull_request_review_id": 49066057,
      "id": 126569538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU2OTUzOA==",
      "diff_hunk": "@@ -20,20 +20,22 @@ CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nBytes_) const\n+CAmount CFeeRate::GetTruncatedFee(size_t nBytes_) const",
      "path": "src/policy/feerate.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126292902,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well, yes, conserving the old name only saves 1 line of extra disruption. But I guess if we're touching the variable name we should use the new style. just bytes?",
      "created_at": "2017-07-11T00:28:26Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126569538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126569538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126654629",
      "pull_request_review_id": 49157689,
      "id": 126654629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY1NDYyOQ==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126463865,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, I meant negative values are relative to the tip. To get the stats for the last 10 blocks you would pass start = -10 without querying the current block height.",
      "created_at": "2017-07-11T10:45:53Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126654629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126654629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126654771",
      "pull_request_review_id": 49157867,
      "id": 126654771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY1NDc3MQ==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126463400,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ignore `options` suggestion.",
      "created_at": "2017-07-11T10:46:43Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126654771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126654771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1737,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126655004",
      "pull_request_review_id": 49158135,
      "id": 126655004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY1NTAwNA==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(pindex, block);\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        // TODO decide with or without subsidy and/or block fees\n+        total_out += tx_total_out;\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            // TODO don't count provable spendable (OP_RETURN) as it doesn't belong in the utxo index\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);\n+        feerate_old_array.push_back(feerate_old);\n+        // New feerate uses satoshis per weighted byte instead of per byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+        minfeerate_old = std::min(minfeerate_old, feerate_old);\n+        maxfeerate_old = std::max(maxfeerate_old, feerate_old);\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"height\") {\n+            map_stats[plot_value].push_back((int64_t)pindex->nHeight);\n+        } else if (plot_value == \"time\") {\n+            map_stats[plot_value].push_back(pindex->GetBlockTime());\n+        } else if (plot_value == \"mediantime\") {\n+            map_stats[plot_value].push_back(pindex->GetMedianTimePast());\n+        } else if (plot_value == \"subsidy\") {\n+            map_stats[plot_value].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(totalfee);\n+        } else if (plot_value == \"reward\") {\n+            map_stats[plot_value].push_back(totalfee + GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        } else if (plot_value == \"utxo_increase\") {\n+            map_stats[plot_value].push_back(outputs - inputs);\n+        } else if (plot_value == \"utxo_size_inc\") {\n+            map_stats[plot_value].push_back(utxo_size_inc);\n+        } else if (plot_value == \"total_size\") {\n+            map_stats[plot_value].push_back(total_size);\n+        } else if (plot_value == \"total_weight\") {\n+            map_stats[plot_value].push_back(total_weight);\n+        } else if (plot_value == \"total_out\") {\n+            map_stats[plot_value].push_back(total_out);\n+        } else if (plot_value == \"medianfee\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(fee_array));\n+        } else if (plot_value == \"medianfeerate\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_array));\n+        } else if (plot_value == \"medianfeerate_old\") {\n+            map_stats[plot_value].push_back(CalculateTruncatedMedian(feerate_old_array));\n+        } else if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((minfee == MAX_MONEY) ? 0 : minfee);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(maxfee);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+        } else if (plot_value == \"minfeerate_old\") {\n+            map_stats[plot_value].push_back((minfeerate_old == MAX_MONEY) ? 0 : minfeerate_old);\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate);\n+        } else if (plot_value == \"maxfeerate_old\") {\n+            map_stats[plot_value].push_back(maxfeerate_old);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+        } else if (plot_value == \"avgfeerate_old\") {\n+            map_stats[plot_value].push_back(CFeeRate(totalfee, total_size).GetTruncatedFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_plot_values = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"reward\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"medianfeerate\",\n+        \"medianfeerate_old\",\n+        \"minfeerate\",\n+        \"minfeerate_old\",\n+        \"maxfeerate\",\n+        \"maxfeerate_old\",\n+        \"avgfeerate\",\n+        \"avgfeerate_old\",\n+        \"avgfee\",\n+    };\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_plot_values, \",\") +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"TODO\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+        if (end < 0 || end > chainActive.Height()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+        }\n+    } else {\n+        end = chainActive.Height();\n+    }\n+\n+    std::set<std::string> plot_values;\n+    if (request.params.size() > 2) {\n+        boost::split(plot_values, request.params[2].get_str(), boost::is_any_of(\",\"));\n+\n+        for (const std::string& plot_value : plot_values) {\n+            if (valid_plot_values.count(plot_value) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid plot value %s\", plot_value));\n+            }\n+        }\n+    } else {\n+        plot_values = valid_plot_values;\n+    }\n+\n+    std::map<std::string, UniValue> map_stats;\n+    for (const std::string& plot_value : plot_values) {\n+        map_stats[plot_value] = UniValue(UniValue::VARR);\n+    }\n+\n+    CBlockIndex* pindex = chainActive[end];\n+    for (int i = end; i >= start; i--) {\n+        UpdateBlockStats(pindex, plot_values, map_stats);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 298,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126462704,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess it takes few more cycles but non critical code should be cleaner?",
      "created_at": "2017-07-11T10:48:01Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126655004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126655004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1786,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136726580",
      "pull_request_review_id": 60305113,
      "id": 136726580,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjcyNjU4MA==",
      "diff_hunk": "@@ -1531,6 +1538,313 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "b2d93e4dfa647a4223ee37bd233d373f2cde25b1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For feerate you should use the virtual size, not total size.",
      "created_at": "2017-09-03T21:19:17Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r136726580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136726580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1642,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137426640",
      "pull_request_review_id": 61091554,
      "id": 137426640,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzQyNjY0MA==",
      "diff_hunk": "@@ -1531,6 +1538,313 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    CAmount minfeerate_old = MAX_MONEY;\n+    CAmount maxfeerate_old = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_old_array;\n+    std::vector<CAmount> feerate_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        total_size += tx_size;\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        CAmount feerate_old = CFeeRate(txfee, tx_size).GetTruncatedFee(1);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "b2d93e4dfa647a4223ee37bd233d373f2cde25b1",
      "in_reply_to_id": 136726580,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "feerate is using vsize, feerate_old is using old size. Perhaps we just want to remove the whole *_old family.",
      "created_at": "2017-09-07T01:06:08Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r137426640",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137426640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1642,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145622618",
      "pull_request_review_id": 70447630,
      "id": 145622618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTYyMjYxOA==",
      "diff_hunk": "@@ -1564,6 +1571,309 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "caeaf86de426f9b71c0828be23253827dd0149fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't this be GetTransaction(..., false) ?",
      "created_at": "2017-10-19T07:51:39Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145622618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145622618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145659377",
      "pull_request_review_id": 70489270,
      "id": 145659377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTY1OTM3Nw==",
      "diff_hunk": "@@ -1570,6 +1571,309 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat].push_back((int64_t)pindex->nHeight);\n+        } else if (stat == \"time\") {\n+            map_stats[stat].push_back(pindex->GetBlockTime());\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat].push_back(pindex->GetMedianTimePast());\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "2497afa41126fd4e5cf17b095980c19fc1b813a5",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the values, fees and fee rates should be wrapped with ValueFromAmount, so outputs are decimal bitcoins rather than integer satoshis, for consistency with other RPC calls.",
      "created_at": "2017-10-19T10:21:34Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145659377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145659377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145659877",
      "pull_request_review_id": 70489270,
      "id": 145659877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTY1OTg3Nw==",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):\n+            assert(val in data)\n+        else:\n+            assert(val not in data)\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(101)\n+\n+        node.sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+        self.sync_all()\n+\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[1].sendtoaddress(address=node.getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        node.generate(1)\n+\n+        start_height = 101\n+        max_stat_pos = 2\n+        stats = node.getblockstats(start=start_height, end=start_height + max_stat_pos)\n+\n+        all_values = [\n+            \"height\",\n+            \"time\",\n+            \"mediantime\",\n+            \"txs\",\n+            \"swtxs\",\n+            \"ins\",\n+            \"outs\",\n+            \"subsidy\",\n+            \"totalfee\",\n+            \"utxo_increase\",\n+            \"utxo_size_inc\",\n+            \"total_size\",\n+            \"total_weight\",\n+            \"swtotal_size\",\n+            \"swtotal_weight\",\n+            \"total_out\",\n+            \"minfee\",\n+            \"maxfee\",\n+            \"medianfee\",\n+            \"avgfee\",\n+            \"minfeerate\",\n+            \"maxfeerate\",\n+            \"medianfeerate\",\n+            \"avgfeerate\",\n+            \"mintxsize\",\n+            \"maxtxsize\",\n+            \"mediantxsize\",\n+            \"avgtxsize\",\n+        ]\n+        assert_contains(stats, all_values)\n+        # Make sure all valid statistics are included\n+        assert_contains(all_values, stats.keys())\n+\n+        assert_equal(stats['height'][0], start_height)\n+        assert_equal(stats['height'][max_stat_pos], start_height + max_stat_pos)\n+\n+        assert_equal(stats['txs'][0], 1)\n+        assert_equal(stats['swtxs'][0], 0)",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 84,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "caeaf86de426f9b71c0828be23253827dd0149fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "None of the transactions have witness data, so this isn't actually checking whether swtxs, swtotal_size, swtotal_weight ever output anything other than 0, or whether weight is ever anything other than size*4.",
      "created_at": "2017-10-19T10:24:02Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145659877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145659877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146106768",
      "pull_request_review_id": 71008762,
      "id": 146106768,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjEwNjc2OA==",
      "diff_hunk": "@@ -1570,6 +1571,309 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat].push_back((int64_t)pindex->nHeight);\n+        } else if (stat == \"time\") {\n+            map_stats[stat].push_back(pindex->GetBlockTime());\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat].push_back(pindex->GetMedianTimePast());\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "2497afa41126fd4e5cf17b095980c19fc1b813a5",
      "in_reply_to_id": 145659377,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, we want to allow the slow fetch too. If the data is calculable we want to provide it no matter if more slowly. This rpc call shouldn't be expected to be fast anyway.",
      "created_at": "2017-10-21T14:33:58Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146106768",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146106768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146106887",
      "pull_request_review_id": 71008834,
      "id": 146106887,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjEwNjg4Nw==",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):\n+            assert(val in data)\n+        else:\n+            assert(val not in data)\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(101)\n+\n+        node.sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+        self.sync_all()\n+\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[1].sendtoaddress(address=node.getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        node.generate(1)\n+\n+        start_height = 101\n+        max_stat_pos = 2\n+        stats = node.getblockstats(start=start_height, end=start_height + max_stat_pos)\n+\n+        all_values = [\n+            \"height\",\n+            \"time\",\n+            \"mediantime\",\n+            \"txs\",\n+            \"swtxs\",\n+            \"ins\",\n+            \"outs\",\n+            \"subsidy\",\n+            \"totalfee\",\n+            \"utxo_increase\",\n+            \"utxo_size_inc\",\n+            \"total_size\",\n+            \"total_weight\",\n+            \"swtotal_size\",\n+            \"swtotal_weight\",\n+            \"total_out\",\n+            \"minfee\",\n+            \"maxfee\",\n+            \"medianfee\",\n+            \"avgfee\",\n+            \"minfeerate\",\n+            \"maxfeerate\",\n+            \"medianfeerate\",\n+            \"avgfeerate\",\n+            \"mintxsize\",\n+            \"maxtxsize\",\n+            \"mediantxsize\",\n+            \"avgtxsize\",\n+        ]\n+        assert_contains(stats, all_values)\n+        # Make sure all valid statistics are included\n+        assert_contains(all_values, stats.keys())\n+\n+        assert_equal(stats['height'][0], start_height)\n+        assert_equal(stats['height'][max_stat_pos], start_height + max_stat_pos)\n+\n+        assert_equal(stats['txs'][0], 1)\n+        assert_equal(stats['swtxs'][0], 0)",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 84,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "caeaf86de426f9b71c0828be23253827dd0149fb",
      "in_reply_to_id": 145659877,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is true. When I wrote this segwit wasn't activated, but now it would be nice to add segwit txs to the test because otherwise this functionality isn't really being tested. Good call.",
      "created_at": "2017-10-21T14:37:23Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146106887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146106887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146541947",
      "pull_request_review_id": 71497165,
      "id": 146541947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjU0MTk0Nw==",
      "diff_hunk": "@@ -1570,6 +1571,309 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat].push_back((int64_t)pindex->nHeight);\n+        } else if (stat == \"time\") {\n+            map_stats[stat].push_back(pindex->GetBlockTime());\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat].push_back(pindex->GetMedianTimePast());\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "2497afa41126fd4e5cf17b095980c19fc1b813a5",
      "in_reply_to_id": 145659377,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm presuming this reply should be to the \"GetTransaction(..., false)\" comment. Getting fee info without txindex seems like a weird thing to do to me, but if it's supported then presumably the getblockstats RPC help text doesn't need to still say \"It won't work .. without -txindex.\" ?",
      "created_at": "2017-10-24T12:24:24Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146541947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146541947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146551957",
      "pull_request_review_id": 71509206,
      "id": 146551957,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjU1MTk1Nw==",
      "diff_hunk": "@@ -1570,6 +1571,309 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat].push_back((int64_t)pindex->nHeight);\n+        } else if (stat == \"time\") {\n+            map_stats[stat].push_back(pindex->GetBlockTime());\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat].push_back(pindex->GetMedianTimePast());\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat].push_back(GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "2497afa41126fd4e5cf17b095980c19fc1b813a5",
      "in_reply_to_id": 145659377,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, sorry. Was meant for the other comment. Actually looking at the code again the slow search will only find txs in the utxo, so using false should be fine. I'll test it with false.\r\n\r\nRegarding using BTC instead of satoshis, I think we want to move everything to satoshis but we don't do it because it would be too disruptive, so we only do it with new calls.\r\nThe caller can trivially divide by 100000000 to get BTC if they want t show that. ",
      "created_at": "2017-10-24T13:04:35Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146551957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146551957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148021712",
      "pull_request_review_id": 73199569,
      "id": 148021712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAyMTcxMg==",
      "diff_hunk": "@@ -20,20 +20,22 @@ CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nBytes_) const\n+CAmount CFeeRate::GetTruncatedFee(size_t bytes) const",
      "path": "src/policy/feerate.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "ced73054c5690e2c46caf1389700e9832f528881",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Avoid special case for truncated zeros with new CFeeRate::GetTruncatedFee\":\r\n\r\nI found this commit message hard to understand. Would suggest something more like:\r\n\r\n> [refactoring] Add new CFeeRate::GetTruncatedFee method\r\n>\r\n> Add new truncated fee method that unlike the CFeeRate::GetFee will round fees between 1 and -1 satoshi to zero instead of 1 or -1. This does not change the behavior of CFeeRate::GetFee.\r\n\r\n\r\n",
      "created_at": "2017-10-31T14:56:59Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148021712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148021712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148024745",
      "pull_request_review_id": 73199569,
      "id": 148024745,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAyNDc0NQ==",
      "diff_hunk": "@@ -688,6 +688,22 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     return blockheaderToJSON(pblockindex);\n }\n \n+static void ReadBlockCheckPruned(CBlock& block, const CBlockIndex* pblockindex)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "d8b8582496c09407aa836359008c104d99a309df",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Separate ReadBlockCheckPruned() from getblock()\"\r\n\r\nSince this is throwing on error it seems like it would be friendlier to just return the CBlock instead of taking it as output parameter.\r\n\r\n```c++\r\nCBlock ReadBlockChecked(const BlockIndex*)\r\n```\r\n\r\nAlso it would be good if commit message mentioned this is a refactoring and not a change in behavior.\r\n\r\n",
      "created_at": "2017-10-31T15:05:59Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148024745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148024745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148026891",
      "pull_request_review_id": 73199569,
      "id": 148026891,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAyNjg5MQ==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats to plot things\"\r\n\r\nMaybe call this \"GetTransactionChecked\" instead of \"RpcGetTx\" to be consistent with \"ReadBlockChecked\" in previous commit.\r\n\r\nAlso again since this is throwing on error this would be simpler to use if it just returned CTransactionRef instead of using an output parameter.",
      "created_at": "2017-10-31T15:12:17Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148026891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148026891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148027175",
      "pull_request_review_id": 73199569,
      "id": 148027175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAyNzE3NQ==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats\"\r\n\r\nIf statement should be on new line, or preceded by `else`, or just dropped since the code below will handle this case anyway.",
      "created_at": "2017-10-31T15:13:12Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148027175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148027175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1589,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148031472",
      "pull_request_review_id": 73199569,
      "id": 148031472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAzMTQ3Mg==",
      "diff_hunk": "@@ -1532,6 +1539,262 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    T median;\n+    size_t size = scores.size();\n+    std::sort(scores.begin(), scores.end());\n+    if (size == 0) {\n+        median = 0;\n+    } else if (size == 1) {\n+        median = scores[0];\n+    } else if (size % 2 == 0) {\n+        median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        median = scores[size / 2];\n+    }\n+    return median;\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "c316a9f0691ee6cd096d3821ada6a50c8109bff5",
      "in_reply_to_id": 126457455,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> what's the gain? https://stackoverflow.com/a/41132221/935325 says it's the same...\r\n\r\nGain is just that constexpr is more descriptive, and that stackoverflow answer isn't really correct. `const` and `constexpr` aren't identical even for integers, for example `const` is valid here:\r\n\r\n```c++\r\nstatic const int X = rand();\r\n```\r\nwhere `constexpr` would not be:\r\n\r\n```c++\r\nstatic constexpr int X = rand();\r\n```\r\n\r\nAlso that stackoverflow answer is relying on special case treatment for integers that doesn't apply to other types like floats. `constexpr` is just better for declaring compile time constants that `const`, so we should prefer it.",
      "created_at": "2017-10-31T15:26:30Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148031472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148031472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148034720",
      "pull_request_review_id": 73199569,
      "id": 148034720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAzNDcyMA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work in some cases with pruning or without -txindex.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs (including coinbase).\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height;\n+    }\n+    if (height < 0 || height > current_tip) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1) {\n+        boost::split(stats, request.params[1].get_str(), boost::is_any_of(\",\"));\n+\n+        for (const std::string& stat : stats) {\n+            if (valid_stats.count(stat) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid selected statistic %s\", stat));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 283,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats\"\r\n\r\nMaybe s/selected/requested/ since \"selected\" sounds more like something the RPC is computing.",
      "created_at": "2017-10-31T15:36:34Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148034720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148034720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148035291",
      "pull_request_review_id": 73199569,
      "id": 148035291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAzNTI5MQ==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats\"\r\n\r\n`stats` reference should be const, and again I think `map_stats` should be a return value instead of an output parameter so calling this function is simpler and less error prone.\r\n\r\nAlso 'UpdateBlockStats' should probably be called 'GetBlockStats' because 'UpdateBlockStats' sounds like something that would be called repeatedly to update existing statistics, where this function is just computing and returning wholly new statistics.",
      "created_at": "2017-10-31T15:38:13Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148035291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148035291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1604,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148039141",
      "pull_request_review_id": 73199569,
      "id": 148039141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAzOTE0MQ==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats\"\r\n\r\nIt seems clumsy and unnecessary to have to list these entries three separate places (here, in UpdateBlockStats, and in the getblockstats help string). It seems like it would be better to drop this listing and simplify the code by just building a fixed map:\r\n\r\n```c++\r\nstd::map<std::string, UniValue> GetBlockStats(CBlockIndex* block)\r\n{\r\n    ...\r\n    return {\r\n        {\"height\", (int64_t)pindex->nHeight},\r\n        {\"time\", pindex->GetBlockTime()},\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nIf in the future there are statistics that are expensive to compute, it would be easy to add options to UpdateBlockStats to skip them.",
      "created_at": "2017-10-31T15:49:57Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148039141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148039141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148040858",
      "pull_request_review_id": 73199569,
      "id": 148040858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA0MDg1OA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work in some cases with pruning or without -txindex.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats\"\r\n\r\nIt seems weird for a JSON api to be taking a comma separated string instead of a list of strings. Do we have other RPCs that use comma separated strings?",
      "created_at": "2017-10-31T15:55:38Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148040858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148040858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1837,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148049297",
      "pull_request_review_id": 73199569,
      "id": 148049297,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA0OTI5Nw==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work in some cases with pruning or without -txindex.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs (including coinbase).\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"RPC: Introduce getblockstats\":\r\n\r\nBug: This should be `current_tip + height + 1` so height -1 will return tip.",
      "created_at": "2017-10-31T16:21:54Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148049297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148049297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1824,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148050658",
      "pull_request_review_id": 73199569,
      "id": 148050658,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA1MDY1OA==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 17,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "44dcea038b44890e5f49c71ff26cfcb4ecf0da15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"QA: Test new getblockstats RPC\"\r\n\r\nUnneeded parentheses",
      "created_at": "2017-10-31T16:26:31Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148050658",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148050658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148050746",
      "pull_request_review_id": 73199569,
      "id": 148050746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA1MDc0Ng==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):\n+            assert(val in data)",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 18,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "44dcea038b44890e5f49c71ff26cfcb4ecf0da15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"QA: Test new getblockstats RPC\"\r\n\r\nUnneeded parentheses (assert is not a function)",
      "created_at": "2017-10-31T16:26:49Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148050746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148050746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148055540",
      "pull_request_review_id": 73199569,
      "id": 148055540,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA1NTU0MA==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):\n+            assert(val in data)\n+        else:\n+            assert(val not in data)\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(101)\n+\n+        node.sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+        self.sync_all()\n+\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[1].sendtoaddress(address=node.getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        node.generate(1)\n+\n+        start_height = 101\n+        max_stat_pos = 2\n+        stats = []\n+        for i in range(start_height, start_height + max_stat_pos + 1):\n+            stats.append(node.getblockstats(height=i))\n+\n+        all_values = [\n+            \"height\",\n+            \"time\",\n+            \"mediantime\",\n+            \"txs\",\n+            \"swtxs\",\n+            \"ins\",\n+            \"outs\",\n+            \"subsidy\",\n+            \"totalfee\",\n+            \"utxo_increase\",\n+            \"utxo_size_inc\",\n+            \"total_size\",\n+            \"total_weight\",\n+            \"swtotal_size\",\n+            \"swtotal_weight\",\n+            \"total_out\",\n+            \"minfee\",\n+            \"maxfee\",\n+            \"medianfee\",\n+            \"avgfee\",\n+            \"minfeerate\",\n+            \"maxfeerate\",\n+            \"medianfeerate\",\n+            \"avgfeerate\",\n+            \"mintxsize\",\n+            \"maxtxsize\",\n+            \"mediantxsize\",\n+            \"avgtxsize\",\n+        ]\n+        assert_contains(stats[0], all_values)\n+        # Make sure all valid statistics are included\n+        assert_contains(all_values, stats[0].keys())",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 80,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "44dcea038b44890e5f49c71ff26cfcb4ecf0da15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"QA: Test new getblockstats RPC\"\r\n\r\nSeems like it would be simpler to combine the two asserts\r\n\r\n```python\r\nassert_equal(set(all_values), set(stats[0]))\r\n```",
      "created_at": "2017-10-31T16:42:25Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148055540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148055540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148056136",
      "pull_request_review_id": 73199569,
      "id": 148056136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA1NjEzNg==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):\n+            assert(val in data)\n+        else:\n+            assert(val not in data)\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(101)\n+\n+        node.sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+        self.sync_all()\n+\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[1].sendtoaddress(address=node.getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        node.generate(1)\n+\n+        start_height = 101\n+        max_stat_pos = 2\n+        stats = []",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 44,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "44dcea038b44890e5f49c71ff26cfcb4ecf0da15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"QA: Test new getblockstats RPC\"\r\n\r\nCould simplify with list comprehension:\r\n\r\n```python\r\nstats = [node.getblockstats(height=start_height + i) for i in range(max_stat_pos+1)]\r\n```",
      "created_at": "2017-10-31T16:44:17Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148056136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148056136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148057310",
      "pull_request_review_id": 73199569,
      "id": 148057310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA1NzMxMA==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if (check_cointains):\n+            assert(val in data)\n+        else:\n+            assert(val not in data)\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(101)\n+\n+        node.sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+        self.sync_all()\n+\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[1].sendtoaddress(address=node.getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        node.generate(1)\n+\n+        start_height = 101\n+        max_stat_pos = 2\n+        stats = []\n+        for i in range(start_height, start_height + max_stat_pos + 1):\n+            stats.append(node.getblockstats(height=i))\n+\n+        all_values = [\n+            \"height\",\n+            \"time\",\n+            \"mediantime\",\n+            \"txs\",\n+            \"swtxs\",\n+            \"ins\",\n+            \"outs\",\n+            \"subsidy\",\n+            \"totalfee\",\n+            \"utxo_increase\",\n+            \"utxo_size_inc\",\n+            \"total_size\",\n+            \"total_weight\",\n+            \"swtotal_size\",\n+            \"swtotal_weight\",\n+            \"total_out\",\n+            \"minfee\",\n+            \"maxfee\",\n+            \"medianfee\",\n+            \"avgfee\",\n+            \"minfeerate\",\n+            \"maxfeerate\",\n+            \"medianfeerate\",\n+            \"avgfeerate\",\n+            \"mintxsize\",\n+            \"maxtxsize\",\n+            \"mediantxsize\",\n+            \"avgtxsize\",\n+        ]\n+        assert_contains(stats[0], all_values)\n+        # Make sure all valid statistics are included\n+        assert_contains(all_values, stats[0].keys())\n+\n+        print(stats)\n+        assert_equal(stats[0]['height'], start_height)\n+        assert_equal(stats[max_stat_pos]['height'], start_height + max_stat_pos)\n+\n+        assert_equal(stats[0]['txs'], 1)\n+        assert_equal(stats[0]['swtxs'], 0)\n+        assert_equal(stats[0]['ins'], 0)\n+        assert_equal(stats[0]['outs'], 2)\n+        assert_equal(stats[0]['totalfee'], 0)\n+        assert_equal(stats[0]['utxo_increase'], 2)\n+        assert_equal(stats[0]['utxo_size_inc'], 173)\n+        assert_equal(stats[0]['total_size'], 0)\n+        assert_equal(stats[0]['total_weight'], 0)\n+        assert_equal(stats[0]['swtotal_size'], 0)\n+        assert_equal(stats[0]['swtotal_weight'], 0)\n+        assert_equal(stats[0]['total_out'], 0)\n+        assert_equal(stats[0]['minfee'], 0)\n+        assert_equal(stats[0]['maxfee'], 0)\n+        assert_equal(stats[0]['medianfee'], 0)\n+        assert_equal(stats[0]['avgfee'], 0)\n+        assert_equal(stats[0]['minfeerate'], 0)\n+        assert_equal(stats[0]['maxfeerate'], 0)\n+        assert_equal(stats[0]['medianfeerate'], 0)\n+        assert_equal(stats[0]['avgfeerate'], 0)\n+        assert_equal(stats[0]['mintxsize'], 0)\n+        assert_equal(stats[0]['maxtxsize'], 0)\n+        assert_equal(stats[0]['mediantxsize'], 0)\n+        assert_equal(stats[0]['avgtxsize'], 0)\n+\n+        assert_equal(stats[1]['txs'], 2)\n+        assert_equal(stats[1]['swtxs'], 0)\n+        assert_equal(stats[1]['ins'], 1)\n+        assert_equal(stats[1]['outs'], 4)\n+        assert_equal(stats[1]['totalfee'], 3840)\n+        assert_equal(stats[1]['utxo_increase'], 3)\n+        assert_equal(stats[1]['utxo_size_inc'], 238)\n+        # assert_equal(stats[1]['total_size'], 191)\n+        # assert_equal(stats[1]['total_weight'], 768)\n+        assert_equal(stats[1]['total_out'], 4999996160)\n+        assert_equal(stats[1]['minfee'], 3840)\n+        assert_equal(stats[1]['maxfee'], 3840)\n+        assert_equal(stats[1]['medianfee'], 3840)\n+        assert_equal(stats[1]['avgfee'], 3840)\n+        assert_equal(stats[1]['minfeerate'], 20)\n+        assert_equal(stats[1]['maxfeerate'], 20)\n+        assert_equal(stats[1]['medianfeerate'], 20)\n+        assert_equal(stats[1]['avgfeerate'], 20)\n+        # assert_equal(stats[1]['mintxsize'], 192)\n+        # assert_equal(stats[1]['maxtxsize'], 192)\n+        # assert_equal(stats[1]['mediantxsize'], 192)\n+        # assert_equal(stats[1]['avgtxsize'], 192)\n+\n+        assert_equal(stats[max_stat_pos]['txs'], 4)\n+        assert_equal(stats[max_stat_pos]['swtxs'], 0)\n+        assert_equal(stats[max_stat_pos]['ins'], 3)\n+        assert_equal(stats[max_stat_pos]['outs'], 8)\n+        assert_equal(stats[max_stat_pos]['totalfee'], 76160)\n+        assert_equal(stats[max_stat_pos]['utxo_increase'], 5)\n+        assert_equal(stats[max_stat_pos]['utxo_size_inc'], 388)\n+        # assert_equal(stats[max_stat_pos]['total_size'], 643)\n+        # assert_equal(stats[max_stat_pos]['total_weight'], 2572)\n+        assert_equal(stats[max_stat_pos]['total_out'], 9999920000)\n+        assert_equal(stats[max_stat_pos]['minfee'], 3840)\n+        assert_equal(stats[max_stat_pos]['maxfee'], 67800)\n+        assert_equal(stats[max_stat_pos]['medianfee'], 4520)\n+        assert_equal(stats[max_stat_pos]['avgfee'], 25386)\n+        assert_equal(stats[max_stat_pos]['minfeerate'], 20)\n+        # assert_equal(stats[max_stat_pos]['maxfeerate'], 300)\n+        assert_equal(stats[max_stat_pos]['medianfeerate'], 20)\n+        assert_equal(stats[max_stat_pos]['avgfeerate'], 118)\n+        # assert_equal(stats[max_stat_pos]['mintxsize'], 192)\n+        # assert_equal(stats[max_stat_pos]['maxtxsize'], 226)\n+        # assert_equal(stats[max_stat_pos]['mediantxsize'], 225)\n+        # assert_equal(stats[max_stat_pos]['avgtxsize'], 214)\n+\n+        # Test invalid parameters raise the proper json exceptions\n+        tip = start_height + max_stat_pos\n+        assert_raises_rpc_error(-8, 'Target block height %d after current tip %d' % (tip+1, tip), node.getblockstats, height=tip+1)\n+        assert_raises_rpc_error(-8, 'Target block height %d after current tip %d' % (-1, tip), node.getblockstats, height=-tip-1)\n+\n+        # Make sure not valid stats aren't allowed\n+        inv_sel_stat = 'asdfghjkl'\n+        inv_stats = [\n+            'minfee,%s' % inv_sel_stat,\n+            '%s,minfee' % inv_sel_stat,\n+            'minfee,%s,maxfee' % inv_sel_stat,\n+        ]\n+        for inv_stat in inv_stats:\n+            assert_raises_rpc_error(-8, 'Invalid selected statistic %s' % inv_sel_stat, node.getblockstats, height=1, stats=inv_stat)\n+        # Make sure we aren't always returning inv_sel_stat as the culprit stat\n+        assert_raises_rpc_error(-8, 'Invalid selected statistic aaa%s' % inv_sel_stat, node.getblockstats, height=1, stats='minfee,aaa%s' % inv_sel_stat)\n+\n+        # Make sure only the selected statistics are included\n+        stats = node.getblockstats(height=1, stats='minfee,maxfee')\n+        some_values = [",
      "path": "test/functional/getblockstats.py",
      "position": null,
      "original_position": 176,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "44dcea038b44890e5f49c71ff26cfcb4ecf0da15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"QA: Test new getblockstats RPC\"\r\n\r\nAgain, seems like it would be simpler to just check for equality:\r\n\r\n```python\r\nstats = node.getblockstats(height=1, stats='minfee,maxfee')\r\nassert_equal(set(stats), {\"minfee\", \"maxfee\"})\r\n```",
      "created_at": "2017-10-31T16:48:26Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148057310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148057310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161619680",
      "pull_request_review_id": 88938359,
      "id": 161619680,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTYxOTY4MA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work in some cases with pruning or without -txindex.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148040858,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't know. I don't mind moving to a list of strings if that's preferred. Makes sense.",
      "created_at": "2018-01-15T21:39:39Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161619680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161619680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1837,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161620060",
      "pull_request_review_id": 88938819,
      "id": 161620060,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTYyMDA2MA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148039141,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Some statistics are already more expensive to compute than others, it seems like a good feature to allow the user to optionally skip some from the beginning.",
      "created_at": "2018-01-15T21:42:16Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161620060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161620060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161620738",
      "pull_request_review_id": 88939635,
      "id": 161620738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTYyMDczOA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148035291,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it made sense to be update when the call did a loop from start height to end height, but not now that it calculates stats for a single block.\r\n",
      "created_at": "2018-01-15T21:47:01Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161620738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161620738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1604,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161639518",
      "pull_request_review_id": 88961158,
      "id": 161639518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTYzOTUxOA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148039141,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, but it is currently calculating everything regardless of the stats requested...it wasn't like that before, I should re-introduce the optimzations for the option to really make sense.\r\nEven if not all of them are expensive, perhaps one caller is only interested in one or a few stats and if the caller is going to make many calls for many heights, the performance hit of any undesired stat adds up.\r\n ",
      "created_at": "2018-01-16T00:40:27Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161639518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161639518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274008",
      "pull_request_review_id": 111864271,
      "id": 181274008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTI3NDAwOA==",
      "diff_hunk": "@@ -1612,6 +1613,304 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;\n+\n+    const bool do_calculate_sw = stats.count(\"swtxs\") != 0 || stats.count(\"swtotal_size\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0;\n+\n+    const bool loop_inputs = stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            total_size += tx_size;\n+            mintxsize = std::min(mintxsize, tx_size);\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in = GetTransactionChecked(in.prevout.hash);\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            totalfee += txfee;\n+            minfee = std::min(minfee, txfee);\n+            maxfee = std::max(maxfee, txfee);\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            minfeerate = std::min(minfeerate, feerate);\n+            maxfeerate = std::max(maxfeerate, feerate);\n+        }\n+    }\n+\n+    map_stats[\"height\"] = (int64_t)pindex->nHeight;\n+    map_stats[\"time\"] = pindex->GetBlockTime();\n+    map_stats[\"mediantime\"] = pindex->GetMedianTimePast();\n+    map_stats[\"subsidy\"] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+    map_stats[\"totalfee\"] = totalfee;\n+    map_stats[\"txs\"] = (int64_t)block.vtx.size();\n+    map_stats[\"swtxs\"] = swtxs;\n+    map_stats[\"ins\"] = inputs;\n+    map_stats[\"outs\"] = outputs;\n+    map_stats[\"utxo_increase\"] = outputs - inputs;\n+    map_stats[\"utxo_size_inc\"] = utxo_size_inc;\n+    map_stats[\"total_size\"] = total_size;\n+    map_stats[\"total_weight\"] = total_weight;\n+    map_stats[\"swtotal_size\"] = swtotal_size;\n+    map_stats[\"swtotal_weight\"] = swtotal_weight;\n+    map_stats[\"total_out\"] = total_out;\n+    map_stats[\"minfee\"] = (minfee == MAX_MONEY) ? 0 : minfee;\n+    map_stats[\"maxfee\"] = maxfee;\n+    map_stats[\"medianfee\"] = CalculateTruncatedMedian(fee_array);\n+    map_stats[\"avgfee\"] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+    map_stats[\"minfeerate\"] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+    map_stats[\"maxfeerate\"] = maxfeerate;\n+    map_stats[\"medianfeerate\"] = CalculateTruncatedMedian(feerate_array);\n+    map_stats[\"avgfeerate\"] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+    map_stats[\"mintxsize\"] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+    map_stats[\"maxtxsize\"] = maxtxsize;\n+    map_stats[\"mediantxsize\"] = CalculateTruncatedMedian(txsize_array);\n+    map_stats[\"avgtxsize\"] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+\n+    return map_stats;\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, X_fee or X_feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs.\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height + 1;\n+    }\n+    if (height < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+    }\n+    if (height > current_tip) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        UniValue stats_univalue(UniValue::VARR);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 286,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "cf6585a6ec6497467f5d26a76fc09b14897f191f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: RPC: Introduce getblockstats to plot things\r\n\r\nnit: Copy initialization works here. `UniValue stats_univalue = request.params[1].get_array();`",
      "created_at": "2018-04-13T02:47:41Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274008",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274172",
      "pull_request_review_id": 111864271,
      "id": 181274172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTI3NDE3Mg==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work in some cases with pruning or without -txindex.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148040858,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems to be updated to an array, but comment is not updated.",
      "created_at": "2018-04-13T02:49:31Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1837,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274673",
      "pull_request_review_id": 111864271,
      "id": 181274673,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTI3NDY3Mw==",
      "diff_hunk": "@@ -1612,6 +1613,304 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;\n+\n+    const bool do_calculate_sw = stats.count(\"swtxs\") != 0 || stats.count(\"swtotal_size\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0;\n+\n+    const bool loop_inputs = stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            total_size += tx_size;\n+            mintxsize = std::min(mintxsize, tx_size);\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in = GetTransactionChecked(in.prevout.hash);\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            totalfee += txfee;\n+            minfee = std::min(minfee, txfee);\n+            maxfee = std::max(maxfee, txfee);\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            minfeerate = std::min(minfeerate, feerate);\n+            maxfeerate = std::max(maxfeerate, feerate);\n+        }\n+    }\n+\n+    map_stats[\"height\"] = (int64_t)pindex->nHeight;\n+    map_stats[\"time\"] = pindex->GetBlockTime();\n+    map_stats[\"mediantime\"] = pindex->GetMedianTimePast();\n+    map_stats[\"subsidy\"] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+    map_stats[\"totalfee\"] = totalfee;\n+    map_stats[\"txs\"] = (int64_t)block.vtx.size();\n+    map_stats[\"swtxs\"] = swtxs;\n+    map_stats[\"ins\"] = inputs;\n+    map_stats[\"outs\"] = outputs;\n+    map_stats[\"utxo_increase\"] = outputs - inputs;\n+    map_stats[\"utxo_size_inc\"] = utxo_size_inc;\n+    map_stats[\"total_size\"] = total_size;\n+    map_stats[\"total_weight\"] = total_weight;\n+    map_stats[\"swtotal_size\"] = swtotal_size;\n+    map_stats[\"swtotal_weight\"] = swtotal_weight;\n+    map_stats[\"total_out\"] = total_out;\n+    map_stats[\"minfee\"] = (minfee == MAX_MONEY) ? 0 : minfee;\n+    map_stats[\"maxfee\"] = maxfee;\n+    map_stats[\"medianfee\"] = CalculateTruncatedMedian(fee_array);\n+    map_stats[\"avgfee\"] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+    map_stats[\"minfeerate\"] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+    map_stats[\"maxfeerate\"] = maxfeerate;\n+    map_stats[\"medianfeerate\"] = CalculateTruncatedMedian(feerate_array);\n+    map_stats[\"avgfeerate\"] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+    map_stats[\"mintxsize\"] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+    map_stats[\"maxtxsize\"] = maxtxsize;\n+    map_stats[\"mediantxsize\"] = CalculateTruncatedMedian(txsize_array);\n+    map_stats[\"avgtxsize\"] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+\n+    return map_stats;\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 227,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "cf6585a6ec6497467f5d26a76fc09b14897f191f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: RPC: Introduce getblockstats to plot things\r\n\r\nThe `nStart` and `nEnd` seem wrong. Should just be height now, no?",
      "created_at": "2018-04-13T02:54:43Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1831,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274966",
      "pull_request_review_id": 111864271,
      "id": 181274966,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTI3NDk2Ng==",
      "diff_hunk": "@@ -1612,6 +1613,304 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;\n+\n+    const bool do_calculate_sw = stats.count(\"swtxs\") != 0 || stats.count(\"swtotal_size\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0;\n+\n+    const bool loop_inputs = stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            total_size += tx_size;\n+            mintxsize = std::min(mintxsize, tx_size);\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in = GetTransactionChecked(in.prevout.hash);\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            totalfee += txfee;\n+            minfee = std::min(minfee, txfee);\n+            maxfee = std::max(maxfee, txfee);\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            minfeerate = std::min(minfeerate, feerate);\n+            maxfeerate = std::max(maxfeerate, feerate);\n+        }\n+    }\n+\n+    map_stats[\"height\"] = (int64_t)pindex->nHeight;\n+    map_stats[\"time\"] = pindex->GetBlockTime();\n+    map_stats[\"mediantime\"] = pindex->GetMedianTimePast();\n+    map_stats[\"subsidy\"] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+    map_stats[\"totalfee\"] = totalfee;\n+    map_stats[\"txs\"] = (int64_t)block.vtx.size();\n+    map_stats[\"swtxs\"] = swtxs;\n+    map_stats[\"ins\"] = inputs;\n+    map_stats[\"outs\"] = outputs;\n+    map_stats[\"utxo_increase\"] = outputs - inputs;\n+    map_stats[\"utxo_size_inc\"] = utxo_size_inc;\n+    map_stats[\"total_size\"] = total_size;\n+    map_stats[\"total_weight\"] = total_weight;\n+    map_stats[\"swtotal_size\"] = swtotal_size;\n+    map_stats[\"swtotal_weight\"] = swtotal_weight;\n+    map_stats[\"total_out\"] = total_out;\n+    map_stats[\"minfee\"] = (minfee == MAX_MONEY) ? 0 : minfee;\n+    map_stats[\"maxfee\"] = maxfee;\n+    map_stats[\"medianfee\"] = CalculateTruncatedMedian(fee_array);\n+    map_stats[\"avgfee\"] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+    map_stats[\"minfeerate\"] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+    map_stats[\"maxfeerate\"] = maxfeerate;\n+    map_stats[\"medianfeerate\"] = CalculateTruncatedMedian(feerate_array);\n+    map_stats[\"avgfeerate\"] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+    map_stats[\"mintxsize\"] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+    map_stats[\"maxtxsize\"] = maxtxsize;\n+    map_stats[\"mediantxsize\"] = CalculateTruncatedMedian(txsize_array);\n+    map_stats[\"avgtxsize\"] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+\n+    return map_stats;\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, X_fee or X_feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs.\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height + 1;\n+    }\n+    if (height < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+    }\n+    if (height > current_tip) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        UniValue stats_univalue(UniValue::VARR);\n+        stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            if (valid_stats.count(stat) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid requested statistic %s\", stat));\n+            }\n+            stats.insert(stat);\n+        }\n+    } else {\n+        stats = valid_stats;\n+    }\n+\n+    const CBlockIndex* pblockindex = chainActive[height];\n+    const CBlock block = GetBlockChecked(pblockindex);\n+    std::map<std::string, UniValue> map_stats = GetBlockStatsMap(block, pblockindex, stats);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::string stat : stats) {\n+        ret.push_back(Pair(stat, map_stats[stat]));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "cf6585a6ec6497467f5d26a76fc09b14897f191f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: RPC: Introduce getblockstats\r\n\r\nI got confused by the `push_back(Pair(...))` syntax. Can you just use `pushKV(stat, map_stats[stat])` which seems to be more standard?",
      "created_at": "2018-04-13T02:57:54Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181274966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1909,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181276481",
      "pull_request_review_id": 111864271,
      "id": 181276481,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTI3NjQ4MQ==",
      "diff_hunk": "@@ -1612,6 +1613,304 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;\n+\n+    const bool do_calculate_sw = stats.count(\"swtxs\") != 0 || stats.count(\"swtotal_size\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0;\n+\n+    const bool loop_inputs = stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "cf6585a6ec6497467f5d26a76fc09b14897f191f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: RPC: Introduce getblockstats\r\n\r\nI had to check the RPC help doc to see if this was a mistake. Would be helpful to leave an explicit comment: `// Don't count coinbase reward`.",
      "created_at": "2018-04-13T03:07:54Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181276481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181276481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1707,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181616478",
      "pull_request_review_id": 111864271,
      "id": 181616478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxNjQ3OA==",
      "diff_hunk": "@@ -1612,6 +1613,304 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "cf6585a6ec6497467f5d26a76fc09b14897f191f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Surfacing this error seems like the the wrong error handling strategy. In the context this is used, the transaction should never be in the mempool and it should *always* be found if the txindex is present.\r\n\r\nI think it would be better for the RPC to raise an RPC error that the txindex is required if it is not present, and an RPC error for an unexpected internal error (txindex is corrupt) otherwise.",
      "created_at": "2018-04-16T03:45:05Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181616478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181616478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617056",
      "pull_request_review_id": 111864271,
      "id": 181617056,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxNzA1Ng==",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 15,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "69dd52d83918e8f34b29e264d604d6f5b11425b5",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: Tests: Test new getblockstats RPC\r\n\r\ntypo: check_co**i**ntains",
      "created_at": "2018-04-16T03:53:01Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617123",
      "pull_request_review_id": 111864271,
      "id": 181617123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxNzEyMw==",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if check_cointains:\n+            assert val in data\n+        else:\n+            assert val not in data\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    EXPECTED_STATS = [\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    ]\n+\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 56,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "69dd52d83918e8f34b29e264d604d6f5b11425b5",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: Tests: Test new getblockstats RPC\r\n\r\nI think it's worth testing the case of no txindex.",
      "created_at": "2018-04-16T03:53:49Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617257",
      "pull_request_review_id": 111864271,
      "id": 181617257,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxNzI1Nw==",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 15,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "69dd52d83918e8f34b29e264d604d6f5b11425b5",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: Tests: Test new getblockstats RPC\r\n\r\nThe `assert_contains` function appears unused.",
      "created_at": "2018-04-16T03:55:39Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617517",
      "pull_request_review_id": 111864271,
      "id": 181617517,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxNzUxNw==",
      "diff_hunk": "@@ -70,90 +86,63 @@ def run_test(self):\n         self.sync_all()\n         node.generate(1)\n \n-        start_height = 101\n-        max_stat_pos = 2\n-        stats = [node.getblockstats(height=start_height + i) for i in range(max_stat_pos+1)]\n+        self.expected_stats = self.get_stats()\n+\n+        blocks = []\n+        tip = node.getbestblockhash()\n+        blkhash = None\n+        height = 0\n+        while tip != blkhash:\n+            blkhash = node.getblockhash(height)\n+            blocks.append(node.getblock(blkhash, 0))\n+            height += 1\n+\n+        with open(filename, \"w\") as f:\n+            f.write(\"\"\"{\\n  \"stats\": \"\"\")\n+            json.dump(self.expected_stats, f, indent=4)\n+            f.write(\"\"\",\\n  \"blocks\": \"\"\")\n+            json.dump(blocks, f)\n+            f.write(\"\"\"\\n}\\n\"\"\")\n+\n+    def load_test_data(self, filename):\n+        node = self.nodes[0]\n+\n+        with open(filename, \"r\") as f:\n+            d = json.load(f)\n+            blocks = d[\"blocks\"]\n+            self.expected_stats = d[\"stats\"]\n+            del d\n+\n+        for b in blocks:\n+            node.submitblock(b)\n+\n+    def get_stats(self):\n+        node = self.nodes[0]\n+        return [node.getblockstats(height=self.start_height + i) for i in range(self.max_stat_pos+1)]\n+\n+    def run_test(self):\n+        test_data = os.path.join(TESTSDIR, self.options.test_data)\n+        if self.options.gen_test_data:\n+            self.generate_test_data(test_data)\n+        else:\n+            self.load_test_data(test_data)\n+\n+        node = self.nodes[0]\n+        stats = self.get_stats()\n \n         # Make sure all valid statistics are included but nothing else is\n         assert_equal(set(stats[0].keys()), set(self.EXPECTED_STATS))\n \n-        print(stats)",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 91,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "bb4c8f96359ea545c433a7a6ff876a692557fe9f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: Tests: Save and load block and corresponding expected statistics\r\n\r\nIf all these test cases are getting removed anyway, I'd just drop them from the previous commit.",
      "created_at": "2018-04-16T03:58:53Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617905",
      "pull_request_review_id": 111864271,
      "id": 181617905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxNzkwNQ==",
      "diff_hunk": "@@ -70,90 +86,63 @@ def run_test(self):\n         self.sync_all()\n         node.generate(1)\n \n-        start_height = 101\n-        max_stat_pos = 2\n-        stats = [node.getblockstats(height=start_height + i) for i in range(max_stat_pos+1)]\n+        self.expected_stats = self.get_stats()\n+\n+        blocks = []\n+        tip = node.getbestblockhash()\n+        blkhash = None\n+        height = 0\n+        while tip != blkhash:\n+            blkhash = node.getblockhash(height)\n+            blocks.append(node.getblock(blkhash, 0))\n+            height += 1\n+\n+        with open(filename, \"w\") as f:\n+            f.write(\"\"\"{\\n  \"stats\": \"\"\")",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 56,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "bb4c8f96359ea545c433a7a6ff876a692557fe9f",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit: Tests: Save and load block and corresponding expected statistics\r\n\r\nInstead of hand-crafting the JSON, I think it's better to just create a dict with `stats` and `blocks` keys and json.dump that. It seems you might be doing this for better control over the indentation, but the data file added in the next commit has each stat on its own line.",
      "created_at": "2018-04-16T04:03:55Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181617905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181623181",
      "pull_request_review_id": 112280718,
      "id": 181623181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYyMzE4MQ==",
      "diff_hunk": "@@ -70,90 +86,63 @@ def run_test(self):\n         self.sync_all()\n         node.generate(1)\n \n-        start_height = 101\n-        max_stat_pos = 2\n-        stats = [node.getblockstats(height=start_height + i) for i in range(max_stat_pos+1)]\n+        self.expected_stats = self.get_stats()\n+\n+        blocks = []\n+        tip = node.getbestblockhash()\n+        blkhash = None\n+        height = 0\n+        while tip != blkhash:\n+            blkhash = node.getblockhash(height)\n+            blocks.append(node.getblock(blkhash, 0))\n+            height += 1\n+\n+        with open(filename, \"w\") as f:\n+            f.write(\"\"\"{\\n  \"stats\": \"\"\")",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 56,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "bb4c8f96359ea545c433a7a6ff876a692557fe9f",
      "in_reply_to_id": 181617905,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It puts the stats on separate lines, but all the blocks on a single line. Seemed like a good idea at the time (multiline stats hand editable, block data as a minimal blob), but doesn't make much difference.",
      "created_at": "2018-04-16T05:08:39Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181623181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181623181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182941877",
      "pull_request_review_id": 113844660,
      "id": 182941877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk0MTg3Nw==",
      "diff_hunk": "@@ -1612,6 +1613,303 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3699947a9e5a9b8bf4871298dc14e415e50174d6",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be `medianfeerate`, not `_weight`.",
      "created_at": "2018-04-20T04:10:47Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182941877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182941877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1682,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182942079",
      "pull_request_review_id": 113844660,
      "id": 182942079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk0MjA3OQ==",
      "diff_hunk": "@@ -1612,6 +1613,303 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;\n+\n+    const bool do_calculate_sw = stats.count(\"swtxs\") != 0 || stats.count(\"swtotal_size\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0;\n+\n+    const bool loop_inputs = stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3699947a9e5a9b8bf4871298dc14e415e50174d6",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`loop_inputs` is also needed when `utxo_size_inc` is requested. Setting `loop_outputs = loop_inputs || stats.count(\"total_out\")` might simplify things a little.",
      "created_at": "2018-04-20T04:12:58Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182942079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182942644",
      "pull_request_review_id": 113844660,
      "id": 182942644,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk0MjY0NA==",
      "diff_hunk": "@@ -1612,6 +1613,303 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    const bool do_calculate_size = do_mediantxsize || stats.count(\"total_size\") != 0 || stats.count(\"avgtxsize\") != 0 ||\n+        stats.count(\"mintxsize\") != 0 || stats.count(\"maxtxsize\") != 0 || stats.count(\"swtotal_size\") != 0;\n+\n+    const bool do_calculate_weight = stats.count(\"total_weight\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0 || stats.count(\"medianfeerate_weight\") != 0;\n+\n+    const bool do_calculate_sw = stats.count(\"swtxs\") != 0 || stats.count(\"swtotal_size\") != 0 ||\n+        stats.count(\"swtotal_weight\") != 0;\n+\n+    const bool loop_inputs = stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out; // Don't count coinbase reward\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            total_size += tx_size;\n+            mintxsize = std::min(mintxsize, tx_size);\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in = GetTransactionChecked(in.prevout.hash);\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            totalfee += txfee;\n+            minfee = std::min(minfee, txfee);\n+            maxfee = std::max(maxfee, txfee);\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            minfeerate = std::min(minfeerate, feerate);\n+            maxfeerate = std::max(maxfeerate, feerate);\n+        }\n+    }\n+\n+    map_stats[\"height\"] = (int64_t)pindex->nHeight;\n+    map_stats[\"time\"] = pindex->GetBlockTime();\n+    map_stats[\"mediantime\"] = pindex->GetMedianTimePast();\n+    map_stats[\"subsidy\"] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+    map_stats[\"totalfee\"] = totalfee;\n+    map_stats[\"txs\"] = (int64_t)block.vtx.size();\n+    map_stats[\"swtxs\"] = swtxs;\n+    map_stats[\"ins\"] = inputs;\n+    map_stats[\"outs\"] = outputs;\n+    map_stats[\"utxo_increase\"] = outputs - inputs;\n+    map_stats[\"utxo_size_inc\"] = utxo_size_inc;\n+    map_stats[\"total_size\"] = total_size;\n+    map_stats[\"total_weight\"] = total_weight;\n+    map_stats[\"swtotal_size\"] = swtotal_size;\n+    map_stats[\"swtotal_weight\"] = swtotal_weight;\n+    map_stats[\"total_out\"] = total_out;\n+    map_stats[\"minfee\"] = (minfee == MAX_MONEY) ? 0 : minfee;\n+    map_stats[\"maxfee\"] = maxfee;\n+    map_stats[\"medianfee\"] = CalculateTruncatedMedian(fee_array);\n+    map_stats[\"avgfee\"] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+    map_stats[\"minfeerate\"] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+    map_stats[\"maxfeerate\"] = maxfeerate;\n+    map_stats[\"medianfeerate\"] = CalculateTruncatedMedian(feerate_array);\n+    map_stats[\"avgfeerate\"] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+    map_stats[\"mintxsize\"] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+    map_stats[\"maxtxsize\"] = maxtxsize;\n+    map_stats[\"mediantxsize\"] = CalculateTruncatedMedian(txsize_array);\n+    map_stats[\"avgtxsize\"] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+\n+    return map_stats;\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, X_fee or X_feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs.\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height + 1;\n+    }\n+    if (height < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+    }\n+    if (height > current_tip) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            if (valid_stats.count(stat) == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid requested statistic %s\", stat));\n+            }\n+            stats.insert(stat);\n+        }\n+    } else {\n+        stats = valid_stats;\n+    }\n+\n+    const CBlockIndex* pblockindex = chainActive[height];\n+    const CBlock block = GetBlockChecked(pblockindex);\n+    std::map<std::string, UniValue> map_stats = GetBlockStatsMap(block, pblockindex, stats);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::string stat : stats) {\n+        ret.pushKV(stat, map_stats[stat]);\n+    }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3699947a9e5a9b8bf4871298dc14e415e50174d6",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could move the \"Invalid requested statistic\" check to here, ie:\r\n\r\n```\r\n    for (auto stat : stats) {\r\n        if (map_stats.count(stat) == 0) {\r\n            throw JSONRPCError(...);\r\n        }\r\n        ret.pushKV(stat, map_stats[stat]);\r\n   }\r\n```\r\n\r\nThen you wouldn't need `valid_stats`. Downside is the error response would only come after the valid stats were corrected.",
      "created_at": "2018-04-20T04:19:52Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942644",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182942644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1902,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182942912",
      "pull_request_review_id": 113844660,
      "id": 182942912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk0MjkxMg==",
      "diff_hunk": "@@ -1612,6 +1613,303 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3699947a9e5a9b8bf4871298dc14e415e50174d6",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These initialisations are a bit hard to follow. What do you think of:\r\n\r\n```\r\ntemplate<typename T> static inline bool SetHasKeys(const std::set<T>& set) {return false;}\r\ntemplate<typename T, typename Tk, typename... Args> static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\r\n{\r\n    return (set.count(key) != 0) || SetHasKeys(set, args...);\r\n}\r\n\r\n    const bool loop_inputs = do_medianfee || do_medianfeerate ||\r\n       SetHasKeys(stats, \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\", \"utxo_size_inc\");\r\n```\r\n\r\ninstead? Seems easier to understand to me, should be equally efficient at runtime, and the recursive template thing is in use elsewhere already.\r\n```",
      "created_at": "2018-04-20T04:22:58Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182942912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1677,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182943314",
      "pull_request_review_id": 113844660,
      "id": 182943314,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk0MzMxNA==",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):\n+    for val in values:\n+        if check_cointains:\n+            assert val in data\n+        else:\n+            assert val not in data\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+    EXPECTED_STATS = [\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    ]\n+\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(101)\n+\n+        node.sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+        self.sync_all()\n+\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        node.sendtoaddress(address=node.getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[1].sendtoaddress(address=node.getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        node.generate(1)\n+\n+        start_height = 101\n+        max_stat_pos = 2\n+        stats = [node.getblockstats(height=start_height + i) for i in range(max_stat_pos+1)]\n+\n+        # Make sure all valid statistics are included but nothing else is\n+        assert_equal(set(stats[0].keys()), set(self.EXPECTED_STATS))\n+\n+        print(stats)\n+        assert_equal(stats[0]['height'], start_height)\n+        assert_equal(stats[max_stat_pos]['height'], start_height + max_stat_pos)\n+\n+        assert_equal(stats[0]['txs'], 1)\n+        assert_equal(stats[0]['swtxs'], 0)\n+        assert_equal(stats[0]['ins'], 0)\n+        assert_equal(stats[0]['outs'], 2)\n+        assert_equal(stats[0]['totalfee'], 0)\n+        assert_equal(stats[0]['utxo_increase'], 2)\n+        assert_equal(stats[0]['utxo_size_inc'], 173)\n+        assert_equal(stats[0]['total_size'], 0)\n+        assert_equal(stats[0]['total_weight'], 0)\n+        assert_equal(stats[0]['swtotal_size'], 0)\n+        assert_equal(stats[0]['swtotal_weight'], 0)\n+        assert_equal(stats[0]['total_out'], 0)\n+        assert_equal(stats[0]['minfee'], 0)\n+        assert_equal(stats[0]['maxfee'], 0)\n+        assert_equal(stats[0]['medianfee'], 0)\n+        assert_equal(stats[0]['avgfee'], 0)\n+        assert_equal(stats[0]['minfeerate'], 0)\n+        assert_equal(stats[0]['maxfeerate'], 0)\n+        assert_equal(stats[0]['medianfeerate'], 0)\n+        assert_equal(stats[0]['avgfeerate'], 0)\n+        assert_equal(stats[0]['mintxsize'], 0)\n+        assert_equal(stats[0]['maxtxsize'], 0)\n+        assert_equal(stats[0]['mediantxsize'], 0)\n+        assert_equal(stats[0]['avgtxsize'], 0)\n+\n+        assert_equal(stats[1]['txs'], 2)\n+        assert_equal(stats[1]['swtxs'], 0)\n+        assert_equal(stats[1]['ins'], 1)\n+        assert_equal(stats[1]['outs'], 4)\n+        assert_equal(stats[1]['totalfee'], 3760)\n+        assert_equal(stats[1]['utxo_increase'], 3)\n+        assert_equal(stats[1]['utxo_size_inc'], 234)\n+        # assert_equal(stats[1]['total_size'], 188)\n+        # assert_equal(stats[1]['total_weight'], 752)\n+        assert_equal(stats[1]['total_out'], 4999996240)\n+        assert_equal(stats[1]['minfee'], 3760)\n+        assert_equal(stats[1]['maxfee'], 3760)\n+        assert_equal(stats[1]['medianfee'], 3760)\n+        assert_equal(stats[1]['avgfee'], 3760)\n+        assert_equal(stats[1]['minfeerate'], 20)\n+        assert_equal(stats[1]['maxfeerate'], 20)\n+        assert_equal(stats[1]['medianfeerate'], 20)\n+        assert_equal(stats[1]['avgfeerate'], 20)\n+        # assert_equal(stats[1]['mintxsize'], 192)\n+        # assert_equal(stats[1]['maxtxsize'], 192)\n+        # assert_equal(stats[1]['mediantxsize'], 192)\n+        # assert_equal(stats[1]['avgtxsize'], 192)\n+\n+        assert_equal(stats[max_stat_pos]['txs'], 4)\n+        assert_equal(stats[max_stat_pos]['swtxs'], 2)\n+        assert_equal(stats[max_stat_pos]['ins'], 3)\n+        assert_equal(stats[max_stat_pos]['outs'], 8)\n+        assert_equal(stats[max_stat_pos]['totalfee'], 56880)\n+        assert_equal(stats[max_stat_pos]['utxo_increase'], 5)\n+        assert_equal(stats[max_stat_pos]['utxo_size_inc'], 380)\n+        # assert_equal(stats[max_stat_pos]['total_size'], 643)\n+        # assert_equal(stats[max_stat_pos]['total_weight'], 2572)\n+        assert_equal(stats[max_stat_pos]['total_out'], 9999939360)\n+        assert_equal(stats[max_stat_pos]['minfee'], 3320)\n+        assert_equal(stats[max_stat_pos]['maxfee'], 49800)\n+        assert_equal(stats[max_stat_pos]['medianfee'], 3760)\n+        assert_equal(stats[max_stat_pos]['avgfee'], 18960)\n+        assert_equal(stats[max_stat_pos]['minfeerate'], 20)\n+        # assert_equal(stats[max_stat_pos]['maxfeerate'], 300)\n+        assert_equal(stats[max_stat_pos]['medianfeerate'], 20)\n+        assert_equal(stats[max_stat_pos]['avgfeerate'], 109)\n+        # assert_equal(stats[max_stat_pos]['mintxsize'], 192)\n+        # assert_equal(stats[max_stat_pos]['maxtxsize'], 226)\n+        # assert_equal(stats[max_stat_pos]['mediantxsize'], 225)\n+        # assert_equal(stats[max_stat_pos]['avgtxsize'], 214)\n+\n+        # Test invalid parameters raise the proper json exceptions\n+        tip = start_height + max_stat_pos\n+        assert_raises_rpc_error(-8, 'Target block height %d after current tip %d' % (tip+1, tip), node.getblockstats, height=tip+1)\n+        assert_raises_rpc_error(-8, 'Target block height %d is negative' % (-1), node.getblockstats, height=-tip-2)\n+\n+        # Make sure not valid stats aren't allowed\n+        inv_sel_stat = 'asdfghjkl'\n+        inv_stats = [\n+            [inv_sel_stat],\n+            ['minfee' , inv_sel_stat],\n+            [inv_sel_stat, 'minfee'],\n+            ['minfee', inv_sel_stat, 'maxfee'],\n+        ]\n+        for inv_stat in inv_stats:\n+            assert_raises_rpc_error(-8, 'Invalid requested statistic %s' % inv_sel_stat, node.getblockstats, height=1, stats=inv_stat)\n+        # Make sure we aren't always returning inv_sel_stat as the culprit stat\n+        assert_raises_rpc_error(-8, 'Invalid requested statistic aaa%s' % inv_sel_stat, node.getblockstats, height=1, stats=['minfee' , 'aaa%s' % inv_sel_stat])\n+\n+        # Make sure only the selected statistics are included\n+        some_stats = {'minfee', 'maxfee'}\n+        stats = node.getblockstats(height=1, stats=list(some_stats))\n+        # Make sure only valid stats that have been requested appear\n+        assert_equal(set(stats.keys()), some_stats)\n+",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 178,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "05eddd0361bff229b8bae68e3eb129ea3967e93a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest adding:\r\n\r\n```\r\n       # Make sure each stat can be queried on its own\r\n       for stat in self.EXPECTED_STATS:\r\n           for i in range(self.max_stat_pos+1):\r\n               result = node.getblockstats(height=self.start_height + i, stats=[stat])\r\n               assert_equal(list(result.keys()), [stat])\r\n               if result[stat] != self.expected_stats[i][stat]:\r\n                   self.log.info(\"result[%s] (%d) failed, %r != %r\" % (stat, i, result[stat], self.expected_stats[i][stat]))\r\n               assert_equal(result[stat], self.expected_stats[i][stat])\r\n```\r\n\r\nto ensure that each statistic can be queried on its own (in particular ensuring the GetBlockStatsMap() doesn't optimise out collecting the data needed for each stat). The above should automatically catch problems if new stats are introduced since it's just re-using the results from the all-the-stats check.",
      "created_at": "2018-04-20T04:27:27Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182943314",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182943314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183131662",
      "pull_request_review_id": 114078077,
      "id": 183131662,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzEzMTY2Mg==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {\n+        \"height\",\n+        \"time\",\n+        \"mediantime\",\n+        \"txs\",\n+        \"swtxs\",\n+        \"ins\",\n+        \"outs\",\n+        \"subsidy\",\n+        \"totalfee\",\n+        \"utxo_increase\",\n+        \"utxo_size_inc\",\n+        \"total_size\",\n+        \"total_weight\",\n+        \"swtotal_size\",\n+        \"swtotal_weight\",\n+        \"total_out\",\n+        \"minfee\",\n+        \"maxfee\",\n+        \"medianfee\",\n+        \"avgfee\",\n+        \"minfeerate\",\n+        \"maxfeerate\",\n+        \"medianfeerate\",\n+        \"avgfeerate\",\n+        \"mintxsize\",\n+        \"maxtxsize\",\n+        \"mediantxsize\",\n+        \"avgtxsize\",\n+    };\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( nStart nEnd stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work in some cases with pruning or without -txindex.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (string,  optional) Values to plot (comma separated), default(all): \" + boost::join(valid_stats, \",\") +",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148040858,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, github hid this reminder about the comment from me, fixing.",
      "created_at": "2018-04-20T18:17:11Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183131662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183131662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1837,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183145068",
      "pull_request_review_id": 114094825,
      "id": 183145068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzE0NTA2OA==",
      "diff_hunk": "@@ -1612,6 +1613,303 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    std::map<std::string, UniValue> map_stats;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+\n+    const bool loop_outputs = stats.count(\"total_out\") != 0 || stats.count(\"utxo_size_inc\") != 0 ||\n+        stats.count(\"totalfee\") != 0 || stats.count(\"avgfee\") != 0 || stats.count(\"avgfeerate\") != 0 ||\n+        do_medianfee || stats.count(\"minfee\") != 0 || stats.count(\"maxfee\") != 0 ||\n+        do_medianfeerate || stats.count(\"minfeerate\") != 0 || stats.count(\"maxfeerate\") != 0;\n+",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3699947a9e5a9b8bf4871298dc14e415e50174d6",
      "in_reply_to_id": 182942912,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you know if fancy templating stuff like this will slow down compilation times noticeably? I'd kind of prefer a normal iterative runtime approach for simplicity, especially given that it would be far from the most expensive part of this API call.",
      "created_at": "2018-04-20T19:13:31Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183145068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183145068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1677,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183152048",
      "pull_request_review_id": 114103973,
      "id": 183152048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzE1MjA0OA==",
      "diff_hunk": "@@ -1570,6 +1571,286 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static void RpcGetTx(const uint256& hash, CTransactionRef& tx_out)\n+{\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    } if (size == 1) {\n+        return scores[0];\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static void UpdateBlockStats(const CBlockIndex* pindex, std::set<std::string>& stats, std::map<std::string, UniValue>& map_stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    CBlock block;\n+    ReadBlockCheckPruned(block, pindex);\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+        CAmount tx_total_out = 0;\n+        for (const CTxOut& out : tx->vout) {\n+            utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            tx_total_out += out.nValue;\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+        total_out += tx_total_out;\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        int64_t tx_size = tx->GetTotalSize();\n+        txsize_array.push_back(tx_size);\n+        total_size += tx_size;\n+        mintxsize = std::min(mintxsize, tx_size);\n+        maxtxsize = std::max(maxtxsize, tx_size);\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+\n+        if (tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        CAmount tx_total_in = 0;\n+        for (const CTxIn& in : tx->vin) {\n+            CTransactionRef tx_in;\n+            RpcGetTx(in.prevout.hash, tx_in);\n+            CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+            tx_total_in += prevoutput.nValue;\n+            utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+        }\n+        CAmount txfee = tx_total_in - tx_total_out;\n+        assert(MoneyRange(txfee));\n+        fee_array.push_back(txfee);\n+        totalfee += txfee;\n+        minfee = std::min(minfee, txfee);\n+        maxfee = std::max(maxfee, txfee);\n+\n+        // New feerate uses satoshis per virtual byte instead of per serialized byte\n+        CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        feerate_array.push_back(feerate);\n+\n+        minfeerate = std::min(minfeerate, feerate);\n+        maxfeerate = std::max(maxfeerate, feerate);\n+    }\n+\n+    for (const std::string& stat : stats) {\n+        // Update map_stats\n+        if (stat == \"height\") {\n+            map_stats[stat] = (int64_t)pindex->nHeight;\n+        } else if (stat == \"time\") {\n+            map_stats[stat] = pindex->GetBlockTime();\n+        } else if (stat == \"mediantime\") {\n+            map_stats[stat] = pindex->GetMedianTimePast();\n+        } else if (stat == \"subsidy\") {\n+            map_stats[stat] = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+        } else if (stat == \"totalfee\") {\n+            map_stats[stat] = totalfee;\n+        } else if (stat == \"txs\") {\n+            map_stats[stat] = (int64_t)block.vtx.size();\n+        } else if (stat == \"swtxs\") {\n+            map_stats[stat] = swtxs;\n+        } else if (stat == \"ins\") {\n+            map_stats[stat] = inputs;\n+        } else if (stat == \"outs\") {\n+            map_stats[stat] = outputs;\n+        } else if (stat == \"utxo_increase\") {\n+            map_stats[stat] = outputs - inputs;\n+        } else if (stat == \"utxo_size_inc\") {\n+            map_stats[stat] = utxo_size_inc;\n+        } else if (stat == \"total_size\") {\n+            map_stats[stat] = total_size;\n+        } else if (stat == \"total_weight\") {\n+            map_stats[stat] = total_weight;\n+        } else if (stat == \"swtotal_size\") {\n+            map_stats[stat] = swtotal_size;\n+        } else if (stat == \"swtotal_weight\") {\n+            map_stats[stat] = swtotal_weight;\n+        } else if (stat == \"total_out\") {\n+            map_stats[stat] = total_out;\n+        } else if (stat == \"minfee\") {\n+            map_stats[stat] = (minfee == MAX_MONEY) ? 0 : minfee;\n+        } else if (stat == \"maxfee\") {\n+            map_stats[stat] = maxfee;\n+        } else if (stat == \"medianfee\") {\n+            map_stats[stat] = CalculateTruncatedMedian(fee_array);\n+        } else if (stat == \"avgfee\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0;\n+        } else if (stat == \"minfeerate\") {\n+            map_stats[stat] = (minfeerate == MAX_MONEY) ? 0 : minfeerate;\n+        } else if (stat == \"maxfeerate\") {\n+            map_stats[stat] = maxfeerate;\n+        } else if (stat == \"medianfeerate\") {\n+            map_stats[stat] = CalculateTruncatedMedian(feerate_array);\n+        } else if (stat == \"avgfeerate\") {\n+            map_stats[stat] = CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+        } else if (stat == \"mintxsize\") {\n+            map_stats[stat] = mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize;\n+        } else if (stat == \"maxtxsize\") {\n+            map_stats[stat] = maxtxsize;\n+        } else if (stat == \"mediantxsize\") {\n+            map_stats[stat] = CalculateTruncatedMedian(txsize_array);\n+        } else if (stat == \"avgtxsize\") {\n+            map_stats[stat] = (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0;\n+        }\n+    }\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    std::set<std::string> valid_stats = {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f55badc57abf026da0c57e8cfa2558ca7f5b2bd8",
      "in_reply_to_id": 148039141,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I ended up taking the code suggestion, even though I'm not eliminating the \"stats\" argument.\r\nIt is still much closer to what you wanted now.",
      "created_at": "2018-04-20T19:46:13Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183152048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183152048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183203177",
      "pull_request_review_id": 114165877,
      "id": 183203177,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwMzE3Nw==",
      "diff_hunk": "@@ -1673,16 +1673,27 @@ static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, con\n     int64_t maxtxsize = 0;\n     std::vector<int64_t> txsize_array;\n \n-    const bool do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n-    const bool do_medianfee = stats.count(\"medianfee\") != 0;\n-    const bool do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n-    const bool loop_inputs = do_medianfee || do_medianfeerate ||\n-        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n-    const bool loop_outputs = loop_inputs || stats.count(\"total_out\");\n-    const bool do_calculate_size = do_mediantxsize ||\n-        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n-    const bool do_calculate_weight = SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n-    const bool do_calculate_sw = SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+    bool do_mediantxsize = true;\n+    bool do_medianfee = true;\n+    bool do_medianfeerate = true;\n+    bool loop_inputs = true;\n+    bool loop_outputs = true;\n+    bool do_calculate_size = true;\n+    bool do_calculate_weight = true;\n+    bool do_calculate_sw = true;\n+    // Calculate everything if nothing selected (default)\n+    if (stats.size() > 0) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f80bb3cf6d6c727870dd8e7954d15285876a12a8",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could do:\r\n\r\n```\r\n    const bool do_all = stats.size() > 0;\r\n    const bool do_mediantxsize = do_all || SetHasKeys(stats, \"mediantxsize);\r\n    const bool do_medianfee = do_all || ...;\r\n    ...\r\n```",
      "created_at": "2018-04-21T07:45:06Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183203177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183203177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1685,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183203448",
      "pull_request_review_id": 114166121,
      "id": 183203448,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwMzQ0OA==",
      "diff_hunk": "@@ -1603,6 +1613,287 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    bool do_mediantxsize = true;\n+    bool do_medianfee = true;\n+    bool do_medianfeerate = true;\n+    bool loop_inputs = true;\n+    bool loop_outputs = true;\n+    bool do_calculate_size = true;\n+    bool do_calculate_weight = true;\n+    bool do_calculate_sw = true;\n+    // Calculate everything if nothing selected (default)\n+    if (stats.size() > 0) {\n+        do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+        do_medianfee = stats.count(\"medianfee\") != 0;\n+        do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+        loop_inputs = do_medianfee || do_medianfeerate ||\n+            SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+        loop_outputs = loop_inputs || stats.count(\"total_out\");\n+        do_calculate_size = do_mediantxsize ||\n+            SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+        do_calculate_weight = SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+        do_calculate_sw = SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+    }\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out; // Don't count coinbase reward\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            total_size += tx_size;\n+            mintxsize = std::min(mintxsize, tx_size);\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in = GetTransactionChecked(in.prevout.hash);\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            totalfee += txfee;\n+            minfee = std::min(minfee, txfee);\n+            maxfee = std::max(maxfee, txfee);\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            minfeerate = std::min(minfeerate, feerate);\n+            maxfeerate = std::max(maxfeerate, feerate);\n+        }\n+    }\n+\n+    return {\n+        {\"height\", (int64_t)pindex->nHeight},\n+        {\"time\", pindex->GetBlockTime()},\n+        {\"mediantime\", pindex->GetMedianTimePast()},\n+        {\"subsidy\", GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())},\n+        {\"totalfee\", totalfee},\n+        {\"txs\", (int64_t)block.vtx.size()},\n+        {\"swtxs\", swtxs},\n+        {\"ins\", inputs},\n+        {\"outs\", outputs},\n+        {\"utxo_increase\", outputs - inputs},\n+        {\"utxo_size_inc\", utxo_size_inc},\n+        {\"total_size\", total_size},\n+        {\"total_weight\", total_weight},\n+        {\"swtotal_size\", swtotal_size},\n+        {\"swtotal_weight\", swtotal_weight},\n+        {\"total_out\", total_out},\n+        {\"minfee\", (minfee == MAX_MONEY) ? 0 : minfee},\n+        {\"maxfee\", maxfee},\n+        {\"medianfee\", CalculateTruncatedMedian(fee_array)},\n+        {\"avgfee\", (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0},\n+        {\"minfeerate\", (minfeerate == MAX_MONEY) ? 0 : minfeerate},\n+        {\"maxfeerate\", maxfeerate},\n+        {\"medianfeerate\", CalculateTruncatedMedian(feerate_array)},\n+        {\"avgfeerate\", CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR)},\n+        {\"mintxsize\", mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize},\n+        {\"maxtxsize\", maxtxsize},\n+        {\"mediantxsize\", CalculateTruncatedMedian(txsize_array)},\n+        {\"avgtxsize\", (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0}\n+    };\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, X_fee or X_feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic.\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic.\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs.\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height + 1;\n+    }\n+    if (height < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 303,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3402b0dc83e37fd3eac97efc49b857b13aabc2e0",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's two tests for `(height < 0)` here, the first of which should be setting height to a positive value. Seems like a rebasing error?",
      "created_at": "2018-04-21T07:55:35Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183203448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183203448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1862,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183211877",
      "pull_request_review_id": 114175172,
      "id": 183211877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTg3Nw==",
      "diff_hunk": "@@ -1603,6 +1613,287 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CTransactionRef GetTransactionChecked(const uint256& hash)\n+{\n+    CTransactionRef tx_out;\n+    uint256 hashBlock;\n+    if (!GetTransaction(hash, tx_out, Params().GetConsensus(), hashBlock, false)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+          : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+    }\n+    return tx_out;\n+}\n+\n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static const size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static std::map<std::string, UniValue> GetBlockStatsMap(const CBlock& block, const CBlockIndex* pindex, const std::set<std::string>& stats)\n+{\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount maxfee = 0;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount maxfeerate = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t maxtxsize = 0;\n+    std::vector<int64_t> txsize_array;\n+\n+    bool do_mediantxsize = true;\n+    bool do_medianfee = true;\n+    bool do_medianfeerate = true;\n+    bool loop_inputs = true;\n+    bool loop_outputs = true;\n+    bool do_calculate_size = true;\n+    bool do_calculate_weight = true;\n+    bool do_calculate_sw = true;\n+    // Calculate everything if nothing selected (default)\n+    if (stats.size() > 0) {\n+        do_mediantxsize = stats.count(\"mediantxsize\") != 0;\n+        do_medianfee = stats.count(\"medianfee\") != 0;\n+        do_medianfeerate = stats.count(\"medianfeerate\") != 0;\n+        loop_inputs = do_medianfee || do_medianfeerate ||\n+            SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+        loop_outputs = loop_inputs || stats.count(\"total_out\");\n+        do_calculate_size = do_mediantxsize ||\n+            SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+        do_calculate_weight = SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+        do_calculate_sw = SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+    }\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                tx_total_out += out.nValue;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        total_out += tx_total_out; // Don't count coinbase reward\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            total_size += tx_size;\n+            mintxsize = std::min(mintxsize, tx_size);\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in = GetTransactionChecked(in.prevout.hash);\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            totalfee += txfee;\n+            minfee = std::min(minfee, txfee);\n+            maxfee = std::max(maxfee, txfee);\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            minfeerate = std::min(minfeerate, feerate);\n+            maxfeerate = std::max(maxfeerate, feerate);\n+        }\n+    }\n+\n+    return {\n+        {\"height\", (int64_t)pindex->nHeight},\n+        {\"time\", pindex->GetBlockTime()},\n+        {\"mediantime\", pindex->GetMedianTimePast()},\n+        {\"subsidy\", GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())},\n+        {\"totalfee\", totalfee},\n+        {\"txs\", (int64_t)block.vtx.size()},\n+        {\"swtxs\", swtxs},\n+        {\"ins\", inputs},\n+        {\"outs\", outputs},\n+        {\"utxo_increase\", outputs - inputs},\n+        {\"utxo_size_inc\", utxo_size_inc},\n+        {\"total_size\", total_size},\n+        {\"total_weight\", total_weight},\n+        {\"swtotal_size\", swtotal_size},\n+        {\"swtotal_weight\", swtotal_weight},\n+        {\"total_out\", total_out},\n+        {\"minfee\", (minfee == MAX_MONEY) ? 0 : minfee},\n+        {\"maxfee\", maxfee},\n+        {\"medianfee\", CalculateTruncatedMedian(fee_array)},\n+        {\"avgfee\", (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0},\n+        {\"minfeerate\", (minfeerate == MAX_MONEY) ? 0 : minfeerate},\n+        {\"maxfeerate\", maxfeerate},\n+        {\"medianfeerate\", CalculateTruncatedMedian(feerate_array)},\n+        {\"avgfeerate\", CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR)},\n+        {\"mintxsize\", mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize},\n+        {\"maxtxsize\", maxtxsize},\n+        {\"mediantxsize\", CalculateTruncatedMedian(txsize_array)},\n+        {\"avgtxsize\", (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0}\n+    };\n+}\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, X_fee or X_feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"height\\\"     (numeric, required) The height of the target block.Negative values count back from the current tip.\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic.\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic.\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block.\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time.\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past.\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase).\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions.\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase).\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs.\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy.\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total.\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs.\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar).\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions.\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions.\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4).\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee]).\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block.\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block.\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block.\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block.\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte).\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size.\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size.\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size.\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int height = request.params[0].get_int();\n+    int current_tip = chainActive.Height();\n+    if (height < 0) {\n+        height = current_tip + height + 1;\n+    }\n+    if (height < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 303,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "3402b0dc83e37fd3eac97efc49b857b13aabc2e0",
      "in_reply_to_id": 183203448,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is a rest from when moving from a range to a single height, but yeah, thanks.",
      "created_at": "2018-04-21T15:06:46Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183211877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183211877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1862,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183823240",
      "pull_request_review_id": 114895489,
      "id": 183823240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzgyMzI0MA==",
      "diff_hunk": "@@ -1612,6 +1613,274 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!fTxIndex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            maxfeerate = std::max(maxfeerate, feerate);\n+            minfeerate = std::min(minfeerate, feerate);\n+        }\n+    }\n+\n+    UniValue ret_all(UniValue::VOBJ);\n+    ret_all.pushKV(\"avgfee\", (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+    ret_all.pushKV(\"avgfeerate\", CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+    ret_all.pushKV(\"avgtxsize\", (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0);\n+    ret_all.pushKV(\"blockhash\", pindex->GetBlockHash().GetHex());\n+    ret_all.pushKV(\"height\", (int64_t)pindex->nHeight);\n+    ret_all.pushKV(\"ins\", inputs);\n+    ret_all.pushKV(\"maxfee\", maxfee);\n+    ret_all.pushKV(\"maxfeerate\", maxfeerate);\n+    ret_all.pushKV(\"maxtxsize\", maxtxsize);\n+    ret_all.pushKV(\"medianfee\", CalculateTruncatedMedian(fee_array));\n+    ret_all.pushKV(\"medianfeerate\", CalculateTruncatedMedian(feerate_array));\n+    ret_all.pushKV(\"mediantime\", pindex->GetMedianTimePast());\n+    ret_all.pushKV(\"mediantxsize\", CalculateTruncatedMedian(txsize_array));\n+    ret_all.pushKV(\"minfee\", (minfee == MAX_MONEY) ? 0 : minfee);\n+    ret_all.pushKV(\"minfeerate\", (minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+    ret_all.pushKV(\"mintxsize\", mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize);\n+    ret_all.pushKV(\"outs\", outputs);\n+    ret_all.pushKV(\"subsidy\", GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+    ret_all.pushKV(\"swtotal_size\", swtotal_size);\n+    ret_all.pushKV(\"swtotal_weight\", swtotal_weight);\n+    ret_all.pushKV(\"swtxs\", swtxs);\n+    ret_all.pushKV(\"time\", pindex->GetBlockTime());\n+    ret_all.pushKV(\"total_out\", total_out);\n+    ret_all.pushKV(\"total_size\", total_size);\n+    ret_all.pushKV(\"total_weight\", total_weight);\n+    ret_all.pushKV(\"totalfee\", totalfee);\n+    ret_all.pushKV(\"txs\", (int64_t)block.vtx.size());\n+    ret_all.pushKV(\"utxo_increase\", outputs - inputs);\n+    ret_all.pushKV(\"utxo_size_inc\", utxo_size_inc);\n+\n+    if (do_all) {\n+        return ret_all;\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::string stat : stats) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "e73e374b23e7765f10d1e0ad087dc270549a53ea",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`for (const std::string& stat : stats) {`",
      "created_at": "2018-04-24T17:48:06Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183823240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183823240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183824637",
      "pull_request_review_id": 114895489,
      "id": 183824637,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzgyNDYzNw==",
      "diff_hunk": "@@ -1612,6 +1613,274 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!fTxIndex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);\n+            if (do_medianfeerate) {\n+                feerate_array.push_back(feerate);\n+            }\n+            maxfeerate = std::max(maxfeerate, feerate);\n+            minfeerate = std::min(minfeerate, feerate);\n+        }\n+    }\n+\n+    UniValue ret_all(UniValue::VOBJ);\n+    ret_all.pushKV(\"avgfee\", (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n+    ret_all.pushKV(\"avgfeerate\", CFeeRate(totalfee, total_weight).GetTruncatedFee(WITNESS_SCALE_FACTOR));\n+    ret_all.pushKV(\"avgtxsize\", (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0);\n+    ret_all.pushKV(\"blockhash\", pindex->GetBlockHash().GetHex());\n+    ret_all.pushKV(\"height\", (int64_t)pindex->nHeight);\n+    ret_all.pushKV(\"ins\", inputs);\n+    ret_all.pushKV(\"maxfee\", maxfee);\n+    ret_all.pushKV(\"maxfeerate\", maxfeerate);\n+    ret_all.pushKV(\"maxtxsize\", maxtxsize);\n+    ret_all.pushKV(\"medianfee\", CalculateTruncatedMedian(fee_array));\n+    ret_all.pushKV(\"medianfeerate\", CalculateTruncatedMedian(feerate_array));\n+    ret_all.pushKV(\"mediantime\", pindex->GetMedianTimePast());\n+    ret_all.pushKV(\"mediantxsize\", CalculateTruncatedMedian(txsize_array));\n+    ret_all.pushKV(\"minfee\", (minfee == MAX_MONEY) ? 0 : minfee);\n+    ret_all.pushKV(\"minfeerate\", (minfeerate == MAX_MONEY) ? 0 : minfeerate);\n+    ret_all.pushKV(\"mintxsize\", mintxsize == MAX_BLOCK_SERIALIZED_SIZE ? 0 : mintxsize);\n+    ret_all.pushKV(\"outs\", outputs);\n+    ret_all.pushKV(\"subsidy\", GetBlockSubsidy(pindex->nHeight, Params().GetConsensus()));\n+    ret_all.pushKV(\"swtotal_size\", swtotal_size);\n+    ret_all.pushKV(\"swtotal_weight\", swtotal_weight);\n+    ret_all.pushKV(\"swtxs\", swtxs);\n+    ret_all.pushKV(\"time\", pindex->GetBlockTime());\n+    ret_all.pushKV(\"total_out\", total_out);\n+    ret_all.pushKV(\"total_size\", total_size);\n+    ret_all.pushKV(\"total_weight\", total_weight);\n+    ret_all.pushKV(\"totalfee\", totalfee);\n+    ret_all.pushKV(\"txs\", (int64_t)block.vtx.size());\n+    ret_all.pushKV(\"utxo_increase\", outputs - inputs);\n+    ret_all.pushKV(\"utxo_size_inc\", utxo_size_inc);\n+\n+    if (do_all) {\n+        return ret_all;\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::string stat : stats) {\n+        if (ret_all[stat].isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid selected statistic %s\", stat));\n+        }\n+        ret.pushKV(stat, ret_all[stat]);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 275,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "e73e374b23e7765f10d1e0ad087dc270549a53ea",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could avoid 2nd lookup:\r\n```cpp\r\nconst UniValue& value = ret_all[stat];\r\nif (value.isNull()) {\r\n    throw ...;\r\n}\r\nret.pushKV(stat, value);",
      "created_at": "2018-04-24T17:52:16Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183824637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183824637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183826618",
      "pull_request_review_id": 114895489,
      "id": 183826618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzgyNjYxOA==",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def assert_contains(data, values, check_cointains=True):",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 15,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "69dd52d83918e8f34b29e264d604d6f5b11425b5",
      "in_reply_to_id": 181617257,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ping.",
      "created_at": "2018-04-24T17:58:55Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183826618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183826618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183860805",
      "pull_request_review_id": 114941850,
      "id": 183860805,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mzg2MDgwNQ==",
      "diff_hunk": "@@ -122,6 +122,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importmulti\", 1, \"options\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n+    { \"getblockstats\", 0, \"hash_or_height\" },",
      "path": "src/rpc/client.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "ddfe0918b0d65881c897e57e83505f7054fcbfe2",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also need to add argument 1 for stats to be parsed as an array.",
      "created_at": "2018-04-24T19:59:19Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183860805",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183860805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183862179",
      "pull_request_review_id": 114941850,
      "id": 183862179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mzg2MjE3OQ==",
      "diff_hunk": "@@ -1612,6 +1613,274 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 \\\"minfeerate,avgfeerate\\\"\")",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "e73e374b23e7765f10d1e0ad087dc270549a53ea",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CLI help doc is incorrect. It should be `\"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\"` (once stats is added in client.cpp).",
      "created_at": "2018-04-24T20:03:52Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183862179",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183862179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1692,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183897081",
      "pull_request_review_id": 114985565,
      "id": 183897081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mzg5NzA4MQ==",
      "diff_hunk": "@@ -122,6 +122,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importmulti\", 1, \"options\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n+    { \"getblockstats\", 0, \"hash_or_height\" },",
      "path": "src/rpc/client.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "ddfe0918b0d65881c897e57e83505f7054fcbfe2",
      "in_reply_to_id": 183860805,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mhmm, yeah. Why is this working without it?",
      "created_at": "2018-04-24T22:18:11Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183897081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183897081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183897785",
      "pull_request_review_id": 114986323,
      "id": 183897785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mzg5Nzc4NQ==",
      "diff_hunk": "@@ -122,6 +122,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importmulti\", 1, \"options\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n+    { \"getblockstats\", 0, \"hash_or_height\" },",
      "path": "src/rpc/client.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "ddfe0918b0d65881c897e57e83505f7054fcbfe2",
      "in_reply_to_id": 183860805,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Only relevant for bitcoin-cli client.",
      "created_at": "2018-04-24T22:21:48Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183897785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183897785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184835724",
      "pull_request_review_id": 116116976,
      "id": 184835724,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDgzNTcyNA==",
      "diff_hunk": "@@ -1614,6 +1625,275 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = CFeeRate(txfee, weight).GetTruncatedFee(WITNESS_SCALE_FACTOR);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 279,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "866c1c886106a8f0757ae688b816e3824c2f52f5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find this incredibly hard to read. Why not just use floating point and calculate it all manually? Then you wouldn't have to work around rounding issues (and wouldnt have the rounding issues you see here where things are rounded to the nearest 1).",
      "created_at": "2018-04-28T01:49:17Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r184835724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184835724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1842,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184920965",
      "pull_request_review_id": 116208294,
      "id": 184920965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDkyMDk2NQ==",
      "diff_hunk": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+import json\n+import os\n+import time\n+\n+TESTSDIR = os.path.dirname(os.path.realpath(__file__))\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+\n+    start_height = 101\n+    max_stat_pos = 2\n+    STATS_NEED_TXINDEX = [\n+        'avgfee',\n+        'avgfeerate',\n+        'maxfee',\n+        'maxfeerate',\n+        'medianfee',\n+        'medianfeerate',\n+        'minfee',\n+        'minfeerate',\n+        'totalfee',\n+        'utxo_size_inc',\n+    ]\n+\n+    def add_options(self, parser):\n+        parser.add_option('--gen-test-data', dest='gen_test_data',\n+                          default=False, action='store_true',\n+                          help='Generate test data')\n+        parser.add_option('--test-data', dest='test_data',\n+                          default='data/rpc_getblockstats.json',\n+                          action='store', metavar='FILE',\n+                          help='Test data file')\n+\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def get_stats(self):\n+        return [self.nodes[0].getblockstats(hash_or_height=self.start_height + i) for i in range(self.max_stat_pos+1)]\n+\n+    def generate_test_data(self, filename):\n+        self.nodes[0].generate(101)\n+\n+        self.nodes[0].sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=False)\n+        self.nodes[1].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        self.expected_stats = self.get_stats()\n+\n+        blocks = []\n+        tip = self.nodes[0].getbestblockhash()\n+        blockhash = None\n+        height = 0\n+        while tip != blockhash:\n+            blockhash = self.nodes[0].getblockhash(height)\n+            blocks.append(self.nodes[0].getblock(blockhash, 0))\n+            height += 1\n+\n+        to_dump = {\n+            'blocks': blocks,\n+            'mocktime': int(time.time()),\n+            'stats': self.expected_stats,\n+        }\n+        with open(filename, 'w') as f:\n+            json.dump(to_dump, f, sort_keys=True, indent=2)\n+\n+    def load_test_data(self, filename):\n+        with open(filename, 'r') as f:\n+            d = json.load(f)\n+            blocks = d['blocks']\n+            mocktime = d['mocktime']\n+            self.expected_stats = d['stats']\n+\n+        for b in blocks:\n+            self.nodes[0].submitblock(b)\n+\n+        # Set the timestamps from the file so that the nodes can get out of Initial Block Download\n+        self.nodes[0].setmocktime(mocktime)\n+        self.nodes[1].setmocktime(mocktime)",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 98,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "f8ad78ad4b8733258540fe88d55a3c286660edf6",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Think mocktime needs to be set prior to `submitblock`",
      "created_at": "2018-04-30T07:06:59Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r184920965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184920965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185319287",
      "pull_request_review_id": 116683857,
      "id": 185319287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTMxOTI4Nw==",
      "diff_hunk": "@@ -1614,6 +1625,275 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+    }\n+\n+    std::set<std::string> stats;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "de63105609df02f1d74e2e133201a80126470df1",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You dont need the size() check.",
      "created_at": "2018-05-01T20:04:17Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r185319287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185319287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1729,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185319486",
      "pull_request_review_id": 116683857,
      "id": 185319486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTMxOTQ4Ng==",
      "diff_hunk": "@@ -1614,6 +1625,275 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);",
      "path": "src/rpc/blockchain.cpp",
      "position": 163,
      "original_position": 162,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "de63105609df02f1d74e2e133201a80126470df1",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe if the hash is invalid GetBlockChecked will crash trying to deref the blockindex nullptr.",
      "created_at": "2018-05-01T20:05:01Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r185319486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185319486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1726,
      "original_line": 1726,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186416166",
      "pull_request_review_id": 117988186,
      "id": 186416166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxNjE2Ng==",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+import json\n+import os\n+import time\n+\n+TESTSDIR = os.path.dirname(os.path.realpath(__file__))\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+\n+    start_height = 101\n+    max_stat_pos = 2\n+    STATS_NEED_TXINDEX = [\n+        'avgfee',\n+        'avgfeerate',\n+        'maxfee',\n+        'maxfeerate',\n+        'medianfee',\n+        'medianfeerate',\n+        'minfee',\n+        'minfeerate',\n+        'totalfee',\n+        'utxo_size_inc',\n+    ]\n+\n+    def add_options(self, parser):\n+        parser.add_option('--gen-test-data', dest='gen_test_data',\n+                          default=False, action='store_true',\n+                          help='Generate test data')\n+        parser.add_option('--test-data', dest='test_data',\n+                          default='data/rpc_getblockstats.json',\n+                          action='store', metavar='FILE',\n+                          help='Test data file')\n+\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def get_stats(self):\n+        return [self.nodes[0].getblockstats(hash_or_height=self.start_height + i) for i in range(self.max_stat_pos+1)]\n+\n+    def generate_test_data(self, filename):\n+        mocktime = time.time()\n+        self.nodes[0].generate(101)\n+\n+        self.nodes[0].sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=False)\n+        self.nodes[1].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        self.expected_stats = self.get_stats()\n+\n+        blocks = []\n+        tip = self.nodes[0].getbestblockhash()\n+        blockhash = None\n+        height = 0\n+        while tip != blockhash:\n+            blockhash = self.nodes[0].getblockhash(height)\n+            blocks.append(self.nodes[0].getblock(blockhash, 0))\n+            height += 1\n+\n+        to_dump = {\n+            'blocks': blocks,\n+            'mocktime': int(mocktime),\n+            'stats': self.expected_stats,\n+        }\n+        with open(filename, 'w') as f:\n+            json.dump(to_dump, f, sort_keys=True, indent=2)\n+\n+    def load_test_data(self, filename):\n+        with open(filename, 'r') as f:\n+            d = json.load(f)\n+            blocks = d['blocks']\n+            mocktime = d['mocktime']\n+            self.expected_stats = d['stats']\n+\n+        # Set the timestamps from the file so that the nodes can get out of Initial Block Download\n+        self.nodes[0].setmocktime(mocktime)\n+        self.nodes[1].setmocktime(mocktime)\n+\n+        for b in blocks:\n+            self.nodes[0].submitblock(b)\n+\n+    def run_test(self):\n+        test_data = os.path.join(TESTSDIR, self.options.test_data)\n+        if self.options.gen_test_data:\n+            self.generate_test_data(test_data)\n+        else:\n+            self.load_test_data(test_data)\n+\n+        self.sync_all()\n+        stats = self.get_stats()\n+        expected_stats_noindex = []\n+        for stat_row in stats:\n+            expected_stats_noindex.append({k: v for k, v in stat_row.items() if k not in self.STATS_NEED_TXINDEX})\n+\n+        # Make sure all valid statistics are included but nothing else is\n+        expected_keys = self.expected_stats[0].keys()\n+        assert_equal(set(stats[0].keys()), set(expected_keys))\n+\n+        assert_equal(stats[0]['height'], self.start_height)\n+        assert_equal(stats[self.max_stat_pos]['height'], self.start_height + self.max_stat_pos)\n+\n+        for i in range(self.max_stat_pos+1):\n+            self.log.info('Checking block %d\\n' % (i))\n+            assert_equal(stats[i], self.expected_stats[i])\n+\n+            # Check selecting block by hash too\n+            blockhash = self.expected_stats[i]['blockhash']\n+            stats_by_hash = self.nodes[0].getblockstats(hash_or_height=blockhash)\n+            assert_equal(stats_by_hash, self.expected_stats[i])\n+\n+            # Check with the node that has no txindex\n+            stats_no_txindex = self.nodes[1].getblockstats(hash_or_height=blockhash, stats=list(expected_stats_noindex[i].keys()))\n+            assert_equal(stats_no_txindex, expected_stats_noindex[i])\n+\n+        # Make sure each stat can be queried on its own\n+        for stat in expected_keys:\n+            for i in range(self.max_stat_pos+1):\n+                result = self.nodes[0].getblockstats(hash_or_height=self.start_height + i, stats=[stat])\n+                assert_equal(list(result.keys()), [stat])\n+                if result[stat] != self.expected_stats[i][stat]:\n+                    self.log.info('result[%s] (%d) failed, %r != %r' % (\n+                        stat, i, result[stat], self.expected_stats[i][stat]))\n+                assert_equal(result[stat], self.expected_stats[i][stat])\n+\n+        # Make sure only the selected statistics are included (more than one)\n+        some_stats = {'minfee', 'maxfee'}\n+        stats = self.nodes[0].getblockstats(hash_or_height=1, stats=list(some_stats))\n+        assert_equal(set(stats.keys()), some_stats)\n+\n+        # Test invalid parameters raise the proper json exceptions\n+        tip = self.start_height + self.max_stat_pos\n+        assert_raises_rpc_error(-8, 'Target block height %d after current tip %d' % (tip+1, tip),\n+                                self.nodes[0].getblockstats, hash_or_height=tip+1)\n+        assert_raises_rpc_error(-8, 'Target block height %d is negative' % (-1),\n+                                self.nodes[0].getblockstats, hash_or_height=-1)\n+\n+        # Make sure not valid stats aren't allowed\n+        inv_sel_stat = 'asdfghjkl'\n+        inv_stats = [\n+            [inv_sel_stat],\n+            ['minfee' , inv_sel_stat],\n+            [inv_sel_stat, 'minfee'],\n+            ['minfee', inv_sel_stat, 'maxfee'],\n+        ]\n+        for inv_stat in inv_stats:\n+            assert_raises_rpc_error(-8, 'Invalid selected statistic %s' % inv_sel_stat,\n+                                    self.nodes[0].getblockstats, hash_or_height=1, stats=inv_stat)\n+\n+        # Make sure we aren't always returning inv_sel_stat as the culprit stat\n+        assert_raises_rpc_error(-8, 'Invalid selected statistic aaa%s' % inv_sel_stat,\n+                                self.nodes[0].getblockstats, hash_or_height=1, stats=['minfee' , 'aaa%s' % inv_sel_stat])\n+\n+        assert_raises_rpc_error(-8, 'One or more of the selected stats requires -txindex enabled',\n+                                self.nodes[1].getblockstats, hash_or_height=self.start_height + self.max_stat_pos)\n+\n+        # Mainchain's genesis block shouldn't be found on regtest\n+        assert_raises_rpc_error(-5, 'Block not found', self.nodes[0].getblockstats,\n+                                hash_or_height='000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f')\n+\n+        ",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 179,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "4523b5d9c47d877a037b1e1cf718727e4c4aa864",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Linter error:\r\n```\r\nW293 blank line contains whitespace.\r\n```",
      "created_at": "2018-05-07T13:04:12Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r186416166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186416166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186888752",
      "pull_request_review_id": 118558912,
      "id": 186888752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Njg4ODc1Mg==",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test getblockstats rpc call\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+import json\n+import os\n+import time\n+\n+TESTSDIR = os.path.dirname(os.path.realpath(__file__))\n+\n+class GetblockstatsTest(BitcoinTestFramework):\n+\n+    start_height = 101\n+    max_stat_pos = 2\n+    STATS_NEED_TXINDEX = [\n+        'avgfee',\n+        'avgfeerate',\n+        'maxfee',\n+        'maxfeerate',\n+        'medianfee',\n+        'medianfeerate',\n+        'minfee',\n+        'minfeerate',\n+        'totalfee',\n+        'utxo_size_inc',\n+    ]\n+\n+    def add_options(self, parser):\n+        parser.add_option('--gen-test-data', dest='gen_test_data',\n+                          default=False, action='store_true',\n+                          help='Generate test data')\n+        parser.add_option('--test-data', dest='test_data',\n+                          default='data/rpc_getblockstats.json',\n+                          action='store', metavar='FILE',\n+                          help='Test data file')\n+\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.setup_clean_chain = True\n+\n+    def get_stats(self):\n+        return [self.nodes[0].getblockstats(hash_or_height=self.start_height + i) for i in range(self.max_stat_pos+1)]\n+\n+    def generate_test_data(self, filename):\n+        mocktime = time.time()\n+        self.nodes[0].generate(101)\n+\n+        self.nodes[0].sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=False)\n+        self.nodes[1].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        self.expected_stats = self.get_stats()\n+\n+        blocks = []\n+        tip = self.nodes[0].getbestblockhash()\n+        blockhash = None\n+        height = 0\n+        while tip != blockhash:\n+            blockhash = self.nodes[0].getblockhash(height)\n+            blocks.append(self.nodes[0].getblock(blockhash, 0))\n+            height += 1\n+\n+        to_dump = {\n+            'blocks': blocks,\n+            'mocktime': int(mocktime),\n+            'stats': self.expected_stats,\n+        }\n+        with open(filename, 'w') as f:\n+            json.dump(to_dump, f, sort_keys=True, indent=2)\n+\n+    def load_test_data(self, filename):\n+        with open(filename, 'r') as f:\n+            d = json.load(f)\n+            blocks = d['blocks']\n+            mocktime = d['mocktime']\n+            self.expected_stats = d['stats']\n+\n+        # Set the timestamps from the file so that the nodes can get out of Initial Block Download\n+        self.nodes[0].setmocktime(mocktime)\n+        self.nodes[1].setmocktime(mocktime)\n+\n+        for b in blocks:\n+            self.nodes[0].submitblock(b)\n+\n+    def run_test(self):\n+        test_data = os.path.join(TESTSDIR, self.options.test_data)\n+        if self.options.gen_test_data:\n+            self.generate_test_data(test_data)\n+        else:\n+            self.load_test_data(test_data)\n+\n+        self.sync_all()\n+        stats = self.get_stats()\n+        expected_stats_noindex = []\n+        for stat_row in stats:\n+            expected_stats_noindex.append({k: v for k, v in stat_row.items() if k not in self.STATS_NEED_TXINDEX})\n+\n+        # Make sure all valid statistics are included but nothing else is\n+        expected_keys = self.expected_stats[0].keys()\n+        assert_equal(set(stats[0].keys()), set(expected_keys))\n+\n+        assert_equal(stats[0]['height'], self.start_height)\n+        assert_equal(stats[self.max_stat_pos]['height'], self.start_height + self.max_stat_pos)\n+\n+        for i in range(self.max_stat_pos+1):\n+            self.log.info('Checking block %d\\n' % (i))\n+            assert_equal(stats[i], self.expected_stats[i])\n+\n+            # Check selecting block by hash too\n+            blockhash = self.expected_stats[i]['blockhash']\n+            stats_by_hash = self.nodes[0].getblockstats(hash_or_height=blockhash)\n+            assert_equal(stats_by_hash, self.expected_stats[i])\n+\n+            # Check with the node that has no txindex\n+            stats_no_txindex = self.nodes[1].getblockstats(hash_or_height=blockhash, stats=list(expected_stats_noindex[i].keys()))\n+            assert_equal(stats_no_txindex, expected_stats_noindex[i])\n+\n+        # Make sure each stat can be queried on its own\n+        for stat in expected_keys:\n+            for i in range(self.max_stat_pos+1):\n+                result = self.nodes[0].getblockstats(hash_or_height=self.start_height + i, stats=[stat])\n+                assert_equal(list(result.keys()), [stat])\n+                if result[stat] != self.expected_stats[i][stat]:\n+                    self.log.info('result[%s] (%d) failed, %r != %r' % (\n+                        stat, i, result[stat], self.expected_stats[i][stat]))\n+                assert_equal(result[stat], self.expected_stats[i][stat])\n+\n+        # Make sure only the selected statistics are included (more than one)\n+        some_stats = {'minfee', 'maxfee'}\n+        stats = self.nodes[0].getblockstats(hash_or_height=1, stats=list(some_stats))\n+        assert_equal(set(stats.keys()), some_stats)\n+\n+        # Test invalid parameters raise the proper json exceptions\n+        tip = self.start_height + self.max_stat_pos\n+        assert_raises_rpc_error(-8, 'Target block height %d after current tip %d' % (tip+1, tip),\n+                                self.nodes[0].getblockstats, hash_or_height=tip+1)\n+        assert_raises_rpc_error(-8, 'Target block height %d is negative' % (-1),\n+                                self.nodes[0].getblockstats, hash_or_height=-1)\n+\n+        # Make sure not valid stats aren't allowed\n+        inv_sel_stat = 'asdfghjkl'\n+        inv_stats = [\n+            [inv_sel_stat],\n+            ['minfee' , inv_sel_stat],\n+            [inv_sel_stat, 'minfee'],\n+            ['minfee', inv_sel_stat, 'maxfee'],\n+        ]\n+        for inv_stat in inv_stats:\n+            assert_raises_rpc_error(-8, 'Invalid selected statistic %s' % inv_sel_stat,\n+                                    self.nodes[0].getblockstats, hash_or_height=1, stats=inv_stat)\n+\n+        # Make sure we aren't always returning inv_sel_stat as the culprit stat\n+        assert_raises_rpc_error(-8, 'Invalid selected statistic aaa%s' % inv_sel_stat,\n+                                self.nodes[0].getblockstats, hash_or_height=1, stats=['minfee' , 'aaa%s' % inv_sel_stat])\n+\n+        assert_raises_rpc_error(-8, 'One or more of the selected stats requires -txindex enabled',\n+                                self.nodes[1].getblockstats, hash_or_height=self.start_height + self.max_stat_pos)\n+\n+        # Mainchain's genesis block shouldn't be found on regtest\n+        assert_raises_rpc_error(-5, 'Block not found', self.nodes[0].getblockstats,\n+                                hash_or_height='000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f')\n+\n+        ",
      "path": "test/functional/rpc_getblockstats.py",
      "position": null,
      "original_position": 179,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "4523b5d9c47d877a037b1e1cf718727e4c4aa864",
      "in_reply_to_id": 186416166,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2018-05-08T22:42:15Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r186888752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186888752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188283911",
      "pull_request_review_id": 120229289,
      "id": 188283911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI4MzkxMQ==",
      "diff_hunk": "@@ -1614,6 +1625,275 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);",
      "path": "src/rpc/blockchain.cpp",
      "position": 163,
      "original_position": 162,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "de63105609df02f1d74e2e133201a80126470df1",
      "in_reply_to_id": 185319486,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is fixed.",
      "created_at": "2018-05-15T13:22:28Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188283911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188283911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1726,
      "original_line": 1726,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188868935",
      "pull_request_review_id": 120931011,
      "id": 188868935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODg2ODkzNQ==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Due to two escapes in below lines, this needs to remove two spaces for alignment.",
      "created_at": "2018-05-17T07:59:42Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188868935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188868935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1672,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188870349",
      "pull_request_review_id": 120931011,
      "id": 188870349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODg3MDM0OQ==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 165,
      "original_position": 164,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just a note here. In https://github.com/bitcoin/bitcoin/blob/4cfe17c3382ba750131cdc8703b2978132822070/src/rpc/blockchain.cpp#L809-L818 `RPC_MISC_ERROR` is used, while `RPC_INVALID_ADDRESS_OR_KEY` is used here. Not sure which is better, but I think they should both use the same error type. (This PR touches the other one so could easily tweak, I think.)",
      "created_at": "2018-05-17T08:05:38Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188870349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188870349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1728,
      "original_line": 1728,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188872411",
      "pull_request_review_id": 120931011,
      "id": 188872411,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODg3MjQxMQ==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+    }\n+\n+    assert(pindex != nullptr);\n+\n+    std::set<std::string> stats;\n+    if (!request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 288,
      "original_position": 287,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "May be ok, but I think `(txfee * WITNESS_SCALE_FACTOR) / (weight + WITNESS_SCALE_FACTOR - 1)` is precisely accurate while the above will have truncation errors sometimes.",
      "created_at": "2018-05-17T08:13:39Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188872411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188872411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189062027",
      "pull_request_review_id": 121168608,
      "id": 189062027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA2MjAyNw==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 165,
      "original_position": 164,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": 188870349,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I disagree. If the header is not found, that means the request was invalid, hence **RPC_INVALID** _ADDRESS_OR_ **KEY** (key loosely taken to mean request argument, I take it). Whereas if the header is known but the block is not known, I do consider that to be a different error.\r\n\r\nIn #13144, I introduce RPC_DATA_UNAVAILABLE, which may be more appropriate than RPC_MISC in the latter case.",
      "created_at": "2018-05-17T18:42:49Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189062027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189062027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1728,
      "original_line": 1728,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189068163",
      "pull_request_review_id": 121175795,
      "id": 189068163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA2ODE2Mw==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+    }\n+\n+    assert(pindex != nullptr);\n+\n+    std::set<std::string> stats;\n+    if (!request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 288,
      "original_position": 287,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": 188872411,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That equation has truncated errors. Consider a tx with weight 3 and fee 100. The vsize is 1, so the fee rate should be 1, but your equation would give (100 * 4) / 6 = 66.\r\n\r\nYou point out correctly though that vsize is computed incorrectly here by rounding down rather than up. This should use `GetVirtualTransactionSize()`.",
      "created_at": "2018-05-17T19:03:36Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189068163",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189068163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189071376",
      "pull_request_review_id": 121179692,
      "id": 189071376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA3MTM3Ng==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+    }\n+\n+    assert(pindex != nullptr);\n+\n+    std::set<std::string> stats;\n+    if (!request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 288,
      "original_position": 287,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": 188872411,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, I don't follow. This is using GetTransactionWeight() which does ```::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)```\r\n\r\nGetVirtualTransactionSize does ```(std::max(nWeight, nSigOpCost * nBytesPerSigOp) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR```\r\n\r\nBut I'm not sure why would we prefer that here.",
      "created_at": "2018-05-17T19:15:57Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189071376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189071376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189165361",
      "pull_request_review_id": 121291992,
      "id": 189165361,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE2NTM2MQ==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+    }\n+\n+    assert(pindex != nullptr);\n+\n+    std::set<std::string> stats;\n+    if (!request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 288,
      "original_position": 287,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": 188872411,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, I think I got things mixed up.",
      "created_at": "2018-05-18T05:19:24Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189165361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189165361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189167702",
      "pull_request_review_id": 121294718,
      "id": 189167702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE2NzcwMg==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+    }\n+\n+    assert(pindex != nullptr);\n+\n+    std::set<std::string> stats;\n+    if (!request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 288,
      "original_position": 287,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": 188872411,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The fee rate for a tx with weight 3 and fee 100 is the same as if there were 100 such tx's. That would have weight 300 or vsize 75, and fee 10,000, for a fee rate of 10,000/75 or 133.3, not 1, 100, or 66. :) Formula looks fine to me, though I guess estimatefee uses fee/vkbyte rather than fee/byte, which would be `(txfee * WITNESS_SCALE_FACTOR * 1000) / weight`.",
      "created_at": "2018-05-18T05:42:51Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189167702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189167702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189177604",
      "pull_request_review_id": 121306577,
      "id": 189177604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE3NzYwNA==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But, negative values don't count back from the current tip, they give an error?",
      "created_at": "2018-05-18T06:55:11Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189177604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189177604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1664,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189177668",
      "pull_request_review_id": 121306577,
      "id": 189177668,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE3NzY2OA==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Multiline if statement should have braces.",
      "created_at": "2018-05-18T06:55:32Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189177668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189177668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1657,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189178116",
      "pull_request_review_id": 121306577,
      "id": 189178116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE3ODExNg==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"(all values are in reverse order height-wise)\" is outdated now that this only does one block's stats, I think? If it's not, it doesn't make sense to me...",
      "created_at": "2018-05-18T06:58:13Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189178116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189178116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1671,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190044662",
      "pull_request_review_id": 122342931,
      "id": 190044662,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDA0NDY2Mg==",
      "diff_hunk": "@@ -1614,6 +1625,283 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+template<typename T>\n+static T CalculateTruncatedMedian(std::vector<T>& scores)\n+{\n+    size_t size = scores.size();\n+    if (size == 0) {\n+        return 0;\n+    }\n+\n+    std::sort(scores.begin(), scores.end());\n+    if (size % 2 == 0) {\n+        return (scores[size / 2 - 1] + scores[size / 2]) / 2;\n+    } else {\n+        return scores[size / 2];\n+    }\n+}\n+\n+template<typename T>\n+static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+template<typename T, typename Tk, typename... Args>\n+static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+{\n+    return (set.count(key) != 0) || SetHasKeys(set, args...);\n+}\n+\n+// outpoint (needed for the utxo index) + nHeight + fCoinBase\n+static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n+\n+static UniValue getblockstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getblockstats ( hash_or_height stats )\\n\"\n+            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+            \"\\nIt won't work for some heights with pruning.\\n\"\n+            \"\\nIt won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block. If height, negative values count back from the current tip\\n\"\n+            \"2. \\\"stats\\\"      (array,  optional) Values to plot, by default all values, see result below)\"\n+            \"    [\"\n+            \"      \\\"height\\\",   (string, optional) Selected statistic\\n\"\n+            \"      \\\"time\\\",     (string, optional) Selected statistic\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult: (all values are in reverse order height-wise)\\n\"\n+            \"{                             (json object)\\n\"\n+            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"medianfeerate\\\": xxxxx,   (numeric) Truncated median feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pindex;\n+    if (request.params[0].isNum()) {\n+        const int height = request.params[0].get_int();\n+        const int current_tip = chainActive.Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        pindex = chainActive[height];\n+    } else {\n+        const std::string strHash = request.params[0].get_str();\n+        const uint256 hash(uint256S(strHash));\n+        pindex = LookupBlockIndex(hash);\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+    }\n+\n+    assert(pindex != nullptr);\n+\n+    std::set<std::string> stats;\n+    if (!request.params[1].isNull()) {\n+        const UniValue stats_univalue = request.params[1].get_array();\n+        for (unsigned int i = 0; i < stats_univalue.size(); i++) {\n+            const std::string stat = stats_univalue[i].get_str();\n+            stats.insert(stat);\n+        }\n+    }\n+\n+    const CBlock block = GetBlockChecked(pindex);\n+\n+    const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n+    const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n+    const bool do_medianfee = do_all || stats.count(\"medianfee\") != 0;\n+    const bool do_medianfeerate = do_all || stats.count(\"medianfeerate\") != 0;\n+    const bool loop_inputs = do_all || do_medianfee || do_medianfeerate ||\n+        SetHasKeys(stats, \"utxo_size_inc\", \"totalfee\", \"avgfee\", \"avgfeerate\", \"minfee\", \"maxfee\", \"minfeerate\", \"maxfeerate\");\n+    const bool loop_outputs = do_all || loop_inputs || stats.count(\"total_out\");\n+    const bool do_calculate_size = do_mediantxsize ||\n+        SetHasKeys(stats, \"total_size\", \"avgtxsize\", \"mintxsize\", \"maxtxsize\", \"swtotal_size\");\n+    const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"medianfeerate\", \"minfeerate\", \"maxfeerate\");\n+    const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n+\n+    CAmount maxfee = 0;\n+    CAmount maxfeerate = 0;\n+    CAmount minfee = MAX_MONEY;\n+    CAmount minfeerate = MAX_MONEY;\n+    CAmount total_out = 0;\n+    CAmount totalfee = 0;\n+    int64_t inputs = 0;\n+    int64_t maxtxsize = 0;\n+    int64_t mintxsize = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t outputs = 0;\n+    int64_t swtotal_size = 0;\n+    int64_t swtotal_weight = 0;\n+    int64_t swtxs = 0;\n+    int64_t total_size = 0;\n+    int64_t total_weight = 0;\n+    int64_t utxo_size_inc = 0;\n+    std::vector<CAmount> fee_array;\n+    std::vector<CAmount> feerate_array;\n+    std::vector<int64_t> txsize_array;\n+\n+    for (const auto& tx : block.vtx) {\n+        outputs += tx->vout.size();\n+\n+        CAmount tx_total_out = 0;\n+        if (loop_outputs) {\n+            for (const CTxOut& out : tx->vout) {\n+                tx_total_out += out.nValue;\n+                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+        }\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        inputs += tx->vin.size(); // Don't count coinbase's fake input\n+        total_out += tx_total_out; // Don't count coinbase reward\n+\n+        int64_t tx_size = 0;\n+        if (do_calculate_size) {\n+\n+            tx_size = tx->GetTotalSize();\n+            if (do_mediantxsize) {\n+                txsize_array.push_back(tx_size);\n+            }\n+            maxtxsize = std::max(maxtxsize, tx_size);\n+            mintxsize = std::min(mintxsize, tx_size);\n+            total_size += tx_size;\n+        }\n+\n+        int64_t weight = 0;\n+        if (do_calculate_weight) {\n+            weight = GetTransactionWeight(*tx);\n+            total_weight += weight;\n+        }\n+\n+        if (do_calculate_sw && tx->HasWitness()) {\n+            ++swtxs;\n+            swtotal_size += tx_size;\n+            swtotal_weight += weight;\n+        }\n+\n+        if (loop_inputs) {\n+\n+            if (!g_txindex) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n+            }\n+            CAmount tx_total_in = 0;\n+            for (const CTxIn& in : tx->vin) {\n+                CTransactionRef tx_in;\n+                uint256 hashBlock;\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n+                }\n+\n+                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+\n+                tx_total_in += prevoutput.nValue;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+            }\n+\n+            CAmount txfee = tx_total_in - tx_total_out;\n+            assert(MoneyRange(txfee));\n+            if (do_medianfee) {\n+                fee_array.push_back(txfee);\n+            }\n+            maxfee = std::max(maxfee, txfee);\n+            minfee = std::min(minfee, txfee);\n+            totalfee += txfee;\n+\n+            // New feerate uses satoshis per virtual byte instead of per serialized byte\n+            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;",
      "path": "src/rpc/blockchain.cpp",
      "position": 288,
      "original_position": 287,
      "commit_id": "41d0476f62269027ec2193a5f80d508d789de8aa",
      "original_commit_id": "563eee92c9ddc5b537fca1ce08bce811d97aed97",
      "in_reply_to_id": 188872411,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well, we can move from sat/vbyte to sat/vkbyte, sure. I t should be a simple change if people prefer that.",
      "created_at": "2018-05-22T20:37:40Z",
      "updated_at": "2018-05-22T21:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r190044662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190044662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    }
  ]
}