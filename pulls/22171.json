{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171",
    "id": 662997552,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjYyOTk3NTUy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22171",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/22171.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/22171.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22171",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22171/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
    "number": 22171,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "fuzz harness for SanitizeString and x-reference fixes",
    "user": {
      "login": "baptistapedro",
      "id": 9632716,
      "node_id": "MDQ6VXNlcjk2MzI3MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9632716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baptistapedro",
      "html_url": "https://github.com/baptistapedro",
      "followers_url": "https://api.github.com/users/baptistapedro/followers",
      "following_url": "https://api.github.com/users/baptistapedro/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/baptistapedro/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/baptistapedro/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/baptistapedro/subscriptions",
      "organizations_url": "https://api.github.com/users/baptistapedro/orgs",
      "repos_url": "https://api.github.com/users/baptistapedro/repos",
      "events_url": "https://api.github.com/users/baptistapedro/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/baptistapedro/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Isolated harness for SanitizeString(), need a little edit to fit the fuzz coding pattern, I believe the extern \"C\" int LLVMFuzzerTestOneInput() would be translated to:\r\n```cpp\r\nFUZZ_TARGET(sanitizestring)\r\n{\r\n    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n    [...]\r\n}\r\n```\r\nI am not that familiar with the whole fuzz codebase pattern yet to follow with the proper syntax.\r\n\r\nThe recommended fix from @laawnj is to \" make the second argument of SanitizeString an \"SafeChars\" enum. This prevents a unhandled value from ever being passed in.\"\r\n\r\n[1] and [2] point to so some references where the second argument is not passed as an enum but there is more cases under the same conditions so I recommend to do some x-reference to double check them.\r\n",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-06-06T16:39:02Z",
    "updated_at": "2022-08-18T18:24:52Z",
    "closed_at": "2021-06-09T14:10:14Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "fdd7c22c3fb84164f876f7b4400796ebfb99cf3a",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "baptistapedro:fuzz-fix-SanitizeStr",
      "ref": "fuzz-fix-SanitizeStr",
      "sha": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "user": {
        "login": "baptistapedro",
        "id": 9632716,
        "node_id": "MDQ6VXNlcjk2MzI3MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9632716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/baptistapedro",
        "html_url": "https://github.com/baptistapedro",
        "followers_url": "https://api.github.com/users/baptistapedro/followers",
        "following_url": "https://api.github.com/users/baptistapedro/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/baptistapedro/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/baptistapedro/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/baptistapedro/subscriptions",
        "organizations_url": "https://api.github.com/users/baptistapedro/orgs",
        "repos_url": "https://api.github.com/users/baptistapedro/repos",
        "events_url": "https://api.github.com/users/baptistapedro/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/baptistapedro/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e033ca13794699cf4744e71647db75c583a9a600",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 90,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 7,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmZiNmM1Y2UxMzQ1ZWNkNzA4ZmUzMTEzNjczY2EwYzJkYThiYzM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "tree": {
        "sha": "1e4a6ec9e554780e77db907fd098ffdff9490330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e4a6ec9e554780e77db907fd098ffdff9490330"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1e4a6ec9e554780e77db907fd098ffdff9490330\nparent e033ca13794699cf4744e71647db75c583a9a600\nauthor baptistapedro <pedrojorgesbaptista@gmail.com> 1622997455 +0200\ncommitter GitHub <noreply@github.com> 1622997455 +0200\n\nCreate sanitizestring.cpp\n\nIsolated harness for SanitizeString(), need a little edit to fit the fuzz coding pattern, I believe the extern \"C\" int LLVMFuzzerTestOneInput() would be translated to:\r\n```\r\nFUZZ_TARGET(sanitizestring)\r\n{\r\n    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n    [...]\r\n}\r\nI am not that familiar with the whole fuzz codebase pattern yet to follow with the proper syntax.\r\n\r\nThe recommended fix from @laawnj is to \" make the second argument of SanitizeString an \"SafeChars\" enum. This prevents a unhandled value from ever being passed in.\r\n\"\r\n\r\n[1] and [2] point to so some references where the second argument is not passed as an enum but there is more cases under the same conditions so I recommend to do some x-reference to double check them.",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvPnPCRBK7hj4Ov3rIwAA/hIIACXLlaaD8xtabjG/JULi9t39\nycaUNqcjM8HOVa/Riaid19EmcO9Dga/FDG5e+rkDeBogg4yH/oj0fGO+6L7yLmsP\nJZYdtlaR/Y4N+aJCK6TBu95bPjc2NaI7t++97zccvtSyXBIgBMsvuddEch2/XZ2x\nthUXbfGd7vJHqKX0wXtg47IET6QjqODvT5eHEUjlwsD5wMyDv/IMvdbaICkVnIe1\nY7CEucU4oPTLuHeTKDN6EovVkkOheC73ZZ/hBZY2fcTFb6fP0AhLYTq9bakiKnqq\n9DmWNxsnglBrHi+24I4zZimtqWiCdT0lD6xSw1QUkHaQlZbPlrx+l5S3xKsYOds=\n=cx+a\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e033ca13794699cf4744e71647db75c583a9a600",
          "sha": "e033ca13794699cf4744e71647db75c583a9a600",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e033ca13794699cf4744e71647db75c583a9a600"
        }
      ],
      "message": "Create sanitizestring.cpp\n\nIsolated harness for SanitizeString(), need a little edit to fit the fuzz coding pattern, I believe the extern \"C\" int LLVMFuzzerTestOneInput() would be translated to:\r\n```\r\nFUZZ_TARGET(sanitizestring)\r\n{\r\n    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n    [...]\r\n}\r\nI am not that familiar with the whole fuzz codebase pattern yet to follow with the proper syntax.\r\n\r\nThe recommended fix from @laawnj is to \" make the second argument of SanitizeString an \"SafeChars\" enum. This prevents a unhandled value from ever being passed in.\r\n\"\r\n\r\n[1] and [2] point to so some references where the second argument is not passed as an enum but there is more cases under the same conditions so I recommend to do some x-reference to double check them.",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-06-06T16:37:35Z"
      },
      "author": {
        "name": "baptistapedro",
        "email": "pedrojorgesbaptista@gmail.com",
        "date": "2021-06-06T16:37:35Z"
      },
      "sha": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37"
    },
    {
      "event": "renamed",
      "id": 4848366584,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDg0ODM2NjU4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4848366584",
      "actor": {
        "login": "baptistapedro",
        "id": 9632716,
        "node_id": "MDQ6VXNlcjk2MzI3MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9632716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/baptistapedro",
        "html_url": "https://github.com/baptistapedro",
        "followers_url": "https://api.github.com/users/baptistapedro/followers",
        "following_url": "https://api.github.com/users/baptistapedro/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/baptistapedro/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/baptistapedro/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/baptistapedro/subscriptions",
        "organizations_url": "https://api.github.com/users/baptistapedro/orgs",
        "repos_url": "https://api.github.com/users/baptistapedro/repos",
        "events_url": "https://api.github.com/users/baptistapedro/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/baptistapedro/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-06T16:42:36Z",
      "rename": {
        "from": "Create sanitizestring.cpp",
        "to": "fuzz harness for SanitizeString and x-reference fixes"
      }
    },
    {
      "event": "labeled",
      "id": 4848403977,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ4NDg0MDM5Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4848403977",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-06T17:18:16Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 677024438,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc3MDI0NDM4",
      "url": null,
      "actor": null,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I haven't looked at this in detail, but it looks wrong from a first glance.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#pullrequestreview-677024438",
      "submitted_at": "2021-06-07T06:22:21Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
    },
    {
      "event": "commented",
      "id": 857727719,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NzcyNzcxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857727719",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T14:10:14Z",
      "updated_at": "2021-06-09T14:10:14Z",
      "author_association": "MEMBER",
      "body": "Closing for now, because we already have a fuzz target that covers this function. Other improvements and specially improvements of the fuzz tests are welcome.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#issuecomment-857727719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22171"
    },
    {
      "event": "closed",
      "id": 4865318529,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDg2NTMxODUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4865318529",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T14:10:14Z"
    },
    {
      "event": "locked",
      "id": 7216543658,
      "node_id": "LOE_lADOABII5842aYBqzwAAAAGuI7eq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216543658",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T18:24:52Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646300230",
      "pull_request_review_id": 677024438,
      "id": 646300230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjMwMDIzMA==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the second arg is an enum, not a size. See https://github.com/bitcoin/bitcoin/pull/6647#discussion_r38855960",
      "created_at": "2021-06-07T06:22:00Z",
      "updated_at": "2021-06-07T06:22:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646300230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646300230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646301640",
      "pull_request_review_id": 677026273,
      "id": 646301640,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjMwMTY0MA==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": 646300230,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, this method is already fuzzed in \r\n\r\n```\r\nsrc/test/fuzz/string.cpp:    (void)SanitizeString(random_string_1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3));\r\n",
      "created_at": "2021-06-07T06:25:14Z",
      "updated_at": "2021-06-07T06:25:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646301640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646301640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646304323",
      "pull_request_review_id": 677029381,
      "id": 646304323,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjMwNDMyMw==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": 646300230,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md#quickstart-guide on how to compile. To run, you'd have to pass `FUZZ=string ./src/test/fuzz/fuzz`. Let me know if you have any questions.",
      "created_at": "2021-06-07T06:30:41Z",
      "updated_at": "2021-06-07T06:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646304323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646304323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646409576",
      "pull_request_review_id": 677171292,
      "id": 646409576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQwOTU3Ng==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": 646300230,
      "user": {
        "login": "baptistapedro",
        "id": 9632716,
        "node_id": "MDQ6VXNlcjk2MzI3MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9632716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/baptistapedro",
        "html_url": "https://github.com/baptistapedro",
        "followers_url": "https://api.github.com/users/baptistapedro/followers",
        "following_url": "https://api.github.com/users/baptistapedro/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/baptistapedro/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/baptistapedro/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/baptistapedro/subscriptions",
        "organizations_url": "https://api.github.com/users/baptistapedro/orgs",
        "repos_url": "https://api.github.com/users/baptistapedro/repos",
        "events_url": "https://api.github.com/users/baptistapedro/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/baptistapedro/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wrote this harness and reported to security@bitcoin without realizing you guys already wrote one \r\nHowever the second arg is passed as a size i.e. on [1] and [2] and other methods. See where SanitizeString is called and you can see different cases where the second arg is not an enum and thats why I referenced that the fix must be on the callers.\r\nThis issue was already confirmed by laawnj and he also confirmed that SanitizeString()'s second arg must be called as an enum but it does not happen in some cases but such cases are not so reliable as attack vectors so is not a priority fix.\r\n",
      "created_at": "2021-06-07T09:13:10Z",
      "updated_at": "2021-06-07T09:13:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646409576",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646409576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646512453",
      "pull_request_review_id": 677309552,
      "id": 646512453,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjUxMjQ1Mw==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": 646300230,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am not sure what `[1]` and `[2]` refer to, but if it was called anywhere with size, we could tell by existing tests crashing.",
      "created_at": "2021-06-07T11:44:51Z",
      "updated_at": "2021-06-07T11:44:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646512453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646512453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646513560",
      "pull_request_review_id": 677311141,
      "id": 646513560,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjUxMzU2MA==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": 646300230,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The only places I could find where the second parameter is passed at all is URI handling and UA comment handling, both of which look fine.",
      "created_at": "2021-06-07T11:46:43Z",
      "updated_at": "2021-06-07T11:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646513560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646513560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646514137",
      "pull_request_review_id": 677311927,
      "id": 646514137,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjUxNDEzNw==",
      "diff_hunk": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());",
      "path": "src/test/fuzz/sanitizestring.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "original_commit_id": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "in_reply_to_id": 646300230,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Unrelated: Commit 26c06f24e5dcc32a7599abb8d670d22993c82bc2 removed the last use of FILENAME, so I guess that constant can be removed now)",
      "created_at": "2021-06-07T11:47:36Z",
      "updated_at": "2021-06-07T14:41:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22171#discussion_r646514137",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646514137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    }
  ]
}