{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "id": 572904079,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTcyOTA0MDc5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21169.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21169.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/545404e7e1c72985557ccffe865cea269143e5dd",
    "number": 21169,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "fuzz: Add RPC interface fuzzing. Increase fuzzing coverage from 65% to 70%.",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add RPC interface fuzzing.\r\n\r\nThis PR increases overall fuzzing line coverage from [~65%](https://marcofalke.github.io/btc_cov/fuzz.coverage/) to ~70% ðŸŽ‰ \r\n\r\nTo test this PR:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\n$ make -C src/ test/fuzz/fuzz\r\n$ FUZZ=rpc src/test/fuzz/fuzz\r\n```\r\n\r\nSee [`doc/fuzzing.md`](https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md) for more information on how to fuzz Bitcoin Core. Don't forget to contribute any coverage increasing inputs you find to the [Bitcoin Core fuzzing corpus repo](https://github.com/bitcoin-core/qa-assets).\r\n\r\nHappy fuzzing :)",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-02-13T08:11:04Z",
    "updated_at": "2022-08-16T17:21:10Z",
    "closed_at": "2021-04-28T07:46:28Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-04-28T07:46:27Z",
    "merge_commit_sha": "e45863166f5e44cc2c380f4667812fcd3cddc73b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:fuzzing-rpc",
      "ref": "fuzzing-rpc",
      "sha": "545404e7e1c72985557ccffe865cea269143e5dd",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "edf679503c55f4a119e6c64b76ba20e71a46d27a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 379,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 25,
    "comments": 4
  },
  "events": [
    {
      "event": "labeled",
      "id": 4327564764,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMjc1NjQ3NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4327564764",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-13T08:14:39Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4327585838,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyNzU4NTgzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4327585838",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-13T08:48:19Z"
    },
    {
      "event": "reviewed",
      "id": 589972631,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg5OTcyNjMx",
      "url": null,
      "actor": null,
      "commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, debug build clean and it runs\r\n\r\n```\r\n$ FUZZ=rpc src/test/fuzz/fuzz\r\nINFO: Seed: 974835892\r\nINFO: Loaded 1 modules   (625697 inline 8-bit counters): 625697 [0x5636dc7b9268, 0x5636dc851e89), \r\nINFO: Loaded 1 PC tables (625697 PCs): 625697 [0x5636dc851e90,0x5636dd1de0a0), \r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\r\nINFO: A corpus is not provided, starting from an empty corpus\r\n#2\tINITED cov: 110 ft: 111 corp: 1/1b exec/s: 0 rss: 191Mb\r\n#4\tNEW    cov: 110 ft: 118 corp: 2/3b lim: 4 exec/s: 0 rss: 191Mb L: 2/2 MS: 2 ChangeBit-InsertByte-\r\n#10\tNEW    cov: 110 ft: 125 corp: 3/6b lim: 4 exec/s: 0 rss: 191Mb L: 3/3 MS: 1 CopyPart-\r\n#13\tNEW    cov: 110 ft: 130 corp: 4/10b lim: 4 exec/s: 0 rss: 191Mb L: 4/4 MS: 3 ChangeBinInt-EraseBytes-CrossOver-\r\n...\r\n#217864\tREDUCE cov: 16595 ft: 45707 corp: 992/59Kb lim: 116 exec/s: 1998 rss: 616Mb L: 84/116 MS: 1 EraseBytes-\r\n#218080\tREDUCE cov: 16595 ft: 45709 corp: 993/59Kb lim: 116 exec/s: 2000 rss: 616Mb L: 115/116 MS: 1 InsertRepeatedBytes-\r\n#218133\tREDUCE cov: 16595 ft: 45709 corp: 993/59Kb lim: 116 exec/s: 2001 rss: 616Mb L: 84/116 MS: 3 ChangeByte-CMP-EraseBytes- DE: \"St9exception\"-\r\n\tNEW_FUNC[1/25]: 0x5636d8897d20 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr_base.h:152\r\n\tNEW_FUNC[2/25]: 0x5636d88db840 in std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<CBlock, std::allocator<CBlock>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<CBlock, std::allocator<CBlock>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<CBlock, std::allocator<CBlock>, (__gnu_cxx::_Lock_policy)2> >&) /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/allocated_ptr.h:96\r\n#218742\tREDUCE cov: 16767 ft: 45872 corp: 994/59Kb lim: 122 exec/s: 1988 rss: 616Mb L: 30/116 MS: 4 EraseBytes-ChangeBit-ChangeBinInt-CMP- DE: \"submitblock\"-\r\n```",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#pullrequestreview-589972631",
      "submitted_at": "2021-02-13T15:18:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
    },
    {
      "event": "commented",
      "id": 783166677,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzE2NjY3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/783166677",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-22T07:49:30Z",
      "updated_at": "2021-04-09T16:57:00Z",
      "author_association": "MEMBER",
      "body": "I am not sure if this is worth it. This needs a lot of maintenance (adding or removing rpcs, marking them unsafe, ...) and I am sceptical that this will find any actual issues.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-783166677",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169"
    },
    {
      "event": "reviewed",
      "id": 595076304,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1MDc2MzA0",
      "url": null,
      "actor": null,
      "commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#pullrequestreview-595076304",
      "submitted_at": "2021-04-09T16:59:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
    },
    {
      "event": "commented",
      "id": 827747428,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzc0NzQyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827747428",
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T16:35:19Z",
      "updated_at": "2021-04-27T16:35:19Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke to clarify, are you a NACK on this?",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-827747428",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169"
    },
    {
      "event": "mentioned",
      "id": 4651950978,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY1MTk1MDk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4651950978",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T16:35:19Z"
    },
    {
      "event": "subscribed",
      "id": 4651950980,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NTE5NTA5ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4651950980",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T16:35:19Z"
    },
    {
      "event": "commented",
      "id": 827874086,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzg3NDA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827874086",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T19:42:33Z",
      "updated_at": "2021-04-27T20:09:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@adamjonas\r\n\r\nGood question and thanks for asking it explicitly! :)\r\n\r\nI should probably have stated that more clearly in the PR description, but it should be noted that this fuzzing harness is by far is the \"most covering\" harness in the repo.\r\n\r\nIncluding this harness in the existing set of fuzzing harnesses adds coverage to five(!) percent of the code base that is currently uncovered by fuzz testing. The total fuzzing coverage increases from 65% to 70%.\r\n\r\nThe opportunities to achieve such extreme coverage jumps from adding a single harness are _extremely_ rare at the relatively high levels of fuzzing coverage we've reached. TBH it would feel a bit disappointing if we had to pass on the excellent coverage opportunity that RPC fuzzing brings :)\r\n\r\n@MarcoFalke, if we can find a way to reduce/mitigate the potential maintenance work you predict in https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-783166677 would you be willing to reconsider your position? :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-827874086",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169"
    },
    {
      "event": "mentioned",
      "id": 4652823179,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY1MjgyMzE3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4652823179",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T19:42:33Z"
    },
    {
      "event": "subscribed",
      "id": 4652823190,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NTI4MjMxOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4652823190",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T19:42:33Z"
    },
    {
      "event": "mentioned",
      "id": 4652942278,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY1Mjk0MjI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4652942278",
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T20:08:32Z"
    },
    {
      "event": "subscribed",
      "id": 4652942282,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NTI5NDIyODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4652942282",
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T20:08:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4653180764,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1MzE4MDc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4653180764",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T21:05:57Z"
    },
    {
      "event": "reviewed",
      "id": 646616471,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NjE2NDcx",
      "url": null,
      "actor": null,
      "commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#pullrequestreview-646616471",
      "submitted_at": "2021-04-28T06:02:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
    },
    {
      "event": "reviewed",
      "id": 646622591,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NjIyNTkx",
      "url": null,
      "actor": null,
      "commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#pullrequestreview-646622591",
      "submitted_at": "2021-04-28T06:02:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDU0MDRlN2UxYzcyOTg1NTU3Y2NmZmU4NjVjZWEyNjkxNDNlNWRk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/545404e7e1c72985557ccffe865cea269143e5dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/545404e7e1c72985557ccffe865cea269143e5dd",
      "tree": {
        "sha": "bb70ffa49570a295317a642f0eff9c28104b6e14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb70ffa49570a295317a642f0eff9c28104b6e14"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6d6bc8abb721be68a3d2cdba11ceb5e9814c9b1",
          "sha": "c6d6bc8abb721be68a3d2cdba11ceb5e9814c9b1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d6bc8abb721be68a3d2cdba11ceb5e9814c9b1"
        }
      ],
      "message": "fuzz: Add RPC interface fuzzing. Increase fuzzing coverage from 65% to 70%.",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-04-28T06:34:20Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-04-28T06:35:46Z"
      },
      "sha": "545404e7e1c72985557ccffe865cea269143e5dd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4654723914,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1NDcyMzkxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4654723914",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T06:38:39Z"
    },
    {
      "event": "commented",
      "id": 828229380,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyODIyOTM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828229380",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T07:45:13Z",
      "updated_at": "2021-04-28T07:45:13Z",
      "author_association": "MEMBER",
      "body": "Concept ACK 545404e7e1c72985557ccffe865cea269143e5dd\r\n\r\nIf this is leading to too much (maintenance) hassle, it can be reverted.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-828229380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169"
    },
    {
      "event": "merged",
      "id": 4655047433,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDY1NTA0NzQzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4655047433",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e45863166f5e44cc2c380f4667812fcd3cddc73b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e45863166f5e44cc2c380f4667812fcd3cddc73b",
      "created_at": "2021-04-28T07:46:27Z"
    },
    {
      "event": "closed",
      "id": 4655047450,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDY1NTA0NzQ1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4655047450",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T07:46:28Z"
    },
    {
      "event": "reviewed",
      "id": 646723483,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NzIzNDgz",
      "url": null,
      "actor": null,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#pullrequestreview-646723483",
      "submitted_at": "2021-04-28T08:19:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
    },
    {
      "event": "referenced",
      "id": 4658084395,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NTgwODQzOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4658084395",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6c43015a6827d56420dfb98eed19a548d4a14d6e",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6c43015a6827d56420dfb98eed19a548d4a14d6e",
      "created_at": "2021-04-28T16:47:36Z"
    },
    {
      "event": "referenced",
      "id": 4679384798,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzkzODQ3OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4679384798",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ea71726a54e73df172a90057449c7d69cbf05a84",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/ea71726a54e73df172a90057449c7d69cbf05a84",
      "created_at": "2021-05-03T17:48:35Z"
    },
    {
      "event": "referenced",
      "id": 4679418974,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2Nzk0MTg5NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4679418974",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3f760df98f0cfe7b0596d3213fed3c8877f07649",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/3f760df98f0cfe7b0596d3213fed3c8877f07649",
      "created_at": "2021-05-03T17:56:27Z"
    },
    {
      "event": "referenced",
      "id": 6723196461,
      "node_id": "REFE_lADOABII584wJJMSzwAAAAGQu9Yt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6723196461",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d51f42534f5a4fed75aeec8d327bd6a3a9f36bd9",
      "commit_url": "https://api.github.com/repos/ElementsProject/elements/commits/d51f42534f5a4fed75aeec8d327bd6a3a9f36bd9",
      "created_at": "2022-06-01T21:22:14Z"
    },
    {
      "event": "locked",
      "id": 7199125801,
      "node_id": "LOE_lADOABII584wJJMSzwAAAAGtGfEp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199125801",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:21:10Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575675324",
      "pull_request_review_id": 589972631,
      "id": 575675324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY3NTMyNA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\r\n```",
      "created_at": "2021-02-13T14:52:14Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r575675324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575675324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576402952",
      "pull_request_review_id": 590731477,
      "id": 576402952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQwMjk1Mg==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "in_reply_to_id": 575675324,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "First code review LGTM otherwise.",
      "created_at": "2021-02-15T20:10:17Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r576402952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576402952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580039685",
      "pull_request_review_id": 595076304,
      "id": 580039685,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAzOTY4NQ==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        util::Ref context{m_node};\n+        JSONRPCRequest request{context};\n+        request.fHelp = false;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        request.strMethod = rpc_method;\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",         // avoid DNS lookups\n+    \"addnode\",               // avoid DNS lookups\n+    \"addpeeraddress\",        // avoid DNS lookups\n+    \"analyzepsbt\",           // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\",  // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",          // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\",            // avoid writing to disk\n+#endif\n+    \"generatetoaddress\",     // avoid timeout\n+    \"gettxoutproof\",         // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\",          // avoid reading from disk\n+#endif\n+    \"invalidateblock\",       // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\",            // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static std::unique_ptr<RPCFuzzTestingSetup> setup = std::make_unique<RPCFuzzTestingSetup>(CBaseChainParams::REGTEST, std::vector<const char*>{\"-nodebuglogfile\"});",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 318,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should use MakeNoLogFileContext?",
      "created_at": "2021-02-22T07:47:42Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r580039685",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580039685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621602312",
      "pull_request_review_id": 646361286,
      "id": 621602312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTYwMjMxMg==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        util::Ref context{m_node};\n+        JSONRPCRequest request{context};\n+        request.fHelp = false;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        request.strMethod = rpc_method;\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",         // avoid DNS lookups\n+    \"addnode\",               // avoid DNS lookups\n+    \"addpeeraddress\",        // avoid DNS lookups\n+    \"analyzepsbt\",           // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\",  // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",          // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\",            // avoid writing to disk\n+#endif\n+    \"generatetoaddress\",     // avoid timeout\n+    \"gettxoutproof\",         // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\",          // avoid reading from disk\n+#endif\n+    \"invalidateblock\",       // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\",            // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static std::unique_ptr<RPCFuzzTestingSetup> setup = std::make_unique<RPCFuzzTestingSetup>(CBaseChainParams::REGTEST, std::vector<const char*>{\"-nodebuglogfile\"});",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 318,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "in_reply_to_id": 580039685,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Done!",
      "created_at": "2021-04-27T21:09:02Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621602312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621602312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621607064",
      "pull_request_review_id": 646367092,
      "id": 621607064,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTYwNzA2NA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
      "in_reply_to_id": 575675324,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed!",
      "created_at": "2021-04-27T21:17:03Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621607064",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621607064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621833653",
      "pull_request_review_id": 646616471,
      "id": 621833653,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzMzY1Mw==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed?",
      "created_at": "2021-04-28T05:49:47Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621833653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621833653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621836878",
      "pull_request_review_id": 646616471,
      "id": 621836878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzNjg3OA==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\", // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static const auto setup = MakeNoLogFileContext<RPCFuzzTestingSetup>();\n+    SetRPCWarmupFinished();\n+    return setup.get();\n+}\n+}; // namespace\n+\n+void initialize_rpc()\n+{\n+    rpc_testing_setup = InitializeRPCFuzzTestingSetup();\n+    const std::vector<std::string> supported_rpc_commands = rpc_testing_setup->GetRPCCommands();\n+    for (const std::string& rpc_command : supported_rpc_commands) {\n+        const bool safe_for_fuzzing = std::find(RPC_COMMANDS_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_SAFE_FOR_FUZZING.end();\n+        const bool not_safe_for_fuzzing = std::find(RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end();\n+        if (!(safe_for_fuzzing || not_safe_for_fuzzing)) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" not found in RPC_COMMANDS_SAFE_FOR_FUZZING or RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+        if (safe_for_fuzzing && not_safe_for_fuzzing) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" found in *both* RPC_COMMANDS_SAFE_FOR_FUZZING and RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_NOT_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    const char* limit_to_rpc_command_env = getenv(\"LIMIT_TO_RPC_COMMAND\");",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 353,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const char* limit_to_rpc_command_env = std::getenv(\"LIMIT_TO_RPC_COMMAND\");\r\n```",
      "created_at": "2021-04-28T05:57:25Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621836878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621836878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621837799",
      "pull_request_review_id": 646616471,
      "id": 621837799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzNzc5OQ==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstd::string g_limit_to_rpc_command;\r\n```",
      "created_at": "2021-04-28T05:59:31Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621837799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621837799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621839108",
      "pull_request_review_id": 646622591,
      "id": 621839108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzOTEwOA==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2021-04-28T06:02:35Z",
      "updated_at": "2021-04-28T06:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621839108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621839108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857715",
      "pull_request_review_id": 646643949,
      "id": 621857715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1NzcxNQ==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": 621839108,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed! Thanks!",
      "created_at": "2021-04-28T06:39:17Z",
      "updated_at": "2021-04-28T06:39:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857792",
      "pull_request_review_id": 646644023,
      "id": 621857792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1Nzc5Mg==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": 621833653,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed! Thanks!",
      "created_at": "2021-04-28T06:39:25Z",
      "updated_at": "2021-04-28T06:39:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857792",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857947",
      "pull_request_review_id": 646644243,
      "id": 621857947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1Nzk0Nw==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\", // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static const auto setup = MakeNoLogFileContext<RPCFuzzTestingSetup>();\n+    SetRPCWarmupFinished();\n+    return setup.get();\n+}\n+}; // namespace\n+\n+void initialize_rpc()\n+{\n+    rpc_testing_setup = InitializeRPCFuzzTestingSetup();\n+    const std::vector<std::string> supported_rpc_commands = rpc_testing_setup->GetRPCCommands();\n+    for (const std::string& rpc_command : supported_rpc_commands) {\n+        const bool safe_for_fuzzing = std::find(RPC_COMMANDS_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_SAFE_FOR_FUZZING.end();\n+        const bool not_safe_for_fuzzing = std::find(RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end();\n+        if (!(safe_for_fuzzing || not_safe_for_fuzzing)) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" not found in RPC_COMMANDS_SAFE_FOR_FUZZING or RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+        if (safe_for_fuzzing && not_safe_for_fuzzing) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" found in *both* RPC_COMMANDS_SAFE_FOR_FUZZING and RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_NOT_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    const char* limit_to_rpc_command_env = getenv(\"LIMIT_TO_RPC_COMMAND\");",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 353,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": 621836878,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed. Thanks!",
      "created_at": "2021-04-28T06:39:43Z",
      "updated_at": "2021-04-28T06:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621858008",
      "pull_request_review_id": 646644313,
      "id": 621858008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1ODAwOA==",
      "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;",
      "path": "src/test/fuzz/rpc.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
      "in_reply_to_id": 621837799,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed. Thanks!",
      "created_at": "2021-04-28T06:39:50Z",
      "updated_at": "2021-04-28T06:39:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621858008",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621858008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920004",
      "pull_request_review_id": 646723483,
      "id": 621920004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDAwNA==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why is this unsafe, but the other generate* calls are safe?",
      "created_at": "2021-04-28T08:10:05Z",
      "updated_at": "2021-04-28T08:19:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920136",
      "pull_request_review_id": 646723483,
      "id": 621920136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDEzNg==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unused?",
      "created_at": "2021-04-28T08:10:14Z",
      "updated_at": "2021-04-28T08:19:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920483",
      "pull_request_review_id": 646723483,
      "id": 621920483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDQ4Mw==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unused?",
      "created_at": "2021-04-28T08:10:41Z",
      "updated_at": "2021-04-28T08:19:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920578",
      "pull_request_review_id": 646723483,
      "id": 621920578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDU3OA==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 83,
      "original_position": 83,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed?",
      "created_at": "2021-04-28T08:10:48Z",
      "updated_at": "2021-04-28T08:19:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621927784",
      "pull_request_review_id": 646723483,
      "id": 621927784,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyNzc4NA==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decoderawtransaction\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"invalidateblock\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 152,
      "original_position": 152,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems dangerous. If the rpc is ever changed to take a file path, how would we know to adjust this line?",
      "created_at": "2021-04-28T08:19:39Z",
      "updated_at": "2021-04-28T08:19:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621927784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621927784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623306715",
      "pull_request_review_id": 648541424,
      "id": 623306715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMwNjcxNQ==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": 621920004,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Addressed in #21810:\r\n\r\n```\r\n    \"generatetoaddress\",    // avoid prohibitively slow execution (when `num_blocks` is large)\r\n    \"generatetodescriptor\", // avoid prohibitively slow execution (when `nblocks` is large)\r\n```",
      "created_at": "2021-04-29T18:48:52Z",
      "updated_at": "2021-04-29T18:48:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623306715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623306715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623311399",
      "pull_request_review_id": 648547448,
      "id": 623311399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxMTM5OQ==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decoderawtransaction\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"invalidateblock\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 152,
      "original_position": 152,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": 621927784,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. Disabled as a precautionary measure in #21810.\r\n\r\n`dump*`, `save*`, `import*` and `load*` commands should probably not be part of `RPC_COMMANDS_SAFE_FOR_FUZZING`.\r\n\r\nLonger term we could perhaps also find a clever way to annotate/auto-detect RPC commands with file path arguments and have them automatically removed from `RPC_COMMANDS_SAFE_FOR_FUZZING` if they are incorrectly included there for some reason. Belts and suspenders! :)",
      "created_at": "2021-04-29T18:56:17Z",
      "updated_at": "2021-04-29T19:05:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623311399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623311399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623316981",
      "pull_request_review_id": 648554651,
      "id": 623316981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNjk4MQ==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": 621920136,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Addressed in follow-up.",
      "created_at": "2021-04-29T19:05:04Z",
      "updated_at": "2021-04-29T19:05:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623316981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623316981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317017",
      "pull_request_review_id": 648554709,
      "id": 623317017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNzAxNw==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": 621920483,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Addressed in follow-up.",
      "created_at": "2021-04-29T19:05:08Z",
      "updated_at": "2021-04-29T19:05:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623317017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317211",
      "pull_request_review_id": 648554979,
      "id": 623317211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNzIxMQ==",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)",
      "path": "src/test/fuzz/rpc.cpp",
      "position": 83,
      "original_position": 83,
      "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
      "in_reply_to_id": 621920578,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems so! Thanks! Re-enabled in follow-up.",
      "created_at": "2021-04-29T19:05:27Z",
      "updated_at": "2021-04-29T19:05:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623317211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    }
  ]
}