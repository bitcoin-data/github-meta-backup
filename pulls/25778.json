{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
    "id": 1017251982,
    "node_id": "PR_kwDOABII5848ogiO",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25778",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25778.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25778.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/08e5172fbc5c4f5032c10dde95d463e33b644e2a",
    "number": 25778,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "fuzz: Modify tx_pool_standard target to test package processing",
    "user": {
      "login": "chinggg",
      "id": 24590067,
      "node_id": "MDQ6VXNlcjI0NTkwMDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chinggg",
      "html_url": "https://github.com/chinggg",
      "followers_url": "https://api.github.com/users/chinggg/followers",
      "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
      "organizations_url": "https://api.github.com/users/chinggg/orgs",
      "repos_url": "https://api.github.com/users/chinggg/repos",
      "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/chinggg/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This draft PR can test package processing by creating package (vector of tx with ordered parents-childs relationship) instead of single tx in tx_pool_standard fuzz target.\r\n\r\nhttps://github.com/MarcoFalke/bitcoin-core/pull/78 has provided a draft for structural change, I only need to modify the anonymous function to create package. The basic idea is similar to https://github.com/bitcoin/bitcoin/blob/194f6dc43ccc330a8a4607be3a2b8935490d6db0/src/test/fuzz/txorphan.cpp#L51-L80, where we create tx from initial outpoints, then keep adding outs of newly constructed tx to outpoints in the loop. Since we want a package here, all new txs will be stored in a vector. The package should be valid since we don't have any orphan tx with dangling input, though we can consume a bool from `fuzz_data_provider` to invalidate the package order by swapping some txs.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-08-04T09:05:55Z",
    "updated_at": "2023-04-11T01:27:57Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "6249349956b972793d60bf892123bd1e908b82e2",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "chinggg:fuzz-pkg",
      "ref": "fuzz-pkg",
      "sha": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 481195064,
        "node_id": "R_kgDOHK50OA",
        "name": "bitcoin",
        "full_name": "chinggg/bitcoin",
        "owner": {
          "login": "chinggg",
          "id": 24590067,
          "node_id": "MDQ6VXNlcjI0NTkwMDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chinggg",
          "html_url": "https://github.com/chinggg",
          "followers_url": "https://api.github.com/users/chinggg/followers",
          "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
          "organizations_url": "https://api.github.com/users/chinggg/orgs",
          "repos_url": "https://api.github.com/users/chinggg/repos",
          "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/chinggg/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/chinggg/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/chinggg/bitcoin",
        "archive_url": "https://api.github.com/repos/chinggg/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/chinggg/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/chinggg/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/chinggg/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/chinggg/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/chinggg/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/chinggg/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/chinggg/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/chinggg/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/chinggg/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/chinggg/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/chinggg/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/chinggg/bitcoin/events",
        "forks_url": "https://api.github.com/repos/chinggg/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/chinggg/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/chinggg/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/chinggg/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/chinggg/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/chinggg/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/chinggg/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/chinggg/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/chinggg/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/chinggg/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/chinggg/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/chinggg/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/chinggg/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/chinggg/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/chinggg/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/chinggg/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:chinggg/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/chinggg/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/chinggg/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/chinggg/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/chinggg/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/chinggg/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/chinggg/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/chinggg/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/chinggg/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/chinggg/bitcoin/hooks",
        "svn_url": "https://github.com/chinggg/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 215693,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-10-27T07:38:41Z",
        "created_at": "2022-04-13T11:50:05Z",
        "updated_at": "2022-10-27T07:40:31Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "29d540b7ada890dd588c4825d40c27c5e6f20061",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 130,
    "deletions": 88,
    "changed_files": 1,
    "commits": 2,
    "review_comments": 8,
    "comments": 7
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMzMjg4ODFkNWNhOWZjMDRmNTljZmVlNjg3NGU2OWUwZWNlZjZkZGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3328881d5ca9fc04f59cfee6874e69e0ecef6dde",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3328881d5ca9fc04f59cfee6874e69e0ecef6dde",
      "tree": {
        "sha": "6199cb429b6b7ae948c97097527ac8dad7e8b01c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6199cb429b6b7ae948c97097527ac8dad7e8b01c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f765d4e232a57255dc13585f88bd8eb450da50c0",
          "sha": "f765d4e232a57255dc13585f88bd8eb450da50c0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f765d4e232a57255dc13585f88bd8eb450da50c0"
        }
      ],
      "message": "fuzz: Prepare tx_pool target for package fuzzing",
      "committer": {
        "name": "chinggg",
        "email": "24590067+chinggg@users.noreply.github.com",
        "date": "2022-08-04T08:36:15Z"
      },
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-08-02T10:30:09Z"
      },
      "sha": "3328881d5ca9fc04f59cfee6874e69e0ecef6dde"
    },
    {
      "event": "reviewed",
      "id": 1061546017,
      "node_id": "PRR_kwDOABII584_Regh",
      "url": null,
      "actor": null,
      "commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK based on description, thanks for working on this!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#pullrequestreview-1061546017",
      "submitted_at": "2022-08-04T09:07:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
    },
    {
      "event": "reviewed",
      "id": 1061550477,
      "node_id": "PRR_kwDOABII584_RfmN",
      "url": null,
      "actor": null,
      "commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#pullrequestreview-1061550477",
      "submitted_at": "2022-08-04T09:10:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
    },
    {
      "event": "labeled",
      "id": 7127339157,
      "node_id": "LE_lADOABII585PLFGWzwAAAAGo0pCV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7127339157",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T12:22:13Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 1062790474,
      "node_id": "PRR_kwDOABII584_WOVK",
      "url": null,
      "actor": null,
      "commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#pullrequestreview-1062790474",
      "submitted_at": "2022-08-05T03:03:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7132712453,
      "node_id": "HRFPE_lADOABII585PLFGWzwAAAAGpJI4F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7132712453",
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T03:10:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7140292621,
      "node_id": "HRFPE_lADOABII585PLFGWzwAAAAGpmDgN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7140292621",
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-06T01:44:38Z"
    },
    {
      "event": "reviewed",
      "id": 1064253935,
      "node_id": "PRR_kwDOABII584_bznv",
      "url": null,
      "actor": null,
      "commit_id": "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#pullrequestreview-1064253935",
      "submitted_at": "2022-08-06T02:11:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA4ZTUxNzJmYmM1YzRmNTAzMmMxMGRkZTk1ZDQ2M2UzM2I2NDRlMmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "tree": {
        "sha": "7d2d3190e08d33f1d318384e06b8e6305e851911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d2d3190e08d33f1d318384e06b8e6305e851911"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3328881d5ca9fc04f59cfee6874e69e0ecef6dde",
          "sha": "3328881d5ca9fc04f59cfee6874e69e0ecef6dde",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3328881d5ca9fc04f59cfee6874e69e0ecef6dde"
        }
      ],
      "message": "fuzz: Construct valid package for tx_pool_standard target",
      "committer": {
        "name": "chinggg",
        "email": "24590067+chinggg@users.noreply.github.com",
        "date": "2022-08-12T08:00:09Z"
      },
      "author": {
        "name": "chinggg",
        "email": "24590067+chinggg@users.noreply.github.com",
        "date": "2022-08-04T07:05:08Z"
      },
      "sha": "08e5172fbc5c4f5032c10dde95d463e33b644e2a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7177240919,
      "node_id": "HRFPE_lADOABII585PLFGWzwAAAAGrzAFX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7177240919",
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T08:01:56Z"
    },
    {
      "event": "commented",
      "id": 1256019633,
      "node_id": "IC_kwDOABII585K3Vax",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256019633",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T10:02:33Z",
      "updated_at": "2022-12-28T07:43:57Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/25778#pullrequestreview-1061546017) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26758](https://github.com/bitcoin/bitcoin/pull/26758) (clang-tidy: Add `performance-no-automatic-move` check by hebasto)\n* [#26642](https://github.com/bitcoin/bitcoin/pull/26642) (clang-tidy: Add more `performance-*` checks and related fixes by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1256019633",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    },
    {
      "event": "commented",
      "id": 1337204374,
      "node_id": "IC_kwDOABII585PtB6W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1337204374",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T11:53:27Z",
      "updated_at": "2022-12-05T11:53:27Z",
      "author_association": "MEMBER",
      "body": "@chinggg are you planning on following up with the [build failures here](https://github.com/bitcoin/bitcoin/pull/25778/checks?check_run_id=7802283103)?\r\n```bash\r\n/usr/bin/ccache clang++ -ftrivial-auto-var-init=pattern -std=c++17 -DHAVE_CONFIG_H -I. -I../src/config  -DABORT_ON_FAILED_ASSUME -fmacro-prefix-map=/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu=. -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -DHAVE_BUILD_INFO -I. -I./minisketch/include -I./secp256k1/include -I./univalue/include  -I./leveldb/include  -fdebug-prefix-map=/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu=. -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -Wall -Wextra -Wgnu -Wformat -Wformat-security -Wvla -Wshadow-field -Wthread-safety -Wrange-loop-analysis -Wredundant-decls -Wunused-member-function -Wdate-time -Wconditional-uninitialized -Woverloaded-virtual -Wsuggest-override -Wunreachable-code-loop-increment -Wimplicit-fallthrough -Wdocumentation -Wno-unused-parameter -Wno-self-assign -Werror  -fsanitize=fuzzer,address,undefined,integer   -fPIE -g -O2 -c -o test/fuzz/fuzz-tx_pool.o `test -f 'test/fuzz/tx_pool.cpp' || echo './'`test/fuzz/tx_pool.cpp\r\ntest/fuzz/tx_pool.cpp:59:14: error: unused member function 'TransactionsDelta' [-Werror,-Wunused-member-function]\r\n    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\r\n             ^\r\n1 error generated.\r\nmake[2]: *** [Makefile:16988: test/fuzz/fuzz-tx_pool.o] Error 1\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1337204374",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    },
    {
      "event": "mentioned",
      "id": 7954095970,
      "node_id": "MEE_lADOABII585PLFGWzwAAAAHaGd9i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7954095970",
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T11:53:27Z"
    },
    {
      "event": "subscribed",
      "id": 7954095984,
      "node_id": "SE_lADOABII585PLFGWzwAAAAHaGd9w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7954095984",
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T11:53:27Z"
    },
    {
      "event": "commented",
      "id": 1337217140,
      "node_id": "IC_kwDOABII585PtFB0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1337217140",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T12:01:41Z",
      "updated_at": "2022-12-05T12:01:41Z",
      "author_association": "MEMBER",
      "body": "I think the build failures can be fixed, but then there will be fuzz failures and I never got around to fully debug this, as the package stuff is still being worked on as we speak",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1337217140",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    },
    {
      "event": "commented",
      "id": 1338905283,
      "node_id": "IC_kwDOABII585PzhLD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1338905283",
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T07:33:13Z",
      "updated_at": "2022-12-06T07:33:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake Sorry for the late reply. I just built this code with `./configure --enable-debug --enable-fuzz --with-gui=no` and my compiler (clang++ 15) recognized this `unused member function 'TransactionsDelta'` as a warning instead of an error. \r\nFor the completion of this PR, we might wait for the progress of the new package relay feature. The original BIP PR https://github.com/bitcoin/bips/pull/1324 has been closed and it seems \"the updated proposal is going to be significantly different\"",
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1338905283",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    },
    {
      "event": "mentioned",
      "id": 7963440393,
      "node_id": "MEE_lADOABII585PLFGWzwAAAAHaqHUJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7963440393",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T07:33:13Z"
    },
    {
      "event": "subscribed",
      "id": 7963440401,
      "node_id": "SE_lADOABII585PLFGWzwAAAAHaqHUR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7963440401",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T07:33:13Z"
    },
    {
      "event": "commented",
      "id": 1339008563,
      "node_id": "IC_kwDOABII585Pz6Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1339008563",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T09:14:08Z",
      "updated_at": "2022-12-06T09:14:08Z",
      "author_association": "MEMBER",
      "body": "Ok. Should we close this for now then, and reopen when we actually know what we have to fuzz?",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1339008563",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    },
    {
      "event": "labeled",
      "id": 8203171945,
      "node_id": "LE_lADOABII585PLFGWzwAAAAHo8nhp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8203171945",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T16:02:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1379029685,
      "node_id": "IC_kwDOABII585SMlK1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379029685",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T16:02:08Z",
      "updated_at": "2023-01-11T16:02:08Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1379029685",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    },
    {
      "event": "commented",
      "id": 1502555335,
      "node_id": "IC_kwDOABII585ZjyzH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1502555335",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-11T01:27:57Z",
      "updated_at": "2023-04-11T01:27:57Z",
      "author_association": "MEMBER",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#issuecomment-1502555335",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/937542523",
      "pull_request_review_id": 1061550477,
      "id": 937542523,
      "node_id": "PRRC_kwDOABII58434cN7",
      "diff_hunk": "@@ -177,45 +178,54 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         Assert(!outpoints_supply.empty());\n \n         // Create transaction to add to the mempool\n-        const CTransactionRef tx = [&] {\n-            CMutableTransaction tx_mut;\n-            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n-            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n-            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n-\n-            CAmount amount_in{0};\n-            for (int i = 0; i < num_in; ++i) {\n-                // Pop random outpoint\n-                auto pop = outpoints_rbf.begin();\n-                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n-                const auto outpoint = *pop;\n-                outpoints_rbf.erase(pop);\n-                amount_in += GetAmount(outpoint);\n-\n-                // Create input\n-                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n-                const auto script_sig = CScript{};\n-                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n-                CTxIn in;\n-                in.prevout = outpoint;\n-                in.nSequence = sequence;\n-                in.scriptSig = script_sig;\n-                in.scriptWitness.stack = script_wit_stack;\n-\n-                tx_mut.vin.push_back(in);\n-            }\n-            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n-            const auto amount_out = (amount_in - amount_fee) / num_out;\n-            for (int i = 0; i < num_out; ++i) {\n-                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n-            }\n-            const auto tx = MakeTransactionRef(tx_mut);\n-            // Restore previously removed outpoints\n-            for (const auto& in : tx->vin) {\n-                Assert(outpoints_rbf.insert(in.prevout).second);\n+        const Package package = [&] {\n+            auto n_tx = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, MAX_PACKAGE_COUNT + 5);\n+            Package txs;\n+            while (n_tx--) {\n+                CMutableTransaction tx_mut;\n+                tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+                tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+                const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+                CAmount amount_in{0};\n+                for (int i = 0; i < num_in; ++i) {\n+                    // Pop random outpoint\n+                    auto pop = outpoints_rbf.begin();\n+                    std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                    const auto outpoint = *pop;\n+                    outpoints_rbf.erase(pop);\n+                    amount_in += GetAmount(outpoint);",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 101,
      "original_position": 66,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "in_reply_to_id": null,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now the fuzz target has some shallow bugs. For example, `GetAmount` fail to get coin value. I guess that's because I simply add newly constructed tx out to outpoints, so `CCoinsViewMemPool::GetCoin` cannot find the outpoint in mempool.\r\n\r\n```log\r\ntest/fuzz/tx_pool.cpp:164 operator(): Assertion `amount_view.GetCoin(outpoint, c)' failed.\r\n==3026798== ERROR: libFuzzer: deadly signal\r\n    #0 0x5609ccdba680 in __sanitizer_print_stack_trace (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xfd7680)\r\n    #1 0x5609ccd66988 in fuzzer::PrintStackTrace() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf83988)\r\n    #2 0x5609ccd4bad3 in fuzzer::Fuzzer::CrashCallback() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf68ad3)\r\n    #3 0x7f173207341f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1441f)\r\n    #4 0x7f1731cd900a in __libc_signal_restore_set /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7f1731cd900a in raise /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7f1731cb8858 in abort /build/glibc-SzIz7B/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x5609cf0fa49d in assertion_fail(char const*, int, char const*, char const*) src/util/check.cpp:13:5\r\n    #8 0x5609cd319c02 in bool&& inline_assertion_check<true, bool>(bool&&, char const*, int, char const*, char const*) src/./util/check.h:67:13\r\n    #9 0x5609cd5cbdda in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_4::operator()(COutPoint const&) const src/test/fuzz/tx_pool.cpp:164:9\r\n    #10 0x5609cd5cc62a in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_5::operator()() const src/test/fuzz/tx_pool.cpp:198:34\r\n```\r\n\r\nThere are at least two different ways to fix the assert:\r\n * extend the outpoints_* datastructures with the amount and use that directly\r\n * add a new datastructure to keep track of amounts and modify GetAmount to use that",
      "created_at": "2022-08-04T09:10:44Z",
      "updated_at": "2022-08-04T14:51:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r937542523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/937542523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 217,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938398224",
      "pull_request_review_id": 1062783428,
      "id": 938398224,
      "node_id": "PRRC_kwDOABII58437tIQ",
      "diff_hunk": "@@ -177,45 +178,54 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         Assert(!outpoints_supply.empty());\n \n         // Create transaction to add to the mempool\n-        const CTransactionRef tx = [&] {\n-            CMutableTransaction tx_mut;\n-            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n-            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n-            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n-\n-            CAmount amount_in{0};\n-            for (int i = 0; i < num_in; ++i) {\n-                // Pop random outpoint\n-                auto pop = outpoints_rbf.begin();\n-                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n-                const auto outpoint = *pop;\n-                outpoints_rbf.erase(pop);\n-                amount_in += GetAmount(outpoint);\n-\n-                // Create input\n-                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n-                const auto script_sig = CScript{};\n-                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n-                CTxIn in;\n-                in.prevout = outpoint;\n-                in.nSequence = sequence;\n-                in.scriptSig = script_sig;\n-                in.scriptWitness.stack = script_wit_stack;\n-\n-                tx_mut.vin.push_back(in);\n-            }\n-            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n-            const auto amount_out = (amount_in - amount_fee) / num_out;\n-            for (int i = 0; i < num_out; ++i) {\n-                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n-            }\n-            const auto tx = MakeTransactionRef(tx_mut);\n-            // Restore previously removed outpoints\n-            for (const auto& in : tx->vin) {\n-                Assert(outpoints_rbf.insert(in.prevout).second);\n+        const Package package = [&] {\n+            auto n_tx = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, MAX_PACKAGE_COUNT + 5);\n+            Package txs;\n+            while (n_tx--) {\n+                CMutableTransaction tx_mut;\n+                tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+                tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+                const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+                CAmount amount_in{0};\n+                for (int i = 0; i < num_in; ++i) {\n+                    // Pop random outpoint\n+                    auto pop = outpoints_rbf.begin();\n+                    std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                    const auto outpoint = *pop;\n+                    outpoints_rbf.erase(pop);\n+                    amount_in += GetAmount(outpoint);",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 101,
      "original_position": 66,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "in_reply_to_id": 937542523,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This assertion failure is solved in https://github.com/bitcoin/bitcoin/commit/c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11, by changing `amount_view` to be non-const and calling `amount_view.PackageAddTransaction(tx);` after each tx is constructed.",
      "created_at": "2022-08-05T02:47:29Z",
      "updated_at": "2022-08-06T04:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r938398224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938398224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 217,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938403815",
      "pull_request_review_id": 1062790474,
      "id": 938403815,
      "node_id": "PRRC_kwDOABII58437ufn",
      "diff_hunk": "@@ -239,33 +251,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+                }\n+            }\n+        }\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n-\n         Assert(accepted != added.empty());\n-        Assert(accepted == res.m_state.IsValid());\n-        Assert(accepted != res.m_state.IsInvalid());\n         if (accepted) {\n-            Assert(added.size() == 1); // For now, no package acceptance\n-            Assert(tx == *added.begin());\n+            Assert(Package(added.begin(), added.end()) == package);\n         } else {\n-            // Do not consider rejected transaction removed\n-            removed.erase(tx);\n+            // Do not consider rejected transactions removed\n+            for (const auto& tx : package) {\n+                removed.erase(tx);\n+            }\n         }\n \n         // Helper to insert spent and created outpoints of a tx into collections",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 228,
      "original_position": 194,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "in_reply_to_id": null,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another bug assert violation happens in `insert_tx`.\r\n\r\n```log\r\ntest/fuzz/tx_pool.cpp:308 operator(): Assertion `set.get().emplace(tx.GetHash(), i).second' failed.\r\n==3192931== ERROR: libFuzzer: deadly signal\r\n    #0 0x55c5a9cbf680 in __sanitizer_print_stack_trace (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xfd7680)\r\n    #1 0x55c5a9c6b988 in fuzzer::PrintStackTrace() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf83988)\r\n    #2 0x55c5a9c50ad3 in fuzzer::Fuzzer::CrashCallback() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf68ad3)\r\n    #3 0x7f666ad8a41f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1441f)\r\n    #4 0x7f666a9f000a in __libc_signal_restore_set /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7f666a9f000a in raise /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7f666a9cf858 in abort /build/glibc-SzIz7B/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x55c5abfff51d in assertion_fail(char const*, int, char const*, char const*) src/util/check.cpp:13:5\r\n    #8 0x55c5aa21ec02 in bool&& inline_assertion_check<true, bool>(bool&&, char const*, int, char const*, char const*) src/./util/check.h:67:13\r\n    #9 0x55c5aa4d3759 in auto (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_1::operator()<CTransaction>(std::vector<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > >, std::allocator<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > > > >, std::vector<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > >, std::allocator<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > > > >, CTransaction const&) const src/test/fuzz/tx_pool.cpp:308:21\r\n    #10 0x55c5aa4cdf0a in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>) src/test/fuzz/tx_pool.cpp:327:17\r\n```\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/tx_pool.cpp#L271-L296\r\n\r\nI am not sure about what the loops are doing. Maybe `outpoint_rbf` should not be modified when constructing transactions.",
      "created_at": "2022-08-05T03:03:24Z",
      "updated_at": "2022-08-05T03:09:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r938403815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938403815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 311,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467868",
      "pull_request_review_id": 1064253935,
      "id": 939467868,
      "node_id": "PRRC_kwDOABII5843_yRc",
      "diff_hunk": "@@ -239,33 +253,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "in_reply_to_id": null,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The assertion `result_package.m_tx_results.size() == package.size()` failed quickly. I debug the testcase and it seems results.size() < package.size().\r\n\r\n```\r\ntest/fuzz/tx_pool.cpp:286 tx_pool_standard_fuzz_target: Assertion `result_package.m_tx_results.size() == package.size()' failed.\r\n==3398073== ERROR: libFuzzer: deadly signal\r\n    #0 0x55e1fcaec680 in __sanitizer_print_stack_trace (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xfd8680)\r\n    #1 0x55e1fca98988 in fuzzer::PrintStackTrace() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf84988)\r\n    #2 0x55e1fca7dad3 in fuzzer::Fuzzer::CrashCallback() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf69ad3)\r\n    #3 0x7ff789c3741f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1441f)\r\n    #4 0x7ff78989d00a in __libc_signal_restore_set /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7ff78989d00a in raise /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7ff78987c858 in abort /build/glibc-SzIz7B/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x55e1fee2dc3d in assertion_fail(char const*, int, char const*, char const*) src/util/check.cpp:13:5\r\n    #8 0x55e1fd04bc02 in bool&& inline_assertion_check<true, bool>(bool&&, char const*, int, char const*, char const*) src/./util/check.h:67:13\r\n    #9 0x55e1fd2f9f0b in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>) src/test/fuzz/tx_pool.cpp:286:17\r\n```",
      "created_at": "2022-08-06T02:11:23Z",
      "updated_at": "2022-08-06T04:09:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939467868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467929",
      "pull_request_review_id": 1064254021,
      "id": 939467929,
      "node_id": "PRRC_kwDOABII5843_ySZ",
      "diff_hunk": "@@ -239,33 +251,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+                }\n+            }\n+        }\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n-\n         Assert(accepted != added.empty());\n-        Assert(accepted == res.m_state.IsValid());\n-        Assert(accepted != res.m_state.IsInvalid());\n         if (accepted) {\n-            Assert(added.size() == 1); // For now, no package acceptance\n-            Assert(tx == *added.begin());\n+            Assert(Package(added.begin(), added.end()) == package);\n         } else {\n-            // Do not consider rejected transaction removed\n-            removed.erase(tx);\n+            // Do not consider rejected transactions removed\n+            for (const auto& tx : package) {\n+                removed.erase(tx);\n+            }\n         }\n \n         // Helper to insert spent and created outpoints of a tx into collections",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 228,
      "original_position": 194,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "in_reply_to_id": 938403815,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is solved in https://github.com/bitcoin/bitcoin/commit/6ca7fcf2247ed7067ebaf3ee8dc325d49142d666 by use a new copy of `outpoint_rbf` in the loop.",
      "created_at": "2022-08-06T02:12:24Z",
      "updated_at": "2022-08-06T02:12:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939467929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 311,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939572574",
      "pull_request_review_id": 1064346914,
      "id": 939572574,
      "node_id": "PRRC_kwDOABII5844AL1e",
      "diff_hunk": "@@ -239,33 +253,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "in_reply_to_id": 939467868,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, that is probably my fault. I wrote the fuzz code without reading the validation code. I should read more about the interface and the meaning of valid/invalid in the context of packages. Apparently we can't deduce any meaningful information useful for fuzzing from the result. So for now I'd suggest to remove the failing Asserts.\r\n\r\nMoreover, the \"tracking\" code seems not prepared for packages. I think it can be fixed by tracking the history of added/removed transactions chronologically. (That is, switching the two std::set into one std::vector)\r\n\r\nSee this diff:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/tx_pool.cpp b/src/test/fuzz/tx_pool.cpp\r\nindex c38e3420f6..b01b4f978a 100644\r\n--- a/src/test/fuzz/tx_pool.cpp\r\n+++ b/src/test/fuzz/tx_pool.cpp\r\n@@ -70,6 +70,24 @@ struct TransactionsDelta final : public CValidationInterface {\r\n     }\r\n };\r\n \r\n+struct TransactionsHistory final : public CValidationInterface {\r\n+    std::vector<std::tuple<bool, CTransactionRef>>& m_history;\r\n+\r\n+    explicit TransactionsHistory(std::vector<std::tuple<bool, CTransactionRef>>& h)\r\n+        : m_history{h} {}\r\n+\r\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\r\n+    {\r\n+        m_history.emplace_back(true, tx);\r\n+    }\r\n+\r\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\r\n+    {\r\n+        if (reason != MemPoolRemovalReason::SIZELIMIT)\r\n+            m_history.emplace_back(false, tx);\r\n+    }\r\n+};\r\n+\r\n void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\r\n {\r\n     args.ForceSetArg(\"-limitancestorcount\",\r\n@@ -247,9 +265,8 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n         }\r\n \r\n         // Remember all removed and added transactions\r\n-        std::set<CTransactionRef> removed;\r\n-        std::set<CTransactionRef> added;\r\n-        auto txr = std::make_shared<TransactionsDelta>(removed, added);\r\n+        std::vector<std::tuple<bool, CTransactionRef>> history;\r\n+        auto txr = std::make_shared<TransactionsHistory>(history);\r\n         RegisterSharedValidationInterface(txr);\r\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\r\n \r\n@@ -283,7 +300,6 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n                 }\r\n             }\r\n             if (accepted) {\r\n-                Assert(result_package.m_tx_results.size() == package.size());\r\n                 for (const auto& tx_res : result_package.m_tx_results) {\r\n                     Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID);\r\n                 }\r\n@@ -291,15 +307,6 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n         }\r\n         SyncWithValidationInterfaceQueue();\r\n         UnregisterSharedValidationInterface(txr);\r\n-        Assert(accepted != added.empty());\r\n-        if (accepted) {\r\n-            Assert(Package(added.begin(), added.end()) == package);\r\n-        } else {\r\n-            // Do not consider rejected transactions removed\r\n-            for (const auto& tx : package) {\r\n-                removed.erase(tx);\r\n-            }\r\n-        }\r\n \r\n         // Helper to insert spent and created outpoints of a tx into collections\r\n         using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\r\n@@ -317,16 +324,17 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n         };\r\n         // Add created outpoints, remove spent outpoints\r\n         {\r\n+            for (const auto& [added,tx]:history){\r\n             // Outpoints that no longer exist at all\r\n             std::set<COutPoint> consumed_erased;\r\n             // Outpoints that no longer count toward the total supply\r\n             std::set<COutPoint> consumed_supply;\r\n-            for (const auto& removed_tx : removed) {\r\n-                insert_tx(/*created_by_tx=*/{consumed_erased}, /*consumed_by_tx=*/{outpoints_supply}, /*tx=*/*removed_tx);\r\n-            }\r\n-            for (const auto& added_tx : added) {\r\n-                insert_tx(/*created_by_tx=*/{outpoints_supply, outpoints_rbf}, /*consumed_by_tx=*/{consumed_supply}, /*tx=*/*added_tx);\r\n+            if (added) {\r\n+                insert_tx(/*created_by_tx=*/{outpoints_supply, outpoints_rbf}, /*consumed_by_tx=*/{consumed_supply}, /*tx=*/*tx);\r\n+            } else {\r\n+                insert_tx(/*created_by_tx=*/{consumed_erased}, /*consumed_by_tx=*/{outpoints_supply}, /*tx=*/*tx);\r\n             }\r\n+\r\n             for (const auto& p : consumed_erased) {\r\n                 Assert(outpoints_supply.erase(p) == 1);\r\n                 Assert(outpoints_rbf.erase(p) == 1);\r\n@@ -334,6 +342,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n             for (const auto& p : consumed_supply) {\r\n                 Assert(outpoints_supply.erase(p) == 1);\r\n             }\r\n+            }\r\n         }\r\n     }\r\n     Finish(fuzzed_data_provider, tx_pool, chainstate);\r\n```\r\n\r\nHowever, now I am running into an assert in validation, which might be an actual bug :smiling_face_with_tear: ",
      "created_at": "2022-08-06T20:29:39Z",
      "updated_at": "2022-08-06T20:29:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939572574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939572574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944214026",
      "pull_request_review_id": 1070734307,
      "id": 944214026,
      "node_id": "PRRC_kwDOABII5844R5AK",
      "diff_hunk": "@@ -239,33 +253,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "in_reply_to_id": 939467868,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry for the late response, your diff is applied in https://github.com/bitcoin/bitcoin/commit/08e5172fbc5c4f5032c10dde95d463e33b644e2a, with some formatting changes by clangd. I will try to find the reason of crash in `validation.cpp:414: bool CheckInputsFromMempoolAndCache(const CTransaction &, TxValidationState &, const CCoinsViewCache &, const CTxMemPool &, unsigned int, PrecomputedTransactionData &, CCoinsViewCache &): Assertion !coinFromUTXOSet.IsSpent()' failed`. It happens after 3 continues on breakpoint `tx_pool.cpp:291`\r\n\r\n```\r\n#10 0x5634390f86ad in CheckInputsFromMempoolAndCache(CTransaction const&, TxValidationState&, CCoinsViewCache const&, CTxMemPool const&, unsigned int, PrecomputedTransactionData&, CCoinsViewCache&) src/./src/validation.cpp:414:13\r\n#11 0x5634390f4729 in (anonymous namespace)::MemPoolAccept::ConsensusScriptChecks((anonymous namespace)::MemPoolAccept::ATMPArgs const&, (anonymous namespace)::MemPoolAccept::Workspace&) src/./src/validation.cpp:1040:10\r\n#12 0x563439100255 in (anonymous namespace)::MemPoolAccept::SubmitPackage((anonymous namespace)::MemPoolAccept::ATMPArgs const&, std::vector<(anonymous namespace)::MemPoolAccept::Workspace, std::allocator<(anonymous namespace)::MemPoolAccept::Workspace> >&, PackageValidationState&, std::map<uint256 const, MempoolAcceptResult const, std::less<uint256 const>, std::allocator<std::pair<uint256 const, MempoolAcceptResult const> > >&) src/./src/validation.cpp:1112:14\r\n#13 0x5634390fc3ee in (anonymous namespace)::MemPoolAccept::AcceptMultipleTransactions(std::vector<std::shared_ptr<CTransaction const>, std::allocator<std::shared_ptr<CTransaction const> > > const&, (anonymous namespace)::MemPoolAccept::ATMPArgs&) src/./src/validation.cpp:1273:10\r\n#14 0x5634390fe435 in (anonymous namespace)::MemPoolAccept::AcceptPackage(std::vector<std::shared_ptr<CTransaction const>, std::allocator<std::shared_ptr<CTransaction const> > > const&, (anonymous namespace)::MemPoolAccept::ATMPArgs&) src/./src/validation.cpp:1404:30\r\n#15 0x5634390a201c in ProcessNewPackage(CChainState&, CTxMemPool&, std::vector<std::shared_ptr<CTransaction const>, std::allocator<std::shared_ptr<CTransaction const> > > const&, bool)::$_2::operator()() const src/./src/validation.cpp:1458:59\r\n#16 0x5634390a187f in ProcessNewPackage(CChainState&, CTxMemPool&, std::vector<std::shared_ptr<CTransaction const>, std::allocator<std::shared_ptr<CTransaction const> > > const&, bool) src/./src/validation.cpp:1451:25\r\n#17 0x5634385288a5 in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_7::operator()() const src/./src/test/fuzz/tx_pool.cpp:291:39\r\n```",
      "created_at": "2022-08-12T08:04:04Z",
      "updated_at": "2022-08-12T08:19:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r944214026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944214026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944286689",
      "pull_request_review_id": 1070835963,
      "id": 944286689,
      "node_id": "PRRC_kwDOABII5844SKvh",
      "diff_hunk": "@@ -239,33 +253,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "08e5172fbc5c4f5032c10dde95d463e33b644e2a",
      "original_commit_id": "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "in_reply_to_id": 939467868,
      "user": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The crash happens when one of the tx finally get passed into `CheckInputsFromMempoolAndCache`, it assume that the tx is either a UTXO from mempool or UTXO set. The assert fails because `coinFromUTXOSet` is actually `coinEmpty`.",
      "created_at": "2022-08-12T09:31:58Z",
      "updated_at": "2022-08-12T09:31:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r944286689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944286689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    }
  ]
}