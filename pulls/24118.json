{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
    "id": 827973883,
    "node_id": "PR_kwDOABII584xWeD7",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24118",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24118.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24118.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
    "number": 24118,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Add 'sendall' RPC née sweep",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": " Add sendall RPC née sweep\r\n\r\n_Motivation_\r\nCurrently, the wallet uses a fSubtractFeeAmount (SFFO) flag on the\r\nrecipients objects for all forms of sending calls. According to the\r\ncommit discussion, this flag was chiefly introduced to permit sweeping\r\nwithout manually calculating the fees of transactions. However, the flag\r\nleads to unintuitive behavior and makes it more complicated to test\r\nmany wallet RPCs exhaustively. We proposed to introduce a dedicated\r\n`sendall` RPC with the intention to cover this functionality.\r\n\r\nSince the proposal, it was discovered in further discussion that our\r\nproposed `sendall` rpc and SFFO have subtly different scopes of\r\noperation.\r\n• sendall:\r\n  Use _given UTXOs_ to pay a destination the remainder after fees.\r\n• SFFO:\r\n  Use a _given budget_ to pay an address the remainder after fees.\r\n\r\nWhile `sendall` will simplify cases of spending a given set of\r\nUTXOs such as paying the value from one or more specific UTXOs, emptying\r\na wallet, or burning dust, we realized that there are some cases in\r\nwhich SFFO is used to pay other parties from a limited budget,\r\nwhich can often lead to the creation of change outputs. This cannot be\r\neasily replicated using `sendall` as it would require manual\r\ncomputation of the appropriate change amount.\r\n\r\nAs such, sendall cannot replace all uses of SFFO, but it still has a\r\ndifferent use case and will aid in simplifying some wallet calls and\r\nnumerous wallet tests.\r\n\r\n_Sendall call details_\r\nThe proposed sendall call builds a transaction from a specific\r\nsubset of the wallet's UTXO pool (by default all of them) and assigns\r\nthe funds to one or more receivers. Receivers can either be specified\r\nwith a given amount or receive an equal share of the remaining\r\nunassigned funds. At least one recipient must be provided without\r\nassigned amount to collect the remainder. The `sendall` call will\r\nnever create change. The call has a `send_max` option that changes the\r\ndefault behavior of spending all UTXOs (\"no UTXO left behind\"), to\r\nmaximizing the output amount of the transaction by skipping uneconomic\r\nUTXOs. The `send_max` option is incompatible with providing a specific\r\nset of inputs.\r\n\r\n---\r\nEdit: Replaced OP with latest commit message to reflect my updated motivation of the proposal.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2022-01-20T22:20:52Z",
    "updated_at": "2023-03-30T10:21:47Z",
    "closed_at": "2022-03-30T13:04:46Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-03-30T13:04:46Z",
    "merge_commit_sha": "f4e5d704f24ad9beba4f9a4838be3351551964df",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "Xekyo:sweep-wallet-rpc",
      "ref": "sweep-wallet-rpc",
      "sha": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 23979970,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMzk3OTk3MA==",
        "name": "bitcoin",
        "full_name": "Xekyo/bitcoin",
        "owner": {
          "login": "Xekyo",
          "id": 4060799,
          "node_id": "MDQ6VXNlcjQwNjA3OTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Xekyo",
          "html_url": "https://github.com/Xekyo",
          "followers_url": "https://api.github.com/users/Xekyo/followers",
          "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
          "organizations_url": "https://api.github.com/users/Xekyo/orgs",
          "repos_url": "https://api.github.com/users/Xekyo/repos",
          "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Xekyo/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/Xekyo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Xekyo/bitcoin",
        "archive_url": "https://api.github.com/repos/Xekyo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Xekyo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Xekyo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Xekyo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Xekyo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Xekyo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Xekyo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Xekyo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Xekyo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Xekyo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Xekyo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Xekyo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Xekyo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Xekyo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Xekyo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Xekyo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Xekyo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Xekyo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Xekyo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Xekyo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Xekyo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Xekyo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Xekyo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Xekyo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Xekyo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Xekyo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Xekyo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Xekyo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Xekyo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Xekyo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Xekyo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Xekyo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Xekyo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Xekyo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Xekyo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Xekyo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Xekyo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Xekyo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Xekyo/bitcoin/hooks",
        "svn_url": "https://github.com/Xekyo/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 200902,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T22:31:39Z",
        "created_at": "2014-09-12T23:11:53Z",
        "updated_at": "2023-05-11T06:24:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ecf692b466860f44334a1da967fc2559da913bec",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 681,
    "deletions": 92,
    "changed_files": 7,
    "commits": 6,
    "review_comments": 136,
    "comments": 48
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 5928391048,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFhXBGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5928391048",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:24:11Z"
    },
    {
      "event": "ready_for_review",
      "id": 5928395164,
      "node_id": "RFRE_lADOABII585CJodezwAAAAFhXCGc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5928395164",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:25:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5928426902,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFhXJ2W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5928426902",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:32:25Z"
    },
    {
      "event": "commented",
      "id": 1017991367,
      "node_id": "IC_kwDOABII5848rVDH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017991367",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:42:43Z",
      "updated_at": "2022-01-20T22:42:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting idea. Can this be exposed as a testing only RPC? Or do real users need it?\r\n\r\nThere are privacy implications of using sweep as well -- if it's just to be used for e.g. taking an old potentially compromised wallet and migrating to a new one is it better to do a sweep that splits into a number of normal-ish looking txns?",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1017991367",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1017991697,
      "node_id": "IC_kwDOABII5848rVIR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017991697",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:43:17Z",
      "updated_at": "2022-01-20T22:43:17Z",
      "author_association": "MEMBER",
      "body": "Cool, concept ACK\r\n\r\nTests look nice",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1017991697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1017995727,
      "node_id": "IC_kwDOABII5848rWHP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017995727",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:50:02Z",
      "updated_at": "2022-01-20T22:50:02Z",
      "author_association": "MEMBER",
      "body": "Subtract fee from amount has historically been used for sweeping and there exist some issues on this repo that illustrate that there is usage.\r\n\r\nYou could achieve a \"normal\" looking transaction by specifying two recipients and setting an amount on one of them. There are examples to illustrate this usage in the RPC help text.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1017995727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5928502330,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFhXcQ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5928502330",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T22:51:47Z"
    },
    {
      "event": "labeled",
      "id": 5928705030,
      "node_id": "LE_lADOABII585CJodezwAAAAFhYNwG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5928705030",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T23:50:50Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 5928705032,
      "node_id": "LE_lADOABII585CJodezwAAAAFhYNwI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5928705032",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-20T23:50:50Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 1018265067,
      "node_id": "IC_kwDOABII5848sX3r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018265067",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-21T07:54:07Z",
      "updated_at": "2022-02-17T19:20:32Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22751](https://github.com/bitcoin/bitcoin/pull/22751) (rpc/wallet: add simulaterawtransaction RPC by kallewoof)\n* [#21576](https://github.com/bitcoin/bitcoin/pull/21576) (rpc, gui: bumpfee signer support by Sjors)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1018265067",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 859256197,
      "node_id": "PRR_kwDOABII584zNzWF",
      "url": null,
      "actor": null,
      "commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Successahead",
        "id": 97534979,
        "node_id": "U_kgDOBdBEAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/97534979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Successahead",
        "html_url": "https://github.com/Successahead",
        "followers_url": "https://api.github.com/users/Successahead/followers",
        "following_url": "https://api.github.com/users/Successahead/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Successahead/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Successahead/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Successahead/subscriptions",
        "organizations_url": "https://api.github.com/users/Successahead/orgs",
        "repos_url": "https://api.github.com/users/Successahead/repos",
        "events_url": "https://api.github.com/users/Successahead/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Successahead/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-859256197",
      "submitted_at": "2022-01-21T08:50:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1018541892,
      "node_id": "IC_kwDOABII5848tbdE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018541892",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-21T14:16:25Z",
      "updated_at": "2022-01-21T14:16:25Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1018541892",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1018599962,
      "node_id": "IC_kwDOABII5848tpoa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018599962",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-21T15:15:23Z",
      "updated_at": "2022-01-21T15:15:23Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, I prefer this to #23534.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1018599962",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1019147257,
      "node_id": "IC_kwDOABII5848vvP5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1019147257",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-22T09:58:51Z",
      "updated_at": "2022-01-22T09:58:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1019147257",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 860205889,
      "node_id": "PRR_kwDOABII584zRbNB",
      "url": null,
      "actor": null,
      "commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThe added `sweep()` RPC function looks good. I went through the code and couldn’t find any breaking points. The same goes for the added test, which is logically sound. Kudos for this amazing work, @Xekyo! :clinking_glasses: \r\n\r\nHere’s a screenshot of the displayed message when passing the command:\r\n```\r\n./src/bitcoin-cli -signet sweep\r\n```\r\n**Screenshot:**\r\n\r\n![PR](https://user-images.githubusercontent.com/85434418/150640566-d2744855-89e5-4760-a7a8-bffe52d9ffcc.png)\r\n\r\nThe added test passed successfully, which intends that the added function works correctly. I shall do a manual test by creating a new wallet and sweeping it in some time. Meanwhile, I have some doubts and suggestions that might help make this PR even better.\r\n",
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-860205889",
      "submitted_at": "2022-01-22T13:37:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 860245638,
      "node_id": "PRR_kwDOABII584zRk6G",
      "url": null,
      "actor": null,
      "commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-860245638",
      "submitted_at": "2022-01-22T22:08:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 861495232,
      "node_id": "PRR_kwDOABII584zWV_A",
      "url": null,
      "actor": null,
      "commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-861495232",
      "submitted_at": "2022-01-24T20:43:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1020615011,
      "node_id": "IC_kwDOABII58481Vlj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1020615011",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-24T22:28:57Z",
      "updated_at": "2022-01-25T18:42:45Z",
      "author_association": "MEMBER",
      "body": "The GUI will need access to this functionality too. It would be nice if the sweeping logic was refactored into a function in `src/wallet/spend.cpp` so that the GUI can access it.\r\n\r\nEdit: Actually that can wait until we figure out what the GUI is going to do for sweep.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1020615011",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 860207447,
      "node_id": "PRR_kwDOABII584zRblX",
      "url": null,
      "actor": null,
      "commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-860207447",
      "submitted_at": "2022-01-25T08:18:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5951809596,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFiwWg8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5951809596",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T17:58:54Z"
    },
    {
      "event": "labeled",
      "id": 5955578800,
      "node_id": "LE_lADOABII585CJodezwAAAAFi-uuw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5955578800",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T10:02:36Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 1024148767,
      "node_id": "IC_kwDOABII5849C0Uf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024148767",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T12:01:07Z",
      "updated_at": "2022-01-28T12:01:07Z",
      "author_association": "MEMBER",
      "body": "I have no objection to a dedicated `sweep` RPC call, but I don't agree with the premise that subtracting fee from output is only useful for sweeping a full wallet. See https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024145620 ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024148767",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1024341246,
      "node_id": "IC_kwDOABII5849DjT-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024341246",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T15:42:25Z",
      "updated_at": "2022-01-28T15:42:25Z",
      "author_association": "MEMBER",
      "body": "> I have no objection to a dedicated `sweep` RPC call, but I don't agree with the premise that subtracting fee from output is only useful for sweeping a full wallet. See [#24142 (comment)](https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024145620)\r\n\r\nEither approach seems fine to me, but I do think it is potentially more confusing to have two completely different RPCs for sending funds: \"send\" vs\" sweep\" than to have one sending option that means \"Send approximate amount. I don't care about exact amount of BTC received, and am happy if it's a little less or a little more to economize on fees and avoid change.\" Obviously you shouldn't use this option if you are trying to send an exact amount to someone, but it seems like it would be generally useful whenever you are sending money to one of your own wallets, or exchange accounts, or paying for any service that can be incrementally topped up.\r\n\r\nI know one of achow101's recent PR was adding more complexity to subtract from output implementation to try to do something to help sweeping, but I don't think the original (current?) semantics inherently had to add much complexity. It is true the code has been complex at different points but I think that was mostly a result of code shittiness and duplication, which have generally improved recently.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024341246",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1024373727,
      "node_id": "IC_kwDOABII5849DrPf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024373727",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T16:19:09Z",
      "updated_at": "2022-01-28T16:20:25Z",
      "author_association": "MEMBER",
      "body": "Indeed I suspect that a `sweep` RPC will be useless if we decide to keep 'subtracting fee from output' functionality. In that case adding a sweep feature to the `send` RPC would make more sense. C-lightling has a special case amount `all` for that purpose.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024373727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1024420503,
      "node_id": "IC_kwDOABII5849D2qX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024420503",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T16:59:10Z",
      "updated_at": "2022-01-28T16:59:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI have no objections to this RPC either, but something like `bitcoin-cli -named sendtoaddress address=\"....\" sweep=true` might be simpler for users instead of two commands to send funds.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024420503",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1024429070,
      "node_id": "IC_kwDOABII5849D4wO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024429070",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T17:09:28Z",
      "updated_at": "2022-01-28T17:09:28Z",
      "author_association": "MEMBER",
      "body": "> I have no objection to a dedicated `sweep` RPC call, but I don't agree with the premise that subtracting fee from output is only useful for sweeping a full wallet. See [#24142 (comment)](https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024145620)\r\n\r\nThat use case is what I call generalized sweep. Sweep can be viewed as spending all UTXOs in a given list without needing to specify the output amount. Whether that list is all the UTXOs in the wallet or a specific list of some UTXOs doesn't matter. So sweep can be extended to cover your use case by allowing for inputs to be specified.\r\n\r\n>  but it seems like it would be generally useful whenever you are sending money to one of your own wallets, or exchange accounts, or paying for any service that can be incrementally topped up.\r\n\r\nCan you describe why SFFO would be used in those cases? @Xekyo and I have had discussions with many people about SFFO use cases and even though the concept of \"send no more than X\" usually comes up, no one can express why that behavior would ever actually be useful. Just looking through many of the issues about SFFO show that its primary use case is to sweep an entire wallet, and sometimes spend just a preset list of coins without having to calculate the fee manually. Both of these cases can be covered by a sweep function without needing to maintain SFFO in coin selection logic.\r\n\r\n> I know one of achow101's recent PR was adding more complexity to subtract from output implementation to try to do something to help sweeping, but I don't think the original (current?) semantics inherently had to add much complexity. It is true the code has been complex at different points but I think that was mostly a result of code shittiness and duplication, which have generally improved recently.\r\n\r\nI find that SFFO makes it much harder to reason about our coin selection because we now use effective values for selection, but with SFFO, we don't actually want the effective values.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024429070",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 5972186132,
      "node_id": "MEE_lADOABII585CJodezwAAAAFj-FQU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5972186132",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T17:09:29Z"
    },
    {
      "event": "subscribed",
      "id": 5972186138,
      "node_id": "SE_lADOABII585CJodezwAAAAFj-FQa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5972186138",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T17:09:29Z"
    },
    {
      "event": "commented",
      "id": 1024866310,
      "node_id": "IC_kwDOABII5849FjgG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024866310",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-29T08:32:16Z",
      "updated_at": "2022-01-29T08:32:16Z",
      "author_association": "MEMBER",
      "body": "Another SFFO use case is when your recipient is legitimately taking on the cost of business. For example, it can be used when sending a loan.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024866310",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1024920250,
      "node_id": "IC_kwDOABII5849Fwq6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024920250",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-29T14:16:32Z",
      "updated_at": "2022-01-29T14:18:05Z",
      "author_association": "MEMBER",
      "body": "> > but it seems like it would be generally useful whenever you are sending money to one of your own wallets, or exchange accounts, or paying for any service that can be incrementally topped up.\r\n> \r\n> Can you describe why SFFO would be used in those cases? @Xekyo and I have had discussions with many people about SFFO use cases and even though the concept of \"send no more than X\" usually comes up, no one can express why that behavior would ever actually be useful.\r\n\r\nI think, mostly, it is useful *conceptually* as a way to simplify creating transactions. It's a way of expressing the *intention* behind a transaction, and letting the implementation take care of the details, instead of being having to think about what the transaction will look like, and choose between sweep and send APIs to create it.\r\n\r\nAlso the concept here is not exactly \"spend no more than X.\" If there are two amounts associated with transaction: X is amount spent by sender, Y is amount received by receiver, then option lets you choose between fixing X and letting Y vary, or fixing Y and letting X vary. If you have 12 BTC, and want to budget exactly 1 BTC per month to spend on a service, the option let you do that. And in general, it lets you just say what your intention is instead of having to think at a lower level.\r\n\r\nAdditionally, there is my main practical concern:\r\n\r\n- This is duplicating existing CreateTransaction(Internal) logic instead of just calling CreateTransaction with the right options. The claim is that this will be a code simplification, but the followup PR #24142 is +588/−148 lines. And this is while REMOVING features which I think we agree are useful: providing GUI support for sweeping, and being able to select coins to sweep. The new code and tests are going to grow and become even more complex after adding these features. \r\n\r\nMy medium level practical concern:\r\n\r\n- Deprecating subtract from output in #24142 presumably is going to break existing workflows, and there doesn't seem to be a good release notes or FAQ style item saying what that the problem is with subtract from output, why its removal is justified, and how to transition to the sweep API.\r\n\r\nAnd my mini practical concern:\r\n\r\n- This sweep API might be less safe than send APIs because it doesn't force you to specify amount you are trying to send. It's easier to fat-finger by accidentally sweeping the wrong wallet (or when manual coin selection is added) sweeping the wrong coin and spending an amount larger than you intended. Maybe this is not a very big concern. If it is a concern, it could also be addresed by adding a mandatory amount argument requiring you to specify total amount of the sweep or an override value like `\"unchecked\"` or `\"yolo\"`",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024920250",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 5975130585,
      "node_id": "MEE_lADOABII585CJodezwAAAAFkJUHZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5975130585",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-29T14:16:32Z"
    },
    {
      "event": "subscribed",
      "id": 5975130586,
      "node_id": "SE_lADOABII585CJodezwAAAAFkJUHa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5975130586",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-29T14:16:32Z"
    },
    {
      "event": "commented",
      "id": 1024925012,
      "node_id": "IC_kwDOABII5849Fx1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024925012",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-29T14:46:53Z",
      "updated_at": "2022-01-29T14:58:32Z",
      "author_association": "MEMBER",
      "body": "> I find that SFFO makes it much harder to reason about our coin selection because we now use effective values for selection, but with SFFO, we don't actually want the effective values.\r\n\r\nCould you explain this more? There is a [`m_subtract_fee_outputs ? m_value : effective_value`](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/coinselection.cpp#L355-L358) line but that hardly seems terrible\r\n\r\nEDIT: I see there is a counterpart to this in `CreateTransactionInternal` where the option is used to [set](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L733-L735) [tx_noinput_size](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L741-L743). This seems pretty straightforward as well. Is this the extent of the problem or is there more under the surface?",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024925012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1024927423,
      "node_id": "IC_kwDOABII5849Fya_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024927423",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-29T15:00:44Z",
      "updated_at": "2022-01-29T15:00:44Z",
      "author_association": "MEMBER",
      "body": "This discussion is getting a little mixed between here and https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024417067. I don't need _automatic_ coin selection for the use case I describe above. I do still need the feature to work for _manual_ coin selection. Having to use a separate \"sweep\" RPC for that seems a bit odd, especially when it needs to support most of the `send` kitchen sink, like using hardware wallets, specifying the fee rate, RBF, etc. And it still has to work in the GUI send screen, which touches much of the same CWallet code.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024927423",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1027283605,
      "node_id": "IC_kwDOABII5849OxqV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1027283605",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T21:02:46Z",
      "updated_at": "2022-02-01T21:02:46Z",
      "author_association": "MEMBER",
      "body": "> > I find that SFFO makes it much harder to reason about our coin selection because we now use effective values for selection, but with SFFO, we don't actually want the effective values.\r\n> \r\n> Could you explain this more? There is a [`m_subtract_fee_outputs ? m_value : effective_value`](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/coinselection.cpp#L355-L358) line but that hardly seems terrible\r\n> \r\n> EDIT: I see there is a counterpart to this in `CreateTransactionInternal` where the option is used to [set](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L733-L735) [tx_noinput_size](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L741-L743). This seems pretty straightforward as well. Is this the extent of the problem or is there more under the surface?\r\n\r\nIt makes the reasoning harder because the new coin selection code is almost entirely predicated on using effective values, particularly positive effective values. For BnB and SRD, we assume there are no negative ev inputs. For Knapsack and SRD, we assume we will make change and require a minimum change value. SFFO violates these assumptions, and that leads to bugs like #23026 (which happens to be a sweep use case).\r\n\r\n> and choose between sweep and send APIs to create it.\r\n> ...\r\n> This sweep API might be less safe than send APIs because it doesn't force you to specify amount you are trying to send. It's easier to fat-finger by accidentally sweeping the wrong wallet (or when manual coin selection is added) sweeping the wrong coin and spending an amount larger than you intended. Maybe this is not a very big concern. If it is a concern, it could also be addresed by adding a mandatory amount argument requiring you to specify total amount of the sweep or an override value like `\"unchecked\"` or `\"yolo\"`\r\n\r\nThere was some discussion about combining this with send where there would be some option for sweeping and some interpretation of magic values, but we felt that would end up being too clunky to use correctly so it was abandoned.\r\n\r\n> This is duplicating existing CreateTransaction(Internal) logic instead of just calling CreateTransaction with the right options. The claim is that this will be a code simplification, but the followup PR [Deprecate SubtractFeeFromOutputs #24142](https://github.com/bitcoin/bitcoin/pull/24142) is +588/−148 lines. \r\n\r\nThe followup only has more additions because it is adding `-deprecatedrpc=sffo`. It does not remove the behavior yet.\r\n\r\n> And this is while REMOVING features which I think we agree are useful: providing GUI support for sweeping, and being able to select coins to sweep.\r\n\r\nThere will be GUI support in the future.\r\n\r\n> The new code and tests are going to grow and become even more complex after adding these features.\r\n\r\nThis new code is unlikely to be expanded further given it's limited scope. However I agree there could be some refactors for deduplication between sweep and CreateTransactionInternal.\r\n\r\n> Deprecating subtract from output in [Deprecate SubtractFeeFromOutputs #24142](https://github.com/bitcoin/bitcoin/pull/24142) presumably is going to break existing workflows, and there doesn't seem to be a good release notes or FAQ style item saying what that the problem is with subtract from output, why its removal is justified, and how to transition to the sweep API.\r\n\r\nThe same could be said about every other time `-deprecatedrpc` has been used. Needing docs is not a reason to block a deprecation.\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1027283605",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1029462114,
      "node_id": "IC_kwDOABII5849XFhi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029462114",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-03T22:30:25Z",
      "updated_at": "2022-02-03T22:32:42Z",
      "author_association": "MEMBER",
      "body": "> I think, mostly, it is useful _conceptually_ as a way to simplify creating transactions. It's a way of expressing the _intention_ behind a transaction, and letting the implementation take care of the details, instead of being having to think about what the transaction will look like, and choose between sweep and send APIs to create it.\r\n\r\nAfter talking to some people in the last week and reading all comments on #24142 and here, I think I have a better understanding of how to distinguish the two domains of use cases between sweep and SFFO:\r\n\r\n- SFFO: Send to a recipient using a given budget deducting fees\r\n- Sweep: Send sum of inputs to recipient(s) deducting fees\r\n\r\nWe realize now, that SFFO is used more widely than we anticipated, and that the non-sweeping case is not covered by sweep. The problems and bugs occur when people use SFFO to specify the full wallet balance in order to arrive at a sweep functionality. Therefore, I do think that sweep is still useful, especially if we allow specifying an input list smaller than everything. We will work on that and GUI support.\r\n\r\n> * This is duplicating existing CreateTransaction(Internal) logic instead of just calling CreateTransaction with the right options. The claim is that this will be a code simplification, but the followup PR #24142 is +588/−148 lines. And this is while REMOVING features which I think we agree are useful: providing GUI support for sweeping, and being able to select coins to sweep. The new code and tests are going to grow and become even more complex after adding these features.\r\n\r\nWe looked into this, but found that we need to know the feerate to determine which inputs are eligible, need the inputs to be able to determine the receiver amounts, and when we have all the parameters to call `CreateTransaction(…)`, we already have used all of the duplicated code.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1029462114",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6006519399,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFmBDZn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6006519399",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T00:42:03Z"
    },
    {
      "event": "commented",
      "id": 1029534293,
      "node_id": "IC_kwDOABII5849XXJV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029534293",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T00:42:43Z",
      "updated_at": "2022-02-04T00:42:43Z",
      "author_association": "MEMBER",
      "body": "Added the `inputs` option to sweep in 2664d3a.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1029534293",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1029800249,
      "node_id": "IC_kwDOABII5849YYE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029800249",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T09:30:35Z",
      "updated_at": "2022-02-04T09:30:35Z",
      "author_association": "MEMBER",
      "body": "I'm still a bit worried about the amount of duplicated code here, also in the RPC parameter parsing.\r\n\r\nCan you add some test coverage for external signer use? The easiest way is probably to tweak `wallet_signer.py` such that the `send` example results in exactly the same coin selection as the new `sweep` example. In that case you can just duplicate the `hww.send` line and compare `res[hex]` between the two calls.\r\n\r\nIf you end up with two separate transactions because the RPC calls can't produce identical results, then it's useful to know the mechanism that test uses: it has one wallet with private keys and a watch-only clone. A PSBT is generated on the watch-only wallet. The private key enabled wallet is then used to sign it, with the result stored in the file system. Once the test node calls `mocks/signer.py` it reads the stored signed PSBT and returns it, thus faking a hardware wallet that actually signed something. This can of course be done for two separate PSBT's with some refactoring, but having an identical PSBT to sign is easier.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1029800249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6012220355,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFmWzPD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6012220355",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T21:53:09Z"
    },
    {
      "event": "renamed",
      "id": 6012220649,
      "node_id": "RTE_lADOABII585CJodezwAAAAFmWzTp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6012220649",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T21:53:15Z",
      "rename": {
        "from": "Add 'sweep' RPC",
        "to": "Add 'sweepwallet' RPC"
      }
    },
    {
      "event": "commented",
      "id": 1030379808,
      "node_id": "IC_kwDOABII5849alkg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1030379808",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T21:54:46Z",
      "updated_at": "2022-02-04T21:54:46Z",
      "author_association": "MEMBER",
      "body": "Renamed the proposed RPC `sweepwallet` to clarify that we are operating on the wallet's UTXO pool rather than a wallet-foreign private key as \"sweep\" may imply.\r\n\r\nRewrote the commit description.\r\n\r\n@Sjors: I will look into your feedback to reduce the code duplication and test external signer use.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1030379808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6012226813,
      "node_id": "MEE_lADOABII585CJodezwAAAAFmW0z9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6012226813",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T21:54:47Z"
    },
    {
      "event": "subscribed",
      "id": 6012226816,
      "node_id": "SE_lADOABII585CJodezwAAAAFmW00A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6012226816",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-04T21:54:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6029843416,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFnaBvY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6029843416",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T21:03:45Z"
    },
    {
      "event": "commented",
      "id": 1033071628,
      "node_id": "IC_kwDOABII5849k2wM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033071628",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T21:18:56Z",
      "updated_at": "2022-02-08T21:18:56Z",
      "author_association": "MEMBER",
      "body": "Deduplicated the parameter processing, still working on the test in `wallet_signer.py`.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1033071628",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6030025552,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFnauNQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6030025552",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T21:40:31Z"
    },
    {
      "event": "commented",
      "id": 1033090522,
      "node_id": "IC_kwDOABII5849k7Xa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033090522",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T21:43:21Z",
      "updated_at": "2022-02-08T21:43:21Z",
      "author_association": "MEMBER",
      "body": "Now with `wallet_signer.py` test.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1033090522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6030273817,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFnbq0Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6030273817",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T22:31:21Z"
    },
    {
      "event": "commented",
      "id": 1033128992,
      "node_id": "IC_kwDOABII5849lEwg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033128992",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T22:31:25Z",
      "updated_at": "2022-02-08T22:31:25Z",
      "author_association": "MEMBER",
      "body": "Now with Release Notes.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1033128992",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 878060109,
      "node_id": "PRR_kwDOABII5840ViJN",
      "url": null,
      "actor": null,
      "commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "WIP review, looks mostly good so far. A few minor comments if you retouch.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-878060109",
      "submitted_at": "2022-02-09T22:46:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1035593556,
      "node_id": "IC_kwDOABII5849uedU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035593556",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:25:07Z",
      "updated_at": "2022-02-10T22:25:07Z",
      "author_association": "MEMBER",
      "body": "• Addressed @jonatack's comments\r\n• Added test for duplicate destinations\r\n• Added test for sweeping to multiple recipients sharing the remainder\r\n• Added `@cleanup` decorator to tests\r\n• Cleaned up extremely long lines in tests\r\n\r\nOpen questions: \r\n• Should this new RPC only allow one method (either options or positional args) to provide `fee_rate`, `feeconf_target` and `estimate_mode`?",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1035593556",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6046403182,
      "node_id": "MEE_lADOABII585CJodezwAAAAFoZMpu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6046403182",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:25:07Z"
    },
    {
      "event": "subscribed",
      "id": 6046403191,
      "node_id": "SE_lADOABII585CJodezwAAAAFoZMp3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6046403191",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:25:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6046405830,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFoZNTG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6046405830",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:25:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6046419328,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFoZQmA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6046419328",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:28:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6046441876,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFoZWGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6046441876",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:32:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6046477543,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFoZezn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6046477543",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:38:19Z"
    },
    {
      "event": "commented",
      "id": 1035610384,
      "node_id": "IC_kwDOABII5849uikQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035610384",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T22:47:34Z",
      "updated_at": "2022-02-10T22:47:34Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1035610384",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1035859509,
      "node_id": "IC_kwDOABII5849vfY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035859509",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-11T03:49:19Z",
      "updated_at": "2022-02-11T03:49:19Z",
      "author_association": "MEMBER",
      "body": "Hate to nitpick the name, but \"sweepwallet\" to me sounds too easily confused with sweeping funds *into* the wallet.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1035859509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 880031617,
      "node_id": "PRR_kwDOABII5840dDeB",
      "url": null,
      "actor": null,
      "commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks like `test/lint/lint-python.sh` needs appeasing\r\n```\r\ntest/functional/wallet_sweep.py:28:1: E115 expected an indented block (comment)\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-880031617",
      "submitted_at": "2022-02-11T11:12:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 880051548,
      "node_id": "PRR_kwDOABII5840dIVc",
      "url": null,
      "actor": null,
      "commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-880051548",
      "submitted_at": "2022-02-11T11:19:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1036462094,
      "node_id": "IC_kwDOABII5849xygO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036462094",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-11T17:49:57Z",
      "updated_at": "2022-02-11T17:49:57Z",
      "author_association": "MEMBER",
      "body": "> Hate to nitpick the name, but \"sweepwallet\" to me sounds too easily confused with sweeping funds _into_ the wallet.\r\n\r\nI changed it from `sweep` after multiple people stated that they first thought it was a feature to sweep a private key into the wallet. I'm open to suggestions, if you have an idea for a better name.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1036462094",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 880551904,
      "node_id": "PRR_kwDOABII5840fCfg",
      "url": null,
      "actor": null,
      "commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-880551904",
      "submitted_at": "2022-02-11T18:43:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1036510984,
      "node_id": "IC_kwDOABII5849x-cI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036510984",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-11T18:45:24Z",
      "updated_at": "2022-02-11T18:45:24Z",
      "author_association": "MEMBER",
      "body": "idk, I guess if you don't mind ignoring the advanced use cases in naming, \"emptywallet\" might work.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1036510984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "labeled",
      "id": 6066572059,
      "node_id": "LE_lADOABII585CJodezwAAAAFpmIsb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6066572059",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-14T12:20:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1039247112,
      "node_id": "IC_kwDOABII58498acI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039247112",
      "actor": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-14T15:50:47Z",
      "updated_at": "2022-02-14T15:50:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "or maybe \"drainwallet\". \"emptywallet\" sounds a lot like empty wallet, i.e. it's not immediately clear that \"empty\" is a verb in this case",
      "user": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1039247112",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6069630834,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFpxzdy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6069630834",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-14T19:23:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6078719989,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFqUef1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6078719989",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T22:44:31Z"
    },
    {
      "event": "commented",
      "id": 1040874284,
      "node_id": "IC_kwDOABII584-Cnss",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1040874284",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T22:47:05Z",
      "updated_at": "2022-02-15T22:47:05Z",
      "author_association": "MEMBER",
      "body": "Moved the release notes back to their own file to avoid merge conflict (I think I had misunderstood some feedback I got about release notes).",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1040874284",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "unlabeled",
      "id": 6079031110,
      "node_id": "UNLE_lADOABII585CJodezwAAAAFqVqdG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6079031110",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T00:09:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6093293326,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFrMEcO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093293326",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-17T20:41:57Z"
    },
    {
      "event": "renamed",
      "id": 6093296563,
      "node_id": "RTE_lADOABII585CJodezwAAAAFrMFOz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093296563",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-17T20:42:30Z",
      "rename": {
        "from": "Add 'sweepwallet' RPC",
        "to": "Add 'sendall' RPC née sweep"
      }
    },
    {
      "event": "commented",
      "id": 1043411882,
      "node_id": "IC_kwDOABII584-MTOq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043411882",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-17T20:43:17Z",
      "updated_at": "2022-02-17T20:54:13Z",
      "author_association": "MEMBER",
      "body": "Renamed RPC to `sendall`, after discussion with other contributors. All review comments should have been addressed. Please let me know if I have missed something.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1043411882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 886575360,
      "node_id": "PRR_kwDOABII58402BEA",
      "url": null,
      "actor": null,
      "commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-886575360",
      "submitted_at": "2022-02-17T21:42:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6094099639,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFrPJS3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6094099639",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-17T22:54:19Z"
    },
    {
      "event": "reviewed",
      "id": 886995922,
      "node_id": "PRR_kwDOABII58403nvS",
      "url": null,
      "actor": null,
      "commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Review hint for the first three commits: `git show --color-moved=dimmed-zebra --color-moved-ws=allow-indentation-change`\r\n\r\nIt would be nice if for a single recipient you can omit the array, like so: `sendall bc1q09...hufdl` (instead of `sendall '[\"bc1q09...hufdl\"]'`). \r\n\r\nThe first 3 commits are useful refactors regardless, just in case this PR doesn't make it (ACK on those, but still need to review the meat and potatoes commit).\r\n\r\nIn the description of 9bda5234bc41b7477b0224930177c6dfcd8cb9fc maybe replace \"given\" with \"specific\".\r\n\r\nLet's add a quick warning to the help text:\r\n\r\n> If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using \"send_max\" to exclude those inputs that are worth less than the fees needed to spend them.\r\n\r\n---\r\n\r\nThoughts that can wait for followups...\r\n\r\nName-wise `sendall` implies that you can't send specific UTXO's. We can think of a better name later, since it's marked experimental. One suggestion: `sendcoins`. That said, I doubt anyone uses the RPC to _manually_ perform coin selection. The GUI or some external tool is far easier to use for that. So that leaves the use case of emptying out the wallet, and for that the current name is very accurate.\r\n\r\nWe could potentially make sending specific coins less tedious on the RPC, but that's outside the scope of this PR. Ideally you would want a new RPC call that returns a concise list of outpoints with their amount, like so:\r\n\r\n```\r\n16a9...97f:7 0.000100\r\n34fe...e8d:0 0.00200\r\n```\r\n\r\nWe could even use transaction short ids, if there's no duplicate in any given wallet (return the full id if there is).\r\n\r\nAnd then rather than the tedious options dictionary with an object for each input, we'd add one argument which takes a simple array of strings, so you can do `sendall bc1q09...hufdl null unset 1.1 '[\"16a9...97f:7\"]'` in order to spend the first coin. Still not super pretty, but when copy-pasted and adjusted from the help example, it should be easy enough to use.\r\n\r\nTo burn dust we could add an option `burn` that, if zero addresses are provided, will send to `OP_RETURN`. That way you might sweep economic coins with a slightly higher fee and then make a burn transaction for the rest at 1 sat/vbyte (or 0 if you have a way to get those mined).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-886995922",
      "submitted_at": "2022-02-18T10:13:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 887441730,
      "node_id": "PRR_kwDOABII58405UlC",
      "url": null,
      "actor": null,
      "commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Still reviewing, but posting some questions I had about the expected behavior",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-887441730",
      "submitted_at": "2022-02-18T15:57:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 888039586,
      "node_id": "PRR_kwDOABII58407mii",
      "url": null,
      "actor": null,
      "commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK 9bda523\r\n\r\nA couple of nits and wording suggestions, all of them optional. I support the `sendall` name, I think it's neutral and well describes what's happening.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-888039586",
      "submitted_at": "2022-02-28T12:23:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1063359957,
      "node_id": "IC_kwDOABII584_YZXV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063359957",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:45Z",
      "updated_at": "2022-03-09T20:51:45Z",
      "author_association": "MEMBER",
      "body": "@Sjors: Thanks for the thoughtful suggestions. I've adopted your suggestions for phrasing and discussed whether overloading the receivers/recipients array with a single string with some other developers. While I agree that it would ease the (probably) most likely use case of sweeping everything into a single address, some people didn't like the idea of allowing multiple types for one parameter.\r\n\r\n@glozow, @stickies-v: Thank you for the review, I'm working on answers to each of your comments.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1063359957",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6212960883,
      "node_id": "MEE_lADOABII585CJodezwAAAAFyUkJz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6212960883",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:46Z"
    },
    {
      "event": "subscribed",
      "id": 6212960889,
      "node_id": "SE_lADOABII585CJodezwAAAAFyUkJ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6212960889",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:46Z"
    },
    {
      "event": "mentioned",
      "id": 6212960897,
      "node_id": "MEE_lADOABII585CJodezwAAAAFyUkKB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6212960897",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:46Z"
    },
    {
      "event": "subscribed",
      "id": 6212960904,
      "node_id": "SE_lADOABII585CJodezwAAAAFyUkKI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6212960904",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:46Z"
    },
    {
      "event": "mentioned",
      "id": 6212960914,
      "node_id": "MEE_lADOABII585CJodezwAAAAFyUkKS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6212960914",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:46Z"
    },
    {
      "event": "subscribed",
      "id": 6212960918,
      "node_id": "SE_lADOABII585CJodezwAAAAFyUkKW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6212960918",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T20:51:46Z"
    },
    {
      "event": "commented",
      "id": 1063415497,
      "node_id": "IC_kwDOABII584_Ym7J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063415497",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-09T22:00:01Z",
      "updated_at": "2022-03-09T22:00:01Z",
      "author_association": "MEMBER",
      "body": "Sorry if this is confusing, but I've started responding to comments, but haven't finished making all the code changes and rebasing yet (gotta switch devices and didn't want to lose what I've already written).",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1063415497",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6226305727,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFzHeK_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226305727",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:09:12Z"
    },
    {
      "event": "commented",
      "id": 1065320790,
      "node_id": "IC_kwDOABII584_f4FW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1065320790",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z",
      "updated_at": "2022-03-11T17:21:49Z",
      "author_association": "MEMBER",
      "body": "Addressed most comments by Sjors, Gloria and stickies-v.\r\n\r\nStill looking into/open for feedback on:\r\n- @sjors's suggestion of overloading recipients parameter to take a single string in the case of a single recipient instead of an array\r\n- The inconsistent bug @Sjors noticed in the  `sendall_fails_on_missing_input` test\r\n- @glozow's suggestion of moving parts of the UTXO filtering into CWallet\r\n- @stickies-v's suggestion to align the error messages\r\n\r\nI've also added another testcase that was authored by @ishaanam.\r\n",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1065320790",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6226370905,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzHuFZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226370905",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z"
    },
    {
      "event": "subscribed",
      "id": 6226370908,
      "node_id": "SE_lADOABII585CJodezwAAAAFzHuFc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226370908",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z"
    },
    {
      "event": "mentioned",
      "id": 6226370912,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzHuFg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226370912",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z"
    },
    {
      "event": "subscribed",
      "id": 6226370916,
      "node_id": "SE_lADOABII585CJodezwAAAAFzHuFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226370916",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z"
    },
    {
      "event": "mentioned",
      "id": 6226370927,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzHuFv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226370927",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z"
    },
    {
      "event": "subscribed",
      "id": 6226370932,
      "node_id": "SE_lADOABII585CJodezwAAAAFzHuF0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226370932",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:20:17Z"
    },
    {
      "event": "mentioned",
      "id": 6226379583,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzHwM_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226379583",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:21:49Z"
    },
    {
      "event": "subscribed",
      "id": 6226379591,
      "node_id": "SE_lADOABII585CJodezwAAAAFzHwNH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6226379591",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T17:21:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6227054805,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFzKVDV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6227054805",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T19:27:45Z"
    },
    {
      "event": "reviewed",
      "id": 908614636,
      "node_id": "PRR_kwDOABII5842KFvs",
      "url": null,
      "actor": null,
      "commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-908614636",
      "submitted_at": "2022-03-14T11:01:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 908640286,
      "node_id": "PRR_kwDOABII5842KMAe",
      "url": null,
      "actor": null,
      "commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-908640286",
      "submitted_at": "2022-03-14T11:24:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "reviewed",
      "id": 908668374,
      "node_id": "PRR_kwDOABII5842KS3W",
      "url": null,
      "actor": null,
      "commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-908668374",
      "submitted_at": "2022-03-14T11:51:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6236073339,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAFzsu17",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236073339",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:39:14Z"
    },
    {
      "event": "commented",
      "id": 1066884958,
      "node_id": "IC_kwDOABII584_l19e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1066884958",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:35Z",
      "updated_at": "2022-03-16T01:32:55Z",
      "author_association": "MEMBER",
      "body": "Addressed review comments from @achow101, fixed the bug that @Sjors discovered, enacted the suggestion of @stickies-v to update the remaining error messages for outdated options to be more helpful.\r\n\r\nStill open for comments on:\r\n- @sjors's suggestion of overloading recipients parameter to take a single string in the case of a single recipient instead of an array\r\n- @glozow's suggestion of moving parts of the UTXO filtering into CWallet",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1066884958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6236092675,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzszkD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092675",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:35Z"
    },
    {
      "event": "subscribed",
      "id": 6236092688,
      "node_id": "SE_lADOABII585CJodezwAAAAFzszkQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092688",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "mentioned",
      "id": 6236092697,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzszkZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092697",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "subscribed",
      "id": 6236092705,
      "node_id": "SE_lADOABII585CJodezwAAAAFzszkh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092705",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "mentioned",
      "id": 6236092724,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzszk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092724",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "subscribed",
      "id": 6236092734,
      "node_id": "SE_lADOABII585CJodezwAAAAFzszk-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092734",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "mentioned",
      "id": 6236092747,
      "node_id": "MEE_lADOABII585CJodezwAAAAFzszlL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092747",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "subscribed",
      "id": 6236092755,
      "node_id": "SE_lADOABII585CJodezwAAAAFzszlT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6236092755",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T14:41:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6247399829,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAF0X8GV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6247399829",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-16T01:28:03Z"
    },
    {
      "event": "commented",
      "id": 1068632419,
      "node_id": "IC_kwDOABII584_sglj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1068632419",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-16T01:29:18Z",
      "updated_at": "2022-03-16T01:29:18Z",
      "author_association": "MEMBER",
      "body": "Added a second test provided by @ishaanam. Thanks!",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1068632419",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6247403701,
      "node_id": "MEE_lADOABII585CJodezwAAAAF0X9C1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6247403701",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-16T01:29:18Z"
    },
    {
      "event": "subscribed",
      "id": 6247403705,
      "node_id": "SE_lADOABII585CJodezwAAAAF0X9C5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6247403705",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-16T01:29:18Z"
    },
    {
      "event": "reviewed",
      "id": 911687175,
      "node_id": "PRR_kwDOABII5842Vz4H",
      "url": null,
      "actor": null,
      "commit_id": "e71b03a3c814aa6c0dcbf76bf1abb78e7d33b82d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-911687175",
      "submitted_at": "2022-03-16T14:20:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6252279652,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAF0qjdk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6252279652",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-16T16:17:21Z"
    },
    {
      "event": "commented",
      "id": 1076730403,
      "node_id": "IC_kwDOABII585ALZoj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076730403",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-23T19:18:58Z",
      "updated_at": "2022-03-23T19:18:58Z",
      "author_association": "MEMBER",
      "body": "ACK 08be21737e1b38a8171ca216c18a7bbf94511c49",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1076730403",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 919426246,
      "node_id": "PRR_kwDOABII5842zVTG",
      "url": null,
      "actor": null,
      "commit_id": "08be21737e1b38a8171ca216c18a7bbf94511c49",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 08be217",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-919426246",
      "submitted_at": "2022-03-23T20:38:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "labeled",
      "id": 6305642325,
      "node_id": "LE_lADOABII585CJodezwAAAAF32HdV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6305642325",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T08:52:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 6306406929,
      "node_id": "UNLE_lADOABII585CJodezwAAAAF35CIR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6306406929",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T10:54:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1079101011,
      "node_id": "IC_kwDOABII585AUcZT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1079101011",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T14:49:06Z",
      "updated_at": "2022-03-25T14:49:06Z",
      "author_association": "MEMBER",
      "body": "> Needs rebase?\r\n\r\nYes, there's a silent merge conflict.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1079101011",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM1ZWQwOTRlNGIwZTA1NTRlNjA5NzA5ZjZjYTFmN2QxNzA5Njg4MmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35ed094e4b0e0554e609709f6ca1f7d17096882c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/35ed094e4b0e0554e609709f6ca1f7d17096882c",
      "tree": {
        "sha": "28c87c9466bba89e5e2cbad5e9169b73b3098c4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28c87c9466bba89e5e2cbad5e9169b73b3098c4c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 28c87c9466bba89e5e2cbad5e9169b73b3098c4c\nparent 9344697e57bd23d955df493d0581193ca1dc7cca\nauthor Murch <murch@murch.one> 1644349341 -0500\ncommitter Murch <murch@murch.one> 1648221398 -0400\n\nExtract prevention of outdated option names\n\nThis will be reused in `sendall` so we extract it to avoid\nduplication.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmI93NYACgkQe6A1yluQ\nFxMX8RAAisaQ4ltzEwzLgE3cP0LCRDCcgv1FX8DG9EdcSWZSBiV/ITHWf61la6st\n7j1+8yWIUZs9yhYxX3J0U+8GEzU1eEKfvOVubyUD70/whfpymwD0DnOO0+5C/dUs\ncb1MJOLPu6O54daGRYxNNHXOlInCmMtoyeNcdoXPPiZgrvuhXblf741CbJBhLqsY\nnABpHAwuXsSdklgnrANfXl8+B/sqSyC5b55dcr9OsY1ul0ANWHwNqOaI6RwBaUbd\ncrb7CeQUTMQGjL8ECDHL4VeXiM8ZhvUWs7+HbZ8Ay3AnI7lHUds2Bw94pgob9HHz\nYbgZaIyDB0Vps/vTpLIQwKdOMUyA52C1GYZ9DkDiB5NWA0MZs8issRB6psu1BiGg\nPErPgQh6PwwZ/lBcX+lyVs6m2Fqsk+sMRhmmwqdjMQtGXKTyV+ELFpwdzalgz2Id\njpn4rJuFsuZVLZcGu1rLS+kgXYaEKinK8uviMZASkrEiWVmtu87Rb6XIblQd966D\ng6rmjLSGp51e1YIrRMMzBeqYyl0ifDb1zcAmC7zMOvmlBI7u01SSHy/D/Y7sBG/v\nOSYJjpZ/DjoH+zZSd06AKdgQD9fWXOI3S7J0tTsQd5w25SLBRaUHiBKe++d0NHqk\nsukYknpkun19xQpF9Cqi00zgetM35Mj06rd8FEo2fUVQ4Tv9y/Y=\n=jL8R\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9344697e57bd23d955df493d0581193ca1dc7cca",
          "sha": "9344697e57bd23d955df493d0581193ca1dc7cca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9344697e57bd23d955df493d0581193ca1dc7cca"
        }
      ],
      "message": "Extract prevention of outdated option names\n\nThis will be reused in `sendall` so we extract it to avoid\nduplication.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-25T15:16:38Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-02-08T19:42:21Z"
      },
      "sha": "35ed094e4b0e0554e609709f6ca1f7d17096882c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEzMWQ3NWU1ZmI1YzEzMDQ0NDVkNjk4NTk1MDc5ZTI5ZjNjZDNhM2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a31d75e5fb5c1304445d698595079e29f3cd3a3a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a31d75e5fb5c1304445d698595079e29f3cd3a3a",
      "tree": {
        "sha": "f6ff8f8bee2de1a8b35395b281000743e271e15c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6ff8f8bee2de1a8b35395b281000743e271e15c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f6ff8f8bee2de1a8b35395b281000743e271e15c\nparent 35ed094e4b0e0554e609709f6ca1f7d17096882c\nauthor Murch <murch@murch.one> 1647268034 -0400\ncommitter Murch <murch@murch.one> 1648221402 -0400\n\nElaborate error messages for outdated options\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmI93NoACgkQe6A1yluQ\nFxNT8RAAu+/Jzl64RJh0g0CFh0apF1zrf+PnU5H42D2khKAp9XKojdkdyjHU8MBz\nAU5YiPYda3Qm7JlXFLBRzJExzAQDr8U9YOY/4gb19UQmENujFE48uQQ7WUPtJX4j\nHg6MnAPww8hh5wAP1fm1tVNreEVA1jdHRrxA5fviHqJNpC7ukDC99HH3blfAfVUY\n2U8czCxmjWu1m5WrqiFz78zOZOYTCIVt9d5LNx4d84psaz+WFA/Wh6wVv96Im53A\nY1O8K48XG1xzzpJXSZ8dwlMAUxOQVftPdebQz5WpSjan9hqdjDMPLGR3OK24jLqG\nWbv2qhuFjd2P5Szhsi5w9n/AVUvyHWgRuJcFETJt+rqguzlRVo7Vc5J5QzQA1FWD\n6wO6b+COzcVNokWR+PWNr5fXY7Xqzr4gd3MM/OjIXZQhVy/UgIRth4cEbjzcf0hN\nbfvnNTIiPYhj4wdyHRsryGdWjtYiGB7/pJskhcvJxAgcbJO11mhmLAyuLOBOJNty\noDSuQcGoJolUqSqnXiSsg8F6n8j8mABWfqjunn7WSDmOEjikbd5WhU4bFPHcGNZT\nXmwpRmOOkmtQz+C/hMEPahCOM/6IHjPLxoWi4+JwxXKJq/X7X2XwNyV4ehPPjJwN\nJA3Y5tKsi2NFKnZgnFX86tyW5+rZHFEG7a7vP6feC9zofmkmeUE=\n=Uxrs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35ed094e4b0e0554e609709f6ca1f7d17096882c",
          "sha": "35ed094e4b0e0554e609709f6ca1f7d17096882c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/35ed094e4b0e0554e609709f6ca1f7d17096882c"
        }
      ],
      "message": "Elaborate error messages for outdated options",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-25T15:16:42Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-14T14:27:14Z"
      },
      "sha": "a31d75e5fb5c1304445d698595079e29f3cd3a3a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZkMjIwOGEzZjY4NDlhMzczMmFmNmZmMDEwZWVlYTYyOWI5YjEwZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d2208a3f6849a3732af6ff010eeea629b9b10d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2208a3f6849a3732af6ff010eeea629b9b10d0",
      "tree": {
        "sha": "f0e14b1184273e3238c795b50e5fd7c1ef744f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0e14b1184273e3238c795b50e5fd7c1ef744f3b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f0e14b1184273e3238c795b50e5fd7c1ef744f3b\nparent a31d75e5fb5c1304445d698595079e29f3cd3a3a\nauthor Murch <murch@murch.one> 1644349419 -0500\ncommitter Murch <murch@murch.one> 1648221404 -0400\n\nExtract interpretation of fee estimation arguments\n\nThis will be reused in `sendall`, so we extract a method to prevent\nduplication.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmI93NwACgkQe6A1yluQ\nFxNddhAAxoTG4t/xMEMR3s3o8CDLWsLh2zmtF/L2vGHCu27BX9515OTjWun6D9Cp\nAHhnBUnms9gyza+UCoL8EhCTRzfxXa1H32R7BDJH3Rw7sAooTH2f2qIgLQX4z2P8\nKbi3jX4RYJHWeIzNZVWCqFVgLWilqT6DaFfszkkpzoQUsJJGHOb5het5jmU7cJ+7\nTx8ZtuIDmyg41AYRH1sf8Y/DCPh3UBdVu2B0ktAQT+fIdPGK+jIfhpyV/8fzPKL8\n2yyPGB7+Vucvq+nVkO4zaOmBD1AlGKOh6V8oqhULmgP9jEHc2lV/hvMXDFvaH38e\nnP+C7B+1lw7bEvqG/6+mgCHtCLTAiHO25ZkSiI3Vqd2jWrJcAM4KSt5o/0PYDUub\npEGLOlJzGSStbiVbLOKycfXJ+xdWgwEr6hDmI+I6keVG8Z0ZHjPJi2w3cUcI+2Ty\n2uUBcrc2XOFGJM7dskeZk04BkqylqjU9m+R46dClEwzFYLY56W4DDEObk19T66XF\nWNbe8t/hcl+5yL9OzYbeznA+Bljzag+u5Yjfszgu4WcnBM9d7IoekX+pB4XCl6ZM\nMUi32R78Q3CldDF3E3Bzq9kynskPHe7hdwOBUgXbhYXN4yqUpF8qTJKOpSuiKlDu\nT5EfIbfBJzvEZQFLcccp5oT3F8TlvpJXAGD9jHAkA4r7MXMVSmM=\n=4IiY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a31d75e5fb5c1304445d698595079e29f3cd3a3a",
          "sha": "a31d75e5fb5c1304445d698595079e29f3cd3a3a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a31d75e5fb5c1304445d698595079e29f3cd3a3a"
        }
      ],
      "message": "Extract interpretation of fee estimation arguments\n\nThis will be reused in `sendall`, so we extract a method to prevent\nduplication.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-25T15:16:44Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-02-08T19:43:39Z"
      },
      "sha": "6d2208a3f6849a3732af6ff010eeea629b9b10d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkwMjc5M2M3NzcyZTViZGQ1YWFlNWIwZDIwYTMyYzAyYTFhNmRjN2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c",
      "tree": {
        "sha": "d35eaa22242dd951bf8e9a19bb21cac9d86812a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d35eaa22242dd951bf8e9a19bb21cac9d86812a7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d35eaa22242dd951bf8e9a19bb21cac9d86812a7\nparent 6d2208a3f6849a3732af6ff010eeea629b9b10d0\nauthor Murch <murch@murch.one> 1644352980 -0500\ncommitter Murch <murch@murch.one> 1648221406 -0400\n\nExtract FinishTransaction from send()\n\nThe final step of send either produces a PSBT or the final transaction.\nWe extract these steps to a new helper function `FinishTransaction()` to\nreuse them in `sendall`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmI93N8ACgkQe6A1yluQ\nFxN3wxAAnvTqWArqXhyJS9vsPkqOt/cFK6FbApl9bJ2DjzdJuYxsYfu1v5x4cH2V\nJKOsSvTz1FrMk/JF9Y5+C9t3ZesmS+DwaUV1O+cGA4/c55HqfjI31t3yuAs8my7E\nc7M4qgOPNGCh3Q3QagQA1Hpuo7z1ISvCWmbj2ix4T2HoJf1gzdqu+XhvEHrwvzAS\ngnR1hEKeWs9mUbW2lc1ljFPqTnsmniQM1dNqs00KEIS8LYOOI/FYwO2Eg85JhxiA\nA60MFLloDW7+Ote8YUh/arPLmUyvFu5k7nOx/hUfgFi8aKFwteXgeK/hW/YRZTRm\n07PZcOQWQ2qcouiKWFbDWQLat0F8pUTj5GbAFwHpYYUSxfVcvsxdp69wyrzjBbzG\nvpxqUuPs3NmEN5LTTMvn6QaS9kJzmQ+CgElqljuwDhmGBkP46TU/9rhK+MbKkAzv\nc7HaIkVQ3WzUyz7JKAuyDx5D438UVKKH6IA/3uRS6m/wnyqMJ+e/fiT5dNbMnCXo\njh2zBkKkrh/kLwMmNbSKK8z0VygZKpS9fuIQvDr6tsvo6dRe1tVX8GYToxptGfiV\n+CZRXpAEU3o+f+QXIc/Tua9KX8fhXCMcKueZERZXrwUgINYkmB+zhay8flkco4fd\ntyeyGh7zLBVL7MFA6ubLHiCrMW2vWEvz0JU+GSvvHmebhcYi6WQ=\n=nTDj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d2208a3f6849a3732af6ff010eeea629b9b10d0",
          "sha": "6d2208a3f6849a3732af6ff010eeea629b9b10d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2208a3f6849a3732af6ff010eeea629b9b10d0"
        }
      ],
      "message": "Extract FinishTransaction from send()\n\nThe final step of send either produces a PSBT or the final transaction.\nWe extract these steps to a new helper function `FinishTransaction()` to\nreuse them in `sendall`.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-25T15:16:46Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-02-08T20:43:00Z"
      },
      "sha": "902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6308246949,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAF4ADWl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6308246949",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T15:44:25Z"
    },
    {
      "event": "commented",
      "id": 1079155870,
      "node_id": "IC_kwDOABII585AUpye",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1079155870",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T15:45:07Z",
      "updated_at": "2022-03-25T15:45:07Z",
      "author_association": "MEMBER",
      "body": "Rebased to master due to silent merge conflict.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1079155870",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1079179455,
      "node_id": "IC_kwDOABII585AUvi_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1079179455",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T16:11:16Z",
      "updated_at": "2022-03-25T16:11:16Z",
      "author_association": "MEMBER",
      "body": "re-ACK 78aab643af1c1afbaf82e1269b55a617f7fda6f6\r\n\r\nChanges since last were just the rebase to resolving the silent merge conflict with renaming variables.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1079179455",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "reviewed",
      "id": 922253501,
      "node_id": "PRR_kwDOABII5842-Hi9",
      "url": null,
      "actor": null,
      "commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 78aab64",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-922253501",
      "submitted_at": "2022-03-26T02:44:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "commented",
      "id": 1080727453,
      "node_id": "IC_kwDOABII585Aaped",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1080727453",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:58Z",
      "updated_at": "2022-03-28T14:28:58Z",
      "author_association": "MEMBER",
      "body": "@sjors @stickies-v @glozow re-review this?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1080727453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6319059617,
      "node_id": "MEE_lADOABII585CJodezwAAAAF4pTKh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6319059617",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:59Z"
    },
    {
      "event": "subscribed",
      "id": 6319059625,
      "node_id": "SE_lADOABII585CJodezwAAAAF4pTKp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6319059625",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:59Z"
    },
    {
      "event": "mentioned",
      "id": 6319059635,
      "node_id": "MEE_lADOABII585CJodezwAAAAF4pTKz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6319059635",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:59Z"
    },
    {
      "event": "subscribed",
      "id": 6319059642,
      "node_id": "SE_lADOABII585CJodezwAAAAF4pTK6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6319059642",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:59Z"
    },
    {
      "event": "mentioned",
      "id": 6319059667,
      "node_id": "MEE_lADOABII585CJodezwAAAAF4pTLT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6319059667",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:59Z"
    },
    {
      "event": "subscribed",
      "id": 6319059675,
      "node_id": "SE_lADOABII585CJodezwAAAAF4pTLb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6319059675",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-28T14:28:59Z"
    },
    {
      "event": "reviewed",
      "id": 923487940,
      "node_id": "PRR_kwDOABII5843C07E",
      "url": null,
      "actor": null,
      "commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "code review ACK 78aab643af1c1afbaf82e1269b55a617f7fda6f6, a few non-blocking comments/questions",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#pullrequestreview-923487940",
      "submitted_at": "2022-03-28T18:34:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ5MDkwZWM0MDI1MTUyYzg0N2JlOGE1YWI2YWE2ZjM3OWUzNDUyNjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49090ec4025152c847be8a5ab6aa6f379e345260",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/49090ec4025152c847be8a5ab6aa6f379e345260",
      "tree": {
        "sha": "c0e9b1badef2d4a5b3f9d2b2b680264e629c8291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0e9b1badef2d4a5b3f9d2b2b680264e629c8291"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c0e9b1badef2d4a5b3f9d2b2b680264e629c8291\nparent 902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c\nauthor Murch <murch@murch.one> 1642013981 -0500\ncommitter Murch <murch@murch.one> 1648586267 -0400\n\nAdd sendall RPC née sweep\n\n_Motivation_\nCurrently, the wallet uses a fSubtractFeeAmount (SFFO) flag on the\nrecipients objects for all forms of sending calls. According to the\ncommit discussion, this flag was chiefly introduced to permit sweeping\nwithout manually calculating the fees of transactions. However, the flag\nleads to unintuitive behavior and makes it more complicated to test\nmany wallet RPCs exhaustively. We proposed to introduce a dedicated\n`sendall` RPC with the intention to cover this functionality.\n\nSince the proposal, it was discovered in further discussion that our\nproposed `sendall` rpc and SFFO have subtly different scopes of\noperation.\n• sendall:\n  Use _specific UTXOs_ to pay a destination the remainder after fees.\n• SFFO:\n  Use a _specific budget_ to pay an address the remainder after fees.\n\nWhile `sendall` will simplify cases of spending from specific UTXOs,\nemptying a wallet, or burning dust, we realized that there are some\ncases in which SFFO is used to pay other parties from a limited budget,\nwhich can often lead to the creation of change outputs. This cannot be\neasily replicated using `sendall` as it would require manual computation\nof the appropriate change amount.\n\nAs such, sendall cannot replace all uses of SFFO, but it still has a\ndifferent use case and will aid in simplifying some wallet calls and\nnumerous wallet tests.\n\n_Sendall call details_\nThe proposed sendall call builds a transaction from a specific subset of\nthe wallet's UTXO pool (by default all of them) and assigns the funds to\none or more receivers. Receivers can either be specified with a specific\namount or receive an equal share of the remaining unassigned funds. At\nleast one recipient must be provided without assigned amount to collect\nthe remainder. The `sendall` call will never create change. The call has\na `send_max` option that changes the default behavior of spending all\nUTXOs (\"no UTXO left behind\"), to maximizing the output amount of the\ntransaction by skipping uneconomic UTXOs. The `send_max` option is\nincompatible with providing a specific set of inputs.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmJDbhsACgkQe6A1yluQ\nFxNTmA//WjuhHe1edXr906X6UYX1tu02w/x217KraYIHgqBo95fccKHSnf0vyeHE\napJulcSRdRH9zGDzUhk5TlogFQAxmdbH7nU5gjZed7poZyeu4cZ4H3Ryj2GYlakA\nWpnD0x3LJzm0QuA1e03Sq8iTPe3Ixcn5Emux5EbZiPoDOJy6V1riWcJwQuQtid2f\nWoL9Ilt855yJ5xLj5s9wPoknlLUbeAF5OvGOHHueuICEeuGmR77D7yLW5qjdVQv+\n6QHgQCR4ineKhT6OLjZM6+/EWTtGqrxBgTq+QRELWx1kAHSQSMEe4pKHYIt6rKwc\nYktYfIE6Vi7c8noaoXIMrliTz5hoiCvbeoaLUc+HkuK47xeDcQSqARV+Dpw4dTCx\n4G1VW4CseCFCyyaEhO0KqhebaFhNJq8Ovj6gdI+zF4a6CbOXd0DUSAwPoPGly6up\nTsSD2EhSV37TQTH9R2qDDpet4OYEMPWJ5QgcR1mrx1GIQx7hlGcy0y2JsTIu+osY\n/MtZw0aycNlrckGUChGNuVPYFyFI7hFXyPTulk0yDk+TIOBdSBg/R/cB32l/fj2e\nVxXu5IQNSVo8aqAMu8g6h9JizHTCmh4tgRcJfnDZdiCFEMGMc26paY/IBOHNlN6e\n2DTo6vxkXHOQw7NKLVwPqJadYhFr9OzS1S5ODfVs4WQjMG5nFw4=\n=qvG5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c",
          "sha": "902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c"
        }
      ],
      "message": "Add sendall RPC née sweep\n\n_Motivation_\nCurrently, the wallet uses a fSubtractFeeAmount (SFFO) flag on the\nrecipients objects for all forms of sending calls. According to the\ncommit discussion, this flag was chiefly introduced to permit sweeping\nwithout manually calculating the fees of transactions. However, the flag\nleads to unintuitive behavior and makes it more complicated to test\nmany wallet RPCs exhaustively. We proposed to introduce a dedicated\n`sendall` RPC with the intention to cover this functionality.\n\nSince the proposal, it was discovered in further discussion that our\nproposed `sendall` rpc and SFFO have subtly different scopes of\noperation.\n• sendall:\n  Use _specific UTXOs_ to pay a destination the remainder after fees.\n• SFFO:\n  Use a _specific budget_ to pay an address the remainder after fees.\n\nWhile `sendall` will simplify cases of spending from specific UTXOs,\nemptying a wallet, or burning dust, we realized that there are some\ncases in which SFFO is used to pay other parties from a limited budget,\nwhich can often lead to the creation of change outputs. This cannot be\neasily replicated using `sendall` as it would require manual computation\nof the appropriate change amount.\n\nAs such, sendall cannot replace all uses of SFFO, but it still has a\ndifferent use case and will aid in simplifying some wallet calls and\nnumerous wallet tests.\n\n_Sendall call details_\nThe proposed sendall call builds a transaction from a specific subset of\nthe wallet's UTXO pool (by default all of them) and assigns the funds to\none or more receivers. Receivers can either be specified with a specific\namount or receive an equal share of the remaining unassigned funds. At\nleast one recipient must be provided without assigned amount to collect\nthe remainder. The `sendall` call will never create change. The call has\na `send_max` option that changes the default behavior of spending all\nUTXOs (\"no UTXO left behind\"), to maximizing the output amount of the\ntransaction by skipping uneconomic UTXOs. The `send_max` option is\nincompatible with providing a specific set of inputs.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-29T20:37:47Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-01-12T18:59:41Z"
      },
      "sha": "49090ec4025152c847be8a5ab6aa6f379e345260"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJiODRiNzE0NWIzMWRiZmRjYjRjZjBiOWI2ZTYxMmE1N2U1NzM5OTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "tree": {
        "sha": "55b3791642c69742be1305e22a4e10b804e47576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55b3791642c69742be1305e22a4e10b804e47576"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 55b3791642c69742be1305e22a4e10b804e47576\nparent 49090ec4025152c847be8a5ab6aa6f379e345260\nauthor ishaanam <ishaana.misra@gmail.com> 1645482712 -0500\ncommitter Murch <murch@murch.one> 1648586269 -0400\n\nadd tests for no recipient and using send_max while inputs are specified\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmJDbh0ACgkQe6A1yluQ\nFxPYRg/+NSmfj/ZYeOIclnrk31JmdNP2pFSLoY6JrDYY5MFRsg+nIM0TjnknoVWb\no/gwh83OQyG9WMN5nf/U7lcAbZzTRdAChkOLypmZqFO0rO4Hc2zbxkN6s/p1TUpC\nrL8Doal7zmQLitPIw19jBCbIGcqAV4brn77gLKBVMhqbFBw+1O+8vLvoROzjGNk2\nowRq2VryquEoGt4bibu+sKuKK2qsdP4ud0rhG+BGTWXL7sxYnzjTH1vhNTUW298W\nqheRrLPZj3JOkj535YxCjiZt2W4SSPim4CdOH8i2r6GEeoV0lZbsvOGCspFgBFV+\nAYpqZBvWWWKIR3pXdVLGfs6KbvpZPUHoOcx3urdsN/YAEHijhkb1eX9boT6SdqFl\nvak1xr/uZAKjnCkoH5uFllzu/R1cHbI03BMnMIn8aTsCHQeE6JkKHaH4+WCa4oPK\nEz0bKDc9kCModCqNiHx1Ib5ww2EMiizYLweKskNqfDT/QKXfJos8RPmE9BEhaJG6\nHHrHgRDaeBzDiCw+yaQGL2SvXKbkfMb0+z3m9k2EKkeq1/7/2wAg1MgaNMP+Dg6j\n4RhknJQT7oK6EVimCCPg0rMlYZhvCCRzTLmNBueU7rYZZSPTv2pRD995/8d5aJP5\nTmdAKrB0Nq1mREZb9afEQ+8dSUyNTLnWn2e8b7ae2IhNI5IRw2M=\n=NTBo\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49090ec4025152c847be8a5ab6aa6f379e345260",
          "sha": "49090ec4025152c847be8a5ab6aa6f379e345260",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/49090ec4025152c847be8a5ab6aa6f379e345260"
        }
      ],
      "message": "add tests for no recipient and using send_max while inputs are specified",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-03-29T20:37:49Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2022-02-21T22:31:52Z"
      },
      "sha": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6329732111,
      "node_id": "HRFPE_lADOABII585CJodezwAAAAF5SAwP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6329732111",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T20:38:10Z"
    },
    {
      "event": "commented",
      "id": 1082352676,
      "node_id": "IC_kwDOABII585Ag2Qk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1082352676",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T20:40:01Z",
      "updated_at": "2022-03-29T20:40:01Z",
      "author_association": "MEMBER",
      "body": "Addressed all of the comments by @glozow and @MarcoFalke",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1082352676",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "mentioned",
      "id": 6329742379,
      "node_id": "MEE_lADOABII585CJodezwAAAAF5SDQr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6329742379",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T20:40:01Z"
    },
    {
      "event": "subscribed",
      "id": 6329742386,
      "node_id": "SE_lADOABII585CJodezwAAAAF5SDQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6329742386",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T20:40:01Z"
    },
    {
      "event": "mentioned",
      "id": 6329742396,
      "node_id": "MEE_lADOABII585CJodezwAAAAF5SDQ8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6329742396",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T20:40:01Z"
    },
    {
      "event": "subscribed",
      "id": 6329742404,
      "node_id": "SE_lADOABII585CJodezwAAAAF5SDRE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6329742404",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T20:40:01Z"
    },
    {
      "event": "commented",
      "id": 1082414588,
      "node_id": "IC_kwDOABII585AhFX8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1082414588",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T22:02:30Z",
      "updated_at": "2022-03-29T22:02:30Z",
      "author_association": "MEMBER",
      "body": "re-ACK bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1082414588",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "review_requested",
      "id": 6332686288,
      "node_id": "RRE_lADOABII585CJodezwAAAAF5dR_Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6332686288",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T07:43:47Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 6332686475,
      "node_id": "RRE_lADOABII585CJodezwAAAAF5dSCL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6332686475",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T07:43:49Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 6332686622,
      "node_id": "RRE_lADOABII585CJodezwAAAAF5dSEe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6332686622",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T07:43:51Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1083115561,
      "node_id": "IC_kwDOABII585Ajwgp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083115561",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T13:04:31Z",
      "updated_at": "2022-03-30T13:04:31Z",
      "author_association": "MEMBER",
      "body": "This had 3 ACKs and I checked the range-diff. Did not review myself.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1083115561",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "merged",
      "id": 6334957608,
      "node_id": "ME_lADOABII585CJodezwAAAAF5l8go",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6334957608",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f4e5d704f24ad9beba4f9a4838be3351551964df",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e5d704f24ad9beba4f9a4838be3351551964df",
      "created_at": "2022-03-30T13:04:46Z"
    },
    {
      "event": "closed",
      "id": 6334957634,
      "node_id": "CE_lADOABII585CJodezwAAAAF5l8hC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6334957634",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T13:04:46Z"
    },
    {
      "event": "commented",
      "id": 1083134500,
      "node_id": "IC_kwDOABII585Aj1Ik",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083134500",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T13:22:02Z",
      "updated_at": "2022-03-30T13:22:02Z",
      "author_association": "MEMBER",
      "body": "Sorry I didn't get around to reviewing this. I'll see if I can test it later.\r\n\r\nThis remains on my wish list (for a future PR):\r\n\r\n> a new RPC call that returns a concise list of outpoints with their amount, like so:\r\n> \r\n> ```\r\n> 16a9...97f:7 0.000100\r\n> 34fe...e8d:0 0.00200\r\n> ```\r\n> \r\n> We could even use transaction short ids, if there's no duplicate in any given wallet (return the full id if there is).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1083134500",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "commented",
      "id": 1083170336,
      "node_id": "IC_kwDOABII585Aj94g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083170336",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T13:54:16Z",
      "updated_at": "2022-03-30T13:54:16Z",
      "author_association": "MEMBER",
      "body": "Probably wouldn't hurt to also return metadata like `depth` etc..",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1083170336",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24118"
    },
    {
      "event": "referenced",
      "id": 6357692978,
      "node_id": "REFE_lADOABII585CJodezwAAAAF68rIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6357692978",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "59fd959efcafecffd427e36bf8641f4f49526178",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/59fd959efcafecffd427e36bf8641f4f49526178",
      "created_at": "2022-04-03T03:42:36Z"
    },
    {
      "event": "referenced",
      "id": 6655417454,
      "node_id": "REFE_lADOABII585CJodezwAAAAGMsZxu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6655417454",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a956b222954e2888821abb757698193c42dad0c9",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/a956b222954e2888821abb757698193c42dad0c9",
      "created_at": "2022-05-21T21:51:47Z"
    },
    {
      "event": "referenced",
      "id": 6655417455,
      "node_id": "REFE_lADOABII585CJodezwAAAAGMsZxv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6655417455",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "96c63418db04d45e950afa4db626007df1333f3c",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/96c63418db04d45e950afa4db626007df1333f3c",
      "created_at": "2022-05-21T21:51:47Z"
    },
    {
      "event": "referenced",
      "id": 6655417457,
      "node_id": "REFE_lADOABII585CJodezwAAAAGMsZxx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6655417457",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "231924d911e8f3db85ed0a5217b9656dc7e56fef",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/231924d911e8f3db85ed0a5217b9656dc7e56fef",
      "created_at": "2022-05-21T21:51:47Z"
    },
    {
      "event": "referenced",
      "id": 6655417459,
      "node_id": "REFE_lADOABII585CJodezwAAAAGMsZxz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6655417459",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e2deb9b3d6ea4e45b8f7616c9e1a75d5e54b310b",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/e2deb9b3d6ea4e45b8f7616c9e1a75d5e54b310b",
      "created_at": "2022-05-21T21:51:47Z"
    },
    {
      "event": "referenced",
      "id": 6655417476,
      "node_id": "REFE_lADOABII585CJodezwAAAAGMsZyE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6655417476",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "60ec3336fef1bd58ff315d5521d7f28e98907e7b",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/60ec3336fef1bd58ff315d5521d7f28e98907e7b",
      "created_at": "2022-05-21T21:51:48Z"
    },
    {
      "event": "referenced",
      "id": 6655417477,
      "node_id": "REFE_lADOABII585CJodezwAAAAGMsZyF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6655417477",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f025826fe0f926f9e3611c3ebbfc12590d77e776",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/f025826fe0f926f9e3611c3ebbfc12590d77e776",
      "created_at": "2022-05-21T21:51:48Z"
    },
    {
      "event": "referenced",
      "id": 7397010935,
      "node_id": "REFE_lADOABII585CJodezwAAAAG45W33",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7397010935",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a56876e6b9dab4e0080cb8d7e9d0b4dd117f79a8",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/a56876e6b9dab4e0080cb8d7e9d0b4dd117f79a8",
      "created_at": "2022-09-15T17:26:52Z"
    },
    {
      "event": "referenced",
      "id": 7397243312,
      "node_id": "REFE_lADOABII585CJodezwAAAAG46Pmw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7397243312",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e91fcc5403882961f3e39edaf7ee7a38c643dbb1",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/e91fcc5403882961f3e39edaf7ee7a38c643dbb1",
      "created_at": "2022-09-15T18:04:58Z"
    },
    {
      "event": "locked",
      "id": 8885790461,
      "node_id": "LOE_lADOABII585CJodezwAAAAIRomb9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8885790461",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-30T10:21:47Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142312",
      "pull_request_review_id": 860205889,
      "id": 790142312,
      "node_id": "PRRC_kwDOABII584vGJ1o",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The fee_rate is defined twice:\r\n1. As an argument\r\n2. As an option object\r\n\r\nI presume this is an intentional design choice. But I can't seem to grasp the reason behind doing so.",
      "created_at": "2022-01-22T13:23:07Z",
      "updated_at": "2022-01-22T13:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1184,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142638",
      "pull_request_review_id": 860205889,
      "id": 790142638,
      "node_id": "PRRC_kwDOABII584vGJ6u",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Two Questions:\r\n\r\n1. If I pass the `conf_target` argument and `estimate_mode` under the options object, this will cause an error. But should there be an error in such a scenario?\r\n\r\n2. `conf_target` and `estimate_mode` can be options objects, but they are not explicitly defined in the RPC help message under the options column as is done with the fee_rate object. Is it a deliberate decision?",
      "created_at": "2022-01-22T13:26:53Z",
      "updated_at": "2022-01-22T13:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142638",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1235,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142798",
      "pull_request_review_id": 860205889,
      "id": 790142798,
      "node_id": "PRRC_kwDOABII584vGJ9O",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 262,
      "original_position": 25,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\nI think it's better to replace `key-value` -> `key:value`, because that's how the pair is originally expressed in arguments.",
      "created_at": "2022-01-22T13:29:02Z",
      "updated_at": "2022-01-22T13:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1265,
      "original_line": 1265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142893",
      "pull_request_review_id": 860205889,
      "id": 790142893,
      "node_id": "PRRC_kwDOABII584vGJ-t",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):",
      "path": "test/functional/wallet_sweep.py",
      "position": null,
      "original_position": 107,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you can add a `self.log.info(..)` statement here.",
      "created_at": "2022-01-22T13:30:03Z",
      "updated_at": "2022-01-22T13:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142893",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142968",
      "pull_request_review_id": 860205889,
      "id": 790142968,
      "node_id": "PRRC_kwDOABII584vGJ_4",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):",
      "path": "test/functional/wallet_sweep.py",
      "position": null,
      "original_position": 120,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here also, a `self.log.info(..)` statement can be added.",
      "created_at": "2022-01-22T13:31:04Z",
      "updated_at": "2022-01-22T13:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142968",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790143305",
      "pull_request_review_id": 860205889,
      "id": 790143305,
      "node_id": "PRRC_kwDOABII584vGKFJ",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000300)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        sweep_tx_receipt = self.wallet.sweep(receivers=[self.return_addr_remainder], fee_rate=300, options={\"sendmax\": True})",
      "path": "test/functional/wallet_sweep.py",
      "position": null,
      "original_position": 127,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Though it's not very difficult grasping the meaning of each section, I think it would be better if you added a comment:\r\n```\r\nsweep with sendmax enabled.\r\n```\r\nBefore line 127. And statement:\r\n```\r\nsweep with sendmax disabled.\r\n```\r\nBefore line 138.",
      "created_at": "2022-01-22T13:34:45Z",
      "updated_at": "2022-01-22T13:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790143305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790143305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790144111",
      "pull_request_review_id": 860207447,
      "id": 790144111,
      "node_id": "PRRC_kwDOABII584vGKRv",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\r\n```\r\n\r\nnit: no need for newline",
      "created_at": "2022-01-22T13:44:44Z",
      "updated_at": "2022-01-25T08:18:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790144111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790144111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790189815",
      "pull_request_review_id": 860245638,
      "id": 790189815,
      "node_id": "PRRC_kwDOABII584vGVb3",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);\n+                rawTx.vin.push_back(input);\n+                total_input_value += output.tx->tx->vout[output.i].nValue; // The horrors. Why doesn't this just have an alias on COutput?\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // First fill transaction with our data without signing,\n+            // so external signers are not asked sign more than once.\n+            bool complete;\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+            // Other than the name suggests, this actually will sign the transaction if possible\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : mtx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }\n+\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            if (psbt_opt_in || !complete || !add_to_wallet) {\n+                // Serialize the PSBT\n+                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                ssTx << psbtx;\n+                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            }\n+\n+            if (complete) {\n+                std::string err_string;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 256,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a place where this string is used? I could see only this declaration.",
      "created_at": "2022-01-22T22:08:04Z",
      "updated_at": "2022-01-22T22:08:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790189815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790189815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791134867",
      "pull_request_review_id": 861495232,
      "id": 791134867,
      "node_id": "PRRC_kwDOABII584vJ8KT",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`replaceable` is not documented",
      "created_at": "2022-01-24T20:42:16Z",
      "updated_at": "2022-01-24T20:43:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791134867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791134867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791135520",
      "pull_request_review_id": 861495232,
      "id": 791135520,
      "node_id": "PRRC_kwDOABII584vJ8Ug",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 161,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Needs to handle `rbf` and set the right sequence number\r\n\r\n```suggestion\r\n                CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\r\n```",
      "created_at": "2022-01-24T20:43:14Z",
      "updated_at": "2022-01-24T20:43:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791135520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791135520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791932606",
      "pull_request_review_id": 862598415,
      "id": 791932606,
      "node_id": "PRRC_kwDOABII584vM-6-",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142312,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is consistent with how all other transaction creating RPCs permit setting the `fee_rate`, not offering both options may surprise some of the users.",
      "created_at": "2022-01-25T17:01:31Z",
      "updated_at": "2022-01-25T17:01:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791932606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791932606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1184,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791952687",
      "pull_request_review_id": 862626593,
      "id": 791952687,
      "node_id": "PRRC_kwDOABII584vND0v",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142638,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, thanks. I'll make sure that the `conf_target` and `estimate_mode` appear in the documentation of the options.\r\n\r\nRegarding the error when `conf_target` and `estimate_mode` are passed in different ways, this is consistent with what `send` does.",
      "created_at": "2022-01-25T17:23:32Z",
      "updated_at": "2022-01-25T17:23:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791952687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791952687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1235,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791954002",
      "pull_request_review_id": 862628344,
      "id": 791954002,
      "node_id": "PRRC_kwDOABII584vNEJS",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 262,
      "original_position": 25,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142798,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"key-value\" is the prevalent way of describing this sort of datum.",
      "created_at": "2022-01-25T17:24:55Z",
      "updated_at": "2022-01-25T17:24:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791954002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791954002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1265,
      "original_line": 1265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957317",
      "pull_request_review_id": 862632846,
      "id": 791957317,
      "node_id": "PRRC_kwDOABII584vNE9F",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):",
      "path": "test/functional/wallet_sweep.py",
      "position": null,
      "original_position": 107,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142893,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-01-25T17:28:38Z",
      "updated_at": "2022-01-25T17:28:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791957317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957352",
      "pull_request_review_id": 862632892,
      "id": 791957352,
      "node_id": "PRRC_kwDOABII584vNE9o",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):",
      "path": "test/functional/wallet_sweep.py",
      "position": null,
      "original_position": 120,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142968,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-01-25T17:28:40Z",
      "updated_at": "2022-01-25T17:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791957352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791958764",
      "pull_request_review_id": 862634775,
      "id": 791958764,
      "node_id": "PRRC_kwDOABII584vNFTs",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000300)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        sweep_tx_receipt = self.wallet.sweep(receivers=[self.return_addr_remainder], fee_rate=300, options={\"sendmax\": True})",
      "path": "test/functional/wallet_sweep.py",
      "position": null,
      "original_position": 127,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790143305,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added comments as suggested.",
      "created_at": "2022-01-25T17:30:14Z",
      "updated_at": "2022-01-25T17:30:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791958764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791958764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977558",
      "pull_request_review_id": 862660702,
      "id": 791977558,
      "node_id": "PRRC_kwDOABII584vNJ5W",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);\n+                rawTx.vin.push_back(input);\n+                total_input_value += output.tx->tx->vout[output.i].nValue; // The horrors. Why doesn't this just have an alias on COutput?\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // First fill transaction with our data without signing,\n+            // so external signers are not asked sign more than once.\n+            bool complete;\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+            // Other than the name suggests, this actually will sign the transaction if possible\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : mtx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }\n+\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            if (psbt_opt_in || !complete || !add_to_wallet) {\n+                // Serialize the PSBT\n+                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                ssTx << psbtx;\n+                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            }\n+\n+            if (complete) {\n+                std::string err_string;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 256,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790189815,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks. I also removed it from send where it also wasn't used.",
      "created_at": "2022-01-25T17:52:15Z",
      "updated_at": "2022-01-25T17:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977622",
      "pull_request_review_id": 862660788,
      "id": 791977622,
      "node_id": "PRRC_kwDOABII584vNJ6W",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 791134867,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2022-01-25T17:52:20Z",
      "updated_at": "2022-01-25T17:52:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977673",
      "pull_request_review_id": 862660865,
      "id": 791977673,
      "node_id": "PRRC_kwDOABII584vNJ7J",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 161,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 791135520,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added, thanks.",
      "created_at": "2022-01-25T17:52:24Z",
      "updated_at": "2022-01-25T17:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977758",
      "pull_request_review_id": 862660968,
      "id": 791977758,
      "node_id": "PRRC_kwDOABII584vNJ8e",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790144111,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the newline. (I was copying the style of `send` which has one.)",
      "created_at": "2022-01-25T17:52:30Z",
      "updated_at": "2022-01-25T18:12:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977758",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794424600",
      "pull_request_review_id": 866027762,
      "id": 794424600,
      "node_id": "PRRC_kwDOABII584vWfUY",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 262,
      "original_position": 25,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142798,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> \"key-value\" is the prevalent way of describing this sort of datum.\r\n\r\nI had checked with various RPC commands, and I think it is correct. ",
      "created_at": "2022-01-28T11:29:15Z",
      "updated_at": "2022-01-28T11:29:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794424600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794424600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1265,
      "original_line": 1265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794431354",
      "pull_request_review_id": 866037257,
      "id": 794431354,
      "node_id": "PRRC_kwDOABII584vWg96",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142312,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This is consistent with how all other transaction creating RPCs permit setting the `fee_rate`.\r\n\r\nI checked with other RPCs where `\"fee_rate\", RPCArg::Type::AMOUNT,...` is used. It seems like the situation you are describing is true only for the `send` RPC (see https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpc/spend.cpp#L1050-L1062) and isn't a norm per se.\r\n\r\nOther RPCs that uses fee_rate but doesn't define it twice are:\r\n- sendtoaddress\r\n- sendmany\r\n- fundrawtransaction\r\n- bumpfee_helper, and,\r\n- walletcreatefundedpsbt\r\n\r\n",
      "created_at": "2022-01-28T11:39:58Z",
      "updated_at": "2022-01-28T11:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794431354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794431354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1184,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794441216",
      "pull_request_review_id": 866051255,
      "id": 794441216,
      "node_id": "PRRC_kwDOABII584vWjYA",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142638,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Regarding the error when conf_target and estimate_mode are passed in different ways, this is consistent with what send does.\r\n\r\nI checked the code, and it seems like you are right. I can also see that the `sweep` RPC is modeled after the `send` RPC. However, I am not sure if it is an optimal behavior. I can't understand why the user is compelled to input both of these options as either options or as arguments. Why not allow them to pass the first `conf_target` in one way and `estimate_mode` in another. Similar to what is done with `fee_rate`.",
      "created_at": "2022-01-28T11:55:30Z",
      "updated_at": "2022-01-28T11:55:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794441216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794441216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1235,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803092722",
      "pull_request_review_id": 878060109,
      "id": 803092722,
      "node_id": "PRRC_kwDOABII584v3jjy",
      "diff_hunk": "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {\n+    bool add_to_wallet = options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true;\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "92b248498 nit, clang-format\r\n```diff\r\n-static void PreventOutdatedOptions(const UniValue& options) {\r\n+static void PreventOutdatedOptions(const UniValue& options)\r\n+{\r\n```\r\n74e3135 idem for `ParseFeeEstimationInstructions()`\r\n7ba3faa and for `FinishTransaction()`\r\n",
      "created_at": "2022-02-09T21:13:46Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803092722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803092722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803096066",
      "pull_request_review_id": 878060109,
      "id": 803096066,
      "node_id": "PRRC_kwDOABII584v3kYC",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "74e3135ba0721f62c2bc0cbb9bcab88a34003d67 if you retouch, we've been converging on this named arg format for clang-tidy verification\r\n```suggestion\r\n            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\r\n```\r\nb2b1d6b idem, line 1265, line 1290, etc.",
      "created_at": "2022-02-09T21:18:31Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803096066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803096066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803113395",
      "pull_request_review_id": 878060109,
      "id": 803113395,
      "node_id": "PRRC_kwDOABII584v3omz",
      "diff_hunk": "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7ba3faa4 minor style suggestions (initiialize localvar next to first use, const, braced initialization) if you retouch and are so inclined, these are already much improved\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\n static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {\r\n-    bool add_to_wallet = options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true;\r\n-\r\n     // Make a blank psbt\r\n     PartiallySignedTransaction psbtx(rawTx);\r\n \r\n@@ -94,7 +92,9 @@ static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const\r\n \r\n     UniValue result(UniValue::VOBJ);\r\n \r\n-    const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\r\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\r\n+    const bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\r\n     if (psbt_opt_in || !complete || !add_to_wallet) {\r\n         // Serialize the PSBT\r\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\r\n@@ -1231,7 +1231,7 @@ RPCHelpMan send()\r\n \r\n             CAmount fee;\r\n             int change_position;\r\n-            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\r\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\r\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\r\n             CCoinControl coin_control;\r\n```\r\n</p></details>\r\n",
      "created_at": "2022-02-09T21:43:59Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803113395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803113395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134312",
      "pull_request_review_id": 878060109,
      "id": 803134312,
      "node_id": "PRRC_kwDOABII584v3tto",
      "diff_hunk": "@@ -0,0 +1,24 @@\n+Add `sweepwallet` RPC",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 1,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b2b1d6b\r\n\r\n- I think you can add your release note directly to the file `doc/release-notes.md` in this section:\r\n\r\n```md\r\nNew RPCs\r\n--------\r\n```\r\n\r\n- s/without unspecified/without a specified/\r\n- add `(#24118)` to the end\r\n",
      "created_at": "2022-02-09T22:15:22Z",
      "updated_at": "2022-02-11T10:35:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803134312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134829",
      "pull_request_review_id": 878060109,
      "id": 803134829,
      "node_id": "PRRC_kwDOABII584v3t1t",
      "diff_hunk": "@@ -7,11 +7,13 @@\n #include <policy/policy.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/util.h>\n+#include <util/rbf.h>",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b2b1d6b nit, sort",
      "created_at": "2022-02-09T22:16:10Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803134829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803137411",
      "pull_request_review_id": 878060109,
      "id": 803137411,
      "node_id": "PRRC_kwDOABII584v3ueD",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b2b1d6b use a semi-colon here (\";\") or a new sentence\r\n```suggestion\r\n            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sweep destinations. Each address may only appear once.\\n\"\r\n```",
      "created_at": "2022-02-09T22:20:03Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803137411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803137411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803138716",
      "pull_request_review_id": 878060109,
      "id": 803138716,
      "node_id": "PRRC_kwDOABII584v3uyc",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 278,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b2b1d6b per the developer notes, snake case is used for new RPC arguments: `send_max`?  ",
      "created_at": "2022-02-09T22:22:08Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803138716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803138716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803150069",
      "pull_request_review_id": 878060109,
      "id": 803150069,
      "node_id": "PRRC_kwDOABII584v3xj1",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n \n-            UniValue result(UniValue::VOBJ);\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            if (options.exists(\"inputs\") && options.exists(\"sendmax\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine sendmax with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n                 } else {\n-                    result.pushKV(\"hex\", hex);\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 491,
      "original_position": 480,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b2b1d6b minor suggestions if you retouch and are so inclined\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\n@@ -1353,17 +1353,11 @@ RPCHelpMan sweepwallet()\r\n             }\r\n \r\n             CCoinControl coin_control;\r\n-\r\n-            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\r\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\r\n \r\n             coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\r\n \r\n-            bool lock_unspents = false;\r\n-            if (options.exists(\"lock_unspents\")) {\r\n-                lock_unspents = options[\"lock_unspents\"].get_bool();\r\n-            }\r\n-\r\n-            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\r\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\r\n \r\n             FeeCalculation fee_calc_out;\r\n             CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\r\n@@ -1422,7 +1416,7 @@ RPCHelpMan sweepwallet()\r\n                 }\r\n             }\r\n \r\n-            CAmount output_amounts_claimed(0);\r\n+            CAmount output_amounts_claimed{0};\r\n             for (CTxOut out : rawTx.vout) {\r\n                 output_amounts_claimed += out.nValue;\r\n             }\r\n@@ -1431,12 +1425,12 @@ RPCHelpMan sweepwallet()\r\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\r\n             }\r\n \r\n-            CAmount remainder = effective_value - output_amounts_claimed;\r\n+            const CAmount remainder{effective_value - output_amounts_claimed};\r\n             if (remainder < 0) {\r\n                 throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\r\n             }\r\n \r\n-            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\r\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\r\n \r\n             bool gave_remaining_to_first = false;\r\n             for (CTxOut& out : rawTx.vout) {\r\n@@ -1461,6 +1455,7 @@ RPCHelpMan sweepwallet()\r\n                 }\r\n             }\r\n \r\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\r\n             if (lock_unspents) {\r\n                 for (const CTxIn& txin : rawTx.vin) {\r\n                     pwallet->LockCoin(txin.prevout);\r\n```\r\n</p></details>\r\n",
      "created_at": "2022-02-09T22:40:28Z",
      "updated_at": "2022-02-09T22:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803150069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803150069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1469,
      "original_line": 1469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803205253",
      "pull_request_review_id": 878207785,
      "id": 803205253,
      "node_id": "PRRC_kwDOABII584v3_CF",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142312,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, I'll take another look at that. Thank you.",
      "created_at": "2022-02-10T00:34:28Z",
      "updated_at": "2022-02-10T00:34:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803205253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803205253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1184,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804181749",
      "pull_request_review_id": 879600000,
      "id": 804181749,
      "node_id": "PRRC_kwDOABII584v7tb1",
      "diff_hunk": "@@ -7,11 +7,13 @@\n #include <policy/policy.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/util.h>\n+#include <util/rbf.h>",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803134829,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-02-10T22:28:16Z",
      "updated_at": "2022-02-10T22:28:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804181749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804181749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185121",
      "pull_request_review_id": 879603283,
      "id": 804185121,
      "node_id": "PRRC_kwDOABII584v7uQh",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n \n-            UniValue result(UniValue::VOBJ);\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            if (options.exists(\"inputs\") && options.exists(\"sendmax\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine sendmax with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n                 } else {\n-                    result.pushKV(\"hex\", hex);\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 491,
      "original_position": 480,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803150069,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I got all these.",
      "created_at": "2022-02-10T22:31:52Z",
      "updated_at": "2022-02-10T22:31:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1469,
      "original_line": 1469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185666",
      "pull_request_review_id": 879603799,
      "id": 804185666,
      "node_id": "PRRC_kwDOABII584v7uZC",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 278,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803138716,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-02-10T22:32:24Z",
      "updated_at": "2022-02-10T22:32:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185666",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185871",
      "pull_request_review_id": 879603951,
      "id": 804185871,
      "node_id": "PRRC_kwDOABII584v7ucP",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803137411,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, sounds much better.",
      "created_at": "2022-02-10T22:32:35Z",
      "updated_at": "2022-02-10T22:32:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804186159",
      "pull_request_review_id": 879604210,
      "id": 804186159,
      "node_id": "PRRC_kwDOABII584v7ugv",
      "diff_hunk": "@@ -0,0 +1,24 @@\n+Add `sweepwallet` RPC",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 1,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803134312,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved and amended as suggested",
      "created_at": "2022-02-10T22:32:54Z",
      "updated_at": "2022-02-10T22:32:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804186159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804186159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804187419",
      "pull_request_review_id": 879605191,
      "id": 804187419,
      "node_id": "PRRC_kwDOABII584v7u0b",
      "diff_hunk": "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803113395,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-02-10T22:34:14Z",
      "updated_at": "2022-02-10T22:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804187419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804187419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804188483",
      "pull_request_review_id": 879606086,
      "id": 804188483,
      "node_id": "PRRC_kwDOABII584v7vFD",
      "diff_hunk": "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803096066,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Got em.",
      "created_at": "2022-02-10T22:35:26Z",
      "updated_at": "2022-02-10T22:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804188483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804188483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804189336",
      "pull_request_review_id": 879606945,
      "id": 804189336,
      "node_id": "PRRC_kwDOABII584v7vSY",
      "diff_hunk": "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {\n+    bool add_to_wallet = options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true;\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "in_reply_to_id": 803092722,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-02-10T22:36:31Z",
      "updated_at": "2022-02-10T22:36:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804189336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804189336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804545946",
      "pull_request_review_id": 880031617,
      "id": 804545946,
      "node_id": "PRRC_kwDOABII584v9GWa",
      "diff_hunk": "@@ -278,6 +278,8 @@\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n+    'wallet_sweep.py --legacy-wallet',\n+    'wallet_sweep.py --descriptors',",
      "path": "test/functional/test_runner.py",
      "position": null,
      "original_position": 5,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure, but maybe `rpc_sweepwallet.py` would be the most coherent filename if the call is named \"sweepwallet\".",
      "created_at": "2022-02-11T10:57:54Z",
      "updated_at": "2022-02-11T11:28:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804545946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804545946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804560426",
      "pull_request_review_id": 880051548,
      "id": 804560426,
      "node_id": "PRRC_kwDOABII584v9J4q",
      "diff_hunk": "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more\n+  receivers without creating change.\n+\n+  By default, the `sweepwallet` RPC will empty the wallet completely leaving no\n+  UTXOs behind. Optionally, the `send_max` option allows skipping uneconomic UTXOs\n+  and therefore maximizing the received amount.\n+\n+  The `sweepwallet` RPC can process a combination of receiver addresses with and\n+  without amounts specified. The specified amounts are paid first, and the\n+  remainder split among the receivers with unspecified amounts. At least one\n+  address must be provided without a specified amount to receive the balance left\n+  after fees.\n+\n+  Instead of the complete UTXO pool, the call can be used to create a transaction\n+  from a specific UTXO set. We recommend using `sweepwallet` to empty wallets\n+  or to spend specific UTXOs in full.\n+\n+  The `sweepwallet` RPC therefore provides a less cumbersome way of spending\n+  specific UTXOs or emptying wallets than subtract fee from output/amount (SFFO).\n+  If the user wishes to specify a budget rather than a set of UTXOs to delimit a\n+  transaction, they should continue to use SFFO. (#24118)",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 26,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if the release note isn't a bit long and whether the how-to info would be best documented elsewhere more permanently like in the sweepwallet help or in one of the doc/ files.",
      "created_at": "2022-02-11T11:19:12Z",
      "updated_at": "2022-02-11T11:19:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804560426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804560426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804915694",
      "pull_request_review_id": 880551904,
      "id": 804915694,
      "node_id": "PRRC_kwDOABII584v-gnu",
      "diff_hunk": "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 6,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/balance/value",
      "created_at": "2022-02-11T18:43:15Z",
      "updated_at": "2022-02-11T18:43:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804915694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804915694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806111360",
      "pull_request_review_id": 882010532,
      "id": 806111360,
      "node_id": "PRRC_kwDOABII584wDEiA",
      "diff_hunk": "@@ -278,6 +278,8 @@\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n+    'wallet_sweep.py --legacy-wallet',\n+    'wallet_sweep.py --descriptors',",
      "path": "test/functional/test_runner.py",
      "position": null,
      "original_position": 5,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": 804545946,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see that some other wallet related calls do start with `rpc_…` as well, such as `rpc_rawtransaction.py`, `rpc_fundrawtransaction.py`, `rpc_signrawtransaction.py`, and `rpc_psbt.py`, but all the other send related calls are under `wallet_…`. I'm kinda thinking that it fits the pattern as it is currently. It should probably be `wallet_sweepwallet.py`, though.",
      "created_at": "2022-02-14T18:08:08Z",
      "updated_at": "2022-02-14T18:08:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806111360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806111360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245395",
      "pull_request_review_id": 882196594,
      "id": 806245395,
      "node_id": "PRRC_kwDOABII584wDlQT",
      "diff_hunk": "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 6,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": 804915694,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Amended.",
      "created_at": "2022-02-14T21:16:36Z",
      "updated_at": "2022-02-14T21:16:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245520",
      "pull_request_review_id": 882196757,
      "id": 806245520,
      "node_id": "PRRC_kwDOABII584wDlSQ",
      "diff_hunk": "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more\n+  receivers without creating change.\n+\n+  By default, the `sweepwallet` RPC will empty the wallet completely leaving no\n+  UTXOs behind. Optionally, the `send_max` option allows skipping uneconomic UTXOs\n+  and therefore maximizing the received amount.\n+\n+  The `sweepwallet` RPC can process a combination of receiver addresses with and\n+  without amounts specified. The specified amounts are paid first, and the\n+  remainder split among the receivers with unspecified amounts. At least one\n+  address must be provided without a specified amount to receive the balance left\n+  after fees.\n+\n+  Instead of the complete UTXO pool, the call can be used to create a transaction\n+  from a specific UTXO set. We recommend using `sweepwallet` to empty wallets\n+  or to spend specific UTXOs in full.\n+\n+  The `sweepwallet` RPC therefore provides a less cumbersome way of spending\n+  specific UTXOs or emptying wallets than subtract fee from output/amount (SFFO).\n+  If the user wishes to specify a budget rather than a set of UTXOs to delimit a\n+  transaction, they should continue to use SFFO. (#24118)",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 26,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": 804560426,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I rewrote the release notes.",
      "created_at": "2022-02-14T21:16:46Z",
      "updated_at": "2022-02-14T21:16:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245809",
      "pull_request_review_id": 882197184,
      "id": 806245809,
      "node_id": "PRRC_kwDOABII584wDlWx",
      "diff_hunk": "@@ -278,6 +278,8 @@\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n+    'wallet_sweep.py --legacy-wallet',\n+    'wallet_sweep.py --descriptors',",
      "path": "test/functional/test_runner.py",
      "position": null,
      "original_position": 5,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "in_reply_to_id": 804545946,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `wallet_sweepwallet.py`.",
      "created_at": "2022-02-14T21:17:14Z",
      "updated_at": "2022-02-14T21:17:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809377182",
      "pull_request_review_id": 886423867,
      "id": 809377182,
      "node_id": "PRRC_kwDOABII584wPh2e",
      "diff_hunk": "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "in_reply_to_id": 790142312,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After talking to a few people, my sentiment is that this is the expected behavior. In the minimal use case, the most important arguments are available as positional, making it easy to use. When people start using options, they may want to define everything as options, though, for consistency and readability.",
      "created_at": "2022-02-17T19:06:29Z",
      "updated_at": "2022-02-17T19:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809377182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809377182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1184,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809483111",
      "pull_request_review_id": 886575360,
      "id": 809483111,
      "node_id": "PRRC_kwDOABII584wP7tn",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5a663b2a676ed7ec24d5d4b1690d2639aeebab86 \"Add sendall RPC née sweep\"\r\n\r\nnit: The comment on this line is unnecessary.",
      "created_at": "2022-02-17T21:30:18Z",
      "updated_at": "2022-02-17T21:42:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809483111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809483111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809483926",
      "pull_request_review_id": 886575360,
      "id": 809483926,
      "node_id": "PRRC_kwDOABII584wP76W",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*spend 0-value utxos=*/0);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 236,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5a663b2a676ed7ec24d5d4b1690d2639aeebab86 \"Add sendall RPC née sweep\"\r\n\r\nnit: the inline comment should have the parameter name\r\n\r\n```suggestion\r\n                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\r\n```",
      "created_at": "2022-02-17T21:31:24Z",
      "updated_at": "2022-02-17T21:42:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809483926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809483926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809490334",
      "pull_request_review_id": 886575360,
      "id": 809490334,
      "node_id": "PRRC_kwDOABII584wP9ee",
      "diff_hunk": "@@ -0,0 +1,291 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+        return self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+    # Helper schema for success cases\n+    def test_sendall_success(self, sendall_args, remaining_balance = 0):\n+        sendall_tx_receipt = self.wallet.sendall(sendall_args)\n+        self.generate(self.nodes[0], 1)\n+        # wallet has remaining balance (usually empty)\n+        assert_equal(remaining_balance, self.wallet.getbalances()[\"mine\"][\"trusted\"])\n+\n+        assert_equal(sendall_tx_receipt[\"complete\"], True)\n+        return self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+    @cleanup\n+    def gen_and_clean(self):\n+        self.add_uxtos([15, 2, 4])\n+\n+    def test_cleanup(self):\n+        self.log.info(\"Test that cleanup wrapper empties wallet\")\n+        self.gen_and_clean()\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    # Actual tests\n+    @cleanup\n+    def sendall_two_utxos(self):\n+        self.log.info(\"Testing basic sendall case without specific amounts\")\n+        pre_sendall_balance = self.add_uxtos([10,11])\n+        tx_from_wallet = self.test_sendall_success(sendall_args = [self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx = tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance + tx_from_wallet[\"fee\"] } # fee is neg\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_split(self):\n+        self.log.info(\"Testing sendall where two recipients have unspecified amount\")\n+        pre_sendall_balance = self.add_uxtos([1, 2, 3, 15])\n+        tx_from_wallet = self.test_sendall_success([self.remainder_target, self.split_target])\n+\n+        half = (pre_sendall_balance + tx_from_wallet[\"fee\"]) / 2\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.split_target, \"value\": half },\n+                { \"address\": self.remainder_target, \"value\": half }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_and_spend(self):\n+        self.log.info(\"Testing sendall in combination with paying specified amount to recipient\")\n+        pre_sendall_balance = self.add_uxtos([8, 13])\n+        tx_from_wallet = self.test_sendall_success([{self.recipient: 5}, self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.recipient, \"value\": 5 },\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance - 5 + tx_from_wallet[\"fee\"] }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_invalid_receiver_addresses(self):\n+        self.log.info(\"Test having only receiver with specified amount, missing receiver with unspecified amount\")\n+        self.add_uxtos([12, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Must provide at least one address without a specified amount\" ,\n+                self.wallet.sendall,\n+                [{self.recipient: 5}]\n+            )\n+\n+    @cleanup\n+    def sendall_duplicate_receiver(self):\n+        self.log.info(\"Test duplicate destination\")\n+        self.add_uxtos([1, 8, 3, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Invalid parameter, duplicated address: {}\".format(self.remainder_target),\n+                self.wallet.sendall,\n+                [self.remainder_target, self.remainder_target]\n+            )\n+\n+    @cleanup\n+    def sendall_invalid_amounts(self):\n+        self.log.info(\"Test sending more than balance\")\n+        pre_sendall_balance = self.add_uxtos([7, 14])\n+\n+        expected_tx = self.wallet.sendall(receivers=[{self.recipient: 5}, self.remainder_target], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\", self.wallet.sendall,\n+                [ {self.recipient: pre_sendall_balance + 1}, self.remainder_target ])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance}, self.remainder_target])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.recipient),\n+                self.wallet.sendall, [{self.recipient: 0.00000001}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee - Decimal(0.00000010)}, self.remainder_target])\n+\n+    # @cleanup not needed because different wallet used\n+    def sendall_negative_effective_value(self):\n+        self.log.info(\"Test that sendall fails if all UTXOs have negative effective value\")\n+        # Use dedicated wallet for dust amounts and unload wallet at end\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for transaction.\"\n+                + \" Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\",\n+                dust_wallet.sendall, receivers=[self.remainder_target], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    @cleanup\n+    def sendall_with_send_max(self):\n+        self.log.info(\"Check that `send_max` option causes negative value UTXOs to be left behind\")\n+        self.add_uxtos([0.00000400, 0.00000300, 1])\n+\n+        # sendall with send_max\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], fee_rate=300, options={\"send_max\": True})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        self.assert_tx_has_outputs(tx_from_wallet, [{\"address\": self.remainder_target, \"value\": 1 + tx_from_wallet[\"fee\"]}])\n+        assert_equal(self.wallet.getbalances()[\"mine\"][\"trusted\"], Decimal(\"0.00000700\"))\n+\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+\n+    @cleanup\n+    def sendall_specific_inputs(self):\n+        self.log.info(\"Test sendall with a subset of UTXO pool\")\n+        self.add_uxtos([17, 4])\n+        utxo = self.wallet.listunspent()[0]\n+\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], options={\"inputs\": [utxo]})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"txid\"], utxo[\"txid\"])\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"vout\"], utxo[\"vout\"])\n+        self.assert_tx_has_output(tx_from_wallet, self.remainder_target)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        # Clean up remaining UTXO\n+        self.wallet.sendall(receivers=[self.remainder_target])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty",
      "path": "test/functional/wallet_sendall.py",
      "position": null,
      "original_position": 220,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 5a663b2a676ed7ec24d5d4b1690d2639aeebab86 \"Add sendall RPC née sweep\"\r\n\r\nThis cleanup is no longer necessary with the `@cleanup` decorator.",
      "created_at": "2022-02-17T21:41:01Z",
      "updated_at": "2022-02-17T21:42:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809490334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809490334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 217,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809535174",
      "pull_request_review_id": 886649902,
      "id": 809535174,
      "node_id": "PRRC_kwDOABII584wQIbG",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "in_reply_to_id": 809483111,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, removed",
      "created_at": "2022-02-17T22:54:38Z",
      "updated_at": "2022-02-17T22:54:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809535174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809535174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809535260",
      "pull_request_review_id": 886650001,
      "id": 809535260,
      "node_id": "PRRC_kwDOABII584wQIcc",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*spend 0-value utxos=*/0);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 236,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "in_reply_to_id": 809483926,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, updated",
      "created_at": "2022-02-17T22:54:49Z",
      "updated_at": "2022-02-17T22:54:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809535260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809535260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809535455",
      "pull_request_review_id": 886650257,
      "id": 809535455,
      "node_id": "PRRC_kwDOABII584wQIff",
      "diff_hunk": "@@ -0,0 +1,291 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+        return self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+    # Helper schema for success cases\n+    def test_sendall_success(self, sendall_args, remaining_balance = 0):\n+        sendall_tx_receipt = self.wallet.sendall(sendall_args)\n+        self.generate(self.nodes[0], 1)\n+        # wallet has remaining balance (usually empty)\n+        assert_equal(remaining_balance, self.wallet.getbalances()[\"mine\"][\"trusted\"])\n+\n+        assert_equal(sendall_tx_receipt[\"complete\"], True)\n+        return self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+    @cleanup\n+    def gen_and_clean(self):\n+        self.add_uxtos([15, 2, 4])\n+\n+    def test_cleanup(self):\n+        self.log.info(\"Test that cleanup wrapper empties wallet\")\n+        self.gen_and_clean()\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    # Actual tests\n+    @cleanup\n+    def sendall_two_utxos(self):\n+        self.log.info(\"Testing basic sendall case without specific amounts\")\n+        pre_sendall_balance = self.add_uxtos([10,11])\n+        tx_from_wallet = self.test_sendall_success(sendall_args = [self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx = tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance + tx_from_wallet[\"fee\"] } # fee is neg\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_split(self):\n+        self.log.info(\"Testing sendall where two recipients have unspecified amount\")\n+        pre_sendall_balance = self.add_uxtos([1, 2, 3, 15])\n+        tx_from_wallet = self.test_sendall_success([self.remainder_target, self.split_target])\n+\n+        half = (pre_sendall_balance + tx_from_wallet[\"fee\"]) / 2\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.split_target, \"value\": half },\n+                { \"address\": self.remainder_target, \"value\": half }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_and_spend(self):\n+        self.log.info(\"Testing sendall in combination with paying specified amount to recipient\")\n+        pre_sendall_balance = self.add_uxtos([8, 13])\n+        tx_from_wallet = self.test_sendall_success([{self.recipient: 5}, self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.recipient, \"value\": 5 },\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance - 5 + tx_from_wallet[\"fee\"] }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_invalid_receiver_addresses(self):\n+        self.log.info(\"Test having only receiver with specified amount, missing receiver with unspecified amount\")\n+        self.add_uxtos([12, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Must provide at least one address without a specified amount\" ,\n+                self.wallet.sendall,\n+                [{self.recipient: 5}]\n+            )\n+\n+    @cleanup\n+    def sendall_duplicate_receiver(self):\n+        self.log.info(\"Test duplicate destination\")\n+        self.add_uxtos([1, 8, 3, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Invalid parameter, duplicated address: {}\".format(self.remainder_target),\n+                self.wallet.sendall,\n+                [self.remainder_target, self.remainder_target]\n+            )\n+\n+    @cleanup\n+    def sendall_invalid_amounts(self):\n+        self.log.info(\"Test sending more than balance\")\n+        pre_sendall_balance = self.add_uxtos([7, 14])\n+\n+        expected_tx = self.wallet.sendall(receivers=[{self.recipient: 5}, self.remainder_target], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\", self.wallet.sendall,\n+                [ {self.recipient: pre_sendall_balance + 1}, self.remainder_target ])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance}, self.remainder_target])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.recipient),\n+                self.wallet.sendall, [{self.recipient: 0.00000001}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee - Decimal(0.00000010)}, self.remainder_target])\n+\n+    # @cleanup not needed because different wallet used\n+    def sendall_negative_effective_value(self):\n+        self.log.info(\"Test that sendall fails if all UTXOs have negative effective value\")\n+        # Use dedicated wallet for dust amounts and unload wallet at end\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for transaction.\"\n+                + \" Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\",\n+                dust_wallet.sendall, receivers=[self.remainder_target], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    @cleanup\n+    def sendall_with_send_max(self):\n+        self.log.info(\"Check that `send_max` option causes negative value UTXOs to be left behind\")\n+        self.add_uxtos([0.00000400, 0.00000300, 1])\n+\n+        # sendall with send_max\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], fee_rate=300, options={\"send_max\": True})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        self.assert_tx_has_outputs(tx_from_wallet, [{\"address\": self.remainder_target, \"value\": 1 + tx_from_wallet[\"fee\"]}])\n+        assert_equal(self.wallet.getbalances()[\"mine\"][\"trusted\"], Decimal(\"0.00000700\"))\n+\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+\n+    @cleanup\n+    def sendall_specific_inputs(self):\n+        self.log.info(\"Test sendall with a subset of UTXO pool\")\n+        self.add_uxtos([17, 4])\n+        utxo = self.wallet.listunspent()[0]\n+\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], options={\"inputs\": [utxo]})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"txid\"], utxo[\"txid\"])\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"vout\"], utxo[\"vout\"])\n+        self.assert_tx_has_output(tx_from_wallet, self.remainder_target)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        # Clean up remaining UTXO\n+        self.wallet.sendall(receivers=[self.remainder_target])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty",
      "path": "test/functional/wallet_sendall.py",
      "position": null,
      "original_position": 220,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "in_reply_to_id": 809490334,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed. I removed the duplicate cleanup. Thanks.",
      "created_at": "2022-02-17T22:55:09Z",
      "updated_at": "2022-02-17T22:55:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809535455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809535455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 217,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809797621",
      "pull_request_review_id": 886995922,
      "id": 809797621,
      "node_id": "PRRC_kwDOABII584wRIf1",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+New RPCs\n+--------\n+\n+- The `sendall` RPC spends given UTXOs to one or more receivers\n+  without creating change. By default, the `sendall` RPC will send\n+  everything in the wallet leaving no UTXOs behind. `sendall` is\n+  useful to empty wallets or to create a changeless payment from select\n+  UTXOs. Continue to use the \"subtract fee from output\" option to create\n+  transactions delimited via a budget (in contrast to a concrete set of",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 9,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can clean up the docs later, but I assume \"delimited via a budget\" refers to a scenario where a service pays a users an amount X and the user can decide what fee to pay?\r\n\r\nMaybe say:\r\n> Continue to use the \"subtract fee from output\" option in `send`, `sendtoaddress` or `sendmany` if the intention is to allocate a specific amount to a  recipient for which they incur the fee.",
      "created_at": "2022-02-18T09:01:35Z",
      "updated_at": "2022-02-18T10:13:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809797621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809797621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809802799",
      "pull_request_review_id": 886995922,
      "id": 809802799,
      "node_id": "PRRC_kwDOABII584wRJwv",
      "diff_hunk": "@@ -142,6 +142,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"send\", 1, \"conf_target\" },\n     { \"send\", 3, \"fee_rate\"},\n     { \"send\", 4, \"options\" },\n+    { \"sendall\", 0, \"receivers\" },",
      "path": "src/rpc/client.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We use \"recipient(s)\" in most places (though receiver too). Both are valid, but \"recipient\" seems better:\r\nhttps://www.quora.com/What-is-the-difference-between-a-receiver-and-a-recipient",
      "created_at": "2022-02-18T09:08:32Z",
      "updated_at": "2022-02-18T10:13:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809802799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809802799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809832478",
      "pull_request_review_id": 886995922,
      "id": 809832478,
      "node_id": "PRRC_kwDOABII584wRRAe",
      "diff_hunk": "@@ -51,6 +51,28 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "c4d6cf5facf08cf4b1fba512ec30800f650a9c0b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c4d6cf5facf08cf4b1fba512ec30800f650a9c0b: maybe drop `positional_`",
      "created_at": "2022-02-18T09:43:52Z",
      "updated_at": "2022-02-18T10:13:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809832478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809832478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809858573",
      "pull_request_review_id": 886995922,
      "id": 809858573,
      "node_id": "PRRC_kwDOABII584wRXYN",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+        return self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+    # Helper schema for success cases\n+    def test_sendall_success(self, sendall_args, remaining_balance = 0):\n+        sendall_tx_receipt = self.wallet.sendall(sendall_args)\n+        self.generate(self.nodes[0], 1)\n+        # wallet has remaining balance (usually empty)\n+        assert_equal(remaining_balance, self.wallet.getbalances()[\"mine\"][\"trusted\"])\n+\n+        assert_equal(sendall_tx_receipt[\"complete\"], True)\n+        return self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+    @cleanup\n+    def gen_and_clean(self):\n+        self.add_uxtos([15, 2, 4])\n+\n+    def test_cleanup(self):\n+        self.log.info(\"Test that cleanup wrapper empties wallet\")\n+        self.gen_and_clean()\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    # Actual tests\n+    @cleanup\n+    def sendall_two_utxos(self):\n+        self.log.info(\"Testing basic sendall case without specific amounts\")\n+        pre_sendall_balance = self.add_uxtos([10,11])\n+        tx_from_wallet = self.test_sendall_success(sendall_args = [self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx = tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance + tx_from_wallet[\"fee\"] } # fee is neg\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_split(self):\n+        self.log.info(\"Testing sendall where two recipients have unspecified amount\")\n+        pre_sendall_balance = self.add_uxtos([1, 2, 3, 15])\n+        tx_from_wallet = self.test_sendall_success([self.remainder_target, self.split_target])\n+\n+        half = (pre_sendall_balance + tx_from_wallet[\"fee\"]) / 2\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.split_target, \"value\": half },\n+                { \"address\": self.remainder_target, \"value\": half }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_and_spend(self):\n+        self.log.info(\"Testing sendall in combination with paying specified amount to recipient\")\n+        pre_sendall_balance = self.add_uxtos([8, 13])\n+        tx_from_wallet = self.test_sendall_success([{self.recipient: 5}, self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.recipient, \"value\": 5 },\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance - 5 + tx_from_wallet[\"fee\"] }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_invalid_receiver_addresses(self):\n+        self.log.info(\"Test having only receiver with specified amount, missing receiver with unspecified amount\")\n+        self.add_uxtos([12, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Must provide at least one address without a specified amount\" ,\n+                self.wallet.sendall,\n+                [{self.recipient: 5}]\n+            )\n+\n+    @cleanup\n+    def sendall_duplicate_receiver(self):\n+        self.log.info(\"Test duplicate destination\")\n+        self.add_uxtos([1, 8, 3, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Invalid parameter, duplicated address: {}\".format(self.remainder_target),\n+                self.wallet.sendall,\n+                [self.remainder_target, self.remainder_target]\n+            )\n+\n+    @cleanup\n+    def sendall_invalid_amounts(self):\n+        self.log.info(\"Test sending more than balance\")\n+        pre_sendall_balance = self.add_uxtos([7, 14])\n+\n+        expected_tx = self.wallet.sendall(receivers=[{self.recipient: 5}, self.remainder_target], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance + 1}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance}, self.remainder_target])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.recipient),\n+                self.wallet.sendall, [{self.recipient: 0.00000001}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee - Decimal(0.00000010)}, self.remainder_target])\n+\n+    # @cleanup not needed because different wallet used\n+    def sendall_negative_effective_value(self):\n+        self.log.info(\"Test that sendall fails if all UTXOs have negative effective value\")\n+        # Use dedicated wallet for dust amounts and unload wallet at end\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for transaction.\"\n+                + \" Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\",\n+                dust_wallet.sendall, receivers=[self.remainder_target], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    @cleanup\n+    def sendall_with_send_max(self):\n+        self.log.info(\"Check that `send_max` option causes negative value UTXOs to be left behind\")\n+        self.add_uxtos([0.00000400, 0.00000300, 1])\n+\n+        # sendall with send_max\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], fee_rate=300, options={\"send_max\": True})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        self.assert_tx_has_outputs(tx_from_wallet, [{\"address\": self.remainder_target, \"value\": 1 + tx_from_wallet[\"fee\"]}])\n+        assert_equal(self.wallet.getbalances()[\"mine\"][\"trusted\"], Decimal(\"0.00000700\"))\n+\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+\n+    @cleanup\n+    def sendall_specific_inputs(self):\n+        self.log.info(\"Test sendall with a subset of UTXO pool\")\n+        self.add_uxtos([17, 4])\n+        utxo = self.wallet.listunspent()[0]\n+\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], options={\"inputs\": [utxo]})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"txid\"], utxo[\"txid\"])\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"vout\"], utxo[\"vout\"])\n+        self.assert_tx_has_output(tx_from_wallet, self.remainder_target)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    @cleanup\n+    def sendall_fails_on_missing_input(self):\n+        # fails because UTXO was previously spent, and wallet is empty\n+        self.log.info(\"Test sendall fails because specified UTXO is not available\")\n+        self.add_uxtos([16, 5])\n+        spent_utxo = self.wallet.listunspent()[0]\n+\n+        # fails on unconfirmed spent UTXO\n+        self.wallet.sendall(receivers=[self.remainder_target])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails on specific previously spent UTXO, while other UTXOs exist\n+        self.generate(self.nodes[0], 1)\n+        self.add_uxtos([19, 2])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails because UTXO is unknown, while other UTXOs exist\n+        foreign_utxo = self.def_wallet.listunspent()[0]\n+        assert_raises_rpc_error(-8, \"Input not found. UTXO ({}:{}) is not part of wallet.\".format(foreign_utxo[\"txid\"],\n+            foreign_utxo[\"vout\"]), self.wallet.sendall, receivers=[self.remainder_target],\n+            options={\"inputs\": [foreign_utxo]})",
      "path": "test/functional/wallet_sendall.py",
      "position": 241,
      "original_position": 241,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Some of the times when I run the test it raises \"Total value of UTXO pool too low to pay for transaction.\" and then during the handling it said \"No exception raised\" for this line.",
      "created_at": "2022-02-18T10:10:54Z",
      "updated_at": "2022-02-18T10:13:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809858573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809858573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810114163",
      "pull_request_review_id": 887441730,
      "id": 810114163,
      "node_id": "PRRC_kwDOABII584wSVxz",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "General organization question: Did you consider putting some of this in a `CWallet` member function? A lot of it, like grabbing available coins and checking the effective values, locking unspents, etc. seem to be things that the wallet should take care of internally, rather than in the rpc handler code.",
      "created_at": "2022-02-18T15:40:08Z",
      "updated_at": "2022-02-18T15:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r810114163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810114163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810125831",
      "pull_request_review_id": 887441730,
      "id": 810125831,
      "node_id": "PRRC_kwDOABII584wSYoH",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 410,
      "original_position": 236,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Given that `AvailableCoins` filters much more than based on effective value, I'm wondering what the expected behavior *should* be for these types of UTXOs:\r\n\r\n- UTXOs that are not yet final or are immature coinbases \r\n- UTXOs for which the address has been marked as already used\r\n- outputs from replacement transactions\r\netc.\r\n\r\nMaybe it's fine that these are excluded, but just want to clarify that this behavior is what we want. Also leads me to wonder if the RPC should be returning a list of UTXOs that weren't included in the constructed transaction or something, but maybe that's overkill.",
      "created_at": "2022-02-18T15:53:32Z",
      "updated_at": "2022-02-18T15:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r810125831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810125831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1402,
      "original_line": 1402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810204468",
      "pull_request_review_id": 887570234,
      "id": 810204468,
      "node_id": "PRRC_kwDOABII584wSr00",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810114163,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That seems like a good idea, but maybe too big a refactor for this PR?",
      "created_at": "2022-02-18T17:28:39Z",
      "updated_at": "2022-02-18T17:28:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r810204468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810204468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810629932",
      "pull_request_review_id": 888039586,
      "id": 810629932,
      "node_id": "PRRC_kwDOABII584wUTss",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+New RPCs\n+--------\n+\n+- The `sendall` RPC spends given UTXOs to one or more receivers\n+  without creating change. By default, the `sendall` RPC will send\n+  everything in the wallet leaving no UTXOs behind. `sendall` is",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 6,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: slightly more concise\r\n```suggestion\r\n  without creating change. By default, the `sendall` RPC will spend\r\n  every UTXO in the wallet. `sendall` is\r\n```",
      "created_at": "2022-02-20T13:56:28Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r810629932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810629932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810631375",
      "pull_request_review_id": 888039586,
      "id": 810631375,
      "node_id": "PRRC_kwDOABII584wUUDP",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+New RPCs\n+--------\n+\n+- The `sendall` RPC spends given UTXOs to one or more receivers\n+  without creating change. By default, the `sendall` RPC will send\n+  everything in the wallet leaving no UTXOs behind. `sendall` is\n+  useful to empty wallets or to create a changeless payment from select\n+  UTXOs. Continue to use the \"subtract fee from output\" option to create\n+  transactions delimited via a budget (in contrast to a concrete set of",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 9,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809797621,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with Sjors' rephrasing - currently one could understand this to mean using SFFO with the `sendall` RPC. Slight iterative alteration which includes using the actual option name:\r\n\r\n> If the intention is to allocate a specific amount to a recipient for which the recipient incurs the fee, continue to use the `send`, `sendtoaddress` or `sendmany` methods with `subtractfeefromamount` option.",
      "created_at": "2022-02-20T14:07:04Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r810631375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810631375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811673390",
      "pull_request_review_id": 889418499,
      "id": 811673390,
      "node_id": "PRRC_kwDOABII584wYScu",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810114163,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is all newly added code?",
      "created_at": "2022-02-22T08:11:33Z",
      "updated_at": "2022-02-22T08:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r811673390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811673390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811711157",
      "pull_request_review_id": 889470044,
      "id": 811711157,
      "node_id": "PRRC_kwDOABII584wYbq1",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810114163,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops yes, this is not part of the refactoring commits.",
      "created_at": "2022-02-22T08:56:48Z",
      "updated_at": "2022-02-22T08:56:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r811711157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811711157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815754993",
      "pull_request_review_id": 888039586,
      "id": 815754993,
      "node_id": "PRRC_kwDOABII584wn27x",
      "diff_hunk": "@@ -50,6 +53,93 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)\n+{\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options)\n+{\n+    if (options.exists(\"feeRate\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n+    }\n+    if (options.exists(\"changeAddress\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+    }\n+    if (options.exists(\"changePosition\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+    }\n+    if (options.exists(\"includeWatching\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+    }\n+    if (options.exists(\"lockUnspents\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+    }\n+    if (options.exists(\"subtractFeeFromOutputs\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+    }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nyfnit _(not-your-fault nit)_: would now be a good time to align the error messages and either have them all (preferred imo) or none report on the \"instead of\" like is done for `feeRate`/`fee_rate`? Might make more sense in a separate commit to not break the `--color-moved` heuristics.",
      "created_at": "2022-02-28T10:23:16Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815754993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815754993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815762890",
      "pull_request_review_id": 888039586,
      "id": 815762890,
      "node_id": "PRRC_kwDOABII584wn43K",
      "diff_hunk": "@@ -51,6 +51,28 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "c4d6cf5facf08cf4b1fba512ec30800f650a9c0b",
      "in_reply_to_id": 809832478,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with Sjors, it would also make the hints on the call site align with the (shorter) parameter name.",
      "created_at": "2022-02-28T10:33:28Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815762890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815762890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815767586",
      "pull_request_review_id": 888039586,
      "id": 815767586,
      "node_id": "PRRC_kwDOABII584wn6Ai",
      "diff_hunk": "@@ -51,6 +51,28 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "c4d6cf5facf08cf4b1fba512ec30800f650a9c0b",
      "in_reply_to_id": 809832478,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Additional nit: I'm not sure `Parse` best captures the function behaviour. Since the function has side effects and I don't really see any parsing, I think a function name like `UpdateFeeEstimationInstructions` would better reflect that?",
      "created_at": "2022-02-28T10:39:42Z",
      "updated_at": "2022-02-28T12:23:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815767586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815767586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815803682",
      "pull_request_review_id": 888039586,
      "id": 815803682,
      "node_id": "PRRC_kwDOABII584woC0i",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 232,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            bool rbf { options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf };\r\n```\r\n",
      "created_at": "2022-02-28T11:30:25Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815803682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815803682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815804228",
      "pull_request_review_id": 888039586,
      "id": 815804228,
      "node_id": "PRRC_kwDOABII584woC9E",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 338,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            const UniValue& receivers { request.params[0] };\r\n```",
      "created_at": "2022-02-28T11:31:14Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815804228",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815804228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815804937",
      "pull_request_review_id": 888039586,
      "id": 815804937,
      "node_id": "PRRC_kwDOABII584woDIJ",
      "diff_hunk": "@@ -50,6 +53,93 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)\n+{\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n        std::string hex { EncodeHexTx(CTransaction(mtx)) };\r\n```",
      "created_at": "2022-02-28T11:32:06Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815804937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815804937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815805628",
      "pull_request_review_id": 888039586,
      "id": 815805628,
      "node_id": "PRRC_kwDOABII584woDS8",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 328,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            std::shared_ptr<CWallet> const pwallet { GetWalletForJSONRPCRequest(request) };\r\n```",
      "created_at": "2022-02-28T11:32:53Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815805628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815805628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806023",
      "pull_request_review_id": 888039586,
      "id": 815806023,
      "node_id": "PRRC_kwDOABII584woDZH",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 340,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n                const UniValue& receiver { receivers[i] };\r\n```",
      "created_at": "2022-02-28T11:33:17Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815806023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806298",
      "pull_request_review_id": 888039586,
      "id": 815806298,
      "node_id": "PRRC_kwDOABII584woDda",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 373,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            CFeeRate fee_rate { GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out) };\r\n```",
      "created_at": "2022-02-28T11:33:36Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815806298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806599",
      "pull_request_review_id": 888039586,
      "id": 815806599,
      "node_id": "PRRC_kwDOABII584woDiH",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 386,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            CMutableTransaction rawTx { ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf) };\r\n```",
      "created_at": "2022-02-28T11:33:54Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815806599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806892",
      "pull_request_review_id": 888039586,
      "id": 815806892,
      "node_id": "PRRC_kwDOABII584woDms",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 399,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use list initialization?\r\n```suggestion\r\n                    const CWalletTx* tx { pwallet->GetWalletTx(input.prevout.hash) };\r\n```",
      "created_at": "2022-02-28T11:34:12Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815806892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815806892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815813825",
      "pull_request_review_id": 888039586,
      "id": 815813825,
      "node_id": "PRRC_kwDOABII584woFTB",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 422,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            TxSize tx_size { CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get()) };\r\n            CAmount fee_from_size { fee_rate.GetFee(tx_size.vsize) };\r\n            CAmount effective_value { total_input_value - fee_from_size };\r\n```",
      "created_at": "2022-02-28T11:41:24Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815813825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815813825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1344,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815814412",
      "pull_request_review_id": 888039586,
      "id": 815814412,
      "node_id": "PRRC_kwDOABII584woFcM",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            const CAmount per_output_without_amount { remainder / addresses_without_amount.size() };\r\n```",
      "created_at": "2022-02-28T11:42:00Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815814412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815814412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815814668",
      "pull_request_review_id": 888039586,
      "id": 815814668,
      "node_id": "PRRC_kwDOABII584woFgM",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n            bool gave_remaining_to_first { false };\r\n```",
      "created_at": "2022-02-28T11:42:17Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815814668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815814668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815816959",
      "pull_request_review_id": 888039586,
      "id": 815816959,
      "node_id": "PRRC_kwDOABII584woGD_",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 464,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe use brace initialization?\r\n```suggestion\r\n                std::string addr { EncodeDestination(dest) };\r\n```",
      "created_at": "2022-02-28T11:45:30Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815816959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815816959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815822579",
      "pull_request_review_id": 888039586,
      "id": 815822579,
      "node_id": "PRRC_kwDOABII584woHbz",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 253,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wording nit/suggestion:\r\n```suggestion\r\n        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. sendall respects the avoid_reuse wallet flag.\\n\",\r\n```",
      "created_at": "2022-02-28T11:53:52Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815822579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815822579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815826629",
      "pull_request_review_id": 888039586,
      "id": 815826629,
      "node_id": "PRRC_kwDOABII584woIbF",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consistency nit\r\n```suggestion\r\n                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\r\n```",
      "created_at": "2022-02-28T12:00:06Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815826629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815826629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815827002",
      "pull_request_review_id": 888039586,
      "id": 815827002,
      "node_id": "PRRC_kwDOABII584woIg6",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wording nit/suggestion:\r\n```suggestion\r\n                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\r\n```\r\n",
      "created_at": "2022-02-28T12:00:42Z",
      "updated_at": "2022-02-28T12:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r815827002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815827002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125413",
      "pull_request_review_id": 905034518,
      "id": 823125413,
      "node_id": "PRRC_kwDOABII584xD-Wl",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+New RPCs\n+--------\n+\n+- The `sendall` RPC spends given UTXOs to one or more receivers\n+  without creating change. By default, the `sendall` RPC will send\n+  everything in the wallet leaving no UTXOs behind. `sendall` is\n+  useful to empty wallets or to create a changeless payment from select\n+  UTXOs. Continue to use the \"subtract fee from output\" option to create\n+  transactions delimited via a budget (in contrast to a concrete set of",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 9,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809797621,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the suggestions. I'm changing the sentence to:\r\n\r\n> When creating a payment from a specific amount for which the recipient incurs the transaction fee, continue to use the   `subtractfeefromamount` option via the `send`, `sendtoaddress`, or `sendmany` RPCs.",
      "created_at": "2022-03-09T21:57:02Z",
      "updated_at": "2022-03-09T21:57:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r823125413",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125506",
      "pull_request_review_id": 905034634,
      "id": 823125506,
      "node_id": "PRRC_kwDOABII584xD-YC",
      "diff_hunk": "@@ -142,6 +142,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"send\", 1, \"conf_target\" },\n     { \"send\", 3, \"fee_rate\"},\n     { \"send\", 4, \"options\" },\n+    { \"sendall\", 0, \"receivers\" },",
      "path": "src/rpc/client.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809802799,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changing receiver to recipient everywhere.",
      "created_at": "2022-03-09T21:57:09Z",
      "updated_at": "2022-03-09T21:57:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r823125506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125611",
      "pull_request_review_id": 905034772,
      "id": 823125611,
      "node_id": "PRRC_kwDOABII584xD-Zr",
      "diff_hunk": "@@ -51,6 +51,28 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "c4d6cf5facf08cf4b1fba512ec30800f650a9c0b",
      "in_reply_to_id": 809832478,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropping the `positional_` and renaming function to `InterpretFeeEstimationInstructions`",
      "created_at": "2022-03-09T21:57:19Z",
      "updated_at": "2022-03-09T21:57:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r823125611",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125712",
      "pull_request_review_id": 905034919,
      "id": 823125712,
      "node_id": "PRRC_kwDOABII584xD-bQ",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+        return self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+    # Helper schema for success cases\n+    def test_sendall_success(self, sendall_args, remaining_balance = 0):\n+        sendall_tx_receipt = self.wallet.sendall(sendall_args)\n+        self.generate(self.nodes[0], 1)\n+        # wallet has remaining balance (usually empty)\n+        assert_equal(remaining_balance, self.wallet.getbalances()[\"mine\"][\"trusted\"])\n+\n+        assert_equal(sendall_tx_receipt[\"complete\"], True)\n+        return self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+    @cleanup\n+    def gen_and_clean(self):\n+        self.add_uxtos([15, 2, 4])\n+\n+    def test_cleanup(self):\n+        self.log.info(\"Test that cleanup wrapper empties wallet\")\n+        self.gen_and_clean()\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    # Actual tests\n+    @cleanup\n+    def sendall_two_utxos(self):\n+        self.log.info(\"Testing basic sendall case without specific amounts\")\n+        pre_sendall_balance = self.add_uxtos([10,11])\n+        tx_from_wallet = self.test_sendall_success(sendall_args = [self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx = tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance + tx_from_wallet[\"fee\"] } # fee is neg\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_split(self):\n+        self.log.info(\"Testing sendall where two recipients have unspecified amount\")\n+        pre_sendall_balance = self.add_uxtos([1, 2, 3, 15])\n+        tx_from_wallet = self.test_sendall_success([self.remainder_target, self.split_target])\n+\n+        half = (pre_sendall_balance + tx_from_wallet[\"fee\"]) / 2\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.split_target, \"value\": half },\n+                { \"address\": self.remainder_target, \"value\": half }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_and_spend(self):\n+        self.log.info(\"Testing sendall in combination with paying specified amount to recipient\")\n+        pre_sendall_balance = self.add_uxtos([8, 13])\n+        tx_from_wallet = self.test_sendall_success([{self.recipient: 5}, self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.recipient, \"value\": 5 },\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance - 5 + tx_from_wallet[\"fee\"] }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_invalid_receiver_addresses(self):\n+        self.log.info(\"Test having only receiver with specified amount, missing receiver with unspecified amount\")\n+        self.add_uxtos([12, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Must provide at least one address without a specified amount\" ,\n+                self.wallet.sendall,\n+                [{self.recipient: 5}]\n+            )\n+\n+    @cleanup\n+    def sendall_duplicate_receiver(self):\n+        self.log.info(\"Test duplicate destination\")\n+        self.add_uxtos([1, 8, 3, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Invalid parameter, duplicated address: {}\".format(self.remainder_target),\n+                self.wallet.sendall,\n+                [self.remainder_target, self.remainder_target]\n+            )\n+\n+    @cleanup\n+    def sendall_invalid_amounts(self):\n+        self.log.info(\"Test sending more than balance\")\n+        pre_sendall_balance = self.add_uxtos([7, 14])\n+\n+        expected_tx = self.wallet.sendall(receivers=[{self.recipient: 5}, self.remainder_target], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance + 1}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance}, self.remainder_target])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.recipient),\n+                self.wallet.sendall, [{self.recipient: 0.00000001}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee - Decimal(0.00000010)}, self.remainder_target])\n+\n+    # @cleanup not needed because different wallet used\n+    def sendall_negative_effective_value(self):\n+        self.log.info(\"Test that sendall fails if all UTXOs have negative effective value\")\n+        # Use dedicated wallet for dust amounts and unload wallet at end\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for transaction.\"\n+                + \" Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\",\n+                dust_wallet.sendall, receivers=[self.remainder_target], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    @cleanup\n+    def sendall_with_send_max(self):\n+        self.log.info(\"Check that `send_max` option causes negative value UTXOs to be left behind\")\n+        self.add_uxtos([0.00000400, 0.00000300, 1])\n+\n+        # sendall with send_max\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], fee_rate=300, options={\"send_max\": True})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        self.assert_tx_has_outputs(tx_from_wallet, [{\"address\": self.remainder_target, \"value\": 1 + tx_from_wallet[\"fee\"]}])\n+        assert_equal(self.wallet.getbalances()[\"mine\"][\"trusted\"], Decimal(\"0.00000700\"))\n+\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+\n+    @cleanup\n+    def sendall_specific_inputs(self):\n+        self.log.info(\"Test sendall with a subset of UTXO pool\")\n+        self.add_uxtos([17, 4])\n+        utxo = self.wallet.listunspent()[0]\n+\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], options={\"inputs\": [utxo]})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"txid\"], utxo[\"txid\"])\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"vout\"], utxo[\"vout\"])\n+        self.assert_tx_has_output(tx_from_wallet, self.remainder_target)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    @cleanup\n+    def sendall_fails_on_missing_input(self):\n+        # fails because UTXO was previously spent, and wallet is empty\n+        self.log.info(\"Test sendall fails because specified UTXO is not available\")\n+        self.add_uxtos([16, 5])\n+        spent_utxo = self.wallet.listunspent()[0]\n+\n+        # fails on unconfirmed spent UTXO\n+        self.wallet.sendall(receivers=[self.remainder_target])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails on specific previously spent UTXO, while other UTXOs exist\n+        self.generate(self.nodes[0], 1)\n+        self.add_uxtos([19, 2])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails because UTXO is unknown, while other UTXOs exist\n+        foreign_utxo = self.def_wallet.listunspent()[0]\n+        assert_raises_rpc_error(-8, \"Input not found. UTXO ({}:{}) is not part of wallet.\".format(foreign_utxo[\"txid\"],\n+            foreign_utxo[\"vout\"]), self.wallet.sendall, receivers=[self.remainder_target],\n+            options={\"inputs\": [foreign_utxo]})",
      "path": "test/functional/wallet_sendall.py",
      "position": 241,
      "original_position": 241,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809858573,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have been able to reproduce this, but I haven't figured out what the issue is, yet.",
      "created_at": "2022-03-09T21:57:30Z",
      "updated_at": "2022-03-09T21:57:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r823125712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823125712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824911936",
      "pull_request_review_id": 907499206,
      "id": 824911936,
      "node_id": "PRRC_kwDOABII584xKyhA",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 410,
      "original_position": 236,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810125831,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This RPC will only operate on confirmed spendable UTXOs. It also respects the wallet-wide `avoid_reuse` configuration.\r\n\r\n> * UTXOs that are not yet final or are immature coinbases\r\n\r\nI would expect them to get ignored since they're not spendable at this time.\r\n\r\n> * UTXOs for which the address has been marked as already used\r\n\r\nIf address reuse has been disabled, it should ignore funds on previously used addresses, if it only permits spending all of the funds on one address at once, it should either use all or none, and if it's not restricted, it should just spend either all or the economically viable UTXOs as determined by the options on this RPC.\r\n\r\n> * outputs from replacement transactions\r\n\r\nWe don't spend unconfirmed UTXOs in this call.",
      "created_at": "2022-03-11T17:09:45Z",
      "updated_at": "2022-03-11T17:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824911936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824911936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1402,
      "original_line": 1402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824912019",
      "pull_request_review_id": 907499316,
      "id": 824912019,
      "node_id": "PRRC_kwDOABII584xKyiT",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+New RPCs\n+--------\n+\n+- The `sendall` RPC spends given UTXOs to one or more receivers\n+  without creating change. By default, the `sendall` RPC will send\n+  everything in the wallet leaving no UTXOs behind. `sendall` is",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 6,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810629932,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adopted your suggestion.",
      "created_at": "2022-03-11T17:09:51Z",
      "updated_at": "2022-03-11T17:09:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824912019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824912019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824912927",
      "pull_request_review_id": 907500533,
      "id": 824912927,
      "node_id": "PRRC_kwDOABII584xKywf",
      "diff_hunk": "@@ -50,6 +53,93 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)\n+{\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options)\n+{\n+    if (options.exists(\"feeRate\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n+    }\n+    if (options.exists(\"changeAddress\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+    }\n+    if (options.exists(\"changePosition\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+    }\n+    if (options.exists(\"includeWatching\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+    }\n+    if (options.exists(\"lockUnspents\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+    }\n+    if (options.exists(\"subtractFeeFromOutputs\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+    }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815754993,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I will look into this",
      "created_at": "2022-03-11T17:11:00Z",
      "updated_at": "2022-03-11T17:11:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824912927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824912927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913029",
      "pull_request_review_id": 907500689,
      "id": 824913029,
      "node_id": "PRRC_kwDOABII584xKyyF",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 232,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815803682,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:10Z",
      "updated_at": "2022-03-11T17:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913135",
      "pull_request_review_id": 907500845,
      "id": 824913135,
      "node_id": "PRRC_kwDOABII584xKyzv",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 338,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815804228,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:19Z",
      "updated_at": "2022-03-11T17:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913172",
      "pull_request_review_id": 907500919,
      "id": 824913172,
      "node_id": "PRRC_kwDOABII584xKy0U",
      "diff_hunk": "@@ -50,6 +53,93 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)\n+{\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815804937,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:22Z",
      "updated_at": "2022-03-11T17:11:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913209",
      "pull_request_review_id": 907500974,
      "id": 824913209,
      "node_id": "PRRC_kwDOABII584xKy05",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 328,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815805628,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:26Z",
      "updated_at": "2022-03-11T17:11:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913285",
      "pull_request_review_id": 907501076,
      "id": 824913285,
      "node_id": "PRRC_kwDOABII584xKy2F",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 373,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815806298,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:32Z",
      "updated_at": "2022-03-11T17:11:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913328",
      "pull_request_review_id": 907501139,
      "id": 824913328,
      "node_id": "PRRC_kwDOABII584xKy2w",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 386,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815806599,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:35Z",
      "updated_at": "2022-03-11T17:11:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913358",
      "pull_request_review_id": 907501186,
      "id": 824913358,
      "node_id": "PRRC_kwDOABII584xKy3O",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 399,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815806892,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:39Z",
      "updated_at": "2022-03-11T17:11:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913436",
      "pull_request_review_id": 907501289,
      "id": 824913436,
      "node_id": "PRRC_kwDOABII584xKy4c",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 422,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815813825,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:43Z",
      "updated_at": "2022-03-11T17:11:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1344,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913507",
      "pull_request_review_id": 907501376,
      "id": 824913507,
      "node_id": "PRRC_kwDOABII584xKy5j",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815814412,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:48Z",
      "updated_at": "2022-03-11T17:11:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913576",
      "pull_request_review_id": 907501477,
      "id": 824913576,
      "node_id": "PRRC_kwDOABII584xKy6o",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 464,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815816959,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:11:53Z",
      "updated_at": "2022-03-11T17:11:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913624",
      "pull_request_review_id": 907501559,
      "id": 824913624,
      "node_id": "PRRC_kwDOABII584xKy7Y",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 253,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815822579,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Amended",
      "created_at": "2022-03-11T17:11:57Z",
      "updated_at": "2022-03-11T17:11:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913624",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913716",
      "pull_request_review_id": 907501694,
      "id": 824913716,
      "node_id": "PRRC_kwDOABII584xKy80",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815826629,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks",
      "created_at": "2022-03-11T17:12:04Z",
      "updated_at": "2022-03-11T17:12:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913772",
      "pull_request_review_id": 907501765,
      "id": 824913772,
      "node_id": "PRRC_kwDOABII584xKy9s",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815827002,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's better, thanks",
      "created_at": "2022-03-11T17:12:08Z",
      "updated_at": "2022-03-11T17:12:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824913772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824913772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824914562",
      "pull_request_review_id": 907502989,
      "id": 824914562,
      "node_id": "PRRC_kwDOABII584xKzKC",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810114163,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That sounds like a good idea. Especially getting subsets of a wallet's UTXO pool does seem like a good candidate. I'll consult with my wallet expert on this matter.",
      "created_at": "2022-03-11T17:13:16Z",
      "updated_at": "2022-03-11T17:13:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824914562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824914562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824914745",
      "pull_request_review_id": 907503266,
      "id": 824914745,
      "node_id": "PRRC_kwDOABII584xKzM5",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 340,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815806023,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:13:31Z",
      "updated_at": "2022-03-11T17:13:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824914745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824914745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824914817",
      "pull_request_review_id": 907503354,
      "id": 824914817,
      "node_id": "PRRC_kwDOABII584xKzOB",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815814668,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-03-11T17:13:36Z",
      "updated_at": "2022-03-11T17:13:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824914817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824914817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824944505",
      "pull_request_review_id": 907544932,
      "id": 824944505,
      "node_id": "PRRC_kwDOABII584xK6d5",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815814412,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This one actually doesn't like being a brace initialization:\r\n\r\n```\r\nwallet/rpc/spend.cpp: In lambda function:\r\nwallet/rpc/spend.cpp:1371:63: warning: narrowing conversion of ‘(((long unsigned int)((long int)remainder)) / addresses_without_amount.std::set<std::__cxx11::basic_string<char> >::size())’ from ‘long unsigned int’ to ‘CAmount’ {aka ‘long int’} inside { } [-Wnarrowing]\r\n             const CAmount per_output_without_amount{remainder / addresses_without_amount.size()};\r\n                                                     ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```",
      "created_at": "2022-03-11T17:53:22Z",
      "updated_at": "2022-03-11T17:53:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r824944505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/824944505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825010506",
      "pull_request_review_id": 907639675,
      "id": 825010506,
      "node_id": "PRRC_kwDOABII584xLKlK",
      "diff_hunk": "@@ -1060,101 +1162,244 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815814412,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed by casting the size to `(long)` explicitly.",
      "created_at": "2022-03-11T19:27:53Z",
      "updated_at": "2022-03-11T19:27:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r825010506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825010506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825825139",
      "pull_request_review_id": 908614636,
      "id": 825825139,
      "node_id": "PRRC_kwDOABII584xORdz",
      "diff_hunk": "@@ -192,6 +192,12 @@ def test_valid_signer(self):\n         assert(res[\"complete\"])\n         assert_equal(res[\"hex\"], mock_tx)\n \n+        self.log.info('Test sendall using hww1')\n+\n+        res = hww.sendall(receivers=[{dest:0.5}, hww.getrawchangeaddress()],options={\"add_to_wallet\": False})",
      "path": "test/functional/wallet_signer.py",
      "position": null,
      "original_position": 6,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 5c0a1b330294d40112af79af19414b913d0dce8c \"Add sendall RPC née sweep\"\r\n\r\n```suggestion\r\n        res = hww.sendall(recipients=[{dest:0.5}, hww.getrawchangeaddress()],options={\"add_to_wallet\": False})\r\n```",
      "created_at": "2022-03-14T11:01:19Z",
      "updated_at": "2022-03-14T11:01:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r825825139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825825139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825843949",
      "pull_request_review_id": 908640286,
      "id": 825843949,
      "node_id": "PRRC_kwDOABII584xOWDt",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):",
      "path": "test/functional/wallet_sendall.py",
      "position": null,
      "original_position": 53,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 5c0a1b330294d40112af79af19414b913d0dce8c \"Add sendall RPC née sweep\"\r\n\r\n```suggestion\r\n    def add_utxos(self, amounts):\r\n```",
      "created_at": "2022-03-14T11:24:43Z",
      "updated_at": "2022-03-14T11:24:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r825843949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825843949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825859044",
      "pull_request_review_id": 908660947,
      "id": 825859044,
      "node_id": "PRRC_kwDOABII584xOZvk",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+        return self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+    # Helper schema for success cases\n+    def test_sendall_success(self, sendall_args, remaining_balance = 0):\n+        sendall_tx_receipt = self.wallet.sendall(sendall_args)\n+        self.generate(self.nodes[0], 1)\n+        # wallet has remaining balance (usually empty)\n+        assert_equal(remaining_balance, self.wallet.getbalances()[\"mine\"][\"trusted\"])\n+\n+        assert_equal(sendall_tx_receipt[\"complete\"], True)\n+        return self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+    @cleanup\n+    def gen_and_clean(self):\n+        self.add_uxtos([15, 2, 4])\n+\n+    def test_cleanup(self):\n+        self.log.info(\"Test that cleanup wrapper empties wallet\")\n+        self.gen_and_clean()\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    # Actual tests\n+    @cleanup\n+    def sendall_two_utxos(self):\n+        self.log.info(\"Testing basic sendall case without specific amounts\")\n+        pre_sendall_balance = self.add_uxtos([10,11])\n+        tx_from_wallet = self.test_sendall_success(sendall_args = [self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx = tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance + tx_from_wallet[\"fee\"] } # fee is neg\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_split(self):\n+        self.log.info(\"Testing sendall where two recipients have unspecified amount\")\n+        pre_sendall_balance = self.add_uxtos([1, 2, 3, 15])\n+        tx_from_wallet = self.test_sendall_success([self.remainder_target, self.split_target])\n+\n+        half = (pre_sendall_balance + tx_from_wallet[\"fee\"]) / 2\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.split_target, \"value\": half },\n+                { \"address\": self.remainder_target, \"value\": half }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_and_spend(self):\n+        self.log.info(\"Testing sendall in combination with paying specified amount to recipient\")\n+        pre_sendall_balance = self.add_uxtos([8, 13])\n+        tx_from_wallet = self.test_sendall_success([{self.recipient: 5}, self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.recipient, \"value\": 5 },\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance - 5 + tx_from_wallet[\"fee\"] }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_invalid_receiver_addresses(self):\n+        self.log.info(\"Test having only receiver with specified amount, missing receiver with unspecified amount\")\n+        self.add_uxtos([12, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Must provide at least one address without a specified amount\" ,\n+                self.wallet.sendall,\n+                [{self.recipient: 5}]\n+            )\n+\n+    @cleanup\n+    def sendall_duplicate_receiver(self):\n+        self.log.info(\"Test duplicate destination\")\n+        self.add_uxtos([1, 8, 3, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Invalid parameter, duplicated address: {}\".format(self.remainder_target),\n+                self.wallet.sendall,\n+                [self.remainder_target, self.remainder_target]\n+            )\n+\n+    @cleanup\n+    def sendall_invalid_amounts(self):\n+        self.log.info(\"Test sending more than balance\")\n+        pre_sendall_balance = self.add_uxtos([7, 14])\n+\n+        expected_tx = self.wallet.sendall(receivers=[{self.recipient: 5}, self.remainder_target], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance + 1}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance}, self.remainder_target])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.recipient),\n+                self.wallet.sendall, [{self.recipient: 0.00000001}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee - Decimal(0.00000010)}, self.remainder_target])\n+\n+    # @cleanup not needed because different wallet used\n+    def sendall_negative_effective_value(self):\n+        self.log.info(\"Test that sendall fails if all UTXOs have negative effective value\")\n+        # Use dedicated wallet for dust amounts and unload wallet at end\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for transaction.\"\n+                + \" Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\",\n+                dust_wallet.sendall, receivers=[self.remainder_target], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    @cleanup\n+    def sendall_with_send_max(self):\n+        self.log.info(\"Check that `send_max` option causes negative value UTXOs to be left behind\")\n+        self.add_uxtos([0.00000400, 0.00000300, 1])\n+\n+        # sendall with send_max\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], fee_rate=300, options={\"send_max\": True})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        self.assert_tx_has_outputs(tx_from_wallet, [{\"address\": self.remainder_target, \"value\": 1 + tx_from_wallet[\"fee\"]}])\n+        assert_equal(self.wallet.getbalances()[\"mine\"][\"trusted\"], Decimal(\"0.00000700\"))\n+\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+\n+    @cleanup\n+    def sendall_specific_inputs(self):\n+        self.log.info(\"Test sendall with a subset of UTXO pool\")\n+        self.add_uxtos([17, 4])\n+        utxo = self.wallet.listunspent()[0]\n+\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], options={\"inputs\": [utxo]})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"txid\"], utxo[\"txid\"])\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"vout\"], utxo[\"vout\"])\n+        self.assert_tx_has_output(tx_from_wallet, self.remainder_target)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    @cleanup\n+    def sendall_fails_on_missing_input(self):\n+        # fails because UTXO was previously spent, and wallet is empty\n+        self.log.info(\"Test sendall fails because specified UTXO is not available\")\n+        self.add_uxtos([16, 5])\n+        spent_utxo = self.wallet.listunspent()[0]\n+\n+        # fails on unconfirmed spent UTXO\n+        self.wallet.sendall(receivers=[self.remainder_target])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails on specific previously spent UTXO, while other UTXOs exist\n+        self.generate(self.nodes[0], 1)\n+        self.add_uxtos([19, 2])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails because UTXO is unknown, while other UTXOs exist\n+        foreign_utxo = self.def_wallet.listunspent()[0]\n+        assert_raises_rpc_error(-8, \"Input not found. UTXO ({}:{}) is not part of wallet.\".format(foreign_utxo[\"txid\"],\n+            foreign_utxo[\"vout\"]), self.wallet.sendall, receivers=[self.remainder_target],\n+            options={\"inputs\": [foreign_utxo]})",
      "path": "test/functional/wallet_sendall.py",
      "position": 241,
      "original_position": 241,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809858573,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The issue is that `foreign_utxo` might be the change output for a transaction that funded the test wallet. Because the transaction has something belonging to the test wallet, the test wallet knows the transaction and does not detect it to be foreign. I will add a suggestion at the relevant line to fix this issue.",
      "created_at": "2022-03-14T11:44:12Z",
      "updated_at": "2022-03-14T11:44:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r825859044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825859044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825864503",
      "pull_request_review_id": 908668374,
      "id": 825864503,
      "node_id": "PRRC_kwDOABII584xObE3",
      "diff_hunk": "@@ -1168,6 +1181,230 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx{pwallet->GetWalletTx(input.prevout.hash)};\n+                    if (!tx) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 240,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We may accidentally allow an external UTXO here if the transaction had both outputs that belonged to us, and outputs that did not. So we should check that the specified output itself actually belongs to this wallet.\r\n\r\n```suggestion\r\n                    if (!tx || pwallet->IsMine(tx->tx->vout[input.prevout.n]) != ISMINE_SPENDABLE | (coin_control.fAllowWatchOnly ? ISMINE_WATCHONLY : 0)) {\r\n```\r\n\r\n(Did not test it, but something similar to that should work. The output needs to be in the wallet, and we should also respect `coin_control.fAllowWatchonly`)\r\n\r\nFixes https://github.com/bitcoin/bitcoin/pull/24118/commits/5c0a1b330294d40112af79af19414b913d0dce8c#r809858573",
      "created_at": "2022-03-14T11:51:11Z",
      "updated_at": "2022-03-14T11:51:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r825864503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825864503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021533",
      "pull_request_review_id": 908896032,
      "id": 826021533,
      "node_id": "PRRC_kwDOABII584xPBad",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+        return self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+    # Helper schema for success cases\n+    def test_sendall_success(self, sendall_args, remaining_balance = 0):\n+        sendall_tx_receipt = self.wallet.sendall(sendall_args)\n+        self.generate(self.nodes[0], 1)\n+        # wallet has remaining balance (usually empty)\n+        assert_equal(remaining_balance, self.wallet.getbalances()[\"mine\"][\"trusted\"])\n+\n+        assert_equal(sendall_tx_receipt[\"complete\"], True)\n+        return self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+    @cleanup\n+    def gen_and_clean(self):\n+        self.add_uxtos([15, 2, 4])\n+\n+    def test_cleanup(self):\n+        self.log.info(\"Test that cleanup wrapper empties wallet\")\n+        self.gen_and_clean()\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    # Actual tests\n+    @cleanup\n+    def sendall_two_utxos(self):\n+        self.log.info(\"Testing basic sendall case without specific amounts\")\n+        pre_sendall_balance = self.add_uxtos([10,11])\n+        tx_from_wallet = self.test_sendall_success(sendall_args = [self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx = tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance + tx_from_wallet[\"fee\"] } # fee is neg\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_split(self):\n+        self.log.info(\"Testing sendall where two recipients have unspecified amount\")\n+        pre_sendall_balance = self.add_uxtos([1, 2, 3, 15])\n+        tx_from_wallet = self.test_sendall_success([self.remainder_target, self.split_target])\n+\n+        half = (pre_sendall_balance + tx_from_wallet[\"fee\"]) / 2\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.split_target, \"value\": half },\n+                { \"address\": self.remainder_target, \"value\": half }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_and_spend(self):\n+        self.log.info(\"Testing sendall in combination with paying specified amount to recipient\")\n+        pre_sendall_balance = self.add_uxtos([8, 13])\n+        tx_from_wallet = self.test_sendall_success([{self.recipient: 5}, self.remainder_target])\n+\n+        self.assert_tx_has_outputs(tx_from_wallet,\n+            expected_outputs = [\n+                { \"address\": self.recipient, \"value\": 5 },\n+                { \"address\": self.remainder_target, \"value\": pre_sendall_balance - 5 + tx_from_wallet[\"fee\"] }\n+            ]\n+        )\n+        self.assert_balance_swept_completely(tx_from_wallet, pre_sendall_balance)\n+\n+    @cleanup\n+    def sendall_invalid_receiver_addresses(self):\n+        self.log.info(\"Test having only receiver with specified amount, missing receiver with unspecified amount\")\n+        self.add_uxtos([12, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Must provide at least one address without a specified amount\" ,\n+                self.wallet.sendall,\n+                [{self.recipient: 5}]\n+            )\n+\n+    @cleanup\n+    def sendall_duplicate_receiver(self):\n+        self.log.info(\"Test duplicate destination\")\n+        self.add_uxtos([1, 8, 3, 9])\n+\n+        assert_raises_rpc_error(\n+                -8,\n+                \"Invalid parameter, duplicated address: {}\".format(self.remainder_target),\n+                self.wallet.sendall,\n+                [self.remainder_target, self.remainder_target]\n+            )\n+\n+    @cleanup\n+    def sendall_invalid_amounts(self):\n+        self.log.info(\"Test sending more than balance\")\n+        pre_sendall_balance = self.add_uxtos([7, 14])\n+\n+        expected_tx = self.wallet.sendall(receivers=[{self.recipient: 5}, self.remainder_target], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance + 1}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance}, self.remainder_target])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.recipient),\n+                self.wallet.sendall, [{self.recipient: 0.00000001}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee}, self.remainder_target])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sendall,\n+                [{self.recipient: pre_sendall_balance - fee - Decimal(0.00000010)}, self.remainder_target])\n+\n+    # @cleanup not needed because different wallet used\n+    def sendall_negative_effective_value(self):\n+        self.log.info(\"Test that sendall fails if all UTXOs have negative effective value\")\n+        # Use dedicated wallet for dust amounts and unload wallet at end\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for transaction.\"\n+                + \" Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\",\n+                dust_wallet.sendall, receivers=[self.remainder_target], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    @cleanup\n+    def sendall_with_send_max(self):\n+        self.log.info(\"Check that `send_max` option causes negative value UTXOs to be left behind\")\n+        self.add_uxtos([0.00000400, 0.00000300, 1])\n+\n+        # sendall with send_max\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], fee_rate=300, options={\"send_max\": True})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        self.assert_tx_has_outputs(tx_from_wallet, [{\"address\": self.remainder_target, \"value\": 1 + tx_from_wallet[\"fee\"]}])\n+        assert_equal(self.wallet.getbalances()[\"mine\"][\"trusted\"], Decimal(\"0.00000700\"))\n+\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+\n+    @cleanup\n+    def sendall_specific_inputs(self):\n+        self.log.info(\"Test sendall with a subset of UTXO pool\")\n+        self.add_uxtos([17, 4])\n+        utxo = self.wallet.listunspent()[0]\n+\n+        sendall_tx_receipt = self.wallet.sendall(receivers=[self.remainder_target], options={\"inputs\": [utxo]})\n+        tx_from_wallet = self.wallet.gettransaction(txid = sendall_tx_receipt[\"txid\"], verbose = True)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vin\"]), 1)\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"txid\"], utxo[\"txid\"])\n+        assert_equal(tx_from_wallet[\"decoded\"][\"vin\"][0][\"vout\"], utxo[\"vout\"])\n+        self.assert_tx_has_output(tx_from_wallet, self.remainder_target)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    @cleanup\n+    def sendall_fails_on_missing_input(self):\n+        # fails because UTXO was previously spent, and wallet is empty\n+        self.log.info(\"Test sendall fails because specified UTXO is not available\")\n+        self.add_uxtos([16, 5])\n+        spent_utxo = self.wallet.listunspent()[0]\n+\n+        # fails on unconfirmed spent UTXO\n+        self.wallet.sendall(receivers=[self.remainder_target])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails on specific previously spent UTXO, while other UTXOs exist\n+        self.generate(self.nodes[0], 1)\n+        self.add_uxtos([19, 2])\n+        assert_raises_rpc_error(-8,\n+                \"Input not available. UTXO ({}:{}) was already spent.\".format(spent_utxo[\"txid\"], spent_utxo[\"vout\"]),\n+                self.wallet.sendall, receivers=[self.remainder_target], options={\"inputs\": [spent_utxo]})\n+\n+        # fails because UTXO is unknown, while other UTXOs exist\n+        foreign_utxo = self.def_wallet.listunspent()[0]\n+        assert_raises_rpc_error(-8, \"Input not found. UTXO ({}:{}) is not part of wallet.\".format(foreign_utxo[\"txid\"],\n+            foreign_utxo[\"vout\"]), self.wallet.sendall, receivers=[self.remainder_target],\n+            options={\"inputs\": [foreign_utxo]})",
      "path": "test/functional/wallet_sendall.py",
      "position": 241,
      "original_position": 241,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809858573,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed working from achow101's suggestion",
      "created_at": "2022-03-14T14:39:07Z",
      "updated_at": "2022-03-14T14:39:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r826021533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021647",
      "pull_request_review_id": 908896192,
      "id": 826021647,
      "node_id": "PRRC_kwDOABII584xPBcP",
      "diff_hunk": "@@ -50,6 +53,93 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options)\n+{\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options)\n+{\n+    if (options.exists(\"feeRate\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n+    }\n+    if (options.exists(\"changeAddress\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+    }\n+    if (options.exists(\"changePosition\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+    }\n+    if (options.exists(\"includeWatching\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+    }\n+    if (options.exists(\"lockUnspents\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+    }\n+    if (options.exists(\"subtractFeeFromOutputs\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+    }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 815754993,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Amended all the error messages to fully explain the issue as in the `fee_rate`. Added the change as a separate commit.",
      "created_at": "2022-03-14T14:39:12Z",
      "updated_at": "2022-03-14T14:39:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r826021647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021747",
      "pull_request_review_id": 908896334,
      "id": 826021747,
      "node_id": "PRRC_kwDOABII584xPBdz",
      "diff_hunk": "@@ -192,6 +192,12 @@ def test_valid_signer(self):\n         assert(res[\"complete\"])\n         assert_equal(res[\"hex\"], mock_tx)\n \n+        self.log.info('Test sendall using hww1')\n+\n+        res = hww.sendall(receivers=[{dest:0.5}, hww.getrawchangeaddress()],options={\"add_to_wallet\": False})",
      "path": "test/functional/wallet_signer.py",
      "position": null,
      "original_position": 6,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "in_reply_to_id": 825825139,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thank you",
      "created_at": "2022-03-14T14:39:18Z",
      "updated_at": "2022-03-14T14:39:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r826021747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021858",
      "pull_request_review_id": 908896483,
      "id": 826021858,
      "node_id": "PRRC_kwDOABII584xPBfi",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sendall RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+# Decorator to reset activewallet to zero utxos\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+                self.wallet.sendall([self.remainder_target])\n+            assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+    return wrapper\n+\n+class SendallTest(BitcoinTestFramework):\n+    # Setup and helpers\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def assert_tx_has_output(self, tx, addr, value=None):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_tx_has_outputs(self, tx, expected_outputs):\n+        assert_equal(len(expected_outputs), len(tx[\"decoded\"][\"vout\"]))\n+        for eo in expected_outputs:\n+            self.assert_tx_has_output(tx, eo[\"address\"], eo[\"value\"])\n+\n+    def add_uxtos(self, amounts):",
      "path": "test/functional/wallet_sendall.py",
      "position": null,
      "original_position": 53,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "in_reply_to_id": 825843949,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed everywhere, thanks",
      "created_at": "2022-03-14T14:39:23Z",
      "updated_at": "2022-03-14T14:39:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r826021858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021946",
      "pull_request_review_id": 908896632,
      "id": 826021946,
      "node_id": "PRRC_kwDOABII584xPBg6",
      "diff_hunk": "@@ -1168,6 +1181,230 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx{pwallet->GetWalletTx(input.prevout.hash)};\n+                    if (!tx) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 240,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "5c0a1b330294d40112af79af19414b913d0dce8c",
      "in_reply_to_id": 825864503,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! I've used \r\n`if (!tx || pwallet->IsMine(tx->tx->vout[input.prevout.n]) != (coin_control.fAllowWatchOnly ? ISMINE_ALL : ISMINE_SPENDABLE))`",
      "created_at": "2022-03-14T14:39:29Z",
      "updated_at": "2022-03-14T14:39:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r826021946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826021946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/828048955",
      "pull_request_review_id": 911687175,
      "id": 828048955,
      "node_id": "PRRC_kwDOABII584xWwY7",
      "diff_hunk": "@@ -1235,6 +1248,230 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "cab7a4bf86dbce605de9cd6ab1388158a79a5937",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the first help example, use [...] instead of {..} for a valid json array.",
      "created_at": "2022-03-16T14:04:46Z",
      "updated_at": "2022-03-16T14:20:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r828048955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/828048955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/828059316",
      "pull_request_review_id": 911702154,
      "id": 828059316,
      "node_id": "PRRC_kwDOABII584xWy60",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+New RPCs\n+--------\n+\n+- The `sendall` RPC spends given UTXOs to one or more receivers\n+  without creating change. By default, the `sendall` RPC will send\n+  everything in the wallet leaving no UTXOs behind. `sendall` is\n+  useful to empty wallets or to create a changeless payment from select\n+  UTXOs. Continue to use the \"subtract fee from output\" option to create\n+  transactions delimited via a budget (in contrast to a concrete set of",
      "path": "doc/release-notes-24118.md",
      "position": null,
      "original_position": 9,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 809797621,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That works for me, although I don't think \"from a specific amount\" is grammatically correct, I think that should be \"of a specific amount\".",
      "created_at": "2022-03-16T14:14:11Z",
      "updated_at": "2022-03-16T14:14:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r828059316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/828059316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/828204508",
      "pull_request_review_id": 911921606,
      "id": 828204508,
      "node_id": "PRRC_kwDOABII584xXWXc",
      "diff_hunk": "@@ -1235,6 +1248,230 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "cab7a4bf86dbce605de9cd6ab1388158a79a5937",
      "in_reply_to_id": 828048955,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you, fixed",
      "created_at": "2022-03-16T16:17:03Z",
      "updated_at": "2022-03-16T16:17:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r828204508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/828204508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/835408565",
      "pull_request_review_id": 921849137,
      "id": 835408565,
      "node_id": "PRRC_kwDOABII584xy1K1",
      "diff_hunk": "@@ -1168,6 +1181,229 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "9bda5234bc41b7477b0224930177c6dfcd8cb9fc",
      "in_reply_to_id": 810114163,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think some things like unspent locking could be refactored further, but the bulk of this PR is new code rather than copied from somewhere else. There isn't much here that I think can be reused elsewhere.\r\n\r\nw.r.t getting a subset of the UTXO pool, it doesn't make sense for this to be part of `AvailableCoins` as that function is used for more than transaction creation. Not all situations where ti is used have access to information such as feerates.",
      "created_at": "2022-03-25T16:01:51Z",
      "updated_at": "2022-03-25T16:05:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r835408565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/835408565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836667051",
      "pull_request_review_id": 923487940,
      "id": 836667051,
      "node_id": "PRRC_kwDOABII584x3oar",
      "diff_hunk": "@@ -21,7 +21,8 @@\n \n \n namespace wallet {\n-static void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n+static void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "35ed094e4b0e0554e609709f6ca1f7d17096882c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 35ed094e4b0e0554e609709f6ca1f7d17096882c since you're touching\r\n```suggestion\r\nstatic void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient>& recipients)\r\n```",
      "created_at": "2022-03-28T17:18:55Z",
      "updated_at": "2022-03-28T18:34:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836667051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836667051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836678721",
      "pull_request_review_id": 923487940,
      "id": 836678721,
      "node_id": "PRRC_kwDOABII584x3rRB",
      "diff_hunk": "@@ -74,6 +74,50 @@ static void InterpretFeeEstimationInstructions(const UniValue& conf_target, cons\n     }\n }\n \n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex{EncodeHexTx(CTransaction(mtx))};\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c (for clang-tidy, see https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c-named-arguments)\r\n\r\n```suggestion\r\n            pwallet->CommitTransaction(tx, {}, /*orderForm=*/ {});\r\n```\r\n\r\n",
      "created_at": "2022-03-28T17:32:59Z",
      "updated_at": "2022-03-28T18:34:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836678721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836678721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836701319",
      "pull_request_review_id": 923487940,
      "id": 836701319,
      "node_id": "PRRC_kwDOABII584x3wyH",
      "diff_hunk": "@@ -449,31 +450,43 @@ RPCHelpMan settxfee()\n \n \n // Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n-static std::vector<RPCArg> FundTxDoc()\n+static std::vector<RPCArg> FundTxDoc(bool solving_data = true)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 122,
      "original_position": 26,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "3813ba1b196f8dd89de1f8b959c179dd28c05d4e",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3813ba1b196f8dd89de1f8b959c179dd28c05d4e: would prefer to not have default values",
      "created_at": "2022-03-28T17:57:09Z",
      "updated_at": "2022-03-28T18:34:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836701319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836701319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836712508",
      "pull_request_review_id": 923487940,
      "id": 836712508,
      "node_id": "PRRC_kwDOABII584x3zg8",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx{pwallet->GetWalletTx(input.prevout.hash)};\n+                    if (!tx || pwallet->IsMine(tx->tx->vout[input.prevout.n]) != (coin_control.fAllowWatchOnly ? ISMINE_ALL : ISMINE_SPENDABLE)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.input_bytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.input_bytes) > output.txout.nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.outpoint.hash, output.outpoint.n, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.txout.nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size{CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get())};\n+            CAmount fee_from_size{fee_rate.GetFee(tx_size.vsize)};\n+            CAmount effective_value{total_input_value - fee_from_size};",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 423,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3813ba1b196f8dd89de1f8b959c179dd28c05d4e\r\n\r\n```suggestion\r\n            const TxSize tx_size{CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get())};\r\n            const CAmount fee_from_size{fee_rate.GetFee(tx_size.vsize)};\r\n            const CAmount effective_value{total_input_value - fee_from_size};\r\n```",
      "created_at": "2022-03-28T18:11:40Z",
      "updated_at": "2022-03-28T18:34:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836712508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836712508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1412,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1414,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836713923",
      "pull_request_review_id": 923487940,
      "id": 836713923,
      "node_id": "PRRC_kwDOABII584x3z3D",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 392,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3813ba1b196f8dd89de1f8b959c179dd28c05d4e\r\n```suggestion\r\n            const bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\r\n```",
      "created_at": "2022-03-28T18:12:47Z",
      "updated_at": "2022-03-28T18:34:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836713923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836713923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1384,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836720064",
      "pull_request_review_id": 923487940,
      "id": 836720064,
      "node_id": "PRRC_kwDOABII584x31XA",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx{pwallet->GetWalletTx(input.prevout.hash)};\n+                    if (!tx || pwallet->IsMine(tx->tx->vout[input.prevout.n]) != (coin_control.fAllowWatchOnly ? ISMINE_ALL : ISMINE_SPENDABLE)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.input_bytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.input_bytes) > output.txout.nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.outpoint.hash, output.outpoint.n, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.txout.nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size{CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get())};\n+            CAmount fee_from_size{fee_rate.GetFee(tx_size.vsize)};\n+            CAmount effective_value{total_input_value - fee_from_size};\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 457,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What makes one of these `RPC_INVALID_PARAMETER` and the other `RPC_WALLET_INSUFFICIENT_FUNDS` ?",
      "created_at": "2022-03-28T18:19:40Z",
      "updated_at": "2022-03-28T18:34:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836720064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836720064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1429,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836729505",
      "pull_request_review_id": 923487940,
      "id": 836729505,
      "node_id": "PRRC_kwDOABII584x33qh",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 334,
      "original_position": 331,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you need to `pwallet->BlockUntilSyncedToCurrentChain();` here?",
      "created_at": "2022-03-28T18:31:52Z",
      "updated_at": "2022-03-28T18:34:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r836729505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836729505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1337,
      "original_line": 1337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837085217",
      "pull_request_review_id": 924068600,
      "id": 837085217,
      "node_id": "PRRC_kwDOABII584x5Ogh",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 392,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": 836713923,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Generally I'd prefer to keep code logic and constants (defaults) separate. Otherwise changing the constant (default) requires changing the code logic. So this should be `bool a{option.exists() ? option.bool() : option_default};`",
      "created_at": "2022-03-29T06:05:30Z",
      "updated_at": "2022-03-29T06:08:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837085217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837085217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1384,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837658298",
      "pull_request_review_id": 924883369,
      "id": 837658298,
      "node_id": "PRRC_kwDOABII584x7aa6",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 334,
      "original_position": 331,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": 836729505,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes! Thanks.",
      "created_at": "2022-03-29T16:08:34Z",
      "updated_at": "2022-03-29T16:08:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837658298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837658298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1337,
      "original_line": 1337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837889960",
      "pull_request_review_id": 925208558,
      "id": 837889960,
      "node_id": "PRRC_kwDOABII584x8S-o",
      "diff_hunk": "@@ -449,31 +450,43 @@ RPCHelpMan settxfee()\n \n \n // Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n-static std::vector<RPCArg> FundTxDoc()\n+static std::vector<RPCArg> FundTxDoc(bool solving_data = true)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 122,
      "original_position": 26,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "3813ba1b196f8dd89de1f8b959c179dd28c05d4e",
      "in_reply_to_id": 836701319,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using this default value in this instance replicates the previous behavior.",
      "created_at": "2022-03-29T20:37:42Z",
      "updated_at": "2022-03-29T20:37:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837889960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837889960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837890861",
      "pull_request_review_id": 925209791,
      "id": 837890861,
      "node_id": "PRRC_kwDOABII584x8TMt",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 392,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": 836713923,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed this line to match @MarcoFalke's suggestion.",
      "created_at": "2022-03-29T20:39:00Z",
      "updated_at": "2022-03-29T20:39:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837890861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837890861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1384,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837891323",
      "pull_request_review_id": 925211190,
      "id": 837891323,
      "node_id": "PRRC_kwDOABII584x8TT7",
      "diff_hunk": "@@ -1179,49 +1243,231 @@ RPCHelpMan send()\n             SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sendall()\n+{\n+    return RPCHelpMan{\"sendall\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend the value of all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sendall will respect the avoid_reuse wallet flag.\\n\"\n+        \"If your wallet contains many small inputs, either because it received tiny payments or as a result of accumulating change, consider using `send_max` to exclude inputs that are worth less than the fees needed to spend them.\\n\",\n+        {\n+            {\"recipients\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sendall destinations. Each address may only appear once.\\n\"\n+                \"Optionally some recipients can be specified with an amount to perform payments, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns the serialized transaction without broadcasting or adding it to the wallet\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch-only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with send_max. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSpend all UTXOs from the wallet with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Spend all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, spend only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sendall\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"send_max\\\": true}'\\n\") +\n+        \"Spend all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sendall\", \"recipients='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // recipients\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet{GetWalletForJSONRPCRequest(request)};\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue recipient_key_value_pairs(UniValue::VARR);\n+            const UniValue& recipients{request.params[0]};\n+            for (unsigned int i = 0; i < recipients.size(); ++i) {\n+                const UniValue& recipient{recipients[i]};\n+                if (recipient.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(recipient.get_str(), 0);\n+                    recipient_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(recipient.get_str());\n+                } else {\n+                    recipient_key_value_pairs.push_back(recipient);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate{GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out)};\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            CMutableTransaction rawTx{ConstructTransaction(options[\"inputs\"], recipient_key_value_pairs, options[\"locktime\"], rbf)};\n+            LOCK(pwallet->cs_wallet);\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool send_max{options.exists(\"send_max\") && options[\"send_max\"].get_bool()};\n+            if (options.exists(\"inputs\") && options.exists(\"send_max\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine send_max with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx{pwallet->GetWalletTx(input.prevout.hash)};\n+                    if (!tx || pwallet->IsMine(tx->tx->vout[input.prevout.n]) != (coin_control.fAllowWatchOnly ? ISMINE_ALL : ISMINE_SPENDABLE)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /*nMinimumAmount=*/0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.input_bytes > 0);\n+                    if (send_max && fee_rate.GetFee(output.input_bytes) > output.txout.nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.outpoint.hash, output.outpoint.n, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.txout.nValue;\n+                }\n+            }\n \n-            UniValue result(UniValue::VOBJ);\n+            // estimate final size of tx\n+            TxSize tx_size{CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get())};\n+            CAmount fee_from_size{fee_rate.GetFee(tx_size.vsize)};\n+            CAmount effective_value{total_input_value - fee_from_size};\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            if (effective_value <= 0) {\n+                if (send_max) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for transaction. Try using lower feerate or excluding uneconomic UTXOs with 'send_max' option.\");\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            CAmount output_amounts_claimed{0};\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            const CAmount remainder{effective_value - output_amounts_claimed};\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 457,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "78aab643af1c1afbaf82e1269b55a617f7fda6f6",
      "in_reply_to_id": 836720064,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `RPC_WALLET_INSUFFICIENT_FUNDS`",
      "created_at": "2022-03-29T20:39:39Z",
      "updated_at": "2022-03-29T20:39:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837891323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837891323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": 1429,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837893121",
      "pull_request_review_id": 925212978,
      "id": 837893121,
      "node_id": "PRRC_kwDOABII584x8TwB",
      "diff_hunk": "@@ -21,7 +21,8 @@\n \n \n namespace wallet {\n-static void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n+static void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients)",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "35ed094e4b0e0554e609709f6ca1f7d17096882c",
      "in_reply_to_id": 836667051,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2022-03-29T20:41:09Z",
      "updated_at": "2022-03-29T20:41:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837893121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837893121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837893255",
      "pull_request_review_id": 925213091,
      "id": 837893255,
      "node_id": "PRRC_kwDOABII584x8TyH",
      "diff_hunk": "@@ -74,6 +74,50 @@ static void InterpretFeeEstimationInstructions(const UniValue& conf_target, cons\n     }\n }\n \n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx)\n+{\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err{pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\n+    bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex{EncodeHexTx(CTransaction(mtx))};\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "bb84b7145b31dbfdcb4cf0b9b6e612a57e573993",
      "original_commit_id": "902793c7772e5bdd5aae5b0d20a32c02a1a6dc7c",
      "in_reply_to_id": 836678721,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2022-03-29T20:41:16Z",
      "updated_at": "2022-03-29T20:41:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r837893255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837893255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    }
  ]
}