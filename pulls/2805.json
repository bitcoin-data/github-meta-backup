{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805",
    "id": 6642487,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjY0MjQ4Nw==",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/2805",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/2805.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/2805.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/bad255871be523773c07fc3ac64f7d5f03032041",
    "number": 2805,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Autotools RFC: Round 2",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changes since Round 1:\n- Rebased on current master\n- Moved configure to root srcdir, and added a Makefile there\n- Split into several Makefile.am's with recursive build [1]\n- Work towards building correctly under gitian\n- Fixed/verified several build scenarios\n- Fixed up 'make dist' to work as a viable end-result packaging mechanism [2]\n1. Personally I believe that splitting up the build is a major regression from RFC1. This was done by request here. Most projects end up spending lots of time moving in the opposite direction, as a recursive build tends to be slower, more complicated, and more-error prone. That proves to be the case here as well, but I've attempted to handle it as gracefully as possible.\n2. 'make dist' can be used to produce a bootstrapped tarball with git information included, intended for distribution as an 'official source release'. This is the equivalent of taking a fresh git clone, running './autogen.sh', and tar'ing up the result. This is the common procedure for autotools projects.\n\nAt this point I consider it to be merge-ready, with the exception of verification of gitian descriptors and documentation. Presumably removal of the old makefile.\\* would coincide with updated documentation. Several things can be improved and cleaned up after merge (dealing with versioning, for example), but I've tried to ignore these things as much as possible for the sake of a quick merge.\n\nEdit: Removed crazy markup that looked like yelling -- sorry.\n## \n\nHere is the second go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition.\n\nI hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I don't vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but it's portable and well-established.\n\nI've opted not to write the documentation yet, because I would like to see what comments/concerns come out of the first round of review before committing to anything.\n\nThis does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way.\n\nQt-creator can be used with the Autotools plugin, and is working nicely. For those who wish to use it this way, install the Autotools plugin from the 'about' menu, then open Makefile.am as a project. It handles the build procedure, so there is no need to mess with the command-line procedures listed below.\n\nBuilding from CLI:\nFor Linux, assuming the dependencies have been met, the build procedure looks like this:\n\n```\n./autogen.sh\n./configure\nmake\n```\n\nSame for OS X, but the pkg-config path needs to be hooked up from macports first:\n\n```\necho \"/opt/local/share/aclocal\" | sudo tee -a /usr/share/aclocal/dirlist\n```\n\nFor mingw it's the same, but you will need to provide lots of paths in the form of:\n\n```\n./autogen.sh\nCPPFLAGS=\"-I/path/to/include -I/path/to/other/include\" LDFLAGS=\"-L/path/to/libs -L/path/to/other/libs\" ./configure\nmake\n```\n\nIn addition, there are helpers for qt and boost to help with finding some locations.\nUse ./configure --help to see the available options.\n\nNative windows built is untested, as I don't have a windows environment at my disposal.\n\nGitian should be working for win32 builds. I've guessed at Linux but have not yet verified.\n\n'make check' will run the unit tests and print the results.\n\nI've done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements.\n\nTODO:\n- Verify gitian descriptors.\n- Add documentation\n",
    "labels": [],
    "active_lock_reason": "resolved",
    "created_at": "2013-07-01T05:18:38Z",
    "updated_at": "2021-09-08T10:23:06Z",
    "closed_at": "2013-08-27T03:11:30Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "30d7bf04c4fc4e86d7a234f61c573b0f87cd3a6f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "theuni:autotools-rfc-2",
      "ref": "autotools-rfc-2",
      "sha": "bad255871be523773c07fc3ac64f7d5f03032041",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 10302141,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMDMwMjE0MQ==",
        "name": "bitcoin",
        "full_name": "theuni/bitcoin",
        "owner": {
          "login": "theuni",
          "id": 417043,
          "node_id": "MDQ6VXNlcjQxNzA0Mw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/theuni",
          "html_url": "https://github.com/theuni",
          "followers_url": "https://api.github.com/users/theuni/followers",
          "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
          "organizations_url": "https://api.github.com/users/theuni/orgs",
          "repos_url": "https://api.github.com/users/theuni/repos",
          "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/theuni/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/theuni/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/theuni/bitcoin",
        "archive_url": "https://api.github.com/repos/theuni/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/theuni/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/theuni/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/theuni/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/theuni/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/theuni/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/theuni/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/theuni/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/theuni/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/theuni/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/theuni/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/theuni/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/theuni/bitcoin/events",
        "forks_url": "https://api.github.com/repos/theuni/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/theuni/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/theuni/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/theuni/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/theuni/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/theuni/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/theuni/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/theuni/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/theuni/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/theuni/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/theuni/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/theuni/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/theuni/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/theuni/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/theuni/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/theuni/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:theuni/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/theuni/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/theuni/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/theuni/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/theuni/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/theuni/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/theuni/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/theuni/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/theuni/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/theuni/bitcoin/hooks",
        "svn_url": "https://github.com/theuni/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 221845,
        "default_branch": "trivial-next",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T21:44:11Z",
        "created_at": "2013-05-26T18:55:06Z",
        "updated_at": "2022-01-12T04:42:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c2aca505510337cc82c927bc56edcdc8d0d58dd2",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34323,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T18:57:56Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2800,
    "deletions": 238,
    "changed_files": 41,
    "commits": 23,
    "review_comments": 43,
    "comments": 30
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2ViMDQ3MTkxNWY2YWQxMjRjN2ViNTlhZGQzMWU0MDdlNjUxNjk1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ceb0471915f6ad124c7eb59add31e407e651695",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0ceb0471915f6ad124c7eb59add31e407e651695",
      "tree": {
        "sha": "7503c365aff19b81f3f51ad09f832afe3add2be9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7503c365aff19b81f3f51ad09f832afe3add2be9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
          "sha": "28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8"
        }
      ],
      "message": "autotools: cleanup usage of MSG_NOSIGNAL\n\nThis is Part of an autotools buildsystem port.\n\nPreviously MSG_NOSIGNAL was defined in a few places, and -DMSG_NOSIGNAL=0 was\npassed by the osx build to signify that it was unavailable there. For Win32, it\nwas assumed to be unavailable.\n\nThis commit flips the logic so that the unix build declares the feature. The\nHAVE_MSG_NOSIGNAL define will be (automatically detected and) set by autotools\nas well, so that both build methods will give the same results.\n\nThere should be no observable changes in functionality here.",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-30T20:22:24Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-27T23:55:01Z"
      },
      "sha": "0ceb0471915f6ad124c7eb59add31e407e651695"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGZiMTc2Njg3YmEyYzZlODk3MGE3YTNmZmVmODAyMWRjZmZmNWNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10fb176687ba2c6e8970a7a3ffef8021dcfff5cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/10fb176687ba2c6e8970a7a3ffef8021dcfff5cb",
      "tree": {
        "sha": "2855cf119b6162018773370d32b27f11e67997b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2855cf119b6162018773370d32b27f11e67997b2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ceb0471915f6ad124c7eb59add31e407e651695",
          "sha": "0ceb0471915f6ad124c7eb59add31e407e651695",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0ceb0471915f6ad124c7eb59add31e407e651695"
        }
      ],
      "message": "autotools: include bitcoin-config.h for autotools builds",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-30T20:22:24Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-03T22:37:18Z"
      },
      "sha": "10fb176687ba2c6e8970a7a3ffef8021dcfff5cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzBhZDE0ZDRkY2ViZTA4NzY5ZDU4ZTAzMTdhYmVjYzYzZDA2MzBi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/070ad14d4dcebe08769d58e0317abecc63d0630b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/070ad14d4dcebe08769d58e0317abecc63d0630b",
      "tree": {
        "sha": "38a22ef4daf99c189365dd0400ce69e395a4bb80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38a22ef4daf99c189365dd0400ce69e395a4bb80"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10fb176687ba2c6e8970a7a3ffef8021dcfff5cb",
          "sha": "10fb176687ba2c6e8970a7a3ffef8021dcfff5cb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/10fb176687ba2c6e8970a7a3ffef8021dcfff5cb"
        }
      ],
      "message": "autotools: add srcdir param for genbuild.sh\n\nThis allows us to search for .git, so that we can make a guess as to whether\nwe're in a repository or just an extracted tarball.\n\nTODO: might want to check for GIT_DIR env var as well.",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-30T21:27:51Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-30T20:16:26Z"
      },
      "sha": "070ad14d4dcebe08769d58e0317abecc63d0630b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODc3ZjE4M2UzYWYwYTE5OTM1NmZjNTNiMmRlMTk3YmM2YzZkMTVj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a877f183e3af0a199356fc53b2de197bc6c6d15c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a877f183e3af0a199356fc53b2de197bc6c6d15c",
      "tree": {
        "sha": "dc31de73307007ab43f6905dbf72e3140bfd02c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc31de73307007ab43f6905dbf72e3140bfd02c8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/070ad14d4dcebe08769d58e0317abecc63d0630b",
          "sha": "070ad14d4dcebe08769d58e0317abecc63d0630b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/070ad14d4dcebe08769d58e0317abecc63d0630b"
        }
      ],
      "message": "autotools: add autotools files",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-01T04:51:15Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-16T22:50:42Z"
      },
      "sha": "a877f183e3af0a199356fc53b2de197bc6c6d15c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzQ0YjU1YjRiYmVmNjIwMGI2MjEzMjI1ZjliZTJmYzdjMGU5Yjdj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec44b55b4bbef6200b6213225f9be2fc7c0e9b7c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ec44b55b4bbef6200b6213225f9be2fc7c0e9b7c",
      "tree": {
        "sha": "e0a6dd77545fd40ce6739ed55595051b621d4b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0a6dd77545fd40ce6739ed55595051b621d4b0b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a877f183e3af0a199356fc53b2de197bc6c6d15c",
          "sha": "a877f183e3af0a199356fc53b2de197bc6c6d15c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a877f183e3af0a199356fc53b2de197bc6c6d15c"
        }
      ],
      "message": "autotools: update gitian descriptors",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-01T04:51:15Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-30T21:26:39Z"
      },
      "sha": "ec44b55b4bbef6200b6213225f9be2fc7c0e9b7c"
    },
    {
      "event": "referenced",
      "id": 54969583,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDU0OTY5NTgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/54969583",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "83e0a83aebee095588f2acf357e890b12380da07",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/83e0a83aebee095588f2acf357e890b12380da07",
      "created_at": "2013-07-02T17:50:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTk2Mzc1ODcxMjFjNTkzNWNjMDgyMTRkOTQzY2FhZDczZjYzMGMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019637587121c5935cc08214d943caad73f630c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/019637587121c5935cc08214d943caad73f630c1",
      "tree": {
        "sha": "008daeafe473ddf69e8a27a3e4ebef1311b19f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/008daeafe473ddf69e8a27a3e4ebef1311b19f8f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec44b55b4bbef6200b6213225f9be2fc7c0e9b7c",
          "sha": "ec44b55b4bbef6200b6213225f9be2fc7c0e9b7c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec44b55b4bbef6200b6213225f9be2fc7c0e9b7c"
        }
      ],
      "message": "leveldb: quote CC and CXX so that they can contain whitespace\n\nFor example, CC=\"ccache gcc\" or CXX=\"ccache g++\"",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-04T07:30:47Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-04T07:30:47Z"
      },
      "sha": "019637587121c5935cc08214d943caad73f630c1"
    },
    {
      "event": "commented",
      "id": 20533093,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTMzMDkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20533093",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z",
      "updated_at": "2013-07-05T18:36:07Z",
      "author_association": "MEMBER",
      "body": "@jgarzik @laanwj @sipa ping. Any comments?\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-20533093",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "mentioned",
      "id": 55413300,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTU0MTMzMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55413300",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z"
    },
    {
      "event": "subscribed",
      "id": 55413301,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU1NDEzMzAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55413301",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z"
    },
    {
      "event": "mentioned",
      "id": 55413302,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTU0MTMzMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55413302",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z"
    },
    {
      "event": "subscribed",
      "id": 55413303,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU1NDEzMzAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55413303",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z"
    },
    {
      "event": "mentioned",
      "id": 55413304,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTU0MTMzMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55413304",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z"
    },
    {
      "event": "subscribed",
      "id": 55413305,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU1NDEzMzA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55413305",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-05T18:36:07Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjI3ZjI4MjFjYjhiNjc1YmY1Y2EwZDYyOTM3ZGY0YmM5ZGIxZWIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b627f2821cb8b675bf5ca0d62937df4bc9db1eb0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b627f2821cb8b675bf5ca0d62937df4bc9db1eb0",
      "tree": {
        "sha": "f2912aa02bbe084a02943c48a27b87469df065f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2912aa02bbe084a02943c48a27b87469df065f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019637587121c5935cc08214d943caad73f630c1",
          "sha": "019637587121c5935cc08214d943caad73f630c1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/019637587121c5935cc08214d943caad73f630c1"
        }
      ],
      "message": "squash me. autotools: quote vars when passing them to leveldb make",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-05T20:36:10Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-04T07:32:36Z"
      },
      "sha": "b627f2821cb8b675bf5ca0d62937df4bc9db1eb0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTg0ZmJhZDk1OTM4NzZkOTYyMjQyMDU1Nzg0YzMyMmRjMjUyNGIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f184fbad9593876d962242055784c322dc2524b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f184fbad9593876d962242055784c322dc2524b0",
      "tree": {
        "sha": "2704be6d9103280e2aae40c1eb97dc0073d8111a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2704be6d9103280e2aae40c1eb97dc0073d8111a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b627f2821cb8b675bf5ca0d62937df4bc9db1eb0",
          "sha": "b627f2821cb8b675bf5ca0d62937df4bc9db1eb0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b627f2821cb8b675bf5ca0d62937df4bc9db1eb0"
        }
      ],
      "message": "squash me. autotools: add ccache support\n\nSpeeds builds up a substantial amount, as expected. Local tests show full clean\nbuilds are 25x-40x faster.",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-05T20:36:10Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-04T07:33:09Z"
      },
      "sha": "f184fbad9593876d962242055784c322dc2524b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjNlZDIzN2QxMzk4ZDIxNmMzZmJmNDAxNGIzZGM2OWJiOThjN2Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/323ed237d1398d216c3fbf4014b3dc69bb98c7f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/323ed237d1398d216c3fbf4014b3dc69bb98c7f3",
      "tree": {
        "sha": "fc6a3d577d5ff6012635e0d115883d2cc8df3d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc6a3d577d5ff6012635e0d115883d2cc8df3d4c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f184fbad9593876d962242055784c322dc2524b0",
          "sha": "f184fbad9593876d962242055784c322dc2524b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f184fbad9593876d962242055784c322dc2524b0"
        }
      ],
      "message": "squash me. autotools: only test for boost_test if tests are enabled",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-05T20:36:10Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-04T07:35:44Z"
      },
      "sha": "323ed237d1398d216c3fbf4014b3dc69bb98c7f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzYxMzViOTJjM2VlYWZlZTRkZjQ0NTdmYjcxNDE1YWY3NzRlZDg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a36135b92c3eeafee4df4457fb71415af774ed87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a36135b92c3eeafee4df4457fb71415af774ed87",
      "tree": {
        "sha": "367d89e5e6645e88ecfdec62a89e09692442aa10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/367d89e5e6645e88ecfdec62a89e09692442aa10"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/323ed237d1398d216c3fbf4014b3dc69bb98c7f3",
          "sha": "323ed237d1398d216c3fbf4014b3dc69bb98c7f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/323ed237d1398d216c3fbf4014b3dc69bb98c7f3"
        }
      ],
      "message": "squash me. gitian linux build needs libboost-test",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-05T20:36:10Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-04T07:36:48Z"
      },
      "sha": "a36135b92c3eeafee4df4457fb71415af774ed87"
    },
    {
      "event": "commented",
      "id": 20570245,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTcwMjQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570245",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-07T12:48:25Z",
      "updated_at": "2013-07-07T12:48:25Z",
      "author_association": "MEMBER",
      "body": "Changes look good to me, except that I do not want to maintain two build systems in parallel. If we switch to autotools, we switch, and the existing makefiles go away. Gitian determinism can be fixed later (though just builds should be verified to work). Unfortunately; I can't test myself now (I'm not at home).\n\nAbout -Qt, you'll want an ACK from @laanwj \n\nI have no opinion about recursive makefiles or not.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-20570245",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "mentioned",
      "id": 55489593,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTU0ODk1OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55489593",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-07T12:48:26Z"
    },
    {
      "event": "subscribed",
      "id": 55489594,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU1NDg5NTk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/55489594",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-07T12:48:26Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA3ODp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA4Mjp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA4NTp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA4ODp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA5MTp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA5Mzp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA5NTp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjA5ODp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjEwMTp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjEwMzp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjEwNDp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjEwNjp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjEwNzp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjExMDp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjExNDp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjExNjp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 21093468,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDkzNDY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21093468",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-17T05:50:36Z",
      "updated_at": "2013-07-17T05:50:36Z",
      "author_association": "MEMBER",
      "body": "I don't see any code to look for bdb headers, much less figure out whether they're in the standard /usr/include/db4.8 path or somewhere else common...\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21093468",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21093588,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDkzNTg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21093588",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-17T05:55:07Z",
      "updated_at": "2013-07-17T05:55:07Z",
      "author_association": "MEMBER",
      "body": "Hmm, you're correct on bdb headers, I'll add the check. As for uncommon paths, it'll be up to the user to add it to cppflags.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21093588",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjExODp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjA3MzJkNmI1NmE5OGVjNmQzMWY2NzllMzA0ZjYzOGVmMWZlMjhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b0732d6b56a98ec6d31f679e304f638ef1fe28f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0732d6b56a98ec6d31f679e304f638ef1fe28f",
      "tree": {
        "sha": "d8b3959c0bbef83f09e4e551dcfa1e1c55ae6138",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8b3959c0bbef83f09e4e551dcfa1e1c55ae6138"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a36135b92c3eeafee4df4457fb71415af774ed87",
          "sha": "a36135b92c3eeafee4df4457fb71415af774ed87",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a36135b92c3eeafee4df4457fb71415af774ed87"
        }
      ],
      "message": "autotools: detect proper boost sleep in configure\n\nAdditionally, link in boost_crypto if necessary.",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:17Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T03:28:29Z"
      },
      "sha": "1b0732d6b56a98ec6d31f679e304f638ef1fe28f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDhiMjdiMGM2NDhiYWNlNjg2OWJmYzY3NWFiY2VlNzFjZDhkMDk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f48b27b0c648bace6869bfc675abcee71cd8d094",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f48b27b0c648bace6869bfc675abcee71cd8d094",
      "tree": {
        "sha": "cdcdf9a0416bc35e1b378f0be654d78071269cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdcdf9a0416bc35e1b378f0be654d78071269cdb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b0732d6b56a98ec6d31f679e304f638ef1fe28f",
          "sha": "1b0732d6b56a98ec6d31f679e304f638ef1fe28f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0732d6b56a98ec6d31f679e304f638ef1fe28f"
        }
      ],
      "message": "autotools: change ARG_ENABLE to ARG_WITH for dependencies",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:17Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T03:41:52Z"
      },
      "sha": "f48b27b0c648bace6869bfc675abcee71cd8d094"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjY3MTFjMWZlMjQ0ZmY3OTA4ZGZkNzFhZTg3NzUzZTY2MzczNWU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e66711c1fe244ff7908dfd71ae87753e663735e9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e66711c1fe244ff7908dfd71ae87753e663735e9",
      "tree": {
        "sha": "76a8249352ade51b7f9783521858e22eed055dfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76a8249352ade51b7f9783521858e22eed055dfc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f48b27b0c648bace6869bfc675abcee71cd8d094",
          "sha": "f48b27b0c648bace6869bfc675abcee71cd8d094",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f48b27b0c648bace6869bfc675abcee71cd8d094"
        }
      ],
      "message": "autotools: fix broken output when qt is disabled",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T03:57:20Z"
      },
      "sha": "e66711c1fe244ff7908dfd71ae87753e663735e9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzhjOGE1Nzg3ZTQ0OTYyYThiZDlkYjIxZGQyMTA0Y2M4ZmUwZTFj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc8c8a5787e44962a8bd9db21dd2104cc8fe0e1c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fc8c8a5787e44962a8bd9db21dd2104cc8fe0e1c",
      "tree": {
        "sha": "46447a959b5bfebdcc0722db3baa5e42d6a27ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46447a959b5bfebdcc0722db3baa5e42d6a27ce9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e66711c1fe244ff7908dfd71ae87753e663735e9",
          "sha": "e66711c1fe244ff7908dfd71ae87753e663735e9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e66711c1fe244ff7908dfd71ae87753e663735e9"
        }
      ],
      "message": "autotools: don't check for qrencode if qt is disabled",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T03:59:25Z"
      },
      "sha": "fc8c8a5787e44962a8bd9db21dd2104cc8fe0e1c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDhlZDFiNDBmNjA4OWRkY2FlNjljY2ViZTY0YTQ2NDMxOGIzY2E1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48ed1b40f6089ddcae69ccebe64a464318b3ca5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ed1b40f6089ddcae69ccebe64a464318b3ca5",
      "tree": {
        "sha": "b0180cd9c642e535ea66f2770252917b91ebce30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0180cd9c642e535ea66f2770252917b91ebce30"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc8c8a5787e44962a8bd9db21dd2104cc8fe0e1c",
          "sha": "fc8c8a5787e44962a8bd9db21dd2104cc8fe0e1c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fc8c8a5787e44962a8bd9db21dd2104cc8fe0e1c"
        }
      ],
      "message": "autotools: check for bdb headers and cosmetics",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:04:11Z"
      },
      "sha": "d48ed1b40f6089ddcae69ccebe64a464318b3ca5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2M2OGMwMzUxNzY0YmYyYTA5ZGYyNDczZDc1MTI1MTUwMGQzMTgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7c68c0351764bf2a09df2473d751251500d3182",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b7c68c0351764bf2a09df2473d751251500d3182",
      "tree": {
        "sha": "2b49c9f9c78c9276b89d116dcdc089305288a2d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b49c9f9c78c9276b89d116dcdc089305288a2d1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48ed1b40f6089ddcae69ccebe64a464318b3ca5",
          "sha": "d48ed1b40f6089ddcae69ccebe64a464318b3ca5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ed1b40f6089ddcae69ccebe64a464318b3ca5"
        }
      ],
      "message": "autotools: remove frandom-seed. Let gitian set it.",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:04:57Z"
      },
      "sha": "b7c68c0351764bf2a09df2473d751251500d3182"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk4YTE2MDIwNWEwNGRjMzhmNThkMjFhYTE0MjNkMDUyOTI3NTNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa98a160205a04dc38f58d21aa1423d05292753c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fa98a160205a04dc38f58d21aa1423d05292753c",
      "tree": {
        "sha": "1bb9690723f82e1673d1bd1a2c7735535b7481e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb9690723f82e1673d1bd1a2c7735535b7481e0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7c68c0351764bf2a09df2473d751251500d3182",
          "sha": "b7c68c0351764bf2a09df2473d751251500d3182",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b7c68c0351764bf2a09df2473d751251500d3182"
        }
      ],
      "message": "autotools: move flags to rhs of configure",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:06:07Z"
      },
      "sha": "fa98a160205a04dc38f58d21aa1423d05292753c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzRlZTFiYjYyOTg4Y2NjYmFmOGEzN2Q1YjZlMzdkNGRkN2VkZGU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
      "tree": {
        "sha": "6089f687f5c2c9b439aeee645bcc48f7c693cb63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6089f687f5c2c9b439aeee645bcc48f7c693cb63"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa98a160205a04dc38f58d21aa1423d05292753c",
          "sha": "fa98a160205a04dc38f58d21aa1423d05292753c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fa98a160205a04dc38f58d21aa1423d05292753c"
        }
      ],
      "message": "autotools: fixup comment",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:37:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-18T04:11:06Z"
      },
      "sha": "834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8"
    },
    {
      "event": "commented",
      "id": 21162280,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYyMjgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21162280",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T04:38:32Z",
      "updated_at": "2013-07-18T04:38:32Z",
      "author_association": "MEMBER",
      "body": "I've pushed the obvious fixes to your comments above. Thanks for the review. These will of course be squashed when ready.\n\nI didn't add the --with-frontends because with only 2 (tests would be separate), I think that is quite confusing. I hope you'll agree and that can be addressed if/when a new frontend is added.\n\nWaiting on replies to my comments on the rest.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21162280",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21162626,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYyNjI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21162626",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T04:55:01Z",
      "updated_at": "2013-07-18T04:55:01Z",
      "author_association": "MEMBER",
      "body": "Addressed later means builders need to change their configure lines based on the version they are building, even if both versions support the same features. Better to have something extensible from the start IMO.\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21162626",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21162850,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYyODUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21162850",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T05:03:16Z",
      "updated_at": "2013-07-18T05:03:16Z",
      "author_association": "MEMBER",
      "body": "Fair enough. But with 2 frontend's, and 1 required, there's no way to avoid an awkward syntax.\n\nCompare:\n\nDisable qt:\n--with-frontends=bitcoind\n\nSome future (non-auto-enabled) thing:\n--with-frontends=bitcoind,bitcoin-qt,bitcoin-foo\n\nvs.\n\nDisable qt:\n--without-qt\n\nSome future (non-auto-enabled) thing:\n--with-bitcoin-foo\n\nImo, with-frontends is not extensible, it's just a complicated syntax for saying enable/disable that forces far more parsing.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21162850",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21163212,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYzMjEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163212",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T05:20:43Z",
      "updated_at": "2013-07-18T05:20:43Z",
      "author_association": "MEMBER",
      "body": "Disable qt:\n--without-frontends=bitcoin-qt\n\nSome future (non-auto-enabled) thing:\n--with-frontends=bitcoin-qt\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21163212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21163477,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYzNDc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163477",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T05:32:07Z",
      "updated_at": "2013-07-18T05:32:07Z",
      "author_association": "MEMBER",
      "body": "--without-frontends sets the withval to 'no'. afaik --without-frontends=foo has no meaning, or at best would not be portable. Is there some magic I'm not aware of for determining that a withval was also negated?\n\nRegardless of that, even if it is valid somehow, I've never seen that syntax, and a quick google search shows no results either. So I can't imagine any user stumbling upon it...\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21163477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21163603,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYzNjAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163603",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T05:37:13Z",
      "updated_at": "2013-07-18T05:37:50Z",
      "author_association": "MEMBER",
      "body": "Hmm, I've seen this kind of thing before with KVM/qemu. They do \"all targets\" by default (and --target-list overrides entirely), nor use autoconf.\n\nHow about just building bitcoind by default and just --with-frontends=bitcoin-qt?\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21163603",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21163810,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTYzODEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163810",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T05:45:02Z",
      "updated_at": "2013-07-18T05:45:02Z",
      "author_association": "MEMBER",
      "body": "So then you still have to add it for each one you want to build, but you've disabled the default for what (arguably) most builders will want. I still don't see how it's a step up in any way from --with-qt (or --with-bitcoin-qt) or --without-qt.\n\nIf we're talking >5 or so front-ends in the future, sure. But presumably at that point they'd have to be split into separate projects by then anyway.\n\nThis whole discussion smells of an over-engineered bikeshed to me ;)\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21163810",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21164453,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY0NDUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164453",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:09:48Z",
      "updated_at": "2013-07-18T06:09:48Z",
      "author_association": "MEMBER",
      "body": "--with-qt implies it's the same client being built with or without Qt, which isn't exactly the case here.\nYou may have a point with regard to prioritizing splitting up the repositories before too many implementations grow on it.\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21164453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21164493,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY0NDkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164493",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:11:24Z",
      "updated_at": "2013-07-18T06:11:24Z",
      "author_association": "MEMBER",
      "body": "Compromise at --with-qt-frontend ?\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21164493",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21164657,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY0NjU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164657",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:17:43Z",
      "updated_at": "2013-07-18T06:17:43Z",
      "author_association": "MEMBER",
      "body": "or even --enable-qt-frontend, since qt-frontend would be a feature in this case rather than a library for inclusion.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21164657",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21164702,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY0NzAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164702",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:19:16Z",
      "updated_at": "2013-07-18T06:19:16Z",
      "author_association": "MEMBER",
      "body": "Would it be hard to leave it out entirely so the builder just does:\nmake bitcoin-qt\nmake bitcoind\nmake all\n?\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21164702",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21164910,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY0OTEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164910",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:25:47Z",
      "updated_at": "2013-07-18T06:25:47Z",
      "author_association": "MEMBER",
      "body": "Sure, those already work.\n\nThey're awkward with the recursive makefiles, which is one of the reasons I was against. You have to be in the correct dir for them to work:\n\nmake (makes all)\ncd src; make bitcoind\ncd src/qt; make bitcoin-qt\n\nBut some phony targets would be no-brainers to add, then they'd work anywhere.\n\nHowever you still need to be able to check for things. If you didn't, you could try to make bitcoind, only to find qrcode missing, and we wouldn't know if that was on purpose or an error. Then you've just negated the purpose of the buildsystem :)\n\nSo the options and checks in configure need to stay. As implemented, they're what any package maintainer would expect to see.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21164910",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21164991,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY0OTkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164991",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:28:27Z",
      "updated_at": "2013-07-18T06:28:27Z",
      "author_association": "MEMBER",
      "body": "If qrencode is missing, it should be a warning (and disable itself), not an error, unless --with-qrencode is specified ;)\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21164991",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21165320,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY1MzIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21165320",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T06:38:56Z",
      "updated_at": "2013-07-18T06:38:56Z",
      "author_association": "MEMBER",
      "body": "It is, but qrencode is never checked unless qt is enabled. Nor should it be.\n\nThis discussion has gone way off track, and this is the kind of thing I was afraid of. This thing will never be merged if the points of contention are cosmetic. I'm happy to change those to whatever makes you guys happy and argue them post-merge.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21165320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21166438,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY2NDM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21166438",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T07:11:39Z",
      "updated_at": "2013-07-18T07:11:39Z",
      "author_association": "MEMBER",
      "body": "I don't think anyone considers this an obstacle to merging. I believe that is just waiting on @laanwj at this point.\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21166438",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "mentioned",
      "id": 57027613,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTcwMjc2MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/57027613",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T07:11:39Z"
    },
    {
      "event": "subscribed",
      "id": 57027614,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU3MDI3NjE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/57027614",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-18T07:11:39Z"
    },
    {
      "event": "commented",
      "id": 21365418,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzY1NDE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21365418",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-22T18:34:18Z",
      "updated_at": "2013-07-22T18:34:18Z",
      "author_association": "MEMBER",
      "body": "I preferred a non-recursive makefile as well, but I don't want to bikeshed about this.\n\nACK after squash\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21365418",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 21498157,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDk4MTU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21498157",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T16:40:14Z",
      "updated_at": "2013-07-24T16:40:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looks really, really good.\n\nThe only issue I found during review:  bitcoin-config.h should normally be the -very- first include, because it may need to change the behavior of certain includes that follow.  This may or may not be needed with bitcoin, but it is general practice when coding autotools code.\n\nAlso, make sure bitcoin-config.h includes the standard header #ifndef FOO_H ... guard at the top and bottom.  Google claims AH_TOP and AH_BOTTOM may be used for this.\n\nACK once these issues are resolved.\n\nPull tester want any changes for this?\n",
      "user": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21498157",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkOTEzNjEyMDp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjk3MTExOTliN2M0Yjk4NmVlNjQ4YjI3N2ExNDc5NzQ1YWM2NWNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b9711199b7c4b986ee648b277a1479745ac65cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b9711199b7c4b986ee648b277a1479745ac65cd",
      "tree": {
        "sha": "9318a9d3cc43c9ae6059be62da74629f76ac9845",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9318a9d3cc43c9ae6059be62da74629f76ac9845"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
          "sha": "834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8"
        }
      ],
      "message": "autotool: add multiple-include guard for bitcoin-config.h",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-24T21:46:45Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-24T21:46:45Z"
      },
      "sha": "2b9711199b7c4b986ee648b277a1479745ac65cd"
    },
    {
      "event": "commented",
      "id": 21519185,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTE5MTg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21519185",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T21:54:05Z",
      "updated_at": "2013-07-24T21:54:05Z",
      "author_association": "MEMBER",
      "body": "@jgarzik good suggestion on bitcoin-configh.h, thanks. Done. As for the header order, I've changed it as requested, though I would disagree and say that if (in-project) include order matters, something else is broken somewhere. But that's way out of scope here :)\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21519185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "mentioned",
      "id": 57945988,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTc5NDU5ODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/57945988",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T21:54:05Z"
    },
    {
      "event": "subscribed",
      "id": 57945989,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU3OTQ1OTg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/57945989",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T21:54:05Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGQ4ZjhiMGE5NGFhZDQ5Y2Q3ZmQyYTRiZjgzYmM4MTcwNWY1MjM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/add8f8b0a94aad49cd7fd2a4bf83bc81705f5234",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/add8f8b0a94aad49cd7fd2a4bf83bc81705f5234",
      "tree": {
        "sha": "78f7c4fe0f1dc6c0c6bc46be0d67ff55b95f77ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78f7c4fe0f1dc6c0c6bc46be0d67ff55b95f77ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b9711199b7c4b986ee648b277a1479745ac65cd",
          "sha": "2b9711199b7c4b986ee648b277a1479745ac65cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2b9711199b7c4b986ee648b277a1479745ac65cd"
        }
      ],
      "message": "autotools: always include bitcoin-config.h first",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-24T21:54:17Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-24T21:54:17Z"
      },
      "sha": "add8f8b0a94aad49cd7fd2a4bf83bc81705f5234"
    },
    {
      "event": "commented",
      "id": 21519668,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTE5NjY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21519668",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T22:00:55Z",
      "updated_at": "2013-07-24T22:00:55Z",
      "author_association": "MEMBER",
      "body": "@jgarzik as for BitcoinPullTester, I'm not sure. It seems to have a hard-coded build process. If that's the case, it should change to:\n\n```\n./autogen.sh && ./configure && make check\n```\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21519668",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "mentioned",
      "id": 57947050,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTc5NDcwNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/57947050",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T22:00:55Z"
    },
    {
      "event": "subscribed",
      "id": 57947051,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDU3OTQ3MDUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/57947051",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-24T22:00:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzdlOTc3Yjg4N2UwOGVhMzY3MzcyMGIzZTU2MjIwYTUxZmUyNWNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc7e977b887e08ea3673720b3e56220a51fe25ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bc7e977b887e08ea3673720b3e56220a51fe25ca",
      "tree": {
        "sha": "106cef8542cb836f51e5229c76b13cfe005f6bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/106cef8542cb836f51e5229c76b13cfe005f6bca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/add8f8b0a94aad49cd7fd2a4bf83bc81705f5234",
          "sha": "add8f8b0a94aad49cd7fd2a4bf83bc81705f5234",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/add8f8b0a94aad49cd7fd2a4bf83bc81705f5234"
        }
      ],
      "message": "autotools: fix bad copy/paste",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-25T03:28:03Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-25T03:28:03Z"
      },
      "sha": "bc7e977b887e08ea3673720b3e56220a51fe25ca"
    },
    {
      "event": "commented",
      "id": 21533832,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTMzODMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21533832",
      "actor": {
        "login": "gavinandresen",
        "id": 331997,
        "node_id": "MDQ6VXNlcjMzMTk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gavinandresen",
        "html_url": "https://github.com/gavinandresen",
        "followers_url": "https://api.github.com/users/gavinandresen/followers",
        "following_url": "https://api.github.com/users/gavinandresen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gavinandresen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gavinandresen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
        "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
        "repos_url": "https://api.github.com/users/gavinandresen/repos",
        "events_url": "https://api.github.com/users/gavinandresen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-25T05:22:31Z",
      "updated_at": "2013-07-25T05:22:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "RE: the pull tester:\n\nThe pull tester build/test script lives at:\n   https://github.com/TheBlueMatt/test-scripts/blob/master/build-script.sh\n\nA patch that checks for configure.ac (or whatever) and Does the Right Thing in the right places would be nifty.\n",
      "user": {
        "login": "gavinandresen",
        "id": 331997,
        "node_id": "MDQ6VXNlcjMzMTk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gavinandresen",
        "html_url": "https://github.com/gavinandresen",
        "followers_url": "https://api.github.com/users/gavinandresen/followers",
        "following_url": "https://api.github.com/users/gavinandresen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gavinandresen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gavinandresen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
        "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
        "repos_url": "https://api.github.com/users/gavinandresen/repos",
        "events_url": "https://api.github.com/users/gavinandresen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21533832",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzg0ZWExOTE5M2M2Yzc0MmJhMjI5ZDU3MmVhZDhkYjhlYjJjOWRh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7784ea19193c6c742ba229d572ead8db8eb2c9da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7784ea19193c6c742ba229d572ead8db8eb2c9da",
      "tree": {
        "sha": "d88392b246dbbcf2c3d5f9ee13bebf8acc09a868",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d88392b246dbbcf2c3d5f9ee13bebf8acc09a868"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc7e977b887e08ea3673720b3e56220a51fe25ca",
          "sha": "bc7e977b887e08ea3673720b3e56220a51fe25ca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bc7e977b887e08ea3673720b3e56220a51fe25ca"
        }
      ],
      "message": "autotools: add windows-deploy target\n\nThis uses makensis to create the win32 installer exe.\n\nUsage: make windows-deploy",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-25T20:50:55Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-25T20:28:29Z"
      },
      "sha": "7784ea19193c6c742ba229d572ead8db8eb2c9da"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWQyNTU4NzFiZTUyMzc3M2MwN2ZjM2FjNjRmN2Q1ZjAzMDMyMDQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bad255871be523773c07fc3ac64f7d5f03032041",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bad255871be523773c07fc3ac64f7d5f03032041",
      "tree": {
        "sha": "fb79f42d64818140a4e983c8a0581626e17992d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb79f42d64818140a4e983c8a0581626e17992d8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7784ea19193c6c742ba229d572ead8db8eb2c9da",
          "sha": "7784ea19193c6c742ba229d572ead8db8eb2c9da",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7784ea19193c6c742ba229d572ead8db8eb2c9da"
        }
      ],
      "message": "autotools: remove timestamps from qt generated files",
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-25T23:34:41Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-07-25T23:34:41Z"
      },
      "sha": "bad255871be523773c07fc3ac64f7d5f03032041"
    },
    {
      "event": "commented",
      "id": 21594611,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTk0NjEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21594611",
      "actor": {
        "login": "BitcoinPullTester",
        "id": 2110907,
        "node_id": "MDQ6VXNlcjIxMTA5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinPullTester",
        "html_url": "https://github.com/BitcoinPullTester",
        "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
        "following_url": "https://api.github.com/users/BitcoinPullTester/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinPullTester/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinPullTester/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
        "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
        "events_url": "https://api.github.com/users/BitcoinPullTester/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-07-26T00:36:07Z",
      "updated_at": "2013-07-26T00:36:07Z",
      "author_association": "NONE",
      "body": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/bad255871be523773c07fc3ac64f7d5f03032041 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
      "user": {
        "login": "BitcoinPullTester",
        "id": 2110907,
        "node_id": "MDQ6VXNlcjIxMTA5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinPullTester",
        "html_url": "https://github.com/BitcoinPullTester",
        "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
        "following_url": "https://api.github.com/users/BitcoinPullTester/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinPullTester/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinPullTester/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
        "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
        "events_url": "https://api.github.com/users/BitcoinPullTester/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-21594611",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 22825319,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyODI1MzE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22825319",
      "actor": {
        "login": "wtogami",
        "id": 93665,
        "node_id": "MDQ6VXNlcjkzNjY1",
        "avatar_url": "https://avatars.githubusercontent.com/u/93665?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wtogami",
        "html_url": "https://github.com/wtogami",
        "followers_url": "https://api.github.com/users/wtogami/followers",
        "following_url": "https://api.github.com/users/wtogami/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/wtogami/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/wtogami/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/wtogami/subscriptions",
        "organizations_url": "https://api.github.com/users/wtogami/orgs",
        "repos_url": "https://api.github.com/users/wtogami/repos",
        "events_url": "https://api.github.com/users/wtogami/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/wtogami/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-08-18T05:59:19Z",
      "updated_at": "2013-08-18T05:59:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "What needs to be done to move this forward?\n",
      "user": {
        "login": "wtogami",
        "id": 93665,
        "node_id": "MDQ6VXNlcjkzNjY1",
        "avatar_url": "https://avatars.githubusercontent.com/u/93665?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wtogami",
        "html_url": "https://github.com/wtogami",
        "followers_url": "https://api.github.com/users/wtogami/followers",
        "following_url": "https://api.github.com/users/wtogami/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/wtogami/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/wtogami/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/wtogami/subscriptions",
        "organizations_url": "https://api.github.com/users/wtogami/orgs",
        "repos_url": "https://api.github.com/users/wtogami/repos",
        "events_url": "https://api.github.com/users/wtogami/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/wtogami/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-22825319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 22831012,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyODMxMDEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22831012",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-08-18T14:05:41Z",
      "updated_at": "2013-08-18T14:08:42Z",
      "author_association": "MEMBER",
      "body": "I believe all that is left is rebasing, squashing, removing the old makefiles, and updating some documentation?\n\nFixing determinism can be done after merge, IMHO, but the build should work on all supported environments. Fixing pulltester can only be done after merging as well.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-22831012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 22902506,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTAyNTA2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22902506",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-08-19T20:41:56Z",
      "updated_at": "2013-08-19T20:41:56Z",
      "author_association": "MEMBER",
      "body": "I have a bunch of work in a local branch that needs to be cleaned up and pushed here.\n\nI'll have this merge-ready without fail by this time next week (my schedule is back to normal then).\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-22902506",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "commented",
      "id": 23310487,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzEwNDg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310487",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-08-27T03:11:30Z",
      "updated_at": "2013-08-27T03:11:30Z",
      "author_association": "MEMBER",
      "body": "Closing in favor of a new (final) PR.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-23310487",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "closed",
      "id": 62564575,
      "node_id": "MDExOkNsb3NlZEV2ZW50NjI1NjQ1NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/62564575",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-08-27T03:11:30Z"
    },
    {
      "event": "commented",
      "id": 23310937,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzEwOTM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310937",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-08-27T03:27:28Z",
      "updated_at": "2013-08-27T03:28:26Z",
      "author_association": "MEMBER",
      "body": "Edit: Whoops, fixed link.\nContinued at https://github.com/bitcoin/bitcoin/pull/2943.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#issuecomment-23310937",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/2805"
    },
    {
      "event": "referenced",
      "id": 2255311255,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIyNTUzMTEyNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2255311255",
      "actor": {
        "login": "Bushstar",
        "id": 5293433,
        "node_id": "MDQ6VXNlcjUyOTM0MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5293433?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bushstar",
        "html_url": "https://github.com/Bushstar",
        "followers_url": "https://api.github.com/users/Bushstar/followers",
        "following_url": "https://api.github.com/users/Bushstar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bushstar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bushstar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bushstar/subscriptions",
        "organizations_url": "https://api.github.com/users/Bushstar/orgs",
        "repos_url": "https://api.github.com/users/Bushstar/repos",
        "events_url": "https://api.github.com/users/Bushstar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bushstar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "81eeff1c546a5e9abb25780fb918902143850ce4",
      "commit_url": "https://api.github.com/repos/Bushstar/omnicore/commits/81eeff1c546a5e9abb25780fb918902143850ce4",
      "created_at": "2019-04-05T09:46:11Z"
    },
    {
      "event": "locked",
      "id": 5271347263,
      "node_id": "LOE_lADOABII584A9zA3zwAAAAE6MmA_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271347263",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T10:23:06Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234858",
      "pull_request_review_id": null,
      "id": 5234858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4NTg=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],",
      "path": "configure.ac",
      "position": null,
      "original_position": 34,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AC_ARG_WITH is for dependencies.\n",
      "created_at": "2013-07-17T05:26:24Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234860",
      "pull_request_review_id": null,
      "id": 5234860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4NjA=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],",
      "path": "configure.ac",
      "position": null,
      "original_position": 40,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AC_ARG_ENABLE([upnp], ...) makes sense here (after the dependency is moved to AC_ARG_WITH)\n",
      "created_at": "2013-07-17T05:26:49Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234862",
      "pull_request_review_id": null,
      "id": 5234862,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4NjI=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME",
      "path": "configure.ac",
      "position": 22,
      "original_position": 19,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't it be better to just edit the gitian yml to not set it until after configure?\n",
      "created_at": "2013-07-17T05:27:36Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234875",
      "pull_request_review_id": null,
      "id": 5234875,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4NzU=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.",
      "path": "configure.ac",
      "position": null,
      "original_position": 28,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather, you mean --disable-maintainer-mode can...\n",
      "created_at": "2013-07-17T05:31:15Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234882",
      "pull_request_review_id": null,
      "id": 5234882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4ODI=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME",
      "path": "configure.ac",
      "position": 22,
      "original_position": 19,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, that doesn't work. Makefile attempts to re-run configure because it think's it's been touched post-configure.\n\nBesides, I would like to be able to create deterministic builds without the use of gitian. For now they're only deterministic relative to the builder, but I hope to improve that soon.\n",
      "created_at": "2013-07-17T05:31:55Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234883",
      "pull_request_review_id": null,
      "id": 5234883,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4ODM=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],",
      "path": "configure.ac",
      "position": null,
      "original_position": 54,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AC_ARG_WITH([qt],...)\n",
      "created_at": "2013-07-17T05:32:05Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234883",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234884",
      "pull_request_review_id": null,
      "id": 5234884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4ODQ=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,",
      "path": "configure.ac",
      "position": null,
      "original_position": 61,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is usually a property of CXXFLAGS passed to configure.\n",
      "created_at": "2013-07-17T05:32:28Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234887",
      "pull_request_review_id": null,
      "id": 5234887,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4ODc=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],",
      "path": "configure.ac",
      "position": null,
      "original_position": 34,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will change.\n",
      "created_at": "2013-07-17T05:32:39Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234890",
      "pull_request_review_id": null,
      "id": 5234890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4OTA=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],",
      "path": "configure.ac",
      "position": null,
      "original_position": 72,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AC_ARG_WITH([qrencode],...)\n",
      "created_at": "2013-07-17T05:33:02Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234892",
      "pull_request_review_id": null,
      "id": 5234892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4OTI=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],",
      "path": "configure.ac",
      "position": null,
      "original_position": 79,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AC_ARG_WITH([qtdbus],...)\n",
      "created_at": "2013-07-17T05:33:19Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234899",
      "pull_request_review_id": null,
      "id": 5234899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ4OTk=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.",
      "path": "configure.ac",
      "position": null,
      "original_position": 28,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct, will fix.\n",
      "created_at": "2013-07-17T05:33:51Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234900",
      "pull_request_review_id": null,
      "id": 5234900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5MDA=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],",
      "path": "configure.ac",
      "position": null,
      "original_position": 84,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also usually a property of CXXFLAGS\n",
      "created_at": "2013-07-17T05:34:02Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234903",
      "pull_request_review_id": null,
      "id": 5234903,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5MDM=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],",
      "path": "configure.ac",
      "position": 93,
      "original_position": 90,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This shouldn't be necessary... ccache is transparent\n",
      "created_at": "2013-07-17T05:34:18Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 93,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234912",
      "pull_request_review_id": null,
      "id": 5234912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5MTI=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,",
      "path": "configure.ac",
      "position": null,
      "original_position": 61,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was added to mimic the debug flags in the current makefile, in an attempt to avoid complaints about missing features in the new buildsystem. I agree that it should not be here long-term.\n",
      "created_at": "2013-07-17T05:35:26Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234915",
      "pull_request_review_id": null,
      "id": 5234915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5MTU=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],",
      "path": "configure.ac",
      "position": null,
      "original_position": 84,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See above\n",
      "created_at": "2013-07-17T05:36:02Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234929",
      "pull_request_review_id": null,
      "id": 5234929,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5Mjk=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],",
      "path": "configure.ac",
      "position": 93,
      "original_position": 90,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Only if CXX is specified. Many other projects use this trick, it was added here for convenience. I can remove if necessary.\n",
      "created_at": "2013-07-17T05:37:29Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234929",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 93,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234942",
      "pull_request_review_id": null,
      "id": 5234942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5NDI=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 123,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "-frandom-seed should be different for every file compiled!\n",
      "created_at": "2013-07-17T05:39:08Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234966",
      "pull_request_review_id": null,
      "id": 5234966,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5NjY=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": 252,
      "original_position": 243,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't it be better to just define MSG_NOSIGNAL here and get rid of the ifdefs all over that just define it?\n",
      "created_at": "2013-07-17T05:41:44Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 252,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234977",
      "pull_request_review_id": null,
      "id": 5234977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5Nzc=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 123,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was pulled from the old makefiles and gitian descriptors. It's required for deterministic builds.\n",
      "created_at": "2013-07-17T05:42:43Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234990",
      "pull_request_review_id": null,
      "id": 5234990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5OTA=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,",
      "path": "configure.ac",
      "position": 70,
      "original_position": 67,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "qt and tests should probably be replaced by a --with-frontends=bitcoind,bitcoin-qt,test_bitcoin so it's cleanly extensible\nEven if we only support building one at a time right now, doing this now will make things nicer in the future when all can be built together.\n",
      "created_at": "2013-07-17T05:43:29Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234995",
      "pull_request_review_id": null,
      "id": 5234995,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ5OTU=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": 252,
      "original_position": 243,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's nothing to define it to.. the test is to see if the host toolchain defines it. If not, a definition must be spoofed as is currently done.\n",
      "created_at": "2013-07-17T05:44:06Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5234995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5234995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 252,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235001",
      "pull_request_review_id": null,
      "id": 5235001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwMDE=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 270,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If boost chrono is available, it is probably needed.\nThis isn't an OS-specific thing - newer boost require it on OSX and Linux too.\nAnd in cases it isn't, we could use --as-needed...\n",
      "created_at": "2013-07-17T05:44:43Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235017",
      "pull_request_review_id": null,
      "id": 5235017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwMTc=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,",
      "path": "configure.ac",
      "position": 70,
      "original_position": 67,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For qt/bitcoind, I completely agree. Disagree on tests though. --disable-tests is very common, and one of the first things likely to drive a distro package maintainer crazy if missing.\n",
      "created_at": "2013-07-17T05:45:42Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235021",
      "pull_request_review_id": null,
      "id": 5235021,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwMjE=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"\n+fi\n+\n+if test x$use_pkgconfig = xyes; then\n+  : #NOP\n+  m4_ifdef(\n+    [PKG_CHECK_MODULES],\n+    [\n+      PKG_CHECK_MODULES([SSL], [libssl], [INCLUDES=\"$INCLUDES $SSL_CFLAGS\"; LIBS=\"$LIBS $SSL_LIBS\"], [AC_MSG_ERROR(openssl  not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [INCLUDES=\"$CRYPTO_CFLAGS\"; LIBS=\"$LIBS $CRYPTO_LIBS\"], [AC_MSG_ERROR(libcrypto  not found.)])\n+\n+      if test x$use_qt = xyes; then\n+        PKG_CHECK_MODULES([QT], [QtCore QtGui QtNetwork], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n+        if test x$use_tests = xyes; then\n+          PKG_CHECK_MODULES([QT_TEST], [QtTest], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+        fi\n+        if test x$use_dbus != xno; then\n+          PKG_CHECK_MODULES([QT_DBUS], [QtDBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        fi\n+      fi\n+      if test x$use_qr != xno; then\n+        PKG_CHECK_MODULES([QR], [libqrencode], [INCLUDES=\"$QR_CFLAGS\"; LIBS=\"$LIBS $QR_LIBS\"; have_qrencode=yes], [have_qrencode=no])\n+      fi\n+    ]\n+  )\n+else\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n+  AC_CHECK_LIB([crypto],      [main],, AC_MSG_ERROR(libcrypto missing))\n+\n+  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n+  AC_CHECK_LIB([ssl],         [main],, AC_MSG_ERROR(libssl missing))\n+\n+  if test x$use_qt = xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\n+    if test x$qt_lib_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_lib_path\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    AC_CHECK_LIB([qcncodecs],      [main],, AC_MSG_ERROR(libqcncodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qjpcodecs],      [main],, AC_MSG_ERROR(libqjpcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qkrcodecs],      [main],, AC_MSG_ERROR(libqkrcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qtwcodecs],      [main],, AC_MSG_ERROR(libqtwcodecs not found. Install it or use --disable-qt.))",
      "path": "configure.ac",
      "position": null,
      "original_position": 316,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Huh? Why do we need Chinese, Japanese, Korean, and Taiwanese codecs to compile Bitcoin-Qt???\n",
      "created_at": "2013-07-17T05:46:10Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235028",
      "pull_request_review_id": null,
      "id": 5235028,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwMjg=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 270,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Iirc for the first autotools attempt it was windows only. I suppose that's changed now. Will fix.\n",
      "created_at": "2013-07-17T05:46:52Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235033",
      "pull_request_review_id": null,
      "id": 5235033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwMzM=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"\n+fi\n+\n+if test x$use_pkgconfig = xyes; then\n+  : #NOP\n+  m4_ifdef(\n+    [PKG_CHECK_MODULES],\n+    [\n+      PKG_CHECK_MODULES([SSL], [libssl], [INCLUDES=\"$INCLUDES $SSL_CFLAGS\"; LIBS=\"$LIBS $SSL_LIBS\"], [AC_MSG_ERROR(openssl  not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [INCLUDES=\"$CRYPTO_CFLAGS\"; LIBS=\"$LIBS $CRYPTO_LIBS\"], [AC_MSG_ERROR(libcrypto  not found.)])\n+\n+      if test x$use_qt = xyes; then\n+        PKG_CHECK_MODULES([QT], [QtCore QtGui QtNetwork], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n+        if test x$use_tests = xyes; then\n+          PKG_CHECK_MODULES([QT_TEST], [QtTest], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+        fi\n+        if test x$use_dbus != xno; then\n+          PKG_CHECK_MODULES([QT_DBUS], [QtDBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        fi\n+      fi\n+      if test x$use_qr != xno; then\n+        PKG_CHECK_MODULES([QR], [libqrencode], [INCLUDES=\"$QR_CFLAGS\"; LIBS=\"$LIBS $QR_LIBS\"; have_qrencode=yes], [have_qrencode=no])\n+      fi\n+    ]\n+  )\n+else\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n+  AC_CHECK_LIB([crypto],      [main],, AC_MSG_ERROR(libcrypto missing))\n+\n+  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n+  AC_CHECK_LIB([ssl],         [main],, AC_MSG_ERROR(libssl missing))\n+\n+  if test x$use_qt = xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\n+    if test x$qt_lib_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_lib_path\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    AC_CHECK_LIB([qcncodecs],      [main],, AC_MSG_ERROR(libqcncodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qjpcodecs],      [main],, AC_MSG_ERROR(libqjpcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qkrcodecs],      [main],, AC_MSG_ERROR(libqkrcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qtwcodecs],      [main],, AC_MSG_ERROR(libqtwcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([imm32],      [main],, AC_MSG_ERROR(libimm32 not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([QtCore],      [main],, AC_MSG_ERROR(libQtCore not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([QtGui],      [main],, AC_MSG_ERROR(libQtGui not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([QtNetwork],      [main],, AC_MSG_ERROR(libQtNetwork not found. Install it or use --disable-qt.))\n+    QT_LIBS=\"$LIBS\"\n+    LIBS=\"$TEMP_LIBS\"\n+\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    if test x$qt_include_path != x; then\n+      QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n+      CPPFLAGS=\"$CPPFLAGS $QT_INCLUDES\"\n+    fi\n+    AC_CHECK_HEADER([QtPlugin],, AC_MSG_ERROR(QtCore headers missing. Install them or use --disable-qt.),)\n+    AC_CHECK_HEADER([QApplication],, AC_MSG_ERROR(QtGUI headers missing. Install them or use --disable-qt.),)\n+    AC_CHECK_HEADER([QLocalSocket],, AC_MSG_ERROR(QtNetwork headers missing. Install them or use --disable-qt.),)\n+\n+    if test x$use_tests = xyes; then\n+      TEMP_LIBS=\"$LIBS\"\n+      LIBS=\n+      if test x$qt_lib_path != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([QtTest],      [main],, have_qt_test=no)\n+      AC_CHECK_HEADER([QTest],, have_qt_test=no)\n+      QT_TEST_LIBS=\"$LIBS\"\n+      LIBS=\"$TEMP_LIBS\"\n+    fi\n+    if test x$use_dbus != xno; then\n+      TEMP_LIBS=\"$LIBS\"\n+      LIBS=\n+      if test x$qt_lib_path != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([QtDBus],      [main],, have_qt_dbus=no)\n+      AC_CHECK_HEADER([QtDBus],, have_qt_dbus=no)\n+      QT_DBUS_LIBS=\"$LIBS\"\n+      LIBS=\"$TEMP_LIBS\"\n+    fi\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+    if test x$use_qr != xno; then\n+      AC_CHECK_LIB([qrencode], [main],, [have_qrencode=no])\n+      AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)\n+    fi\n+  fi\n+fi\n+\n+if test x$use_ipv6 = xyes; then\n+  dnl Check for ipv6 build requirements\n+  AC_MSG_CHECKING(for IPV6 build support)\n+  AC_TRY_LINK([\n+  #if defined(_WINDOWS)\n+  #include <winsock2.h>\n+  #else\n+  #include <sys/types.h>\n+  #include <sys/socket.h>\n+  #include <netinet/in.h>\n+  #endif\n+  ],[\n+  #if !defined(_WINDOWS)\n+  struct in6_addr ipv6Addr;\n+  struct sockaddr_in6 addr;\n+  #endif\n+  int temp = socket(AF_INET6, SOCK_STREAM, 0);],\n+  [AC_MSG_RESULT(yes); have_ipv6=yes; AC_DEFINE(HAVE_IPV6, 1, [Define this symbol if you have ipv6 build support])],\n+  [AC_MSG_RESULT(no)]; have_ipv6=no)\n+fi\n+AC_LANG_POP\n+\n+if test \"x$use_ccache\" != \"xno\"; then\n+  AC_MSG_CHECKING(if ccache should be enabled)\n+  if test x\"$CCACHE\" = x\"none\"; then\n+    if test \"x$use_ccache\" = \"xyes\"; then\n+      AC_MSG_ERROR([ccache not found.]);\n+    else\n+      AC_MSG_NOTICE([ccache not found. Falling back to default CC])\n+      use_ccache=no\n+    fi\n+  else\n+    use_ccache=yes\n+    CC=\"$ac_cv_path_CCACHE $CC\"\n+    CXX=\"$ac_cv_path_CCACHE $CXX\"\n+  fi\n+  AC_MSG_RESULT($use_ccache)\n+fi\n+\n+dnl enable ipv6 support\n+AC_MSG_CHECKING([if ipv6 should be enabled])\n+if test x$have_ipv6 = xno; then\n+  if test x$use_ipv6 = xyes; then\n+     AC_MSG_ERROR(\"ipv6 requested but cannot be built. use --disable-ipv6\")\n+  fi\n+  AC_MSG_RESULT(no)\n+else\n+  if test x$use_ipv6 = xyes; then\n+      AC_MSG_RESULT(yes)\n+      AC_DEFINE([USE_IPV6],[1],[Define if ipv6 support should be compiled in])\n+  else\n+      AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+dnl enable upnp support\n+AC_MSG_CHECKING([if upnp should be enabled])\n+if test x$have_miniupnpc = xno; then\n+  if test x$use_upnp = xyes; then\n+     AC_MSG_ERROR(\"upnp requested but cannot be built. use --disable-upnp\")\n+  fi\n+  AC_MSG_RESULT(no)\n+else\n+  if test x$use_upnp != xno; then\n+    AC_MSG_RESULT(yes)\n+    AC_MSG_CHECKING([if upnp should be on by default])\n+    use_upnp=yes\n+    upnp_setting=0\n+    if test x$use_upnp_default != xno; then\n+      use_upnp_default=yes\n+      upnp_setting=1\n+    fi\n+    AC_MSG_RESULT($use_upnp_default)\n+    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[Define to 1 for upnp runtime support])\n+    if test x$TARGET_OS = xwindows; then\n+      CPPFLAGS=\"$CPPFLAGS -DSTATICLIB\"\n+    fi\n+  else\n+    AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+dnl enable qt support\n+AC_MSG_CHECKING([if qt should be enabled])\n+if test x$use_qt = xyes; then\n+  if test x$have_qt = xno; then\n+     AC_MSG_ERROR(\"qt support requested but qt could not be located. use --disable-qt\")\n+  fi\n+  if test x$MOC = x; then\n+    AC_MSG_ERROR(\"qt support requested but moc was not found. use --disable-qt\")\n+  fi\n+  if test x$UIC = x; then\n+    AC_MSG_WARN(\"qt support requested but uic was not found.\")\n+  fi\n+  if test x$RCC = x; then\n+    AC_MSG_WARN(\"qt support requested but rcc was not found.\")\n+  fi\n+  if test x$LRELEASE = x; then\n+    AC_MSG_WARN(\"qt support requested but lrelease was not found.\")\n+  fi\n+  if test x$use_tests = xyes; then\n+    if test x$have_qt_test = xno; then\n+      AC_MSG_ERROR(\"libQtTest not found. Use --disable-tests or --disable-qt.\")\n+    fi\n+  fi\n+  if test x$have_qt_dbus = xno;  then\n+    use_dbus=no\n+    if test x$use_dbus = xyes; then\n+      AC_MSG_ERROR(\"libQtDBus not found. Use --disable-dbus.\")\n+    fi\n+  fi\n+  BUILD_QT=qt\n+fi\n+\n+AC_MSG_RESULT($use_qt)\n+\n+dnl these are only used when qt is enabled",
      "path": "configure.ac",
      "position": 535,
      "original_position": 479,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably shouldn't even check for them if Bitcoin-Qt isn't being built?\n",
      "created_at": "2013-07-17T05:47:25Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 535,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235053",
      "pull_request_review_id": null,
      "id": 5235053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwNTM=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"\n+fi\n+\n+if test x$use_pkgconfig = xyes; then\n+  : #NOP\n+  m4_ifdef(\n+    [PKG_CHECK_MODULES],\n+    [\n+      PKG_CHECK_MODULES([SSL], [libssl], [INCLUDES=\"$INCLUDES $SSL_CFLAGS\"; LIBS=\"$LIBS $SSL_LIBS\"], [AC_MSG_ERROR(openssl  not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [INCLUDES=\"$CRYPTO_CFLAGS\"; LIBS=\"$LIBS $CRYPTO_LIBS\"], [AC_MSG_ERROR(libcrypto  not found.)])\n+\n+      if test x$use_qt = xyes; then\n+        PKG_CHECK_MODULES([QT], [QtCore QtGui QtNetwork], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n+        if test x$use_tests = xyes; then\n+          PKG_CHECK_MODULES([QT_TEST], [QtTest], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+        fi\n+        if test x$use_dbus != xno; then\n+          PKG_CHECK_MODULES([QT_DBUS], [QtDBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        fi\n+      fi\n+      if test x$use_qr != xno; then\n+        PKG_CHECK_MODULES([QR], [libqrencode], [INCLUDES=\"$QR_CFLAGS\"; LIBS=\"$LIBS $QR_LIBS\"; have_qrencode=yes], [have_qrencode=no])\n+      fi\n+    ]\n+  )\n+else\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n+  AC_CHECK_LIB([crypto],      [main],, AC_MSG_ERROR(libcrypto missing))\n+\n+  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n+  AC_CHECK_LIB([ssl],         [main],, AC_MSG_ERROR(libssl missing))\n+\n+  if test x$use_qt = xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\n+    if test x$qt_lib_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_lib_path\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    AC_CHECK_LIB([qcncodecs],      [main],, AC_MSG_ERROR(libqcncodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qjpcodecs],      [main],, AC_MSG_ERROR(libqjpcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qkrcodecs],      [main],, AC_MSG_ERROR(libqkrcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qtwcodecs],      [main],, AC_MSG_ERROR(libqtwcodecs not found. Install it or use --disable-qt.))",
      "path": "configure.ac",
      "position": null,
      "original_position": 316,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See:\nbitcoin-qt.pro:    QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets\nand:\nsrc/qt/bitcoin.cpp:Q_IMPORT_PLUGIN(qtwcodecs)\n\nWin32 links plugins in static.\n\nRather than changing behavior, I opted to take the (hopefully) less controversial route in order to get the buildsystem merged in more easily.\n",
      "created_at": "2013-07-17T05:49:24Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235067",
      "pull_request_review_id": null,
      "id": 5235067,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwNjc=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME",
      "path": "configure.ac",
      "position": 22,
      "original_position": 19,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you use --disable-maintainer-mode in gitian's configure? That should solve it.\n",
      "created_at": "2013-07-17T05:51:27Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235080",
      "pull_request_review_id": null,
      "id": 5235080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwODA=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"\n+fi\n+\n+if test x$use_pkgconfig = xyes; then\n+  : #NOP\n+  m4_ifdef(\n+    [PKG_CHECK_MODULES],\n+    [\n+      PKG_CHECK_MODULES([SSL], [libssl], [INCLUDES=\"$INCLUDES $SSL_CFLAGS\"; LIBS=\"$LIBS $SSL_LIBS\"], [AC_MSG_ERROR(openssl  not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [INCLUDES=\"$CRYPTO_CFLAGS\"; LIBS=\"$LIBS $CRYPTO_LIBS\"], [AC_MSG_ERROR(libcrypto  not found.)])\n+\n+      if test x$use_qt = xyes; then\n+        PKG_CHECK_MODULES([QT], [QtCore QtGui QtNetwork], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n+        if test x$use_tests = xyes; then\n+          PKG_CHECK_MODULES([QT_TEST], [QtTest], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+        fi\n+        if test x$use_dbus != xno; then\n+          PKG_CHECK_MODULES([QT_DBUS], [QtDBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        fi\n+      fi\n+      if test x$use_qr != xno; then\n+        PKG_CHECK_MODULES([QR], [libqrencode], [INCLUDES=\"$QR_CFLAGS\"; LIBS=\"$LIBS $QR_LIBS\"; have_qrencode=yes], [have_qrencode=no])\n+      fi\n+    ]\n+  )\n+else\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n+  AC_CHECK_LIB([crypto],      [main],, AC_MSG_ERROR(libcrypto missing))\n+\n+  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n+  AC_CHECK_LIB([ssl],         [main],, AC_MSG_ERROR(libssl missing))\n+\n+  if test x$use_qt = xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\n+    if test x$qt_lib_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_lib_path\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    AC_CHECK_LIB([qcncodecs],      [main],, AC_MSG_ERROR(libqcncodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qjpcodecs],      [main],, AC_MSG_ERROR(libqjpcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qkrcodecs],      [main],, AC_MSG_ERROR(libqkrcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([qtwcodecs],      [main],, AC_MSG_ERROR(libqtwcodecs not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([imm32],      [main],, AC_MSG_ERROR(libimm32 not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([QtCore],      [main],, AC_MSG_ERROR(libQtCore not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([QtGui],      [main],, AC_MSG_ERROR(libQtGui not found. Install it or use --disable-qt.))\n+    AC_CHECK_LIB([QtNetwork],      [main],, AC_MSG_ERROR(libQtNetwork not found. Install it or use --disable-qt.))\n+    QT_LIBS=\"$LIBS\"\n+    LIBS=\"$TEMP_LIBS\"\n+\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    if test x$qt_include_path != x; then\n+      QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n+      CPPFLAGS=\"$CPPFLAGS $QT_INCLUDES\"\n+    fi\n+    AC_CHECK_HEADER([QtPlugin],, AC_MSG_ERROR(QtCore headers missing. Install them or use --disable-qt.),)\n+    AC_CHECK_HEADER([QApplication],, AC_MSG_ERROR(QtGUI headers missing. Install them or use --disable-qt.),)\n+    AC_CHECK_HEADER([QLocalSocket],, AC_MSG_ERROR(QtNetwork headers missing. Install them or use --disable-qt.),)\n+\n+    if test x$use_tests = xyes; then\n+      TEMP_LIBS=\"$LIBS\"\n+      LIBS=\n+      if test x$qt_lib_path != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([QtTest],      [main],, have_qt_test=no)\n+      AC_CHECK_HEADER([QTest],, have_qt_test=no)\n+      QT_TEST_LIBS=\"$LIBS\"\n+      LIBS=\"$TEMP_LIBS\"\n+    fi\n+    if test x$use_dbus != xno; then\n+      TEMP_LIBS=\"$LIBS\"\n+      LIBS=\n+      if test x$qt_lib_path != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([QtDBus],      [main],, have_qt_dbus=no)\n+      AC_CHECK_HEADER([QtDBus],, have_qt_dbus=no)\n+      QT_DBUS_LIBS=\"$LIBS\"\n+      LIBS=\"$TEMP_LIBS\"\n+    fi\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+    if test x$use_qr != xno; then\n+      AC_CHECK_LIB([qrencode], [main],, [have_qrencode=no])\n+      AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)\n+    fi\n+  fi\n+fi\n+\n+if test x$use_ipv6 = xyes; then\n+  dnl Check for ipv6 build requirements\n+  AC_MSG_CHECKING(for IPV6 build support)\n+  AC_TRY_LINK([\n+  #if defined(_WINDOWS)\n+  #include <winsock2.h>\n+  #else\n+  #include <sys/types.h>\n+  #include <sys/socket.h>\n+  #include <netinet/in.h>\n+  #endif\n+  ],[\n+  #if !defined(_WINDOWS)\n+  struct in6_addr ipv6Addr;\n+  struct sockaddr_in6 addr;\n+  #endif\n+  int temp = socket(AF_INET6, SOCK_STREAM, 0);],\n+  [AC_MSG_RESULT(yes); have_ipv6=yes; AC_DEFINE(HAVE_IPV6, 1, [Define this symbol if you have ipv6 build support])],\n+  [AC_MSG_RESULT(no)]; have_ipv6=no)\n+fi\n+AC_LANG_POP\n+\n+if test \"x$use_ccache\" != \"xno\"; then\n+  AC_MSG_CHECKING(if ccache should be enabled)\n+  if test x\"$CCACHE\" = x\"none\"; then\n+    if test \"x$use_ccache\" = \"xyes\"; then\n+      AC_MSG_ERROR([ccache not found.]);\n+    else\n+      AC_MSG_NOTICE([ccache not found. Falling back to default CC])\n+      use_ccache=no\n+    fi\n+  else\n+    use_ccache=yes\n+    CC=\"$ac_cv_path_CCACHE $CC\"\n+    CXX=\"$ac_cv_path_CCACHE $CXX\"\n+  fi\n+  AC_MSG_RESULT($use_ccache)\n+fi\n+\n+dnl enable ipv6 support\n+AC_MSG_CHECKING([if ipv6 should be enabled])\n+if test x$have_ipv6 = xno; then\n+  if test x$use_ipv6 = xyes; then\n+     AC_MSG_ERROR(\"ipv6 requested but cannot be built. use --disable-ipv6\")\n+  fi\n+  AC_MSG_RESULT(no)\n+else\n+  if test x$use_ipv6 = xyes; then\n+      AC_MSG_RESULT(yes)\n+      AC_DEFINE([USE_IPV6],[1],[Define if ipv6 support should be compiled in])\n+  else\n+      AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+dnl enable upnp support\n+AC_MSG_CHECKING([if upnp should be enabled])\n+if test x$have_miniupnpc = xno; then\n+  if test x$use_upnp = xyes; then\n+     AC_MSG_ERROR(\"upnp requested but cannot be built. use --disable-upnp\")\n+  fi\n+  AC_MSG_RESULT(no)\n+else\n+  if test x$use_upnp != xno; then\n+    AC_MSG_RESULT(yes)\n+    AC_MSG_CHECKING([if upnp should be on by default])\n+    use_upnp=yes\n+    upnp_setting=0\n+    if test x$use_upnp_default != xno; then\n+      use_upnp_default=yes\n+      upnp_setting=1\n+    fi\n+    AC_MSG_RESULT($use_upnp_default)\n+    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[Define to 1 for upnp runtime support])\n+    if test x$TARGET_OS = xwindows; then\n+      CPPFLAGS=\"$CPPFLAGS -DSTATICLIB\"\n+    fi\n+  else\n+    AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+dnl enable qt support\n+AC_MSG_CHECKING([if qt should be enabled])\n+if test x$use_qt = xyes; then\n+  if test x$have_qt = xno; then\n+     AC_MSG_ERROR(\"qt support requested but qt could not be located. use --disable-qt\")\n+  fi\n+  if test x$MOC = x; then\n+    AC_MSG_ERROR(\"qt support requested but moc was not found. use --disable-qt\")\n+  fi\n+  if test x$UIC = x; then\n+    AC_MSG_WARN(\"qt support requested but uic was not found.\")\n+  fi\n+  if test x$RCC = x; then\n+    AC_MSG_WARN(\"qt support requested but rcc was not found.\")\n+  fi\n+  if test x$LRELEASE = x; then\n+    AC_MSG_WARN(\"qt support requested but lrelease was not found.\")\n+  fi\n+  if test x$use_tests = xyes; then\n+    if test x$have_qt_test = xno; then\n+      AC_MSG_ERROR(\"libQtTest not found. Use --disable-tests or --disable-qt.\")\n+    fi\n+  fi\n+  if test x$have_qt_dbus = xno;  then\n+    use_dbus=no\n+    if test x$use_dbus = xyes; then\n+      AC_MSG_ERROR(\"libQtDBus not found. Use --disable-dbus.\")\n+    fi\n+  fi\n+  BUILD_QT=qt\n+fi\n+\n+AC_MSG_RESULT($use_qt)\n+\n+dnl these are only used when qt is enabled",
      "path": "configure.ac",
      "position": 535,
      "original_position": 479,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That is the case already.\n\nErr.. looks like the qr lib will be checked anyway, will fix that one.\n",
      "created_at": "2013-07-17T05:52:35Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 535,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235083",
      "pull_request_review_id": null,
      "id": 5235083,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwODM=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 123,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm pretty sure it's only used by gitian right now. Just because gitian does something (in a known/controlled environment) does not mean we want every build doing it... Gitian can still pass CXXFLAGS to configure.\n",
      "created_at": "2013-07-17T05:53:03Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235083",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235090",
      "pull_request_review_id": null,
      "id": 5235090,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUwOTA=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": 252,
      "original_position": 243,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AC_DEFINE([MSG_NOSIGNAL],[0],[Defined if MSG_NOSIGNAL is missing from system headers])\n",
      "created_at": "2013-07-17T05:53:50Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235090",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 252,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235106",
      "pull_request_review_id": null,
      "id": 5235106,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxMDY=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,",
      "path": "configure.ac",
      "position": 70,
      "original_position": 67,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds reasonable to keep tests separate. I'd forgotten the tests vary based on targets anyhow.\n",
      "created_at": "2013-07-17T05:54:53Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235113",
      "pull_request_review_id": null,
      "id": 5235113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxMTM=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+if test x$TARGET_OS = xwindows; then\n+  BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 270,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's a disaster now: we're using it only for Mac and Windows, but that's because we lack any way to detect if it's _really_ needed. Automake fixes this :)\n",
      "created_at": "2013-07-17T05:55:25Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235135",
      "pull_request_review_id": null,
      "id": 5235135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxMzU=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 123,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure that I see the harm, but I'll back down on this until I have something to show.\n",
      "created_at": "2013-07-17T05:58:33Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235145",
      "pull_request_review_id": null,
      "id": 5235145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxNDU=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME",
      "path": "configure.ac",
      "position": 22,
      "original_position": 19,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I verified that it does not. Gitian does use --disable-maintainer-mode anyway though, for a separate reason that I can't recall atm.\n",
      "created_at": "2013-07-17T06:00:06Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235155",
      "pull_request_review_id": null,
      "id": 5235155,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxNTU=",
      "diff_hunk": "@@ -51,24 +40,20 @@ script: |\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  $HOME/qt/src/bin/qmake -spec unsupported/win32-g++-cross MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n-  make $MAKEOPTS\n-  cp release/bitcoin-qt.exe $OUTDIR/\n-  #\n   cd src\n-  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-  export FAKETIME=$REFERENCE_DATETIME\n-  export TZ=UTC\n-  make -f makefile.linux-mingw $MAKEOPTS DEPSDIR=$HOME/build bitcoind.exe USE_UPNP=0 DEBUGFLAGS=\"-frandom-seed=bitcoin\"\n+  ./autogen.sh\n+  CPPFLAGS=\"-I$STAGING/include\" LDFLAGS=\"-L$STAGING/lib\" ./configure --prefix=$STAGING --host=i586-mingw32msvc --with-qt-bindir=$STAGING/bin --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-boost=$STAGING --disable-maintainer-mode --disable-dependency-tracking",
      "path": "contrib/gitian-descriptors/gitian-win32.yml",
      "position": null,
      "original_position": 64,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CPPFLAGS and LDFLAGS should usually be on the right side of ./configure\n",
      "created_at": "2013-07-17T06:02:49Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235161",
      "pull_request_review_id": null,
      "id": 5235161,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxNjE=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": 252,
      "original_position": 243,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That defies all convention. The correct thing would be to have a wrapper.h that includes such headers as necessary, and attempts to define them if missing. Then only one define is needed.\n\nSorry, but a big -1 from me on that one.\n",
      "created_at": "2013-07-17T06:03:40Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235161",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 252,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235172",
      "pull_request_review_id": null,
      "id": 5235172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUxNzI=",
      "diff_hunk": "@@ -51,24 +40,20 @@ script: |\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  $HOME/qt/src/bin/qmake -spec unsupported/win32-g++-cross MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n-  make $MAKEOPTS\n-  cp release/bitcoin-qt.exe $OUTDIR/\n-  #\n   cd src\n-  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-  export FAKETIME=$REFERENCE_DATETIME\n-  export TZ=UTC\n-  make -f makefile.linux-mingw $MAKEOPTS DEPSDIR=$HOME/build bitcoind.exe USE_UPNP=0 DEBUGFLAGS=\"-frandom-seed=bitcoin\"\n+  ./autogen.sh\n+  CPPFLAGS=\"-I$STAGING/include\" LDFLAGS=\"-L$STAGING/lib\" ./configure --prefix=$STAGING --host=i586-mingw32msvc --with-qt-bindir=$STAGING/bin --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-boost=$STAGING --disable-maintainer-mode --disable-dependency-tracking",
      "path": "contrib/gitian-descriptors/gitian-win32.yml",
      "position": null,
      "original_position": 64,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sure.\n",
      "created_at": "2013-07-17T06:05:49Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5235172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5235172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5383531",
      "pull_request_review_id": null,
      "id": 5383531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1MzE=",
      "diff_hunk": "@@ -0,0 +1,546 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+:${CFLAGS=\"\"}\n+:${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_ENABLE([upnp],\n+  [AS_HELP_STRING([--enable-upnp],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$enableval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_ENABLE([qt],\n+  [AS_HELP_STRING([--enable-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$enableval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is no)]),\n+    [use_debug=$enableval],\n+    [use_debug=no])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_ENABLE([qr],\n+  [AS_HELP_STRING([--enable-qr],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$enableval],\n+  [use_qr=auto])\n+\n+AC_ARG_ENABLE([dbus],\n+  [AS_HELP_STRING([--enable-dbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$enableval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [qt_include_path=])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [qt_lib_path=])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path (overridden by pkgconfig)])], [qt_bin_path=$withval], [qt_bin_path=])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [qt_plugin_path=])\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+AC_PROG_MKDIR_P\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib)\n+AC_PATH_PROG([GIT], [git], git)\n+AC_PATH_PROGS([MOC], [moc moc-qt4], moc, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4], uic, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc], rcc, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease], lrelease, $qt_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache,none)\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -frandom-seed=bitcoin\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         CPPFLAGS=\"$CPPFLAGS -I/usr/local/opt/berkeley-db4/include\"\n+         LDFLAGS=\"$LDFLAGS -L/usr/local/opt/berkeley-db4/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([$base_frameworks],[LDFLAGS=\"$LDFLAGS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug != xno; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+AC_LANG_PUSH([C++])\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+AX_CHECK_LINK_FLAG([-Wl,--large-address-aware], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([-pie], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([-dead-strip], [LDFLAGS=\"$LDFLAGS -dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": 252,
      "original_position": 243,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "a36135b92c3eeafee4df4457fb71415af774ed87",
      "in_reply_to_id": null,
      "user": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just a quick question, what about MSG_DONTWAIT? Why not add such a thing for this also?\n",
      "created_at": "2013-07-24T20:45:26Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5383531",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5383531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 252,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5383615",
      "pull_request_review_id": null,
      "id": 5383615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2MTU=",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src \\\n+  -I$(top_srcdir)/src/leveldb/helpers -I$(builddir)/src/qt $(BOOST_INCLUDES)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+bin_PROGRAMS = bitcoin-qt\n+noinst_LIBRARIES = libbitcoinqt.a\n+SUBDIRS = $(BUILD_TEST_QT)\n+DIST_SUBDIRS = test\n+\n+# bitcoin qt core #\n+QT_TS = locale/bitcoin_af_ZA.ts locale/bitcoin_ar.ts locale/bitcoin_bg.ts \\",
      "path": "src/qt/Makefile.am",
      "position": 13,
      "original_position": 13,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
      "in_reply_to_id": null,
      "user": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How are these updated in the future (adding new ones to Bitcoin-Qt happens sometimes, when I create a Transifex sync pull)? \n",
      "created_at": "2013-07-24T20:48:05Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5383615",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5383615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5385121",
      "pull_request_review_id": null,
      "id": 5385121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxMjE=",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src \\\n+  -I$(top_srcdir)/src/leveldb/helpers -I$(builddir)/src/qt $(BOOST_INCLUDES)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+bin_PROGRAMS = bitcoin-qt\n+noinst_LIBRARIES = libbitcoinqt.a\n+SUBDIRS = $(BUILD_TEST_QT)\n+DIST_SUBDIRS = test\n+\n+# bitcoin qt core #\n+QT_TS = locale/bitcoin_af_ZA.ts locale/bitcoin_ar.ts locale/bitcoin_bg.ts \\",
      "path": "src/qt/Makefile.am",
      "position": 13,
      "original_position": 13,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just add them to QT_TS and QT_QM here. Is that what you meant?\n",
      "created_at": "2013-07-24T21:45:01Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5385121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5385121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5391347",
      "pull_request_review_id": null,
      "id": 5391347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzNDc=",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src \\\n+  -I$(top_srcdir)/src/leveldb/helpers -I$(builddir)/src/qt $(BOOST_INCLUDES)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+bin_PROGRAMS = bitcoin-qt\n+noinst_LIBRARIES = libbitcoinqt.a\n+SUBDIRS = $(BUILD_TEST_QT)\n+DIST_SUBDIRS = test\n+\n+# bitcoin qt core #\n+QT_TS = locale/bitcoin_af_ZA.ts locale/bitcoin_ar.ts locale/bitcoin_bg.ts \\",
      "path": "src/qt/Makefile.am",
      "position": 13,
      "original_position": 13,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
      "in_reply_to_id": null,
      "user": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I mean currently the files need to be listed in src/qt/bitcoin.qrc to be usable by Bitcoin-Qt. Does this whole pull move completely away from our bitcoin-qt.pro file and qmake? If that is a dumb question, sorry I'm that Windows guy and makefiles are magic for me ^^.\n",
      "created_at": "2013-07-25T05:47:59Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5391347",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5391347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5394880",
      "pull_request_review_id": null,
      "id": 5394880,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4ODA=",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src \\\n+  -I$(top_srcdir)/src/leveldb/helpers -I$(builddir)/src/qt $(BOOST_INCLUDES)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+bin_PROGRAMS = bitcoin-qt\n+noinst_LIBRARIES = libbitcoinqt.a\n+SUBDIRS = $(BUILD_TEST_QT)\n+DIST_SUBDIRS = test\n+\n+# bitcoin qt core #\n+QT_TS = locale/bitcoin_af_ZA.ts locale/bitcoin_ar.ts locale/bitcoin_bg.ts \\",
      "path": "src/qt/Makefile.am",
      "position": 13,
      "original_position": 13,
      "commit_id": "bad255871be523773c07fc3ac64f7d5f03032041",
      "original_commit_id": "834ee1bb62988cccbaf8a37d5b6e37d4dd7edde8",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No problem.\n\nYes, this does away with the need for qmake, instead we run the same tools that qmake uses, but we run them ourselves instead of describing the process in a .pro file.\n",
      "created_at": "2013-07-25T10:24:14Z",
      "updated_at": "2013-07-25T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/2805#discussion_r5394880",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5394880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/2805"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}