{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
    "id": 97329301,
    "node_id": "MDExOlB1bGxSZXF1ZXN0OTczMjkzMDE=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/9308.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/9308.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/07df40babb0231b2e8a2f42341805b4bbcc4e284",
    "number": 9308,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[test] Add CCoinsViewCache Access/Modify/Write tests",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add more comprehensive unit tests for CCoinsViewCache. Right now it is hard to refactor caching code or fix bugs in the caching logic because you have to try to mentally enumerate all the different states the cache might be in to make sure a change doesn't cause unintended consequences. The new tests explicitly enumerate relevant cache states, documenting and verifying the behavior in each state, so it will be safer and easier to make changes to the caching code in the future.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2016-12-09T15:36:02Z",
    "updated_at": "2021-09-08T11:23:28Z",
    "closed_at": "2016-12-21T11:23:51Z",
    "mergeable_state": "unknown",
    "merged_at": "2016-12-21T11:23:51Z",
    "merge_commit_sha": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ryanofsky:pr/coins-test",
      "ref": "pr/coins-test",
      "sha": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 229522,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:24Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-05-05T12:10:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7f72568e6b15fc139323fb200591a50762f6df0b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 364,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 4,
    "comments": 5
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2RmNDBiYWJiMDIzMWIyZThhMmY0MjM0MTgwNWI0YmJjYzRlMjg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "tree": {
        "sha": "2d1afcf8a7eadc040c2728a6d11abc04883ca52c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d1afcf8a7eadc040c2728a6d11abc04883ca52c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f72568e6b15fc139323fb200591a50762f6df0b",
          "sha": "7f72568e6b15fc139323fb200591a50762f6df0b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f72568e6b15fc139323fb200591a50762f6df0b"
        }
      ],
      "message": "[test] Add CCoinsViewCache Access/Modify/Write tests\n\nAdd more comprehensive unit tests for CCoinsViewCache. Right now it is hard to\nrefactor caching code or fix bugs in the caching logic because you have to try\nto mentally enumerate all the different states the cache might be in to make\nsure a change doesn't cause unintended consequences. The new tests explicitly\nenumerate relevant cache states, documenting and verifying the behavior in each\nstate, so it will be safer and easier to make changes to the caching code in\nthe future.",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-05T23:30:46Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-05T23:30:46Z"
      },
      "sha": "07df40babb0231b2e8a2f42341805b4bbcc4e284"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 888930037,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODg4OTMwMDM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/888930037",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-09T21:09:01Z"
    },
    {
      "event": "labeled",
      "id": 889107603,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDg4OTEwNzYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/889107603",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-10T00:12:43Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 266985899,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2Njk4NTg5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266985899",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T09:29:32Z",
      "updated_at": "2016-12-14T09:29:32Z",
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/9308/commits/03ffa4cfff29d8273859edb030bc0eb823b26e7b, thanks for adding tests for this important system\r\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-266985899",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308"
    },
    {
      "event": "commented",
      "id": 267007755,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzAwNzc1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267007755",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T11:09:51Z",
      "updated_at": "2016-12-14T11:09:51Z",
      "author_association": "MEMBER",
      "body": "Concept ACK 03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-267007755",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308"
    },
    {
      "event": "reviewed",
      "id": 13607529,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2MDc1Mjk=",
      "url": null,
      "actor": null,
      "commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#pullrequestreview-13607529",
      "submitted_at": "2016-12-19T18:06:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
    },
    {
      "event": "reviewed",
      "id": 13625355,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2MjUzNTU=",
      "url": null,
      "actor": null,
      "commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#pullrequestreview-13625355",
      "submitted_at": "2016-12-19T19:36:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
    },
    {
      "event": "commented",
      "id": 268057323,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODA1NzMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/268057323",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-19T19:36:45Z",
      "updated_at": "2016-12-19T19:36:45Z",
      "author_association": "MEMBER",
      "body": "ACK (left a couple of comments to slightly increase test coverage)\r\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-268057323",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 899157941,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk5MTU3OTQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/899157941",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-19T20:04:23Z"
    },
    {
      "event": "merged",
      "id": 901457208,
      "node_id": "MDExOk1lcmdlZEV2ZW50OTAxNDU3MjA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901457208",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "created_at": "2016-12-21T11:23:51Z"
    },
    {
      "event": "closed",
      "id": 901457209,
      "node_id": "MDExOkNsb3NlZEV2ZW50OTAxNDU3MjA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901457209",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-21T11:23:51Z"
    },
    {
      "event": "referenced",
      "id": 901457260,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwMTQ1NzI2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901457260",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0698639a38069cee268f764e7b732d67622fb3df",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0698639a38069cee268f764e7b732d67622fb3df",
      "created_at": "2016-12-21T11:23:54Z"
    },
    {
      "event": "commented",
      "id": 269309163,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMwOTE2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269309163",
      "actor": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-27T10:43:56Z",
      "updated_at": "2016-12-27T10:43:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ryanofsky What about this warning?\r\n```\r\ntest/coins_tests.cpp:432:19: warning: unused variable 'DIRTY_FLAGS' [-Wunused-const-variable]\r\n```\r\n\r\nDo you plan to use it or can it be removed?\r\n",
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-269309163",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308"
    },
    {
      "event": "mentioned",
      "id": 905612058,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTA1NjEyMDU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/905612058",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-27T10:43:56Z"
    },
    {
      "event": "subscribed",
      "id": 905612059,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDkwNTYxMjA1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/905612059",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-27T10:43:56Z"
    },
    {
      "event": "referenced",
      "id": 905680051,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwNTY4MDA1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/905680051",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef4a78a6914b02960d40f342e7a5bda049693781",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ef4a78a6914b02960d40f342e7a5bda049693781",
      "created_at": "2016-12-27T12:39:43Z"
    },
    {
      "event": "commented",
      "id": 269321047,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMyMTA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269321047",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-27T12:42:03Z",
      "updated_at": "2016-12-27T12:42:03Z",
      "author_association": "MEMBER",
      "body": "I do have some debug code using it, which I might make a PR from later, but its better to remove for now since it's causing this warning. Created to #9435 to remove.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-269321047",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308"
    },
    {
      "event": "referenced",
      "id": 905683833,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwNTY4MzgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/905683833",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "35356b40ef449e725cf09ecb86809598a8f48d7f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/35356b40ef449e725cf09ecb86809598a8f48d7f",
      "created_at": "2016-12-27T12:46:31Z"
    },
    {
      "event": "referenced",
      "id": 909062157,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwOTA2MjE1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/909062157",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "675f31ee3f0a5786a1563df1c38725f2c63ffbc8",
      "commit_url": "https://api.github.com/repos/jonasschnelli/bitcoin/commits/675f31ee3f0a5786a1563df1c38725f2c63ffbc8",
      "created_at": "2017-01-02T14:50:50Z"
    },
    {
      "event": "referenced",
      "id": 909083970,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwOTA4Mzk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/909083970",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0fb539b0111fdff2fc2dac11b5fb3b6e2e644a7a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0fb539b0111fdff2fc2dac11b5fb3b6e2e644a7a",
      "created_at": "2017-01-02T15:22:32Z"
    },
    {
      "event": "referenced",
      "id": 1268094138,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEyNjgwOTQxMzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1268094138",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8afa5688537ea5d14bd4cd7fd9f2e3a833824a9e",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/8afa5688537ea5d14bd4cd7fd9f2e3a833824a9e",
      "created_at": "2017-09-27T15:57:37Z"
    },
    {
      "event": "referenced",
      "id": 1289808470,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEyODk4MDg0NzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1289808470",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "63f35282ecc9fc8e2044201e82aa76aa43348639",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/63f35282ecc9fc8e2044201e82aa76aa43348639",
      "created_at": "2017-10-12T09:05:53Z"
    },
    {
      "event": "referenced",
      "id": 1306093016,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEzMDYwOTMwMTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1306093016",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dc2741ca4bdaab102907377998d0efa73298d495",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/dc2741ca4bdaab102907377998d0efa73298d495",
      "created_at": "2017-10-23T17:04:43Z"
    },
    {
      "event": "referenced",
      "id": 1306098156,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEzMDYwOTgxNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1306098156",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4b4d2229335cedcd40613ba9e6f3bb889cf47c1c",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/4b4d2229335cedcd40613ba9e6f3bb889cf47c1c",
      "created_at": "2017-10-23T17:07:55Z"
    },
    {
      "event": "referenced",
      "id": 1331734605,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEzMzE3MzQ2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1331734605",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8cd56f195b95ce67fe6aba72dadf1f272d8c6f26",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/8cd56f195b95ce67fe6aba72dadf1f272d8c6f26",
      "created_at": "2017-11-08T12:26:41Z"
    },
    {
      "event": "referenced",
      "id": 2055507321,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwNTU1MDczMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2055507321",
      "actor": {
        "login": "lateminer",
        "id": 9951982,
        "node_id": "MDQ6VXNlcjk5NTE5ODI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9951982?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lateminer",
        "html_url": "https://github.com/lateminer",
        "followers_url": "https://api.github.com/users/lateminer/followers",
        "following_url": "https://api.github.com/users/lateminer/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lateminer/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lateminer/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lateminer/subscriptions",
        "organizations_url": "https://api.github.com/users/lateminer/orgs",
        "repos_url": "https://api.github.com/users/lateminer/repos",
        "events_url": "https://api.github.com/users/lateminer/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lateminer/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2f54476d17c88e8cfca8d86bbc42a5f7faae8b95",
      "commit_url": "https://api.github.com/repos/lateminer/bitcoin/commits/2f54476d17c88e8cfca8d86bbc42a5f7faae8b95",
      "created_at": "2019-01-04T22:36:38Z"
    },
    {
      "event": "referenced",
      "id": 3636125813,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzYxMjU4MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3636125813",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e9e61fdbdabf3c06cd7496a0db2ed39119f75b67",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/e9e61fdbdabf3c06cd7496a0db2ed39119f75b67",
      "created_at": "2020-08-09T02:39:36Z"
    },
    {
      "event": "referenced",
      "id": 3636597158,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzY1OTcxNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3636597158",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69b0a66147a7af6b6216d9a530848727403bdcf0",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/69b0a66147a7af6b6216d9a530848727403bdcf0",
      "created_at": "2020-08-09T16:34:06Z"
    },
    {
      "event": "referenced",
      "id": 3636629885,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzY2Mjk4ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3636629885",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9e03e67a5b08c5c32230a7e6bd3a78d62584a992",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/9e03e67a5b08c5c32230a7e6bd3a78d62584a992",
      "created_at": "2020-08-09T17:20:50Z"
    },
    {
      "event": "referenced",
      "id": 3636948138,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzY5NDgxMzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3636948138",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4bd47d64adecdd5b5e4961003f1cb4099e0e68d8",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/4bd47d64adecdd5b5e4961003f1cb4099e0e68d8",
      "created_at": "2020-08-10T01:09:09Z"
    },
    {
      "event": "referenced",
      "id": 3641195762,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NDExOTU3NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3641195762",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "46997cb7a83ead7b97573b74acd22ea54fc34b4e",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/46997cb7a83ead7b97573b74acd22ea54fc34b4e",
      "created_at": "2020-08-11T02:48:56Z"
    },
    {
      "event": "referenced",
      "id": 3646946032,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NDY5NDYwMzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3646946032",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cdbb1a616277ec3136508301f4e127258f0e6563",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/cdbb1a616277ec3136508301f4e127258f0e6563",
      "created_at": "2020-08-12T10:01:43Z"
    },
    {
      "event": "referenced",
      "id": 3647209855,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NDcyMDk4NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3647209855",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7181a9a4b09b1960b8f74f1fd948ec5d85a09a90",
      "commit_url": "https://api.github.com/repos/random-zebra/PIVX/commits/7181a9a4b09b1960b8f74f1fd948ec5d85a09a90",
      "created_at": "2020-08-12T11:19:56Z"
    },
    {
      "event": "referenced",
      "id": 3666265511,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjYyNjU1MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3666265511",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "af793b7bb921ce7c7e2067e3fba890ce3cdb3d78",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/af793b7bb921ce7c7e2067e3fba890ce3cdb3d78",
      "created_at": "2020-08-18T13:09:20Z"
    },
    {
      "event": "locked",
      "id": 5271655796,
      "node_id": "LOE_lADOABII584Lmb8ZzwAAAAE6NxV0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271655796",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:23:28Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954",
      "pull_request_review_id": 13607529,
      "id": 93085954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMDg1OTU0",
      "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 220,
      "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe loop over possibilities for base values",
      "created_at": "2016-12-19T18:06:30Z",
      "updated_at": "2016-12-19T20:04:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93085954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417",
      "pull_request_review_id": 13625355,
      "id": 93103417,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTAzNDE3",
      "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyNewCoins(TXID, coinbase));\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+{\n+    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+     * writing a modification to the coin, and then checking the resulting\n+     * entry in the cache after the modification. Verify behavior with the\n+     * with the ModifyNewCoin coinbase argument set to false, and to true.\n+     *\n+     *                  Cache   Write   Result  Cache        Result     Coinbase\n+     *                  Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyNewCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   , false);\n+    CheckModifyNewCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+}\n+\n+void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(ABSENT, parent_value, parent_flags);\n+    WriteCoinsViewEntry(test.cache, child_value, child_flags);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_write)",
      "path": "src/test/coins_tests.cpp",
      "position": 309,
      "original_position": 291,
      "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe try a loop of these tests with Child Flags not DIRTY as well",
      "created_at": "2016-12-19T19:36:03Z",
      "updated_at": "2016-12-19T20:04:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93103417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 716,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618",
      "pull_request_review_id": 13631701,
      "id": 93109618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTA5NjE4",
      "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);",
      "path": "src/test/coins_tests.cpp",
      "position": null,
      "original_position": 220,
      "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "in_reply_to_id": 93085954,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added.",
      "created_at": "2016-12-19T20:09:42Z",
      "updated_at": "2016-12-19T20:09:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642",
      "pull_request_review_id": 13631723,
      "id": 93109642,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTA5NjQy",
      "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyNewCoins(TXID, coinbase));\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+{\n+    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+     * writing a modification to the coin, and then checking the resulting\n+     * entry in the cache after the modification. Verify behavior with the\n+     * with the ModifyNewCoin coinbase argument set to false, and to true.\n+     *\n+     *                  Cache   Write   Result  Cache        Result     Coinbase\n+     *                  Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyNewCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   , false);\n+    CheckModifyNewCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+}\n+\n+void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(ABSENT, parent_value, parent_flags);\n+    WriteCoinsViewEntry(test.cache, child_value, child_flags);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_write)",
      "path": "src/test/coins_tests.cpp",
      "position": 309,
      "original_position": 291,
      "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "in_reply_to_id": 93103417,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added.",
      "created_at": "2016-12-19T20:09:49Z",
      "updated_at": "2016-12-19T20:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 716,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}