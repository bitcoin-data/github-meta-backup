{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720",
    "id": 105158241,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTA1MTU4MjQx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9720",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/9720.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/9720.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d9434918d277bba534933ebc8c63ba81e613f603",
    "number": 9720,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "net: fix banning and disallow sending messages before receiving verack",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is the last of my net issues for 0.14. As discussed with @TheBlueMatt and @gmaxwell.\r\n\r\nFixes for a few problems discovered while running a network stress/fuzzer:\r\n- Remote nodes weren't always banned when they hadn't yet sent a verack. Regression from 7a8c2519015650acd51eaf42719f04e53f839bbe.\r\n- Require a verack before sending any non-handshake messages. This is much more straightforward behavior, and allows for tests to be easily written\r\n- Now that there's a sane model for testing, add checks for leaky messages sent out before the handshake is complete, as well as for banning in those cases.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/21",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/21",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/21/labels",
      "id": 1823680,
      "node_id": "MDk6TWlsZXN0b25lMTgyMzY4MA==",
      "number": 21,
      "state": "closed",
      "title": "0.14.0",
      "description": "",
      "creator": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 156,
      "created_at": "2016-06-13T14:18:51Z",
      "updated_at": "2017-03-08T16:39:44Z",
      "closed_at": "2017-03-08T16:39:44Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2017-02-08T06:45:55Z",
    "updated_at": "2021-09-08T11:42:44Z",
    "closed_at": "2017-02-14T13:42:56Z",
    "mergeable_state": "unknown",
    "merged_at": "2017-02-14T13:42:55Z",
    "merge_commit_sha": "d9434918d277bba534933ebc8c63ba81e613f603",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "theuni:fix-ban",
      "ref": "fix-ban",
      "sha": "d9434918d277bba534933ebc8c63ba81e613f603",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 10302141,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMDMwMjE0MQ==",
        "name": "bitcoin",
        "full_name": "theuni/bitcoin",
        "owner": {
          "login": "theuni",
          "id": 417043,
          "node_id": "MDQ6VXNlcjQxNzA0Mw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/theuni",
          "html_url": "https://github.com/theuni",
          "followers_url": "https://api.github.com/users/theuni/followers",
          "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
          "organizations_url": "https://api.github.com/users/theuni/orgs",
          "repos_url": "https://api.github.com/users/theuni/repos",
          "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/theuni/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/theuni/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/theuni/bitcoin",
        "archive_url": "https://api.github.com/repos/theuni/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/theuni/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/theuni/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/theuni/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/theuni/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/theuni/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/theuni/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/theuni/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/theuni/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/theuni/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/theuni/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/theuni/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/theuni/bitcoin/events",
        "forks_url": "https://api.github.com/repos/theuni/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/theuni/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/theuni/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/theuni/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/theuni/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/theuni/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/theuni/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/theuni/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/theuni/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/theuni/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/theuni/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/theuni/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/theuni/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/theuni/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/theuni/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/theuni/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:theuni/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/theuni/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/theuni/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/theuni/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/theuni/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/theuni/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/theuni/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/theuni/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/theuni/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/theuni/bitcoin/hooks",
        "svn_url": "https://github.com/theuni/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 221845,
        "default_branch": "trivial-next",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T21:44:11Z",
        "created_at": "2013-05-26T18:55:06Z",
        "updated_at": "2022-01-12T04:42:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 240,
    "deletions": 61,
    "changed_files": 4,
    "commits": 6,
    "review_comments": 37,
    "comments": 7
  },
  "events": [
    {
      "event": "mentioned",
      "id": 953340135,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTUzMzQwMTM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953340135",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T06:45:55Z"
    },
    {
      "event": "subscribed",
      "id": 953340136,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk1MzM0MDEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953340136",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T06:45:55Z"
    },
    {
      "event": "mentioned",
      "id": 953340137,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTUzMzQwMTM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953340137",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T06:45:55Z"
    },
    {
      "event": "subscribed",
      "id": 953340138,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk1MzM0MDEzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953340138",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T06:45:55Z"
    },
    {
      "event": "labeled",
      "id": 953340958,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDk1MzM0MDk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953340958",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T06:47:00Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "milestoned",
      "id": 953341031,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDk1MzM0MTAzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953341031",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T06:47:04Z",
      "milestone": {
        "title": "0.14.0"
      }
    },
    {
      "event": "commented",
      "id": 278245944,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODI0NTk0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278245944",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T07:03:18Z",
      "updated_at": "2017-02-08T07:05:38Z",
      "author_association": "MEMBER",
      "body": "I see that @TheBlueMatt and I managed to make almost the exact same change:\r\n2a278cdaf6ea46dc85a61a37a12a8acd7acd5670 vs a5032b5b0c55c90a8e4df658d85d99824cf4699d. I'm happy to rebase and drop mine if his goes in first.\r\n\r\nEdit: I should also mention that this and #9715 are complementary.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278245944",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "mentioned",
      "id": 953355591,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTUzMzU1NTkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953355591",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T07:03:18Z"
    },
    {
      "event": "subscribed",
      "id": 953355592,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk1MzM1NTU5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953355592",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T07:03:18Z"
    },
    {
      "event": "commented",
      "id": 278292537,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODI5MjUzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278292537",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T10:39:21Z",
      "updated_at": "2017-02-08T10:39:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "What is the risk by not merging this?",
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278292537",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "commented",
      "id": 278336444,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODMzNjQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278336444",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T14:02:11Z",
      "updated_at": "2017-02-08T14:02:11Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, will give this a more full review after breakfast.\n\nOn February 8, 2017 1:46:00 AM EST, Cory Fields <notifications@github.com> wrote:\n>This is the last of my net issues for 0.14. As discussed with\n>@TheBlueMatt and @gmaxwell.\n>\n>Fixes for a few problems discovered while running a network\n>stress/fuzzer:\n>- Remote nodes weren't always banned when they hadn't yet sent a\n>verack. Regression from 7a8c2519015650acd51eaf42719f04e53f839bbe.\n>- Require a verack before sending any non-handshake messages. This is\n>much more straightforward behavior, and allows for tests to be easily\n>written\n>- Now that there's a sane model for testing, add checks for leaky\n>messages sent out before the handshake is complete, as well as for\n>banning in those cases.\n>You can view, comment on, or merge this pull request online at:\n>\n>  https://github.com/bitcoin/bitcoin/pull/9720\n>\n>-- Commit Summary --\n>\n>  * net: correctly ban before the handshake is complete\n>  * net: parse reject earlier\n>  * net: require a verack before responding to anything else\n>  * qa: allow for a node that does not send an initial version message\n>  * qa: add a test to detect leaky p2p messages\n>\n>-- File Changes --\n>\n>    M qa/pull-tester/rpc-tests.py (1)\n>    A qa/rpc-tests/p2p-leaktests.py (135)\n>    M qa/rpc-tests/test_framework/mininode.py (21)\n>    M src/net_processing.cpp (115)\n>\n>-- Patch Links --\n>\n>https://github.com/bitcoin/bitcoin/pull/9720.patch\n>https://github.com/bitcoin/bitcoin/pull/9720.diff\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/9720\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278336444",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "mentioned",
      "id": 953871286,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTUzODcxMjg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953871286",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T14:02:12Z"
    },
    {
      "event": "subscribed",
      "id": 953871288,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk1Mzg3MTI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953871288",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T14:02:12Z"
    },
    {
      "event": "mentioned",
      "id": 953871289,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTUzODcxMjg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953871289",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T14:02:12Z"
    },
    {
      "event": "subscribed",
      "id": 953871291,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk1Mzg3MTI5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/953871291",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T14:02:12Z"
    },
    {
      "event": "reviewed",
      "id": 20789251,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3ODkyNTE=",
      "url": null,
      "actor": null,
      "commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 50ce6755e024bc849ef8681f9aaa81ff3f3bca57\r\n\r\nI'd also like the commit referred to in 0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662 's commit message to include its commit hash for easier understanding.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#pullrequestreview-20789251",
      "submitted_at": "2017-02-08T16:12:43Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 954118384,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTU0MTE4Mzg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/954118384",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T16:25:11Z"
    },
    {
      "event": "commented",
      "id": 278380156,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDE1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278380156",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-08T16:32:49Z",
      "updated_at": "2017-02-08T16:32:49Z",
      "author_association": "MEMBER",
      "body": "I got a few questions about these changes, so I've updated the commit messages to provide (I hope) better back-story/context.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278380156",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "reviewed",
      "id": 20954540,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA5NTQ1NDA=",
      "url": null,
      "actor": null,
      "commit_id": "42b8a7921e3c347adacc183ba07eb3efdfd631d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK, did not review tests",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#pullrequestreview-20954540",
      "submitted_at": "2017-02-09T08:53:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
    },
    {
      "event": "reviewed",
      "id": 21058137,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEwNTgxMzc=",
      "url": null,
      "actor": null,
      "commit_id": "f9829821a2ac4cacd939d39607dbfd419d8e449a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#pullrequestreview-21058137",
      "submitted_at": "2017-02-09T16:49:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
    },
    {
      "event": "commented",
      "id": 278991391,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODk5MTM5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278991391",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-10T16:29:58Z",
      "updated_at": "2017-02-10T16:29:58Z",
      "author_association": "MEMBER",
      "body": "utACK df1a32392933a4f716c53d62703a56e8d8bda9da, did not review tests.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278991391",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "reviewed",
      "id": 21346497,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEzNDY0OTc=",
      "url": null,
      "actor": null,
      "commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK (only tested lightly)",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#pullrequestreview-21346497",
      "submitted_at": "2017-02-10T21:32:18Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
    },
    {
      "event": "reviewed",
      "id": 21369796,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEzNjk3OTY=",
      "url": null,
      "actor": null,
      "commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Test looks good @theuni ! I've added a bunch of style comments.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#pullrequestreview-21369796",
      "submitted_at": "2017-02-11T00:44:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
    },
    {
      "event": "commented",
      "id": 279115917,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTExNTkxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279115917",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-11T02:54:53Z",
      "updated_at": "2017-02-11T02:54:53Z",
      "author_association": "MEMBER",
      "body": "@jnewbery Thanks for the great test review. I'm not sure I'll have time to get to this before Sunday, so let's not let it hold back merge if a few more ACKs come in. I'll for sure fix up the tests post-merge if that's the case.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-279115917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "mentioned",
      "id": 958214241,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTU4MjE0MjQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/958214241",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-11T02:54:53Z"
    },
    {
      "event": "subscribed",
      "id": 958214242,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk1ODIxNDI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/958214242",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-11T02:54:53Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDViOWZiNTRjNWNhMDY4YTVlMjc2YzNiZDZlYmY0YWU3MjBmNmY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
      "tree": {
        "sha": "0bdc565d53b939f0f227b108406c82f034cb5e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bdc565d53b939f0f227b108406c82f034cb5e61"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
          "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59"
        }
      ],
      "message": "net: correctly ban before the handshake is complete\n\n7a8c251901 made a change to avoid getting into SendMessages() until the\nversion handshake (VERSION + VERACK) is complete. That was done to avoid\nleaking out messages to nodes who could connect, but never bothered sending\nus their version/verack.\n\nUnfortunately, the ban tally and possible disconnect are done as part of\nSendMessages(). So after 7a8c251901, if a peer managed to do something\nbannable before completing the handshake (say send 100 non-version messages\nbefore their version), they wouldn't actually end up getting\ndisconnected/banned. That's fixed here by checking the banscore as part of\nProcessMessages() in addition to SendMessages().",
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:34Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-07T17:02:02Z"
      },
      "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTAyZTdhY2JlMGY0MmZkNmU2OTc5NjgxYmM5YzQ2MTBjNGZiOGNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
      "tree": {
        "sha": "97a314e94a2d0fc3915fb0f62003c2b1cc67f122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97a314e94a2d0fc3915fb0f62003c2b1cc67f122"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
          "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7"
        }
      ],
      "message": "net: parse reject earlier\n\nPrior to this change, all messages were ignored until a VERSION message was\nreceived, as well as possibly incurring a ban score.\n\nSince REJECT messages can be sent at any time (including as a response to a bad\nVERSION message), make sure to always parse them.\n\nMoving this parsing up keeps it from being caught in the\nif (pfrom->nVersion == 0) check below.",
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:02:49Z"
      },
      "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmZjNWE2NzI4ZDM4OWZiYjE1ZTA1NTVjZGY1MGYxYjA0NTk1MTA2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
      "tree": {
        "sha": "81dc1e8af09985a0bb8ec094af118261cd84c595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81dc1e8af09985a0bb8ec094af118261cd84c595"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
          "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb"
        }
      ],
      "message": "net: require a verack before responding to anything else\n\n7a8c251901 made this logic hard to follow. After that change, messages would\nnot be sent to a peer via SendMessages() before the handshake was complete, but\nmessages could still be sent as a response to an incoming message.\n\nFor example, if a peer had not yet sent a verack, we wouldn't notify it about\nnew blocks, but we would respond to a PING with a PONG.\n\nThis change makes the behavior straightforward: until we've received a verack,\nnever send any message other than version/verack/reject.\n\nThe behavior until a VERACK is received has always been undefined, this change\njust tightens our policy.\n\nThis also makes testing much easier, because we can now connect but not send\nversion/verack, and anything sent to us is an error.",
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:04:53Z"
      },
      "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjVlNGY4MzMwNjM0ZGMzMzQ0Njg1NDY3N2JhZGM1MmFlZjQzYjgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5e4f8330634dc33446854677badc52aef43b82",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82",
      "tree": {
        "sha": "90490eb07008b587e6b648e1888d252276d9d17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90490eb07008b587e6b648e1888d252276d9d17e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
          "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106"
        }
      ],
      "message": "qa: mininode learns when a socket connects, not its first action",
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:35:57Z"
      },
      "sha": "5b5e4f8330634dc33446854677badc52aef43b82"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjUwYmJiNjYwZWFmOGM4MWQ3MTRmMTUxOGVjYzhjMzVhZTE3NDYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
      "tree": {
        "sha": "c5b6a654665ccf928fe12400cea292dfd84e1bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b6a654665ccf928fe12400cea292dfd84e1bf4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5e4f8330634dc33446854677badc52aef43b82",
          "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82"
        }
      ],
      "message": "qa: Expose on-connection to mininode listeners",
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:40:28Z"
      },
      "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQzNDkxOGQyNzdiYmE1MzQ5MzNlYmM4YzYzYmE4MWU2MTNmNjAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9434918d277bba534933ebc8c63ba81e613f603",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d9434918d277bba534933ebc8c63ba81e613f603",
      "tree": {
        "sha": "4bf71e301e86cdab80fe9648b01fa904d66b8d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bf71e301e86cdab80fe9648b01fa904d66b8d31"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
          "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463"
        }
      ],
      "message": "qa: add a test to detect leaky p2p messages\n\nThis is certainly not exhaustive, but it's better than nothing. Adds checks\nfor:\n\n- Any message received before sending a version\n- Any message received other than version/reject before sending a verack\n\nIt also tries to goad the remote into sending a pong, address, or block\nannouncement.",
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:17:58Z"
      },
      "sha": "d9434918d277bba534933ebc8c63ba81e613f603"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 960573454,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTYwNTczNDU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/960573454",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-14T00:11:25Z"
    },
    {
      "event": "commented",
      "id": 279570639,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTU3MDYzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279570639",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-14T00:40:09Z",
      "updated_at": "2017-02-14T00:40:09Z",
      "author_association": "MEMBER",
      "body": "Fixed up the tests and squashed. Only the tests changed, the bitcoin code is exactly the same as before squash. I've archived the old branch here: https://github.com/theuni/bitcoin/commits/fix-ban2 in case anyone wants to compare.\r\n\r\nI replaced my mininode changes with @TheBlueMatt's commits from #9715, so that these won't conflict with eachother.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-279570639",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9720"
    },
    {
      "event": "mentioned",
      "id": 960600315,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTYwNjAwMzE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/960600315",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-14T00:40:09Z"
    },
    {
      "event": "subscribed",
      "id": 960600317,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDk2MDYwMDMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/960600317",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-14T00:40:09Z"
    },
    {
      "event": "merged",
      "id": 961371942,
      "node_id": "MDExOk1lcmdlZEV2ZW50OTYxMzcxOTQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/961371942",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603",
      "created_at": "2017-02-14T13:42:56Z"
    },
    {
      "event": "closed",
      "id": 961371943,
      "node_id": "MDExOkNsb3NlZEV2ZW50OTYxMzcxOTQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/961371943",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-14T13:42:56Z"
    },
    {
      "event": "referenced",
      "id": 961372003,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDk2MTM3MjAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/961372003",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
      "created_at": "2017-02-14T13:42:58Z"
    },
    {
      "event": "referenced",
      "id": 1432423567,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0MzI0MjM1Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1432423567",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cccd33453283782e48126f02a5daa4bd45aff714",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/cccd33453283782e48126f02a5daa4bd45aff714",
      "created_at": "2018-01-19T13:15:04Z"
    },
    {
      "event": "referenced",
      "id": 1437020369,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0MzcwMjAzNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1437020369",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fe0ef87cd310b55edc0fefe009d43dd268673d0c",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/fe0ef87cd310b55edc0fefe009d43dd268673d0c",
      "created_at": "2018-01-23T10:39:55Z"
    },
    {
      "event": "referenced",
      "id": 1495005345,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0OTUwMDUzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1495005345",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5183ade2d48b03090116db59cf23a19a31dee9a9",
      "commit_url": "https://api.github.com/repos/chaincoin/chaincoin/commits/5183ade2d48b03090116db59cf23a19a31dee9a9",
      "created_at": "2018-02-27T18:03:56Z"
    },
    {
      "event": "referenced",
      "id": 2056235472,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwNTYyMzU0NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056235472",
      "actor": {
        "login": "andvgal",
        "id": 6080632,
        "node_id": "MDQ6VXNlcjYwODA2MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6080632?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andvgal",
        "html_url": "https://github.com/andvgal",
        "followers_url": "https://api.github.com/users/andvgal/followers",
        "following_url": "https://api.github.com/users/andvgal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andvgal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andvgal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andvgal/subscriptions",
        "organizations_url": "https://api.github.com/users/andvgal/orgs",
        "repos_url": "https://api.github.com/users/andvgal/repos",
        "events_url": "https://api.github.com/users/andvgal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andvgal/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "13840cb4749ca81a29c6db9975087c619c35d203",
      "commit_url": "https://api.github.com/repos/energicryptocurrency/gen2-energi/commits/13840cb4749ca81a29c6db9975087c619c35d203",
      "created_at": "2019-01-06T10:40:20Z"
    },
    {
      "event": "referenced",
      "id": 2168796509,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIxNjg3OTY1MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2168796509",
      "actor": {
        "login": "CryptoCentric",
        "id": 38781794,
        "node_id": "MDQ6VXNlcjM4NzgxNzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38781794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptoCentric",
        "html_url": "https://github.com/CryptoCentric",
        "followers_url": "https://api.github.com/users/CryptoCentric/followers",
        "following_url": "https://api.github.com/users/CryptoCentric/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptoCentric/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptoCentric/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptoCentric/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptoCentric/orgs",
        "repos_url": "https://api.github.com/users/CryptoCentric/repos",
        "events_url": "https://api.github.com/users/CryptoCentric/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptoCentric/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6151cd6e1fed440e8dd16af5333bac2095abe01a",
      "commit_url": "https://api.github.com/repos/absolute-community/absolute/commits/6151cd6e1fed440e8dd16af5333bac2095abe01a",
      "created_at": "2019-02-27T18:05:16Z"
    },
    {
      "event": "locked",
      "id": 5271747953,
      "node_id": "LOE_lADOABII584MSP-wzwAAAAE6OH1x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271747953",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:42:44Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100094218",
      "pull_request_review_id": 20789251,
      "id": 100094218,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDA5NDIxOA==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "mind putting braces around this?",
      "created_at": "2017-02-08T15:40:50Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100094218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100094218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100097401",
      "pull_request_review_id": 20789251,
      "id": 100097401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDA5NzQwMQ==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: The name makes me think `true` means `fShouldBan` was set to true. Invert the boolean?",
      "created_at": "2017-02-08T15:52:03Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100097401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100097401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100110045",
      "pull_request_review_id": 20805665,
      "id": 100110045,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDExMDA0NQ==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": 100097401,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Heh, i waffled back and forth on this. Sure.",
      "created_at": "2017-02-08T16:37:52Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100110045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100110045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100110096",
      "pull_request_review_id": 20805720,
      "id": 100110096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDExMDA5Ng==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": 100094218,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will do.",
      "created_at": "2017-02-08T16:38:03Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100110096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100110096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100111274",
      "pull_request_review_id": 20806985,
      "id": 100111274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDExMTI3NA==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": 100097401,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The usual fix for waffling is comment and clarify name :p",
      "created_at": "2017-02-08T16:42:54Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100111274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100111274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100255289",
      "pull_request_review_id": 20954540,
      "id": 100255289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI1NTI4OQ==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": 100094218,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: avoid `BOOST_FOREACH` if possible (though this was moved code, so perhaps not applicable, but..).\r\n```C++\r\nfor (const CBlockReject& reject : state.rejects) [...]\r\n```",
      "created_at": "2017-02-09T08:51:19Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100255289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100255289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100273335",
      "pull_request_review_id": 20973291,
      "id": 100273335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI3MzMzNQ==",
      "diff_hunk": "@@ -2594,6 +2594,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckBan(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "0abd2ccfaa24fdd1e5d24271e2360c4d9d64b662",
      "in_reply_to_id": 100094218,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, for moved code this is not applicable. To avoid confusion, let's keep code style changes, moves and bugfixes separate where possible.",
      "created_at": "2017-02-09T10:17:43Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100273335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100273335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100352357",
      "pull_request_review_id": 21058137,
      "id": 100352357,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDM1MjM1Nw==",
      "diff_hunk": "@@ -2706,8 +2735,11 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+            LOCK(cs_main);\n+            SendRejectsAndCheckBan(pfrom, connman);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "f9829821a2ac4cacd939d39607dbfd419d8e449a",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are a few cases it looks like we return true after setting misbehaving, so this probably needs to be checked either way (or those cases need updating - but that might result in double-logging).",
      "created_at": "2017-02-09T16:49:18Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100352357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100352357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100362538",
      "pull_request_review_id": 21068804,
      "id": 100362538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDM2MjUzOA==",
      "diff_hunk": "@@ -2706,8 +2735,11 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+            LOCK(cs_main);\n+            SendRejectsAndCheckBan(pfrom, connman);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "f9829821a2ac4cacd939d39607dbfd419d8e449a",
      "in_reply_to_id": 100352357,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was trying to avoid the cs_main lock for each message received, but you're right that it means that we rely on a return value that's not very well-defined.\r\n\r\nI'll just make it unconditional. Until we have parallel processing, there's not much harm in that.\r\n\r\n",
      "created_at": "2017-02-09T17:30:01Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100362538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100362538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100363468",
      "pull_request_review_id": 21069797,
      "id": 100363468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDM2MzQ2OA==",
      "diff_hunk": "@@ -2706,8 +2735,11 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+            LOCK(cs_main);\n+            SendRejectsAndCheckBan(pfrom, connman);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "f9829821a2ac4cacd939d39607dbfd419d8e449a",
      "in_reply_to_id": 100352357,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good.",
      "created_at": "2017-02-09T17:34:00Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100363468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100363468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650705",
      "pull_request_review_id": 21369796,
      "id": 100650705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MDcwNQ==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 9,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can remove this. logging isn't being used.",
      "created_at": "2017-02-11T00:27:56Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650721",
      "pull_request_review_id": 21369796,
      "id": 100650721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MDcyMQ==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add a docstring describing what this test case is doing.",
      "created_at": "2017-02-11T00:28:13Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650771",
      "pull_request_review_id": 21369796,
      "id": 100650771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MDc3MQ==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 24,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not entirely sure what this is achieving. I think you can remove `check()` and `self.done` entirely.\r\n\r\nYou can check directly that no unexpected messages have been received at the end of the test (see my comment below).",
      "created_at": "2017-02-11T00:28:59Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650829",
      "pull_request_review_id": 21369796,
      "id": 100650829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MDgyOQ==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 30,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is `unexpected_message` a better name than `unrequested_message`?",
      "created_at": "2017-02-11T00:29:45Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650892",
      "pull_request_review_id": 21369796,
      "id": 100650892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MDg5Mg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 31,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think you should be raising an exception in the network thread. Just set `unexpected_message` to True (and optionally print some debug info)",
      "created_at": "2017-02-11T00:30:42Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100650892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651222",
      "pull_request_review_id": 21369796,
      "id": 100651222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTIyMg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": 63,
      "original_position": 54,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sigh. This is verbose and will be incomplete every time new p2p message types are added.\r\n\r\nI was tempted to say just override the `deliver()` message from `NodeConnCB` but that just feels ugly (`deliver()` should really be a private method and the testcases just override use the on_ callbacks).\r\n\r\nI can't think of anything better here.",
      "created_at": "2017-02-11T00:34:29Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651222",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651262",
      "pull_request_review_id": 21369796,
      "id": 100651262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTI2Mg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 83,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/replay/reply",
      "created_at": "2017-02-11T00:34:58Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651298",
      "pull_request_review_id": 21369796,
      "id": 100651298,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTI5OA==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 95,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this parser.add_option line is required.",
      "created_at": "2017-02-11T00:35:30Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651327",
      "pull_request_review_id": 21369796,
      "id": 100651327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTMyNw==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 100,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since banscore isn't changing I'd prefer to make it a global constant.",
      "created_at": "2017-02-11T00:35:54Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651535",
      "pull_request_review_id": 21369796,
      "id": 100651535,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTUzNQ==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 104,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's only one node here. You can replace the above three lines with:\r\n\r\n```python\r\nself.nodes = [start_node(0, self.options.tmpdir, ['-debug', '-banscore='+str(self.banscore)])]\r\n```\r\n",
      "created_at": "2017-02-11T00:38:10Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651563",
      "pull_request_review_id": 21369796,
      "id": 100651563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTU2Mw==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        self.nodes[0].generate(1)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 120,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not needed?",
      "created_at": "2017-02-11T00:38:26Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651676",
      "pull_request_review_id": 21369796,
      "id": 100651676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTY3Ng==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        self.nodes[0].generate(1)\n+\n+        # send a bunch of veracks without sending a message. This should get us disconnected.\n+        # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+        for i in range(self.banscore):\n+            no_version_bannode.send_message(msg_verack())\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        assert(no_version_bannode.check())\n+        assert(no_version_idlenode.check())\n+        assert(no_verack_idlenode.check())",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 132,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might as well just check the variable directly:\r\n\r\n```python\r\n        assert(not no_version_bannode.unexpected_message)\r\n        assert(not no_version_idlenode.unexpected_message)\r\n        assert(not no_verack_idlenode.unexpected_message)\r\n```",
      "created_at": "2017-02-11T00:39:51Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651750",
      "pull_request_review_id": 21369796,
      "id": 100651750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1MTc1MA==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        self.nodes[0].generate(1)\n+\n+        # send a bunch of veracks without sending a message. This should get us disconnected.\n+        # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+        for i in range(self.banscore):\n+            no_version_bannode.send_message(msg_verack())\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        assert(no_version_bannode.check())\n+        assert(no_version_idlenode.check())\n+        assert(no_verack_idlenode.check())\n+",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 133,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I recommend you disconnect all the connections to the node at the end of the test:\r\n\r\n```python\r\n        # Disconnect all peers\r\n        [conn.disconnect_node() for conn in connections]\r\n```",
      "created_at": "2017-02-11T00:40:38Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100651750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657808",
      "pull_request_review_id": 21376798,
      "id": 100657808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1NzgwOA==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100650721,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:39:45Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657810",
      "pull_request_review_id": 21376799,
      "id": 100657810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1NzgxMA==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 9,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100650705,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:39:50Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657827",
      "pull_request_review_id": 21376814,
      "id": 100657827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1NzgyNw==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 30,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100650829,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems about the same to me, but sure",
      "created_at": "2017-02-11T02:40:36Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657832",
      "pull_request_review_id": 21376819,
      "id": 100657832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1NzgzMg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 31,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100650892,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:40:50Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100657832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658037",
      "pull_request_review_id": 21377009,
      "id": 100658037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODAzNw==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": 63,
      "original_position": 54,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651222,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, i hate this too.\r\n\r\nToo much to do here but for the future: how about a base class for messages. Then there's an overridable dispatcher that forwards to the individual callbacks. So here, I would just override the dispatcher and check the message type.\r\n\r\nBasically just another thin layer under deliver()",
      "created_at": "2017-02-11T02:49:33Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658042",
      "pull_request_review_id": 21377015,
      "id": 100658042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODA0Mg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 83,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651262,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:49:38Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658052",
      "pull_request_review_id": 21377030,
      "id": 100658052,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODA1Mg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 95,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651298,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok. Definitely the c/p from the wrong test isn't needed :)",
      "created_at": "2017-02-11T02:50:06Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658052",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658067",
      "pull_request_review_id": 21377045,
      "id": 100658067,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODA2Nw==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 100,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651327,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think i'd rather keep this local so that we can use different scores for different tests.",
      "created_at": "2017-02-11T02:50:49Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658069",
      "pull_request_review_id": 21377047,
      "id": 100658069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODA2OQ==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 104,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651535,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:50:55Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658088",
      "pull_request_review_id": 21377066,
      "id": 100658088,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODA4OA==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        self.nodes[0].generate(1)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 120,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651563,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Very needed, but needs a comment. We generate a block, and wait a few secs to make sure that it's not relayed to the nodes who haven't versioned/veracked yet.",
      "created_at": "2017-02-11T02:51:36Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658088",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658096",
      "pull_request_review_id": 21377074,
      "id": 100658096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODA5Ng==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        self.nodes[0].generate(1)\n+\n+        # send a bunch of veracks without sending a message. This should get us disconnected.\n+        # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+        for i in range(self.banscore):\n+            no_version_bannode.send_message(msg_verack())\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        assert(no_version_bannode.check())\n+        assert(no_version_idlenode.check())\n+        assert(no_verack_idlenode.check())",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 132,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651676,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:52:04Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658103",
      "pull_request_review_id": 21377081,
      "id": 100658103,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY1ODEwMw==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        self.nodes[0].generate(1)\n+\n+        # send a bunch of veracks without sending a message. This should get us disconnected.\n+        # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+        for i in range(self.banscore):\n+            no_version_bannode.send_message(msg_verack())\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        assert(no_version_bannode.check())\n+        assert(no_version_idlenode.check())\n+        assert(no_verack_idlenode.check())\n+",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 133,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651750,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-02-11T02:52:20Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100658103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100804852",
      "pull_request_review_id": 21519641,
      "id": 100804852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDgwNDg1Mg==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 104,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651535,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please leave it as is for now. My goal was to generalize this logic and get rid of most `setup_network` methods in test as the only thing they commonly do is fire up the requested number of nodes and nothing else. So there would be no need to overwrite this function if you want a simple network set up.",
      "created_at": "2017-02-13T14:31:58Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100804852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100804852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100805420",
      "pull_request_review_id": 21520213,
      "id": 100805420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDgwNTQyMA==",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import logging\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.done = False\n+        self.unrequested_msg = False\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def check(self):\n+        def done():\n+            return self.done\n+        return wait_until(done, timeout=10) and not self.unrequested_msg\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unrequested_msg = True\n+        raise Exception(\"should not have received message: %s\" % message.command)\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_close(self, conn):\n+        self.done = True\n+    def on_reject(self, conn, message): pass\n+\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+        self.done = True\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        CLazyNode.__init__(self)\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+\n+    # When version is received, don't replay with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.done = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"Binary to test max block requests behavior\")\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.banscore = 10\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(self.banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)",
      "path": "qa/rpc-tests/p2p-leaktests.py",
      "position": null,
      "original_position": 104,
      "commit_id": "d9434918d277bba534933ebc8c63ba81e613f603",
      "original_commit_id": "df1a32392933a4f716c53d62703a56e8d8bda9da",
      "in_reply_to_id": 100651535,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, it would be easier to adapt if the number of nodes changes.",
      "created_at": "2017-02-13T14:34:29Z",
      "updated_at": "2017-02-14T00:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100805420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100805420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}