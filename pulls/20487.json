{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
    "id": 527303668,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTI3MzAzNjY4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20487",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/20487.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/20487.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
    "number": 20487,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add experimental syscall sandboxing using seccomp-bpf (Linux secure computing mode).\r\n\r\nEnable filtering of system calls using seccomp-bpf: allow only explicitly allowlisted (expected) syscalls to be called. \r\n\r\nThe syscall sandboxing implemented in this PR is an experimental feature currently available only under Linux x86-64.\r\n\r\nTo enable the experimental syscall sandbox the `-sandbox=<mode>` option must be passed to `bitcoind`:\r\n\r\n```\r\n  -sandbox=<mode>\r\n       Use the experimental syscall sandbox in the specified mode\r\n       (-sandbox=log-and-abort or -sandbox=abort). Allow only expected\r\n       syscalls to be used by bitcoind. Note that this is an\r\n       experimental new feature that may cause bitcoind to exit or crash\r\n       unexpectedly: use with caution. In the \"log-and-abort\" mode the\r\n       invocation of an unexpected syscall results in a debug handler\r\n       being invoked which will log the incident and terminate the\r\n       program (without executing the unexpected syscall). In the\r\n       \"abort\" mode the invocation of an unexpected syscall results in\r\n       the entire process being killed immediately by the kernel without\r\n       executing the unexpected syscall.\r\n```\r\n\r\nThe allowed syscalls are defined on a per thread basis.\r\n\r\nI've used this feature since summer 2020 and I find it to be a helpful testing/debugging addition which makes it much easier to reason about the actual capabilities required of each type of thread in Bitcoin Core.\r\n\r\n---\r\n\r\nQuick start guide:\r\n\r\n```\r\n$ ./configure\r\n$ src/bitcoind -regtest -debug=util -sandbox=log-and-abort\r\n…\r\n2021-06-09T12:34:56Z Experimental syscall sandbox enabled (-sandbox=log-and-abort): bitcoind will terminate if an unexpected (not allowlisted) syscall is invoked.\r\n…\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"addcon\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"dnsseed\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"net\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"msghand\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"opencon\"\r\n2021-06-09T12:34:56Z Syscall filter installed for thread \"init\"\r\n…\r\n# A simulated execve call to show the sandbox in action:\r\n2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\r\n…\r\nAborted (core dumped)\r\n$\r\n```\r\n\r\n---\r\n\r\n[About seccomp and seccomp-bpf](https://en.wikipedia.org/wiki/Seccomp):\r\n\r\n> In computer security, seccomp (short for secure computing mode) is a facility in the Linux kernel. seccomp allows a process to make a one-way transition into a \"secure\" state where it cannot make any system calls except exit(), sigreturn(), and read() and write() to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS. In this sense, it does not virtualize the system's resources but isolates the process from them entirely.\r\n>\r\n> […]\r\n> \r\n> seccomp-bpf is an extension to seccomp that allows filtering of system calls using a configurable policy implemented using Berkeley Packet Filter rules. It is used by OpenSSH and vsftpd as well as the Google Chrome/Chromium web browsers on Chrome OS and Linux. (In this regard seccomp-bpf achieves similar functionality, but with more flexibility and higher performance, to the older systrace—which seems to be no longer supported for Linux.)",
    "labels": [
      {
        "id": 61889416,
        "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
        "name": "Build system",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-11-25T09:27:44Z",
    "updated_at": "2022-11-15T13:10:39Z",
    "closed_at": "2021-10-04T20:46:15Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-10-04T20:46:14Z",
    "merge_commit_sha": "9e530c6352c3e3d4f2936bbbb1bcb34ff9ca6378",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:seccomp-bpf-2020-11",
      "ref": "seccomp-bpf-2020-11",
      "sha": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "35a31d5f7e9cd71a210c1ed10abc9d772ff36049",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1125,
    "deletions": 1,
    "changed_files": 27,
    "commits": 1,
    "review_comments": 66,
    "comments": 27
  },
  "events": [
    {
      "event": "commented",
      "id": 733583322,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzU4MzMyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733583322",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T09:29:48Z",
      "updated_at": "2020-11-25T09:29:48Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, nice work!",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4037500367,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzNzUwMDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037500367",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:01:34Z"
    },
    {
      "event": "labeled",
      "id": 4037516712,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516712",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4037516716,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516716",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "labeled",
      "id": 4037516721,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 4037516726,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516726",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 4037516732,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516732",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4037516735,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516735",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "labeled",
      "id": 4037516736,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzc1MTY3MzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037516736",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:05:31Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556823,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556823",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556825,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556825",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556827,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556827",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556829,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556829",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "unlabeled",
      "id": 4037556830,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzNzU1NjgzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037556830",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T11:15:01Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 733788354,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzc4ODM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733788354",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T15:48:25Z",
      "updated_at": "2021-10-05T05:43:13Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22956](https://github.com/bitcoin/bitcoin/pull/22956) (validation: log CChainState::CheckBlockIndex() consistency checks by jonatack)\n* [#21943](https://github.com/bitcoin/bitcoin/pull/21943) (Dedup and RAII-fy the creation of a copy of CConnman::vNodes by vasild)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733788354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 733893713,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzg5MzcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733893713",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T18:58:15Z",
      "updated_at": "2020-11-25T18:58:15Z",
      "author_association": "MEMBER",
      "body": "Very cool, Concept ACK",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4039648855,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzOTY0ODg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4039648855",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T19:53:55Z"
    },
    {
      "event": "commented",
      "id": 734461063,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNDQ2MTA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734461063",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-26T20:01:17Z",
      "updated_at": "2020-11-26T20:01:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, however I have some things to improve:\r\n\r\n1. Why must it be a compile time feature? Can't we just add a cmdline option called `-enable-seccomp`. See Chromiums `--enable-unveil`.\r\n2. Don't be that seccomp specific in terms of autotools configuration and naming. Keep in mind that there is also `pledge(2)` on OpenBSD which could be a nice addition as well.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734461063",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "reviewed",
      "id": 539726171,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzI2MTcx",
      "url": null,
      "actor": null,
      "commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-539726171",
      "submitted_at": "2020-11-27T06:05:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4116786709,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDExNjc4NjcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4116786709",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T21:44:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4123594538,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyMzU5NDUzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4123594538",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T07:01:48Z"
    },
    {
      "event": "commented",
      "id": 747401906,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzQwMTkwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747401906",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T12:10:42Z",
      "updated_at": "2020-12-17T12:10:42Z",
      "author_association": "MEMBER",
      "body": "> I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.\r\n\r\nMaybe the UPnP vulnerability (TALOS-2015-0035, CVE-2015-6031)? I should still have a PoC exploit somewhere. I think downgrading UPnP should be enough to reintroduce it.\r\n\r\nI don't currently have the time to play around with this but if someone is interested I can dig it up.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-747401906",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "reviewed",
      "id": 556062566,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDYyNTY2",
      "url": null,
      "actor": null,
      "commit_id": "dbad7bdb947da66b60db057c5b03c11819438257",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-556062566",
      "submitted_at": "2020-12-20T21:19:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "commented",
      "id": 760076956,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDA3Njk1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760076956",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T09:35:08Z",
      "updated_at": "2021-01-14T09:35:08Z",
      "author_association": "MEMBER",
      "body": "> I don't currently have the time to play around with this but if someone is interested I can dig it up.\r\n\r\nAs people have asked, here you go: https://dev.visucore.com/bitcoin/2015_10_upnpc_poc.tar.xz\r\n\r\nIt's my entire working environment and contains my exploit (`poc*.py`), some notes, someone else's exploit (`upnp_exploit1.py`), and some exploitable binaries.\r\n\r\nIf you have any questions feel free to ask on IRC though I literally haven't looked at it for 5 years.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-760076956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4316748465,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxNjc0ODQ2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316748465",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T20:10:48Z"
    },
    {
      "event": "reviewed",
      "id": 588032516,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg4MDMyNTE2",
      "url": null,
      "actor": null,
      "commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-588032516",
      "submitted_at": "2021-02-10T20:38:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4449329668,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ0OTMyOTY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4449329668",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T08:13:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4464705718,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2NDcwNTcxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4464705718",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T13:56:57Z"
    },
    {
      "event": "renamed",
      "id": 4465182888,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDQ2NTE4Mjg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4465182888",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T15:12:28Z",
      "rename": {
        "from": "draft: Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)",
        "to": "Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)"
      }
    },
    {
      "event": "ready_for_review",
      "id": 4465183472,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0NDY1MTgzNDcy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4465183472",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T15:12:34Z"
    },
    {
      "event": "reviewed",
      "id": 613415315,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEzNDE1MzE1",
      "url": null,
      "actor": null,
      "commit_id": "af327aac2ed542b9f1ba26cf8fd0105d8e68659f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-613415315",
      "submitted_at": "2021-03-16T15:45:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4466588063,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2NjU4ODA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4466588063",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T19:47:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4466591003,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2NjU5MTAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4466591003",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-16T19:48:02Z"
    },
    {
      "event": "commented",
      "id": 805185134,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTE4NTEzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805185134",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T19:45:18Z",
      "updated_at": "2021-03-23T19:45:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "After a few months in draft mode this PR is now ready for code review: no longer marked as draft! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-805185134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4516887425,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxNjg4NzQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4516887425",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-27T09:44:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4517843411,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxNzg0MzQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4517843411",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T06:10:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4517850426,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxNzg1MDQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4517850426",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T06:23:48Z"
    },
    {
      "event": "commented",
      "id": 808904532,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwODkwNDUzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808904532",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T14:28:51Z",
      "updated_at": "2021-03-28T14:28:51Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, thanks for working on this!",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4519632705,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUxOTYzMjcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4519632705",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-29T07:01:52Z"
    },
    {
      "event": "labeled",
      "id": 4586485533,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ1ODY0ODU1MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4586485533",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T08:05:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4639771578,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYzOTc3MTU3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4639771578",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T09:46:14Z"
    },
    {
      "event": "unlabeled",
      "id": 4639809233,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDYzOTgwOTIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4639809233",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T10:31:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640382389,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDM4MjM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640382389",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T21:20:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640872535,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDg3MjUzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640872535",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T08:02:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640907966,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDkwNzk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640907966",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T08:40:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640929750,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDkyOTc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640929750",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T09:04:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4640997407,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MDk5NzQwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4640997407",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T10:13:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4641012604,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MTAxMjYwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4641012604",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T10:28:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4641560311,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MTU2MDMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4641560311",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:39:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4641560501,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0MTU2MDUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4641560501",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:40:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4647266114,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0NzI2NjExNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4647266114",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-26T20:37:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4648980400,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0ODk4MDQwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4648980400",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T07:03:05Z"
    },
    {
      "event": "labeled",
      "id": 4650220789,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTAyMjA3ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4650220789",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T11:17:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4650940903,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1MDk0MDkwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4650940903",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T13:43:00Z"
    },
    {
      "event": "unlabeled",
      "id": 4651604451,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDY1MTYwNDQ1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4651604451",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T15:30:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4654839603,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1NDgzOTYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4654839603",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T07:05:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4656301761,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1NjMwMTc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4656301761",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T11:43:28Z"
    },
    {
      "event": "labeled",
      "id": 4689907833,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2ODk5MDc4MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4689907833",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T15:50:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4738958269,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDczODk1ODI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4738958269",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-12T22:03:19Z"
    },
    {
      "event": "unlabeled",
      "id": 4739095850,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDczOTA5NTg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4739095850",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-12T22:51:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4749760962,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NDk3NjA5NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4749760962",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T09:11:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4749873280,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc0OTg3MzI4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4749873280",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T11:37:43Z"
    },
    {
      "event": "unlabeled",
      "id": 4749966241,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDc0OTk2NjI0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4749966241",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T13:19:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4751240169,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc1MTI0MDE2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4751240169",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-16T17:58:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4753170419,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc1MzE3MDQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4753170419",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-17T08:42:49Z"
    },
    {
      "event": "commented",
      "id": 845414778,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTQxNDc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845414778",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T19:27:29Z",
      "updated_at": "2021-05-20T19:33:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj Thanks for reviewing. I believe all feedback has be addressed (sorry it took a while). Let me know if there is anything more I can do :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845414778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 4775526549,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc3NTUyNjU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4775526549",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T19:27:29Z"
    },
    {
      "event": "subscribed",
      "id": 4775526556,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3NzU1MjY1NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4775526556",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T19:27:29Z"
    },
    {
      "event": "labeled",
      "id": 4778064171,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NzgwNjQxNzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4778064171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T08:54:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 845890875,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTg5MDg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845890875",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T11:40:29Z",
      "updated_at": "2021-05-21T11:40:29Z",
      "author_association": "MEMBER",
      "body": "Concept ACK!",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845890875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4782120962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc4MjEyMDk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4782120962",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-22T08:47:41Z"
    },
    {
      "event": "unlabeled",
      "id": 4782170205,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDc4MjE3MDIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4782170205",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-22T09:50:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "added_to_project",
      "id": 4784198429,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0Nzg0MTk4NDI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4784198429",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T02:57:41Z",
      "project_card": {
        "id": 61680680,
        "url": "https://api.github.com/projects/columns/cards/61680680",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 849291645,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTI5MTY0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849291645",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T03:31:18Z",
      "updated_at": "2021-05-27T03:31:18Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, great work!",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-849291645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "reviewed",
      "id": 673399903,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjczMzk5OTAz",
      "url": null,
      "actor": null,
      "commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Very light code review ACK 3636a5c1f03fd01da2a78cad0cba7ab69cadf074 (I didn't review bpf code in detail yet) and concept ACK.\r\n\r\nGreat work here! This seems like a really nice feature.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-673399903",
      "submitted_at": "2021-06-01T18:20:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4834259869,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzNDI1OTg2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4834259869",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-02T21:49:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4834286379,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzNDI4NjM3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4834286379",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-02T21:56:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4837598608,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzNzU5ODYwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4837598608",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-03T13:30:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4845515494,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NTUxNTQ5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845515494",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T22:26:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4846255045,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NjI1NTA0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4846255045",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-05T06:09:23Z"
    },
    {
      "event": "commented",
      "id": 856569408,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjU2OTQwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856569408",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T08:27:40Z",
      "updated_at": "2021-06-08T08:28:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I recently thought about this again and found the [following information](https://learnbchs.org/pledge.html) interesting, not sure if it was already pointed out:\r\n> A further issue with Linux sandboxes in particular (seccomp(2) and friends) is due to the instability of the Linux ecosystem itself. Generic libc functions are implemented differently depending on whether you're using Alpine (musl) or Debian (glibc). This means that the same libc function may require different system calls.\r\n\r\nWhile this is about C, it also applies to C++ in many parts. There's no guarantee that the current approaches works on all libc++ implementation. Also there is no guarantee that for example clangs libc++ might use different syscalls in future versions. This could lead to an unsustainable and unportable design of the implementation.\r\n\r\nMaybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856569408",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 856760930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1Njc2MDkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856760930",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T13:20:06Z",
      "updated_at": "2021-06-08T13:20:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Maybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.\r\n\r\nTurns out this won't work either due to third party libs including the C++ standard library still have that issue pointed out above. Maybe focus on FS restriction instead rather than syscall restriction",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856760930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 857707559,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NzcwNzU1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857707559",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:45:16Z",
      "updated_at": "2021-06-10T09:13:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@emilengler \r\n\r\nThe syscall sandbox works on an allowlist basis. Thus if the kernel provides two different syscalls to achieve a certain action, and both those syscalls are used by the different standard library implementations then both syscalls should be put in the allowlist (if we want to allow said action).\r\n\r\nThat is inherent in all types of syscall sandboxing designs, no matter if Linux seccomp-bpf or some BSD equivalent is used.\r\n\r\nAs have been noted in previous discussions above syscall sandboxing is a type of feature that needs experimentation and fine-tuning for different environments to catch potential diversity in syscall use across systems. Such experimentation was required when sandboxing using seccomp-bpf was introduced in projects such as Chromium, OpenSSH and Tor, and it will be required for Bitcoin Core too. There is really no way around it :)\r\n\r\nThat's why this is labeled an experimental feature that is disabled by default, and is enabled only after \"dual opt-in\" (compile-time opt-in via `--with-sandbox` _and_ run-time opt-in via `-sandbox`). To be clear: this is very much *not* a feature for the average end-user at this stage :)\r\n\r\nI think having this feature in CI only would be a very good start: that would allow us to catch introduction of crazy syscall usage (say opening a network connection in a thread that is not supposed to do so, etc.), and get a chance to play with sandboxing in practice.\r\n\r\nFWIW I've been using this feature for roughly a year in different environments. I've found this feature to be a very helpful testing/debugging addition which makes it much easier to reason about the actual capabilities required of each type of thread in Bitcoin Core.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-857707559",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 4865154146,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg2NTE1NDE0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4865154146",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:45:16Z"
    },
    {
      "event": "subscribed",
      "id": 4865154155,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NjUxNTQxNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4865154155",
      "actor": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:45:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4879922021,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg3OTkyMjAyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4879922021",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-11T20:08:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4881039825,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg4MTAzOTgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4881039825",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-12T09:01:29Z"
    },
    {
      "event": "labeled",
      "id": 4895262614,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ4OTUyNjI2MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4895262614",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-16T04:17:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4920934144,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMDkzNDE0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4920934144",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T07:40:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4920944803,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMDk0NDgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4920944803",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T07:42:47Z"
    },
    {
      "event": "unlabeled",
      "id": 4921024171,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDkyMTAyNDE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4921024171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T07:58:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4921766235,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMTc2NjIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4921766235",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T10:14:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4921857875,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDkyMTg1Nzg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4921857875",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T10:32:23Z"
    },
    {
      "event": "reviewed",
      "id": 694252043,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk0MjUyMDQz",
      "url": null,
      "actor": null,
      "commit_id": "3131ec1fbb3db5d81502bcf349d20eb28ddb0ca4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for all the followups! The new Setup call is easier to understand, and it's great to see configuration moved from build time to runtime so there is more usage flexibility and less chaos in the build script.\r\n\r\nMain remaining suggestion would be to rename `--with-sandbox` option to `--with-seccomp` to follow more a traditional autoconf convention of using `--with-*` options for dependencies and `--enable-*` options for features. This would also be more futureproof for supporting alternative sandboxing mechanisms on linux, and different sandboxing mechanisms on other platforms.\r\n\r\nOther suggestions:\r\n\r\n- The `--with-` option should just be automatically detected like other dependencies, and not required to be specified manually. Sandboxing is experimental, but it's already disabled by default, and doesn't need to be disabled twice as much. Autodetection would also allow dropping the cirrus CI changes in this PR and avoid the new sandboxing feature creating a new build and test variant.\r\n- The `--with-sandbox and --enable-multiprocess are currently incompatible` build error would be good to drop. The multiprocess and sandboxing features for now maybe don't work together at runtime, but there's no build conflict.\r\n- Various `#if defined(USE_SYSCALL_SANDBOX)` conditionals seem unnecessary. It seems like the only one actually needed is in `util/syscall_sandbox.cpp`\r\n- There should probably be a `TestDisallowedSandboxCall` or similar function in `syscall_sandbox.cpp` to avoid platform-specific code in `rpc/misc.cpp`\r\n- The `skip_if_bitcoind_syscall_sandbox()` function in the python framework would should probably be replaced by a `disable_syscall_sandbox()` function. It's nice how this PR changes the test framework to automatically pass `-sandbox=log-and-kill` to `bitcoind`. But for the tests that don't work with sandboxing, it would be better to just not pass the sandboxing option instead of skipping the test entirely.\r\n\r\nLight code review ACK and approach ACK 3131ec1fbb3db5d81502bcf349d20eb28ddb0ca4.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-694252043",
      "submitted_at": "2021-06-28T18:07:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "labeled",
      "id": 4951008687,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ5NTEwMDg2ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4951008687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T04:22:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4956307013,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk1NjMwNzAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4956307013",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T22:11:57Z"
    },
    {
      "event": "unlabeled",
      "id": 4956467791,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDk1NjQ2Nzc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4956467791",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T23:12:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 698332234,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4MzMyMjM0",
      "url": null,
      "actor": null,
      "commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updates look good! I started reviewing this in more detail even though more changes may be in progress. Added a few new suggestions below.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-698332234",
      "submitted_at": "2021-07-02T16:31:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4988960691,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4ODk2MDY5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4988960691",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T12:51:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4988966197,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4ODk2NjE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4988966197",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T12:52:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4994348841,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NDM0ODg0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4994348841",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T11:24:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997391039,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzM5MTAzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997391039",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T22:02:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997395974,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzM5NTk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997395974",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T22:03:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997572490,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzU3MjQ5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997572490",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T23:11:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4997615740,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NzYxNTc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4997615740",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T23:30:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4999879113,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5OTg3OTExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4999879113",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T11:30:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4999912986,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5OTkxMjk4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4999912986",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T11:39:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5000049187,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwMDA0OTE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5000049187",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T12:13:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5004216669,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwNDIxNjY2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5004216669",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-11T14:25:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5004532182,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwNDUzMjE4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5004532182",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-11T21:18:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5004538336,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwNDUzODMzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5004538336",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-11T21:27:50Z"
    },
    {
      "event": "commented",
      "id": 878918411,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3ODkxODQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878918411",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T09:12:43Z",
      "updated_at": "2021-07-13T09:12:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot for reviewing @ryanofsky: excellent feedback (as always). The suggested changes simplified the implementation significantly.\r\n\r\nI believe all comments have been addressed, and I think this PR should be ready for final review and testing :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-878918411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 5012408557,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTAxMjQwODU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5012408557",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T09:12:43Z"
    },
    {
      "event": "subscribed",
      "id": 5012408565,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUwMTI0MDg1NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5012408565",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T09:12:43Z"
    },
    {
      "event": "reviewed",
      "id": 712180640,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEyMTgwNjQw",
      "url": null,
      "actor": null,
      "commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 333392fbb886c56b62446490a81610ee821006e7 modulo `BuildFilter` and `SetSyscallSandboxPolicy` functions which do seem good as far as I can tell, but I don't know enough yet to vouch for what they are doing in detail.\r\n\r\nThis really does look great! It's a very tidy and self-contained implementation. I left a few comments below but they are all minor and could be ignored.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-712180640",
      "submitted_at": "2021-07-26T23:18:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5086877067,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA4Njg3NzA2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5086877067",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-29T15:42:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5093788320,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5Mzc4ODMyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5093788320",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T00:07:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094241563,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDI0MTU2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094241563",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T10:28:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094527187,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDUyNzE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094527187",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T16:41:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094616819,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDYxNjgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094616819",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T18:38:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094653140,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDY1MzE0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094653140",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T19:26:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5094682169,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA5NDY4MjE2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5094682169",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-31T20:09:04Z"
    },
    {
      "event": "commented",
      "id": 893779975,
      "node_id": "IC_kwDOABII5841RgAH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893779975",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-05T20:38:40Z",
      "updated_at": "2021-08-05T20:38:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe all feedback has been addressed: let me know if there is anything more I can do here :)\r\n\r\nConcept ACK status:\r\n* laanwj: [\"Concept ACK, nice work!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322)\r\n* jb55: [\"Very cool, Concept ACK\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713)\r\n* gmaxwell: [\"Freeking awesome!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734512344)\r\n* jonatack: [\"Concept ACK, thanks for working on this!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532)\r\n* 0xB10C: [\"Concept ACK!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845890875)\r\n* ariard: [\"Concept ACK, great work!\"](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-849291645)\r\n* ryanofsky: \"Great work here! This seems like a really nice feature.\"",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-893779975",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5159450426,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE1OTQ1MDQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159450426",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T07:53:16Z"
    },
    {
      "event": "reviewed",
      "id": 733009157,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMzMDA5MTU3",
      "url": null,
      "actor": null,
      "commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 4646392e628ffd958d18d32cfdc44e53290de017 again with caveat that I'm not very familiar with BPF, and wouldn't know if there was a subtle bug in the sandboxing implementation, even though the construction is pretty straightforward and makes sense as far as I can tell. Outside of the BPF filter construction, all the other build, test, config parsing and thread setup changes do look very good.\r\n\r\nChanges since last review: leaving sandboxing support in multiprocess build enabled (just disabling it specifically when needed at runtime), fixing handling of negated config options, adding many new explanatory comments and links in syscall_sandbox, adding new asserts, removing macro usages, tweaking BPF filter build code without changing the filter, adding python test --nosandbox option to be able to run tests without sandboxing.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-733009157",
      "submitted_at": "2021-08-18T15:10:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 738819376,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4ODE5Mzc2",
      "url": null,
      "actor": null,
      "commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-738819376",
      "submitted_at": "2021-08-25T20:53:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 738822052,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4ODIyMDUy",
      "url": null,
      "actor": null,
      "commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-738822052",
      "submitted_at": "2021-08-25T20:56:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "commented",
      "id": 905874131,
      "node_id": "IC_kwDOABII5841_orT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905874131",
      "actor": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T21:06:01Z",
      "updated_at": "2021-08-25T21:06:01Z",
      "author_association": "NONE",
      "body": "Approach ACK [4646392](https://github.com/bitcoin/bitcoin/pull/20487/commits/4646392e628ffd958d18d32cfdc44e53290de017)\r\n\r\nOther than a few minor suggestions, everything looks great! Like @ryanofsky, I'm relatively new to seccomp, but from what I've read, looks good to me. Will keep reading up on seccomp, and do a more in-depth review.\r\n\r\nNot necessarily needed in this PR: what are your thoughts on `#ifdef`ing x86_64 specific seccomp features/syscalls for easier support of other platforms like ARM and MIPS?",
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-905874131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "mentioned",
      "id": 5209325998,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTIwOTMyNTk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5209325998",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T21:06:01Z"
    },
    {
      "event": "subscribed",
      "id": 5209326000,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUyMDkzMjYwMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5209326000",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T21:06:01Z"
    },
    {
      "event": "commented",
      "id": 913176181,
      "node_id": "IC_kwDOABII5842bfZ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/913176181",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-05T15:31:46Z",
      "updated_at": "2021-09-05T15:31:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Approach ACK [4646392](https://github.com/bitcoin/bitcoin/pull/20487/commits/4646392e628ffd958d18d32cfdc44e53290de017)\r\n\r\nThanks for reviewing!\r\n\r\n> Not necessarily needed in this PR: what are your thoughts on `#ifdef`ing x86_64 specific seccomp features/syscalls for easier support of other platforms like ARM and MIPS?\r\n\r\nThe entire feature is currently `#ifdef`:ed on x86_64. That can be made more fine-grained in the future if/when support for this feature to the first non-x86_64 platform is added :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-913176181",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "labeled",
      "id": 5260232816,
      "node_id": "LE_lADOABII584svfUIzwAAAAE5iMhw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5260232816",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-06T10:11:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5285988073,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE7Ecbp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5285988073",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-10T18:38:55Z"
    },
    {
      "event": "unlabeled",
      "id": 5286425536,
      "node_id": "UNLE_lADOABII584svfUIzwAAAAE7GHPA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5286425536",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-10T20:29:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5287266562,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE7JUkC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5287266562",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-11T06:36:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5287972381,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE7MA4d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5287972381",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-11T20:06:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5322333845,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAE9PF6V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5322333845",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-18T04:31:10Z"
    },
    {
      "event": "reviewed",
      "id": 758972971,
      "node_id": "PRR_kwDOABII584tPQIr",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758972971",
      "submitted_at": "2021-09-20T18:37:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758974028,
      "node_id": "PRR_kwDOABII584tPQZM",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758974028",
      "submitted_at": "2021-09-20T18:38:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758977541,
      "node_id": "PRR_kwDOABII584tPRQF",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758977541",
      "submitted_at": "2021-09-20T18:42:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758981977,
      "node_id": "PRR_kwDOABII584tPSVZ",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758981977",
      "submitted_at": "2021-09-20T18:47:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758987460,
      "node_id": "PRR_kwDOABII584tPTrE",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758987460",
      "submitted_at": "2021-09-20T18:53:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758989970,
      "node_id": "PRR_kwDOABII584tPUSS",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758989970",
      "submitted_at": "2021-09-20T18:56:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "reviewed",
      "id": 758992177,
      "node_id": "PRR_kwDOABII584tPU0x",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-758992177",
      "submitted_at": "2021-09-20T18:58:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "commented",
      "id": 923196019,
      "node_id": "IC_kwDOABII5843Btpz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923196019",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-20T19:02:07Z",
      "updated_at": "2021-09-20T19:02:07Z",
      "author_association": "MEMBER",
      "body": "Code review and lightly tested ACK. Sorry for only getting around to this now.\r\nIt looks good to me. Found no serious issues but left some nits.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-923196019",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "reviewed",
      "id": 759009573,
      "node_id": "PRR_kwDOABII584tPZEl",
      "url": null,
      "actor": null,
      "commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-759009573",
      "submitted_at": "2021-09-20T19:19:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5388486802,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAFBLciS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5388486802",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-30T15:11:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5394510882,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAFBibQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5394510882",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-01T13:42:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ3NDdkYTNhNWI2MzliNWEzMzZiNzM3ZTdlM2NiZjA2MGNmMmVmY2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "tree": {
        "sha": "c375c8eff3a7f4b02f66247b52dfee286e7fcbae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c375c8eff3a7f4b02f66247b52dfee286e7fcbae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07",
          "sha": "e69cbac628bfdca4a8e4ead821190eaf5b6b3d07",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07"
        }
      ],
      "message": "Add syscall sandboxing (seccomp-bpf)",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-10-01T13:51:10Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-10-01T13:53:59Z"
      },
      "sha": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5394585449,
      "node_id": "HRFPE_lADOABII584svfUIzwAAAAFBitdp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5394585449",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-01T13:54:20Z"
    },
    {
      "event": "subscribed",
      "id": 5395004315,
      "node_id": "SE_lADOABII584svfUIzwAAAAFBkTub",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5395004315",
      "actor": {
        "login": "Sidharth150",
        "id": 75365432,
        "node_id": "MDQ6VXNlcjc1MzY1NDMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/75365432?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sidharth150",
        "html_url": "https://github.com/Sidharth150",
        "followers_url": "https://api.github.com/users/Sidharth150/followers",
        "following_url": "https://api.github.com/users/Sidharth150/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sidharth150/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sidharth150/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sidharth150/subscriptions",
        "organizations_url": "https://api.github.com/users/Sidharth150/orgs",
        "repos_url": "https://api.github.com/users/Sidharth150/repos",
        "events_url": "https://api.github.com/users/Sidharth150/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sidharth150/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-01T14:58:38Z"
    },
    {
      "event": "commented",
      "id": 933777772,
      "node_id": "IC_kwDOABII5843qFFs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933777772",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T19:14:22Z",
      "updated_at": "2021-10-04T19:14:22Z",
      "author_association": "MEMBER",
      "body": "Code review and lightly tested ACK 4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-933777772",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "merged",
      "id": 5406591219,
      "node_id": "ME_lADOABII584svfUIzwAAAAFCQgjz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5406591219",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9e530c6352c3e3d4f2936bbbb1bcb34ff9ca6378",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e530c6352c3e3d4f2936bbbb1bcb34ff9ca6378",
      "created_at": "2021-10-04T20:46:14Z"
    },
    {
      "event": "closed",
      "id": 5406591242,
      "node_id": "CE_lADOABII584svfUIzwAAAAFCQgkK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5406591242",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-04T20:46:15Z"
    },
    {
      "event": "referenced",
      "id": 5407170767,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCSuDP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5407170767",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "48e1f25efb9eb15a68a01428f2b5e5899a498160",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/48e1f25efb9eb15a68a01428f2b5e5899a498160",
      "created_at": "2021-10-04T23:17:56Z"
    },
    {
      "event": "reviewed",
      "id": 771119135,
      "node_id": "PRR_kwDOABII584t9lgf",
      "url": null,
      "actor": null,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-771119135",
      "submitted_at": "2021-10-05T08:14:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "referenced",
      "id": 5409432848,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCbWUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5409432848",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4",
      "created_at": "2021-10-05T09:36:07Z"
    },
    {
      "event": "referenced",
      "id": 5411353797,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCirTF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5411353797",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6360e632d29549410af9c6075574f961dcee828c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6360e632d29549410af9c6075574f961dcee828c",
      "created_at": "2021-10-05T14:49:50Z"
    },
    {
      "event": "referenced",
      "id": 5411360875,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCitBr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5411360875",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "89b910711c004c21b7d67baa888073742f7f94f0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89b910711c004c21b7d67baa888073742f7f94f0",
      "created_at": "2021-10-05T14:50:53Z"
    },
    {
      "event": "commented",
      "id": 934649621,
      "node_id": "IC_kwDOABII5843tZ8V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934649621",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T18:14:27Z",
      "updated_at": "2021-10-05T18:14:27Z",
      "author_association": "MEMBER",
      "body": "Just curious, but merging this seems to have caused a few build problems that required followups: #23178 #23179 #23196, and I guess some test problems in local developer checkouts.\r\n\r\nI'm wondering if there are any CI improvements that might have caught these problems. Are too many of the CI builds using old kernels, and could adding CI builds with newer kernels catch these problems? Are too many of the CI builds using depends and could adding CI builds with system dependencies catch these problems? Is there some extended draftbot build that might have caught these problems?\r\n\r\nIt seems like it could make sense to run some extended CI on PRs that modify `configure.ac` or build scripts, but not clear what might have been useful in this case.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934649621",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 934676958,
      "node_id": "IC_kwDOABII5843tgne",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934676958",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T18:48:56Z",
      "updated_at": "2021-10-05T18:49:57Z",
      "author_association": "MEMBER",
      "body": "> could adding CI builds with newer kernels catch these problems\r\n\r\nFor the record, it's not the running kernel version that makes a difference here. But the kernel headers. What would have helped find the problem is compiling with older kernel headers. We also should have done a GUIX build.\r\n\r\nIt's the first time these matter at all for our compilation. Besides `syscall(SYS_getrandom…` for random context gathering, there is no code that directly interfaces with the Linux kernel at all.\r\n\r\nI think it's a good lesson that we need to make sure to define everything we need from the kernel ourselves, to support compilation on a wide range of installations. I knew about this problem but underestimated how much it's still a problem nowadays.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934676958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 934703453,
      "node_id": "IC_kwDOABII5843tnFd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934703453",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T19:20:37Z",
      "updated_at": "2021-10-05T19:20:37Z",
      "author_association": "MEMBER",
      "body": "I just don't understand the basics here. What CI build could you theoretically add to catch these problems? Would it be a CI build with a really old kernel and really old headers? A really new kernel and new headers? An old kernel with new headers? And new kernel with old headers?",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934703453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "referenced",
      "id": 5413712113,
      "node_id": "REFE_lADOABII584svfUIzwAAAAFCrrDx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5413712113",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5c90f6b9a3a81fdaa642a8e67e9a4f3c8e61360d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/5c90f6b9a3a81fdaa642a8e67e9a4f3c8e61360d",
      "created_at": "2021-10-05T21:20:06Z"
    },
    {
      "event": "labeled",
      "id": 5417893958,
      "node_id": "LE_lADOABII584svfUIzwAAAAFC7oBG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5417893958",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T09:04:26Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "unlabeled",
      "id": 5417894584,
      "node_id": "UNLE_lADOABII584svfUIzwAAAAFC7oK4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5417894584",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T09:04:31Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "commented",
      "id": 935805691,
      "node_id": "IC_kwDOABII5843x0L7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935805691",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T09:10:20Z",
      "updated_at": "2021-10-06T09:11:05Z",
      "author_association": "MEMBER",
      "body": "> Are too many of the CI builds using old kernels, and could adding CI builds with newer kernels catch these problems?\r\n\r\nGenerally developers tend to run the latest software, so this is usually not something that will catch a lot of fish as a CI task. In fact, CI tasks with bleeding edge software might tend to break more often. (I do run them, but not part of this project).\r\n\r\n> Is there some extended draftbot build that might have caught these problems?\r\n\r\nSimply adding the \"DrahtBot Guix build requested\" label would have caught this. I think any pull request that is tagged with \"Build system\" should be Guix-built as well. As DrahtBot is running on limited resources, it might take a day or two to create the guix build, but I think this is an acceptable delay. If there is an \"emergency-fix\" devs can always do a local guix build.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-935805691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 935894871,
      "node_id": "IC_kwDOABII5843yJ9X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935894871",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T10:06:47Z",
      "updated_at": "2021-10-06T10:06:47Z",
      "author_association": "MEMBER",
      "body": "And when it comes to preventing build errors via the CI, I think this is not something we should try to achieve at all costs. Due to compiler bugs (or just software bugs in general), there will always be at least one software configuration and build flag configuration that will fail to build. I think it is reasonable to have tests for common software configurations on the latest LTS releases of operating systems. Though, when it comes to supporting any software configuration, waiting for an actual user to report the issue instead of integrating into the CI works probably better.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-935894871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 936143228,
      "node_id": "IC_kwDOABII5843zGl8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/936143228",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T12:29:25Z",
      "updated_at": "2021-10-06T12:29:25Z",
      "author_association": "MEMBER",
      "body": "Thanks for the replies. So is the answer to my question of what CI build would catch all these problems (#23178 #23179 #23196) that any CI build using newer kernel headers would catch all these problems? That all CI builds are using older headers and practicalswift was also using older headers, and this slipped past review?\r\n\r\nMy motivation for asking is just to understand when I am reviewing a PR what class of errors I could expect CI to catch, and what class of errors I should be testing manually or asking the PR author about. In this case, I guess I failed to ask practicalswift how is this code affected when new syscalls are added? And in the future, when I'm reviewing a PR that makes significant changes to the build system, I can request GUIX builds?\r\n\r\nI don't really have opinions on what CI should check for. I just want to understand what CI **is** checking for so I can review PRs better. For example, it is useful to know if CI is only checking old kernels and we are depending on developers to manually test newer kernels. It is also useful to know more generally if CI builds tend to use older or different dependencies than actual the GUIX release.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-936143228",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "commented",
      "id": 936161133,
      "node_id": "IC_kwDOABII5843zK9t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/936161133",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T12:41:01Z",
      "updated_at": "2021-10-06T12:41:01Z",
      "author_association": "MEMBER",
      "body": "> I can request GUIX builds?\r\n\r\nSure, just add the label.\r\n\r\n> It is also useful to know more generally if CI builds tend to use older or different dependencies than actual the GUIX release.\r\n\r\nCI is a mix of cross-compile depends builds that try to mimic guix (older LTS releases with older gcc-8) and recent `clang` with native sanitizer builds from system packages (except for msan, which is also using depends). Obviously Ubuntu/Debian ship different compilers than guix, so the CI is just a proxy and not a replacement for a guix build.\r\n\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-936161133",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20487"
    },
    {
      "event": "removed_from_project",
      "id": 5430529668,
      "node_id": "RFPE_lADOABII584svfUIzwAAAAFDr06E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5430529668",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-07T19:07:37Z",
      "project_card": {
        "id": 61680680,
        "url": "https://api.github.com/projects/columns/cards/61680680",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 805901705,
      "node_id": "PRR_kwDOABII584wCRWJ",
      "url": null,
      "actor": null,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#pullrequestreview-805901705",
      "submitted_at": "2021-11-15T10:44:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
    },
    {
      "event": "locked",
      "id": 7813838001,
      "node_id": "LOE_lADOABII584svfUIzwAAAAHRvbSx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7813838001",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-15T13:10:39Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564",
      "pull_request_review_id": 539726171,
      "id": 531398564,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODU2NA==",
      "diff_hunk": "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "in_reply_to_id": null,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not make syscomp opt-out? I think secure by default is a better idea :-)",
      "created_at": "2020-11-27T06:05:34Z",
      "updated_at": "2021-04-28T11:43:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288",
      "pull_request_review_id": 540637781,
      "id": 532381288,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MTI4OA==",
      "diff_hunk": "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "in_reply_to_id": 531398564,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC there was a discussion about something similar here #17419\r\nHowever it is a bit weird and in transparent IMO to have things enabled in a dev build and others in a release build (beside some warnings of course).",
      "created_at": "2020-11-30T06:59:25Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834",
      "pull_request_review_id": 556062566,
      "id": 546437834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzNzgzNA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "path": "src/compat/seccomp-bpf.h",
      "position": null,
      "original_position": 37,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "dbad7bdb947da66b60db057c5b03c11819438257",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to self:\r\n\r\nWe should probably use `SECCOMP_RET_KILL_PROCESS` action (kill the entire process) instead of `SECCOMP_RET_KILL_THREAD/SECCOMP_RET_KILL` (kill the task) on syscall violation.\r\n\r\nThe `SECCOMP_RET_KILL_PROCESS` action was introduced in Linux 4.14. Could read `/proc/sys/kernel/seccomp/actions_avail` to see available actions.\r\n\r\nPerhaps this feature should be possible to enable only for systems running Linux 4.14 or newer.\r\n\r\nContext: https://lkml.org/lkml/2017/8/11/807",
      "created_at": "2020-12-20T21:19:40Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971",
      "pull_request_review_id": 588032516,
      "id": 574059971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDA1OTk3MQ==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another self-review:\r\n\r\nInstead of opt-ing out of debug mode via an environment variable we should make it the other way around: the debug mode should be opt-in via `--enable-debug`.\r\n\r\nIn other words: `SECCOMP_RET_KILL_PROCESS` should be the default action, and `SECCOMP_RET_TRAP` should only be used if compiled with `--enable-debug`.\r\n\r\nBackground:\r\n\r\nWhen using `SECCOMP_RET_KILL_PROCESS` the kernel immediately kills off the offending process in case of a syscall violation.\r\n\r\nWhen using `SECCOMP_RET_TRAP` the kernel sends a `SIGSYS` signal to the offending process in case of a syscall violation: that allows us to print a user-friendly error message via a signal handler. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this `SECCOMP_RET_TRAP` mode should really only be used when debugging.",
      "created_at": "2021-02-10T20:38:39Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523",
      "pull_request_review_id": 613335228,
      "id": 595237523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTIzNzUyMw==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": 574059971,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure on this. I do think feedback to the user is very important. I am slightly worried when if our syscall profile isn't 100% up to date (my experience is that this can *easily* happen especially with dynamically linked glibc), something starts killing the process without any means to diagnose or debug, that's extremely frustrating.",
      "created_at": "2021-03-16T14:44:28Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356",
      "pull_request_review_id": 613351768,
      "id": 595250356,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1MDM1Ng==",
      "diff_hunk": "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "54df39b5c42ebf572d325c1991e5d911577b711d",
      "in_reply_to_id": 531398564,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think enabling it by default should be considered in the PR first introducing this. It is absolutely something that needs experimentation and testing and fine-tuning, in different environments.",
      "created_at": "2021-03-16T14:55:59Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898",
      "pull_request_review_id": 613374088,
      "id": 595266898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI2Njg5OA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "path": "src/compat/seccomp-bpf.h",
      "position": null,
      "original_position": 37,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "dbad7bdb947da66b60db057c5b03c11819438257",
      "in_reply_to_id": 546437834,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now using `SECCOMP_RET_KILL_PROCESS`.",
      "created_at": "2021-03-16T15:13:14Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986",
      "pull_request_review_id": 613415315,
      "id": 595297986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI5Nzk4Ng==",
      "diff_hunk": "@@ -1220,7 +1231,7 @@ AC_LINK_IFELSE(\n     [ AC_MSG_RESULT(no) ]\n )\n \n-AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+AC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])",
      "path": "configure.ac",
      "position": null,
      "original_position": 30,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "af327aac2ed542b9f1ba26cf8fd0105d8e68659f",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This makes sense I guess, I suppose we can think of a way to make external signing work within a sandbox, but the obvious and most secure is to disable the creation of external processes.\r\n\r\nAs for notifications: just use ZMQ, or RPC based polling. No need to support process based notifications in sandbox mode imo, if you're taking security seriously you wouldn't expose that kind of escape hatch.",
      "created_at": "2021-03-16T15:45:44Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885",
      "pull_request_review_id": 613631493,
      "id": 595468885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQ2ODg4NQ==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": 574059971,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I guess this is the classical trade-off between security vs debuggability/ease-of-use :)\r\n\r\nMaking `SECCOMP_RET_KILL_PROCESS` the default is slightly better from a security perspective (no risk that the attacker is getting a \"second chance\" via the signal handler) whereas making `SECCOMP_RET_TRAP` the default is slightly better from a debuggability/ease-of-use perspective.\r\n\r\nI'll let others chime in here: I'll happily adjust to the consensus opinion :)\r\n\r\nThe following shows the differences in output between the two modes of operation in case of a simulated syscall violation.\r\n\r\nWhen using `./configure --enable-syscall-sandbox`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[…]-dirty (release build)\r\n…\r\nBad system call (core dumped)\r\n```\r\n\r\nWhen using `./configure --enable-syscall-sandbox --enable-debug`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox --enable-debug\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[…]-dirty (debug build)\r\n…\r\nERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\n2021-03-16T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n```\r\n",
      "created_at": "2021-03-16T19:11:12Z",
      "updated_at": "2021-04-28T11:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180",
      "pull_request_review_id": 660332428,
      "id": 632935180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTE4MA==",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "in_reply_to_id": 574059971,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@laanwj Now updated to default to debug mode as you suggested :)\r\n\r\nUpdated OP to describe the two modes of operation:\r\n* Debug mode (enabled via `configure` flag `--with-syscall-sandbox`): If a non-allowlisted syscall is called a debug handler will be invoked. Debug info will be printed (`ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.`) and `std::terminate` is called. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this mode should really only be used when debugging.\r\n* Kill without debug mode (enabled via `configure` flag `--with-syscall-sandbox=kill-without-debug`): If a non-allowlisted syscall is called the kernel will immediately kill the offending process.\r\n\r\n",
      "created_at": "2021-05-15T11:44:11Z",
      "updated_at": "2021-05-15T11:44:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643342730",
      "pull_request_review_id": 673399903,
      "id": 643342730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM0MjczMA==",
      "diff_hunk": "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nIt seems like `-sandbox=<mode>` should be a runtime option, not a build option. This way we can build and one distribute one binary with experimental sandbox support that can be disabled or enabled in different modes, instead of having to build multiple binaries with hardcoded sandbox modes.\r\n\r\nThere still would need to be a `--with-seccomp` option to be able to build on platforms without BPF, but the implementation and use of `--with-seccomp` should simpler than this option and not require complicating the build with system/boost process/multiprocess interactions.",
      "created_at": "2021-06-01T17:28:56Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643342730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643342730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643361032",
      "pull_request_review_id": 673399903,
      "id": 643361032,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM2MTAzMg==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nNot important, but instead of hardcoding the syscall order for one platform in a packed vector, it could be less fragile to populate a `std::map<int, std::string>` of the syscalls using `SYS` or `__NR` macros, see https://stackoverflow.com/questions/23249373/how-to-obtain-linux-syscall-name-from-the-syscall-number, https://unix.stackexchange.com/questions/338650/why-are-linux-system-call-numbers-in-x86-and-x86-64-different. It should also cut back the record breaking 4301 character line length.",
      "created_at": "2021-06-01T17:51:16Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643361032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643361032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643364191",
      "pull_request_review_id": 673399903,
      "id": 643364191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM2NDE5MQ==",
      "diff_hunk": "@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();",
      "path": "src/bitcoin-cli.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nI don't understand why these DisableFurtherSyscallSandboxRestrictions calls are added to so many binaries. It seems like they could significantly lessen the effects of sandboxing. It might make sense if there were TODO comments saying what needs to be done to remove these, or just general comments explaining why they are needed.",
      "created_at": "2021-06-01T17:55:52Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643364191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643364191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643370871",
      "pull_request_review_id": 673399903,
      "id": 643370871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM3MDg3MQ==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nUse of std::atomic here does not seem to make sense. If multiple threads can call InstallSyscallSandboxDebugHandler for the first time simultaneously, then a `Mutex` and `LOCK` need to be used to prevent the later threads from returning before the first thread finishes calling `sigaction` and `sigprocmask`. If multiple threads can't call InstallSyscallSandboxDebugHandler for the first time simultaneously, then this can just be a normal bool instead of an atomic bool.",
      "created_at": "2021-06-01T18:06:15Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643370871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643370871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643373661",
      "pull_request_review_id": 673399903,
      "id": 643373661,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM3MzY2MQ==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nThroughout this file is there a reason error handling code can't use normal InitError or LogPrintf functions or raise exceptions, to send errors to debug.log and the GUI instead of bypassing them and going to stderr?",
      "created_at": "2021-06-01T18:10:11Z",
      "updated_at": "2021-06-01T18:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643373661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643373661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645694853",
      "pull_request_review_id": 676460530,
      "id": 645694853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTY5NDg1Mw==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643361032,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Now addressed.\r\n\r\n> It should also cut back the record breaking 4301 character line length.\r\n\r\n:D",
      "created_at": "2021-06-04T16:15:20Z",
      "updated_at": "2021-06-04T16:15:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645694853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645694853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645717458",
      "pull_request_review_id": 676491381,
      "id": 645717458,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTcxNzQ1OA==",
      "diff_hunk": "@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();",
      "path": "src/bitcoin-cli.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643364191,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `DisableFurtherSyscallSandboxRestrictions` is (or rather: was) used to make any further/future `EnableSyscallSandbox` calls that be into no-ops.\r\n\r\nIn other words to \"lock\" the sandbox to the sandbox policy currently loaded. (Or disable the sandbox if no sandbox is loaded: in other words a call to `DisableFurtherSyscallSandboxRestrictions` without any preceding `EnableSyscallSandbox`.)\r\n\r\nThe quoted code above for example loads the `SyscallSandboxPolicy::INITIALIZATION` policy on `bitcoin-cli` startup and then locks that policy so that no matter what functions that `bitcoin-cli` may call that uses `EnableSyscallSandbox` we're guaranteed to run under `SyscallSandboxPolicy::INITIALIZATION`.\r\n\r\n`SyscallSandboxPolicy::INITIALIZATION` is the super-set of all sandbox policies in Bitcoin Core, so the code above basically says \"limit me to the syscall set we expect to be used in (any part of) Bitcoin Core, but make sure no further syscall sandbox restrictions are done in code I may call\" (in other words: ignore any upcoming `EnableSyscallSandbox` calls).\r\n\r\nThe above is how it used to be, and I agree that was a bit confusing, so I've now updated things:\r\n\r\nInstead of enabling the sandbox on first call to `void EnableSyscallSandbox(policy)`  I've now added a separate setup function `bool SetupSyscallSandbox(…)` (called at most once per binary) to enable the sandbox, and added a separate `void SetSyscallSandboxPolicy(policy)` to load a specific policy.\r\n\r\nIn other words the sandbox is opt-in via `bool SetupSyscallSandbox(…)`.\r\n\r\nA call to `SetupSyscallSandbox(…)` is made in `bitcoind` if `-sandbox=<mode>` is used.\r\n\r\nIn this PR I'm now limiting the syscall sandbox support to the `bitcoind` binary to keep things focused. I suggest we wait with the other binaries to keep things focused. We can gradually enable the sandbox for other binaries over time in future PR:s as we see fit when we've gained some experience with the experimental `bitcoind` syscall sandbox support. Sounds reasonable? :)",
      "created_at": "2021-06-04T16:52:18Z",
      "updated_at": "2021-06-04T16:52:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645717458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645717458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645860988",
      "pull_request_review_id": 676675684,
      "id": 645860988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg2MDk4OA==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643370871,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed: in the updated code there is no need for locking at all since the setup is done in `SetupSyscallSandbox` which is guaranteed to only be called once. And you're absolutely right that `std::atomic<bool>` did not make much sense here :)",
      "created_at": "2021-06-04T21:22:00Z",
      "updated_at": "2021-06-04T21:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645860988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645860988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645864786",
      "pull_request_review_id": 676678108,
      "id": 645864786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg2NDc4Ng==",
      "diff_hunk": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643373661,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. The initialization/setup logic has now been moved to `init.cpp` and it is now using the expected `InitError` and `LogPrintf`. `SetSyscallSandboxPolicy` is now throwing `std::runtime_error` in case of errors.",
      "created_at": "2021-06-04T21:26:59Z",
      "updated_at": "2021-06-04T21:26:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645864786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645864786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645886534",
      "pull_request_review_id": 676701975,
      "id": 645886534,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg4NjUzNA==",
      "diff_hunk": "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],",
      "path": "configure.ac",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "in_reply_to_id": 643342730,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great feedback. Thanks!\r\n\r\nI've now added a `-sandbox=<mode>` parameter. `--with-syscall-sandbox` has been renamed `--with-sandbox`.\r\n\r\nAvailable `-sandbox` modes are:\r\n* `-sandbox=disallow-and-log` (disallow unexpected syscalls and log the violation, then continue execution)\r\n* `-sandbox=log-and-kill` (log the violation and kill the process)\r\n* `-sandbox=kill` (kill the process immediately in case of a violation (without any logging))\r\n\r\nTo enable the syscall sandbox `--with-sandbox` is required at compile time _and_ `-sandbox=<mode>` needs to be specified at run time.\r\n\r\nThis dual opt-in approach is chosen since this is an experimental feature. We can consider relaxing this in the future when this feature has matured and has been extensively tested in many different environments. Note that `--with-sandbox=no` (no sandbox support) is intentionally the default.\r\n\r\n> There still would need to be a --with-seccomp option to be able to build on platforms without BPF, but the implementation and use of --with-seccomp should simpler than this option and not require complicating the build with system/boost process/multiprocess interactions.\r\n\r\nAdding `-sandbox=<mode>` allowed for a much simpler `--with-sandbox`, but note that the system/boost process/multiprocess interaction is still there and I'm not sure what the best approach would be if we were to get rid of it:\r\n\r\n```\r\nAC_MSG_ERROR(The options --with-sandbox (which does not allow execve) and --enable-external-signer (which uses execve) are currently incompatible.)\r\n…\r\nAC_MSG_ERROR(The options --with-sandbox (which does not allow execve) and --enable-multiprocess (which uses execve) are currently incompatible.)\r\n…\r\nAC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])\r\n```\r\n\r\nIsn't say `--with-sandbox` (no `execve`) and `--enable-external-signer` (yes `execve`) mutually exclusive by design? :) \r\n\r\nOr is the suggestion to `InitError` if any \"`execve`/`HAVE_SYSTEM` depending\" option is passed to `bitcoind` when `-sandbox=<mode>` is used?\r\n\r\nAlso, note that `--with-sandbox` will make the functional test be run under the syscall sandbox (using `-sandbox=log-and-kill`). Thus if we allowed for say `--with-sandbox --enable-external-signer` then all external signer functional tests would need to be disabled, no?\r\n\r\nPlease advice :)",
      "created_at": "2021-06-04T22:25:09Z",
      "updated_at": "2021-06-04T22:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645886534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645886534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663119115",
      "pull_request_review_id": 698332234,
      "id": 663119115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzExOTExNQ==",
      "diff_hunk": "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (default is yes if seccomp-bpf is detected under Linux x86_64)])],\n+  [use_syscall_sandbox=$withval],",
      "path": "configure.ac",
      "position": null,
      "original_position": 7,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For a little more legibility here would suggest:\r\n\r\n- Replacing current uses of `use_syscall_sandbox` with `seccomp_found` in `--with-seccomp` code\r\n- Before the `AM_CONDITIONAL`, adding\r\n```autoconf\r\ndnl Currently only enable -sandbox=<mode> feature if seccomp is found.\r\ndnl In the future, sandboxing could be also be supported with other\r\ndnl sandboxing mechanisms besides seccomp\r\nuse_syscall_sandbox=$seccomp_found\r\n  ```",
      "created_at": "2021-07-02T16:11:33Z",
      "updated_at": "2021-07-02T16:34:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663119115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663119115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663127043",
      "pull_request_review_id": 698332234,
      "id": 663127043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzEyNzA0Mw==",
      "diff_hunk": "@@ -560,6 +561,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (\\\"disallow-and-log\\\", \\\"log-and-kill\\\" or \\\"kill\\\"). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"disallow-and-log\\\" mode an invokation of an unexpected syscall will be disallowed and logged. In the \\\"log-and-kill\\\" mode an invokation of an unexpected syscall will terminate bitcoind after logging the syscall violation. In the \\\"kill\\\" mode an invokation of an unexpected syscall will cause bitcoind to be killed immediately by the kernel.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do the syscalls actually fail in the \"disallow-and-log\" mode? Would be good to describe it in the help a little more, or change it to a more suggestive name like \"log-and-fail\" if it does fail, or something like \"log\" or \"log-warning\" if it doesn't fail.\r\n\r\nAlso should s/invokation/invocation/",
      "created_at": "2021-07-02T16:26:30Z",
      "updated_at": "2021-07-02T16:31:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663127043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663127043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665937892",
      "pull_request_review_id": 701724531,
      "id": 665937892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTkzNzg5Mg==",
      "diff_hunk": "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (default is yes if seccomp-bpf is detected under Linux x86_64)])],\n+  [use_syscall_sandbox=$withval],",
      "path": "configure.ac",
      "position": null,
      "original_position": 7,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": 663119115,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea! Fixed! :)",
      "created_at": "2021-07-08T07:26:05Z",
      "updated_at": "2021-07-08T07:26:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r665937892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665937892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666533779",
      "pull_request_review_id": 702519940,
      "id": 666533779,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjUzMzc3OQ==",
      "diff_hunk": "@@ -560,6 +561,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (\\\"disallow-and-log\\\", \\\"log-and-kill\\\" or \\\"kill\\\"). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"disallow-and-log\\\" mode an invokation of an unexpected syscall will be disallowed and logged. In the \\\"log-and-kill\\\" mode an invokation of an unexpected syscall will terminate bitcoind after logging the syscall violation. In the \\\"kill\\\" mode an invokation of an unexpected syscall will cause bitcoind to be killed immediately by the kernel.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "3535c27eb8f515275aee309b207bf3585f286ce5",
      "in_reply_to_id": 663127043,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great feedback!\r\n\r\nI've decided to remove the `disallow-and-log` mode: I think the modes `log-and-kill` and `kill` should be more than enough (to start with at least).\r\n\r\n`disallow-and-log` was meant to disallow the invoked unexpected syscall (by not executing it), log the attempted syscall invocation and then continue execution. Note however that continued normal execution cannot be _guaranteed_: the exact behaviour depends on the specific error handling at the syscall invocation call site. In some cases a failed syscall will be handled gracefully and in some places it won't. The \"may or may not continue execution\" part makes this mode potentially very confusing in practice so I think it makes sense to simply remove it for now.\r\n\r\nThe typo has been fixed. Thanks!",
      "created_at": "2021-07-08T21:35:46Z",
      "updated_at": "2021-07-08T21:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r666533779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666533779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674337310",
      "pull_request_review_id": 712180640,
      "id": 674337310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDMzNzMxMA==",
      "diff_hunk": "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "path": "ci/test/00_setup_env_native_multiprocess.sh",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nBoth sandboxing and multiprocess features are runtime options that can be chosen when starting bitcoin, so ideally this would not be treated as build time conflict.\r\n\r\nIdeally could drop this `--without-seccomp` flag and only disable sandboxing at runtime if is needed, but I guess this would test changes, something like a test_runner sandbox option and:\r\n\r\n```\r\nexport TEST_RUNNER_EXTRA=\"--nosandbox\"\r\n```",
      "created_at": "2021-07-21T20:52:17Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674337310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674337310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674341092",
      "pull_request_review_id": 712180640,
      "id": 674341092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDM0MTA5Mg==",
      "diff_hunk": "@@ -1421,6 +1427,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+    AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+   seccomp_found=no\n+fi",
      "path": "configure.ac",
      "position": null,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nDo you think this will be necessary permanently? It seems like more ideally sandbox would be able to adjust itself to work with sanitizers, or give a descriptive runtime error if using -sandbox with some sanitizer mode is incompatible.",
      "created_at": "2021-07-21T20:58:23Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674341092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674341092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 1433,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674354542",
      "pull_request_review_id": 712180640,
      "id": 674354542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDM1NDU0Mg==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-kill\\\" and \\\"kill\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (args.IsArgSet(feature_using_execve)) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nShould change this to `if (!args.GetArg(feature_using_execve, \"\")).empty())`, because IsArgSet won't do the right thing for negated arguments.",
      "created_at": "2021-07-21T21:21:29Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674354542",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674354542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676915974",
      "pull_request_review_id": 712180640,
      "id": 676915974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjkxNTk3NA==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nShould probably add `&& !args.IsArgNegated(\"-sandbox\")`",
      "created_at": "2021-07-26T20:21:40Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676915974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676915974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676920065",
      "pull_request_review_id": 712180640,
      "id": 676920065,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjkyMDA2NQ==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nUSE_SYSCALL_SANDBOX macro seems to be used inconsistently in this file, some functions are undefined, some are undefined but don't do anything. Clean thing to do would seem to remove all uses of USE_SYSCALL_SANDBOX in this file and just not compile it when sandboxing is not supported in the build.",
      "created_at": "2021-07-26T20:27:57Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676920065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676920065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676996958",
      "pull_request_review_id": 712180640,
      "id": 676996958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Njk5Njk1OA==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nSome of this preprocessor magic seems strange. Can you maybe add a comment explaining, or linking to documentation?",
      "created_at": "2021-07-26T22:54:53Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676996958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676996958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676998117",
      "pull_request_review_id": 712180640,
      "id": 676998117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Njk5ODExNw==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// The syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 408,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nAre these two return conditions ever expected? It would be helpful to have a comment saying one way or the other, or maybe replacing these with assert statements if they are never expected.",
      "created_at": "2021-07-26T22:57:46Z",
      "updated_at": "2021-07-26T23:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676998117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676998117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380954",
      "pull_request_review_id": 719588166,
      "id": 680380954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MDk1NA==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-kill\\\" and \\\"kill\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (args.IsArgSet(feature_using_execve)) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674354542,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Now fixed.",
      "created_at": "2021-07-31T16:47:07Z",
      "updated_at": "2021-07-31T16:47:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380978",
      "pull_request_review_id": 719588182,
      "id": 680380978,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MDk3OA==",
      "diff_hunk": "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676915974,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Now fixed.",
      "created_at": "2021-07-31T16:47:20Z",
      "updated_at": "2021-07-31T16:47:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381160",
      "pull_request_review_id": 719588277,
      "id": 680381160,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MTE2MA==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676996958,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. I've now cut down on the preprocessor use, added comments and documentation links. Hopefully this should be more clear now :)",
      "created_at": "2021-07-31T16:48:53Z",
      "updated_at": "2021-07-31T16:48:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381289",
      "pull_request_review_id": 719588342,
      "id": 680381289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MTI4OQ==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// The syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 408,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676998117,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point: they are never expected. Now `assert`:ing instead to make our expectations clear. Thanks!",
      "created_at": "2021-07-31T16:50:00Z",
      "updated_at": "2021-07-31T16:51:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680396190",
      "pull_request_review_id": 719596524,
      "id": 680396190,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM5NjE5MA==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676920065,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think not compiling it is an option since `void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` must be present regardless of `USE_SYSCALL_SANDBOX` (to avoid `ifdef`:s at the various call sites).\r\n\r\nIf `USE_SYSCALL_SANDBOX` is defined we currently need:\r\n\r\n```c++\r\nenum class SyscallSandboxPolicy;\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\n[[nodiscard]] bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating);\r\nvoid TestDisallowedSandboxCall();\r\n```\r\n\r\nIf `USE_SYSCALL_SANDBOX` is not defined we only need:\r\n\r\n```c++\r\nenum class SyscallSandboxPolicy;\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\n```\r\n\r\nIn the latter case `SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` is a no-op.\r\n\r\nI've now simplified the macro use so that in the case of `USE_SYSCALL_SANDBOX` not being defined we get:\r\n\r\n```c++\r\n$ cpp -I src/ src/util/syscall_sandbox.cpp | grep -vE '^(#|$)'\r\nenum class SyscallSandboxPolicy {\r\n    INITIALIZATION,\r\n    INITIALIZATION_DNS_SEED,\r\n    INITIALIZATION_LOAD_BLOCKS,\r\n    INITIALIZATION_MAP_PORT,\r\n    INITIALIZATION_TOR_CONTROL,\r\n    MESSAGE_HANDLER,\r\n    NET,\r\n    NET_ADD_CONNECTION,\r\n    NET_HTTP_SERVER,\r\n    NET_HTTP_SERVER_WORKER,\r\n    NET_OPEN_CONNECTION,\r\n    SCHEDULER,\r\n    TX_INDEX,\r\n    VALIDATION_SCRIPT_CHECK,\r\n    SHUTOFF,\r\n};\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\r\n{\r\n}\r\n```\r\n\r\nAnother option would be to add `#if defined` at all call sites along the lines of:\r\n\r\n```c++\r\n#if defined(USE_SYSCALL_SANDBOX)\r\nSetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\r\n#endif // defined(USE_SYSCALL_SANDBOX)\r\n```\r\n\r\nThese are the call sites:\r\n\r\n```\r\ngit grep SetSyscallSandbox -- \":(exclude)src/util/\"\r\nsrc/bitcoind.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SHUTOFF);\r\nsrc/checkqueue.h:                SetSyscallSandboxPolicy(SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK);\r\nsrc/httpserver.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER);\r\nsrc/httpserver.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER);\r\nsrc/index/base.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TX_INDEX);\r\nsrc/mapport.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_MAP_PORT);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_DNS_SEED);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_OPEN_CONNECTION);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_ADD_CONNECTION);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::MESSAGE_HANDLER);\r\nsrc/node/blockstorage.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS);\r\nsrc/scheduler.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SCHEDULER);\r\nsrc/torcontrol.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL);\r\n```\r\n\r\nWDYT? :)",
      "created_at": "2021-07-31T18:51:42Z",
      "updated_at": "2021-07-31T18:51:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680396190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406422",
      "pull_request_review_id": 719601908,
      "id": 680406422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDQwNjQyMg==",
      "diff_hunk": "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "path": "ci/test/00_setup_env_native_multiprocess.sh",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674337310,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've now added  an`--nosandbox` test runner option, and `export TEST_RUNNER_EXTRA=\"--nosandbox\"` for this job.\r\n\r\nWhat would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?",
      "created_at": "2021-07-31T20:34:41Z",
      "updated_at": "2021-07-31T20:34:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406872",
      "pull_request_review_id": 719602170,
      "id": 680406872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDQwNjg3Mg==",
      "diff_hunk": "@@ -1421,6 +1427,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+    AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+   seccomp_found=no\n+fi",
      "path": "configure.ac",
      "position": null,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674341092,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm planning on tackling sanitizer compatibility in a follow-up PR. It is not entirely trivial since sanitizer use is not easy to detect at runtime (AFAIK) and the different sanitizers introduce the use of different sets of syscalls, but it should hopefully be doable some way. However, I prefer keeping that outside of this PR to keep things focused on the \"standard\" non-sanitizer case first :)",
      "created_at": "2021-07-31T20:39:25Z",
      "updated_at": "2021-07-31T20:40:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": 1433,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690819238",
      "pull_request_review_id": 732340445,
      "id": 690819238,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDgxOTIzOA==",
      "diff_hunk": "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "path": "ci/test/00_setup_env_native_multiprocess.sh",
      "position": null,
      "original_position": 5,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 674337310,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422\r\n\r\n> What would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?\r\n\r\nYou could add a `bool ipc_enabled` parameter to `AppInitParameterInteraction` and pass `node.init->ipc()` as the argument value where it's called in `AppInit`, and `false` as the argument value where it's called by the test framework.\r\n\r\nHandling this in `AppInitParameterInteraction` shouldn't strictly be necessary to make tests pass, but it could be used to print a more helpful error message if there's an attempt to use `bitcoin-node` IPC functionality when sandboxing is enabled. The `echoipc` RPC method is the only IPC functionality that's merged so far, so it would be nice to make this change, but it could also be done later with #10102.\r\n",
      "created_at": "2021-08-18T00:43:05Z",
      "updated_at": "2021-08-18T00:43:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r690819238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690819238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690826401",
      "pull_request_review_id": 732348452,
      "id": 690826401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDgyNjQwMQ==",
      "diff_hunk": "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "333392fbb886c56b62446490a81610ee821006e7",
      "in_reply_to_id": 676920065,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190\r\n\r\n> WDYT? :)\r\n\r\nI like your new solution, minimizing ifdefs in the implementation while also not requiring them at call sites. Conceivably syscall_sandbox could be split up multiple files to avoid using macros, but there wouldn't be a benefit with just one current sandboxing implementation.",
      "created_at": "2021-08-18T01:06:13Z",
      "updated_at": "2021-08-18T01:06:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r690826401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690826401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105058",
      "pull_request_review_id": 738819376,
      "id": 696105058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjEwNTA1OA==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 512,
      "original_position": 486,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": null,
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        allowed_syscalls.emplace(__NR_brk);     // change data segment size\r\n```",
      "created_at": "2021-08-25T20:53:17Z",
      "updated_at": "2021-08-25T20:53:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696105058",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105492",
      "pull_request_review_id": 738819934,
      "id": 696105492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjEwNTQ5Mg==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 512,
      "original_position": 486,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": 696105058,
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Similar for other insertions to `allowed_syscalls`",
      "created_at": "2021-08-25T20:54:00Z",
      "updated_at": "2021-08-25T20:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696105492",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696105492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696107198",
      "pull_request_review_id": 738822052,
      "id": 696107198,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjEwNzE5OA==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 724,
      "original_position": 698,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": null,
      "user": {
        "login": "GeneFerneau",
        "id": 80422284,
        "node_id": "MDQ6VXNlcjgwNDIyMjg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GeneFerneau",
        "html_url": "https://github.com/GeneFerneau",
        "followers_url": "https://api.github.com/users/GeneFerneau/followers",
        "following_url": "https://api.github.com/users/GeneFerneau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GeneFerneau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GeneFerneau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
        "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
        "repos_url": "https://api.github.com/users/GeneFerneau/repos",
        "events_url": "https://api.github.com/users/GeneFerneau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        bpf_policy.emplace_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\r\n```\r\n\r\nSimilar for other `push_back` calls to `bpf_policy`",
      "created_at": "2021-08-25T20:56:39Z",
      "updated_at": "2021-08-25T20:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696107198",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696107198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 724,
      "original_line": 724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430313",
      "pull_request_review_id": 746655277,
      "id": 702430313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjQzMDMxMw==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 512,
      "original_position": 486,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": 696105058,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that `__NR_brk` is `uint32_t` so I don't think there is any performance reason to use `emplace` here.",
      "created_at": "2021-09-05T14:07:31Z",
      "updated_at": "2021-09-05T14:07:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r702430313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430665",
      "pull_request_review_id": 746655494,
      "id": 702430665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjQzMDY2NQ==",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// Portability note: GetLinuxSyscallName uses SYSCALLS_LINUX_X86_64 which is Linux x86_64 specific.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 724,
      "original_position": 698,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4646392e628ffd958d18d32cfdc44e53290de017",
      "in_reply_to_id": 696107198,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That doesn't compile :)",
      "created_at": "2021-09-05T14:10:04Z",
      "updated_at": "2021-09-05T14:10:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r702430665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702430665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 724,
      "original_line": 724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712419454",
      "pull_request_review_id": 758972971,
      "id": 712419454,
      "node_id": "PRRC_kwDOABII584qdqh-",
      "diff_hunk": "@@ -562,6 +563,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (-sandbox=log-and-kill or -sandbox=kill). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"log-and-kill\\\" mode the invocation of an unexpected syscall results in a debug handler being invoked which will log the incident and terminate the program (without executing the unexpected syscall). In the \\\"kill\\\" mode the invocation of an unexpected syscall results in the entire process being killed immediately by the kernel without executing the unexpected syscall.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would suggest shortening \"Allow only allowlisted (expected)…\" to \"Allow only expected…\"",
      "created_at": "2021-09-20T18:37:16Z",
      "updated_at": "2021-09-20T18:37:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712419454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712419454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712420229",
      "pull_request_review_id": 758974028,
      "id": 712420229,
      "node_id": "PRRC_kwDOABII584qdquF",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add a comment in here, leaving this block empty looks as if something is missing.",
      "created_at": "2021-09-20T18:38:28Z",
      "updated_at": "2021-09-20T18:38:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712420229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712420229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712423006",
      "pull_request_review_id": 758977541,
      "id": 712423006,
      "node_id": "PRRC_kwDOABII584qdrZe",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd personally prefer \"log-and-abort\" and \"abort\" as options instead of \"log-and-kill\" and \"kill\". I know it's not a translated message, but it's slightly friendlier anyhow.",
      "created_at": "2021-09-20T18:42:34Z",
      "updated_at": "2021-09-20T18:42:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712423006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712423006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712426402",
      "pull_request_review_id": 758981977,
      "id": 712426402,
      "node_id": "PRRC_kwDOABII584qdsOi",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+    INITIALIZATION_TOR_CONTROL,",
      "path": "src/util/syscall_sandbox.h",
      "position": null,
      "original_position": 14,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think Torcontrol should be under \"initialization\", it's always active and keeps connecting to Tor and spinning up its onion service as long as bitcoind is running.",
      "created_at": "2021-09-20T18:47:35Z",
      "updated_at": "2021-09-20T18:47:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712426402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712426402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712430747",
      "pull_request_review_id": 758987460,
      "id": 712430747,
      "node_id": "PRRC_kwDOABII584qdtSb",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not entirely convinced it's a good idea to maintain a full list of Linux syscalls here. This definitely doesn't scale to multiple architectures. Yes, it's nice to able to print the name instead of the number in case of failures (that's all it's used for, right?), but this should be a rare enough event and we can look up the syscall number ourselves if a user reports something.",
      "created_at": "2021-09-20T18:53:43Z",
      "updated_at": "2021-09-20T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712430747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712430747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712432620",
      "pull_request_review_id": 758989970,
      "id": 712432620,
      "node_id": "PRRC_kwDOABII584qdtvs",
      "diff_hunk": "@@ -1933,6 +1969,7 @@ echo\n echo \"Options used to compile and link:\"\n echo \"  external signer = $use_external_signer\"\n echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with experimental syscall sandbox support (-sandbox=<mode>) = $use_syscall_sandbox\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 54,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is supposed to be a summary, not documentation :smile: Please shorten this to something like `echo \"  with experimental syscall sandbox support\"`",
      "created_at": "2021-09-20T18:56:28Z",
      "updated_at": "2021-09-20T18:56:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712432620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712432620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712434319",
      "pull_request_review_id": 758992177,
      "id": 712434319,
      "node_id": "PRRC_kwDOABII584qduKP",
      "diff_hunk": "@@ -160,6 +160,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n     {BCLog::LOCK, \"lock\"},\n+    {BCLog::UTIL, \"util\"},",
      "path": "src/logging.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, yes, adding a util category makes sense. We might want to migrate at least \"rand\" into here as well, at some point (not in this PR though).",
      "created_at": "2021-09-20T18:58:53Z",
      "updated_at": "2021-09-20T19:15:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712434319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712434319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712447642",
      "pull_request_review_id": 759009573,
      "id": 712447642,
      "node_id": "PRRC_kwDOABII584qdxaa",
      "diff_hunk": "@@ -417,6 +418,27 @@ static RPCHelpMan setmocktime()\n     };\n }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+static RPCHelpMan invokedisallowedsyscall()\n+{\n+    return RPCHelpMan{\n+        \"invokedisallowedsyscall\",\n+        \"\\nInvoke a disallowed syscall to trigger a syscall sandbox violation. Used for testing purposes.\\n\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"invokedisallowedsyscall\", \"\") + HelpExampleRpc(\"invokedisallowedsyscall\", \"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            if (!Params().IsTestChain()) {",
      "path": "src/rpc/misc.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea to only allow this on test chains. I was about to comment that this call (which aborts the process in an ugly way) should be behind some test flag, but this is already okay imo.",
      "created_at": "2021-09-20T19:19:36Z",
      "updated_at": "2021-09-20T19:19:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712447642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712447642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 432,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719516876",
      "pull_request_review_id": 768013911,
      "id": 719516876,
      "node_id": "PRRC_kwDOABII584q4vTM",
      "diff_hunk": "@@ -562,6 +563,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (-sandbox=log-and-kill or -sandbox=kill). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"log-and-kill\\\" mode the invocation of an unexpected syscall results in a debug handler being invoked which will log the incident and terminate the program (without executing the unexpected syscall). In the \\\"kill\\\" mode the invocation of an unexpected syscall results in the entire process being killed immediately by the kernel without executing the unexpected syscall.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712419454,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:22:10Z",
      "updated_at": "2021-09-30T15:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719516876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719516876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517009",
      "pull_request_review_id": 768014074,
      "id": 719517009,
      "node_id": "PRRC_kwDOABII584q4vVR",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712420229,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:22:18Z",
      "updated_at": "2021-09-30T15:22:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517483",
      "pull_request_review_id": 768014700,
      "id": 719517483,
      "node_id": "PRRC_kwDOABII584q4vcr",
      "diff_hunk": "@@ -1018,6 +1023,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712423006,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea: \"abort\" sounds better than \"kill\". Fixed!",
      "created_at": "2021-09-30T15:22:52Z",
      "updated_at": "2021-09-30T15:22:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517672",
      "pull_request_review_id": 768014972,
      "id": 719517672,
      "node_id": "PRRC_kwDOABII584q4vfo",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+    INITIALIZATION_TOR_CONTROL,",
      "path": "src/util/syscall_sandbox.h",
      "position": null,
      "original_position": 14,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712426402,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:23:04Z",
      "updated_at": "2021-09-30T15:23:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719517672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719518020",
      "pull_request_review_id": 768015459,
      "id": 719518020,
      "node_id": "PRRC_kwDOABII584q4vlE",
      "diff_hunk": "@@ -1933,6 +1969,7 @@ echo\n echo \"Options used to compile and link:\"\n echo \"  external signer = $use_external_signer\"\n echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with experimental syscall sandbox support (-sandbox=<mode>) = $use_syscall_sandbox\"",
      "path": "configure.ac",
      "position": null,
      "original_position": 54,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712432620,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Fixed!",
      "created_at": "2021-09-30T15:23:28Z",
      "updated_at": "2021-09-30T15:23:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719518020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719518020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720280559",
      "pull_request_review_id": 769017943,
      "id": 720280559,
      "node_id": "PRRC_kwDOABII584q7pvv",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it is only used for friendly printing of syscall names.\r\n\r\nIt might seem like a minor thing, but when developing this feature that translation (from syscall number to syscall name) has been extremely helpful. FWIW I tried developing this feature without it first and that was... very cumbersome! :)\r\n\r\nI've now added a comment clarifying how `LINUX_SYSCALLS` (previously `SYSCALLS_LINUX_X86_64`) is used:\r\n\r\n```\r\n// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\r\n// order to be able to print user friendly error messages which include the syscall name in addition\r\n// to the syscall number.\r\n//\r\n// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\r\n//\r\n// ```\r\n// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\r\n// ```\r\n//\r\n// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\r\n//\r\n// ```\r\n// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\r\n// ``\r\n//\r\n// LINUX_SYSCALLS contains two types of syscalls:\r\n// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\r\n//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\r\n//     write, open, close, etc.\r\n// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\r\n//     for which we support the syscall sandbox feature. This type of syscalls should be added to\r\n//     LINUX_SYSCALLS conditional on availability like in the following example:\r\n//         ...\r\n//         #if defined(__NR_arch_dependent_syscall)\r\n//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\r\n//         #endif // defined(__NR_arch_dependent_syscall)\r\n//         ...\r\n```\r\n\r\nNote that if `LINUX_SYSCALLS` is incomplete for some reason (new architecture or new syscall), then it will fallback on the behaviour you're suggesting (just printing the syscall number).\r\n\r\nI suggest we keep it as-is for now and revisit that decision when/if syscall sandbox support for the next architecture (non-x86-64) is added. Could that work for now? :)",
      "created_at": "2021-10-01T14:09:35Z",
      "updated_at": "2021-10-01T14:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r720280559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720280559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721635201",
      "pull_request_review_id": 770663384,
      "id": 721635201,
      "node_id": "PRRC_kwDOABII584rA0eB",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OK, I get your point better now, it's not needed to replicate this entire structure for every architecture, because it doesn't have the raw numbers, it uses the `__NR_` constants.\r\n\r\nI agree it can be useful, it too bad querying a syscall name isn't a standard libc call, or outside that, a standard linux command that the error message can be run through. To add insult to injury, the syscall numbers are in a different file on every architecture, it's not like you can just grep `/usr/include/unistd.h` and be done with it.\r\n\r\nThe thing is that even now, new syscalls are often added to the Linux kernel. It seems really annoying to track this. But maybe it's not needed? How often do we use a new syscall.",
      "created_at": "2021-10-04T18:57:58Z",
      "updated_at": "2021-10-04T19:11:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721635201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721635201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721997392",
      "pull_request_review_id": 771119135,
      "id": 721997392,
      "node_id": "PRRC_kwDOABII584rCM5Q",
      "diff_hunk": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 865,
      "original_position": 865,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://en.cppreference.com/w/cpp/language/aggregate_initialization\r\n\r\nNeither I, nor CI could find a compiler that rejects this C++20 code, so does that mean we are allowed to use it in new code now?",
      "created_at": "2021-10-05T08:14:56Z",
      "updated_at": "2021-10-05T08:14:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721997392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721997392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722011191",
      "pull_request_review_id": 771137901,
      "id": 722011191,
      "node_id": "PRRC_kwDOABII584rCQQ3",
      "diff_hunk": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 865,
      "original_position": 865,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": 721997392,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this is supported since clang 3.2 and gcc 4.7, but maybe not msvc?\r\n\r\nSee #23183 \r\n\r\n\r\nmsvc: `error C7555: use of designated initializers requires at least '/std:c++20'`",
      "created_at": "2021-10-05T08:32:02Z",
      "updated_at": "2021-10-05T14:28:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r722011191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722011191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/723164375",
      "pull_request_review_id": 772559976,
      "id": 723164375,
      "node_id": "PRRC_kwDOABII584rGpzX",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> or outside that, a standard linux command\r\n\r\nIs there a standard linux command for a popular operating system? Maybe it would be enough to say: To get the syscall name, use `grep ...` on the latest Ubuntu/Debian?",
      "created_at": "2021-10-06T11:52:52Z",
      "updated_at": "2021-10-06T11:52:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r723164375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/723164375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726077081",
      "pull_request_review_id": 776180037,
      "id": 726077081,
      "node_id": "PRRC_kwDOABII584rRw6Z",
      "diff_hunk": "@@ -0,0 +1,856 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// Portability note: SYSCALLS_LINUX_X86_64 is Linux x86_64 specific.\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{",
      "path": "src/util/syscall_sandbox.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "47473f8402a7765bb72ba5619716e31d0de6cccd",
      "in_reply_to_id": 712430747,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like `gdb` is enough to print the name of the violating syscall. See for example https://github.com/bitcoin/bitcoin/issues/23248#issue-1022522427, which prints `mincore`.",
      "created_at": "2021-10-11T12:35:32Z",
      "updated_at": "2021-10-11T12:35:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r726077081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726077081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735786962",
      "pull_request_review_id": 788379266,
      "id": 735786962,
      "node_id": "PRRC_kwDOABII584r2zfS",
      "diff_hunk": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };",
      "path": "src/util/syscall_sandbox.cpp",
      "position": 865,
      "original_position": 865,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": 721997392,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FYI adding `-Wpedantic` turns this into a warning:\r\n` $ g++ -Wall -std=c++17 -pedantic pedantic.cpp -c -o pedantic.o`\r\n\r\n> pedantic.cpp: In function ‘int main()’:\r\n> pedantic.cpp:8:13: warning: C++ designated initializers only available with ‘-std=c++2a’ or ‘-std=gnu++2a’ [-Wpedantic]\r\n>     8 |     foo bar{.a = 1};\r\n> \r\n\r\n\r\nI actually thought we had `-Wpedantic` on by default, I'm not sure why we don't. @fanquake @dongcarl is there an obvious reason I'm forgetting?\r\n\r\nEdit: Clang also has `-Wc++20-designator`.\r\n\r\nEdit2: pushed a quick branch to demonstrate the changes needed to build bitcoind (only, everything else untested) with `-Wpedantic`, which is meant to warn about the use of compiler exensions: https://github.com/theuni/bitcoin/tree/build-pedantic",
      "created_at": "2021-10-25T16:52:07Z",
      "updated_at": "2021-10-25T19:43:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r735786962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735786962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749202729",
      "pull_request_review_id": 805901705,
      "id": 749202729,
      "node_id": "PRRC_kwDOABII584sp-0p",
      "diff_hunk": "@@ -468,6 +471,10 @@ def get_bin_from_version(version, bin_name, bin_default):\n             extra_args = [[]] * num_nodes\n         if versions is None:\n             versions = [None] * num_nodes\n+        if self.is_syscall_sandbox_compiled() and not self.disable_syscall_sandbox:\n+            for i in range(len(extra_args)):\n+                if versions[i] is None or versions[i] >= 219900:",
      "path": "test/functional/test_framework/test_framework.py",
      "position": 23,
      "original_position": 23,
      "commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "original_commit_id": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is actually not in the v22.0 binary and also not backported (yet). I made a commit to bump the version: https://github.com/bitcoin/bitcoin/pull/19013/commits/4672c1ffeae515ee457968af5235a8e4418e0df5",
      "created_at": "2021-11-15T10:44:19Z",
      "updated_at": "2021-11-15T10:44:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r749202729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749202729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 476,
      "original_line": 476,
      "side": "RIGHT"
    }
  ]
}