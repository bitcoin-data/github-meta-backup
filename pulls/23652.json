{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652",
    "id": 793878042,
    "node_id": "PR_kwDOABII584vUZ4a",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23652",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/23652.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/23652.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23652",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23652/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/fab6c43b40773555b3f919c1403b8f3f48e92d5c",
    "number": 23652,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "doc: Document optional RPC result fields",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 148216,
        "node_id": "MDU6TGFiZWwxNDgyMTY=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
        "name": "Docs",
        "color": "02d7e1",
        "default": false
      }
    ],
    "created_at": "2021-12-02T16:39:14Z",
    "updated_at": "2022-12-11T10:02:27Z",
    "closed_at": "2021-12-03T09:18:19Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "701a246286943090466f100bbbf0910c7f2a8e98",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "MarcoFalke:2112-docOptPeer",
      "ref": "2112-docOptPeer",
      "sha": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 40046254,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MDA0NjI1NA==",
        "name": "b-c",
        "full_name": "MarcoFalke/b-c",
        "owner": {
          "login": "MarcoFalke",
          "id": 6399679,
          "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MarcoFalke",
          "html_url": "https://github.com/MarcoFalke",
          "followers_url": "https://api.github.com/users/MarcoFalke/followers",
          "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
          "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
          "repos_url": "https://api.github.com/users/MarcoFalke/repos",
          "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/MarcoFalke/b-c",
        "fork": true,
        "url": "https://api.github.com/repos/MarcoFalke/b-c",
        "archive_url": "https://api.github.com/repos/MarcoFalke/b-c/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/MarcoFalke/b-c/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/MarcoFalke/b-c/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/MarcoFalke/b-c/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/MarcoFalke/b-c/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/MarcoFalke/b-c/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/MarcoFalke/b-c/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/MarcoFalke/b-c/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/MarcoFalke/b-c/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/MarcoFalke/b-c/contributors",
        "deployments_url": "https://api.github.com/repos/MarcoFalke/b-c/deployments",
        "downloads_url": "https://api.github.com/repos/MarcoFalke/b-c/downloads",
        "events_url": "https://api.github.com/repos/MarcoFalke/b-c/events",
        "forks_url": "https://api.github.com/repos/MarcoFalke/b-c/forks",
        "git_commits_url": "https://api.github.com/repos/MarcoFalke/b-c/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/MarcoFalke/b-c/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/MarcoFalke/b-c/git/tags%7B/sha%7D",
        "git_url": "git://github.com/MarcoFalke/b-c.git",
        "issue_comment_url": "https://api.github.com/repos/MarcoFalke/b-c/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/MarcoFalke/b-c/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/MarcoFalke/b-c/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/MarcoFalke/b-c/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/MarcoFalke/b-c/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/MarcoFalke/b-c/languages",
        "merges_url": "https://api.github.com/repos/MarcoFalke/b-c/merges",
        "milestones_url": "https://api.github.com/repos/MarcoFalke/b-c/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/MarcoFalke/b-c/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/MarcoFalke/b-c/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/MarcoFalke/b-c/releases%7B/id%7D",
        "ssh_url": "git@github.com:MarcoFalke/b-c.git",
        "stargazers_url": "https://api.github.com/repos/MarcoFalke/b-c/stargazers",
        "statuses_url": "https://api.github.com/repos/MarcoFalke/b-c/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/MarcoFalke/b-c/subscribers",
        "subscription_url": "https://api.github.com/repos/MarcoFalke/b-c/subscription",
        "tags_url": "https://api.github.com/repos/MarcoFalke/b-c/tags",
        "teams_url": "https://api.github.com/repos/MarcoFalke/b-c/teams",
        "trees_url": "https://api.github.com/repos/MarcoFalke/b-c/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/MarcoFalke/b-c.git",
        "hooks_url": "https://api.github.com/repos/MarcoFalke/b-c/hooks",
        "svn_url": "https://github.com/MarcoFalke/b-c",
        "homepage": "",
        "language": "C++",
        "forks_count": 12,
        "stargazers_count": 25,
        "watchers_count": 25,
        "size": 205775,
        "default_branch": "master",
        "open_issues_count": 25,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:04Z",
        "created_at": "2015-08-01T12:42:47Z",
        "updated_at": "2023-05-28T20:12:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "26a1147ce56083d7aa820ac115c16b01e47d911c",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 100,
    "deletions": 98,
    "changed_files": 2,
    "commits": 2,
    "review_comments": 9,
    "comments": 3
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhZWUyNjU2YThkZTM5NzllYzczOTJkMzJkYmQzYTlhNTc3NmJlZmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faee2656a8de3979ec7392d32dbd3a9a5776befb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/faee2656a8de3979ec7392d32dbd3a9a5776befb",
      "tree": {
        "sha": "63b70b762ca741bb8fa9921fbcf75559a8435ea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b70b762ca741bb8fa9921fbcf75559a8435ea7"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree 63b70b762ca741bb8fa9921fbcf75559a8435ea7\nparent 26a1147ce56083d7aa820ac115c16b01e47d911c\nauthor MarcoFalke <falke.marco@gmail.com> 1638461376 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638463098 +0100\n\ndoc: Document optional result fields in getpeerinfo\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgisgwAlKWQwB4oFiYUFMUbQP0I9+fKjGpaqZvD0XTVU0BuSRO/pYMlG5Uckv2/\njob+xEr/hdHYGAZ1u+LlYysqTJYlWInWfpK87KLgYDY2DYRk36Jsbj4x2rjbOXie\nmnfWOF9Nva3qnssHvd7UGSnDFINmc7V2Jz9hfYzMSv3T2lk8zHJG9BFihzIVAU1d\nR5gjuPuioOxgZqEa1cSP3YDiq+ufcr3OZdtRP0HpHkwg1Lf25gUFen+8XrgNHiMj\nRI7lPcxol8nUoC2399b6J2hL3oOsI8h1Z/EuaH1IOH2d1yg9IaiTLP3Z/yBkIX0Q\nqOFGUqwuuwGUK3iw2CGNuwLDnfuo7ELL093+fiP+VYk6MGJ7D4NJe+pop2hSz9YS\nKm3nkDRQgfiV6amzM/n92r5fSCtzUwdxorOtZrlvHlxMVHD7B+KccvlRteNK8yb1\n1XJ27JsApWaIEybXCf31hyYEFLp7O4UVTMq1M3XjLusyiPlu22BlMFk1bmwPqq02\nqp9PbpiT\n=UcaT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26a1147ce56083d7aa820ac115c16b01e47d911c",
          "sha": "26a1147ce56083d7aa820ac115c16b01e47d911c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26a1147ce56083d7aa820ac115c16b01e47d911c"
        }
      ],
      "message": "doc: Document optional result fields in getpeerinfo\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.",
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T16:38:18Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T16:09:36Z"
      },
      "sha": "faee2656a8de3979ec7392d32dbd3a9a5776befb"
    },
    {
      "event": "commented",
      "id": 984799219,
      "node_id": "IC_kwDOABII5846stfz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/984799219",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-02T16:39:36Z",
      "updated_at": "2021-12-02T16:39:36Z",
      "author_association": "MEMBER",
      "body": "Needed by itself and for #23083",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#issuecomment-984799219",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23652"
    },
    {
      "event": "labeled",
      "id": 5707350098,
      "node_id": "LE_lADOABII584_wzdOzwAAAAFUL0BS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5707350098",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-02T17:15:28Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "renamed",
      "id": 5707704800,
      "node_id": "RTE_lADOABII584_wzdOzwAAAAFUNKng",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5707704800",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-02T18:20:23Z",
      "rename": {
        "from": "doc: Document optional result fields in getpeerinfo",
        "to": "doc: Document optional RPC result fields"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhYjZjNDNiNDA3NzM1NTViM2Y5MTljMTQwM2I4ZjNmNDhlOTJkNWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "tree": {
        "sha": "76bf16a27b6f750b55f2c114e6eb3b86e2f577f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76bf16a27b6f750b55f2c114e6eb3b86e2f577f4"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree 76bf16a27b6f750b55f2c114e6eb3b86e2f577f4\nparent faee2656a8de3979ec7392d32dbd3a9a5776befb\nauthor MarcoFalke <falke.marco@gmail.com> 1638469409 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638469355 +0100\n\ndoc: Document optional result fields in validateaddress\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhhWAv9EKAmt8UC6H6js/5zUA+M2cz7N0Umss7EFnOlo9romDFHItr3Yw1UZD2H\n5mCvYQXvurx3lHyQYgT+iYHS9bmmsB56OAoJPc2yG0gwIbyY8yc6/+GxNXD2cdyO\n4wXyNKJORcL/1gJeQolmoH/MjvLg04LSy4QXS4xBB2+2UavFnXQ/cogo+QcP5xk0\nGGTC0mRGJVez7QsqvOJOHOthVtx784jmxNz4XJlmcJG4nWZiQNahTeuL533oisQb\nzxXqzn4mSYk5mlpc8ky8CqOhfKGD6AAgPLoFexWSIpGq62ikl2IuwyvupXdZZC9E\nUDlJqaJMLD9F5tkQAzYlSZ0Z6k9Q2HVdi7D/bQs9MX5FgvH2uVc0Cttt4mSWev8O\nid8bhDqccG213Nac0cvvoiv2e1A0xeCglIfPlc3IB7zNS4zV2EdJbjLqEzaQtil2\nRyCRcDR97X40/ThP55q+ZIPZ7eA9bNhbiDlJfseWEUj6vHJcpzlDWDT504BDfZtn\n5nIWDQg2\n=iuJD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faee2656a8de3979ec7392d32dbd3a9a5776befb",
          "sha": "faee2656a8de3979ec7392d32dbd3a9a5776befb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/faee2656a8de3979ec7392d32dbd3a9a5776befb"
        }
      ],
      "message": "doc: Document optional result fields in validateaddress\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.",
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T18:22:35Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T18:23:29Z"
      },
      "sha": "fab6c43b40773555b3f919c1403b8f3f48e92d5c"
    },
    {
      "event": "reviewed",
      "id": 822348546,
      "node_id": "PRR_kwDOABII584xBAsC",
      "url": null,
      "actor": null,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#pullrequestreview-822348546",
      "submitted_at": "2021-12-03T08:01:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
    },
    {
      "event": "commented",
      "id": 985345358,
      "node_id": "IC_kwDOABII5846uy1O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985345358",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-03T09:13:23Z",
      "updated_at": "2021-12-03T09:13:23Z",
      "author_association": "MEMBER",
      "body": "Rendered diff:\r\n\r\n```diff\r\ndiff --git a/getpeerinfo b/getpeerinfo\r\nindex e7ab8e8..ae40ea4 100644\r\n--- a/getpeerinfo\r\n+++ b/getpeerinfo\r\n@@ -34,16 +34,16 @@ Result:\r\n     \"inbound\" : true|false,               (boolean) Inbound (true) or Outbound (false)\r\n     \"bip152_hb_to\" : true|false,          (boolean) Whether we selected peer as (compact blocks) high-bandwidth peer\r\n     \"bip152_hb_from\" : true|false,        (boolean) Whether peer selected us as (compact blocks) high-bandwidth peer\r\n-    \"startingheight\" : n,                 (numeric) The starting height (block) of the peer\r\n-    \"synced_headers\" : n,                 (numeric) The last header we have in common with this peer\r\n-    \"synced_blocks\" : n,                  (numeric) The last block we have in common with this peer\r\n-    \"inflight\" : [                        (json array)\r\n+    \"startingheight\" : n,                 (numeric, optional) The starting height (block) of the peer\r\n+    \"synced_headers\" : n,                 (numeric, optional) The last header we have in common with this peer\r\n+    \"synced_blocks\" : n,                  (numeric, optional) The last block we have in common with this peer\r\n+    \"inflight\" : [                        (json array, optional)\r\n       n,                                  (numeric) The heights of blocks we're currently asking from this peer\r\n       ...\r\n     ],\r\n-    \"addr_relay_enabled\" : true|false,    (boolean) Whether we participate in address relay with this peer\r\n-    \"addr_processed\" : n,                 (numeric) The total number of addresses processed, excluding those dropped due to rate limiting\r\n-    \"addr_rate_limited\" : n,              (numeric) The total number of addresses dropped due to rate limiting\r\n+    \"addr_relay_enabled\" : true|false,    (boolean, optional) Whether we participate in address relay with this peer\r\n+    \"addr_processed\" : n,                 (numeric, optional) The total number of addresses processed, excluding those dropped due to rate limiting\r\n+    \"addr_rate_limited\" : n,              (numeric, optional) The total number of addresses dropped due to rate limiting\r\n     \"permissions\" : [                     (json array) Any special permissions that have been granted to this peer\r\n       \"str\",                              (string) bloomfilter (allow requesting BIP37 filtered blocks and transactions),\r\n                                           noban (do not ban for misbehavior; implies download),\r\ndiff --git a/validateaddress b/validateaddress\r\nindex 90153d0..a02faee 100644\r\n--- a/validateaddress\r\n+++ b/validateaddress\r\n@@ -15,7 +15,7 @@ Result:\r\n   \"witness_version\" : n,        (numeric, optional) The version number of the witness program\r\n   \"witness_program\" : \"hex\",    (string, optional) The hex value of the witness program\r\n   \"error\" : \"str\",              (string, optional) Error message, if any\r\n-  \"error_locations\" : [         (json array) Indices of likely error locations in address, if known (e.g. Bech32 errors)\r\n+  \"error_locations\" : [         (json array, optional) Indices of likely error locations in address, if known (e.g. Bech32 errors)\r\n     n,                          (numeric) index of a potential error\r\n     ...\r\n   ]\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#issuecomment-985345358",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23652"
    },
    {
      "event": "referenced",
      "id": 5710857985,
      "node_id": "REFE_lADOABII584_wzdOzwAAAAFUZMcB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5710857985",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ee9a00f90e81a6978b30bdb250a37cbfa6da022",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/0ee9a00f90e81a6978b30bdb250a37cbfa6da022",
      "created_at": "2021-12-03T09:17:04Z"
    },
    {
      "event": "commented",
      "id": 985353677,
      "node_id": "IC_kwDOABII5846u03N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985353677",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-03T09:18:19Z",
      "updated_at": "2021-12-03T09:18:19Z",
      "author_association": "MEMBER",
      "body": "This was merged.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#issuecomment-985353677",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23652"
    },
    {
      "event": "closed",
      "id": 5710864722,
      "node_id": "CE_lADOABII584_wzdOzwAAAAFUZOFS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5710864722",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-03T09:18:19Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 5710867135,
      "node_id": "HRDE_lADOABII584_wzdOzwAAAAFUZOq_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5710867135",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-03T09:18:48Z"
    },
    {
      "event": "referenced",
      "id": 5713039915,
      "node_id": "REFE_lADOABII584_wzdOzwAAAAFUhhIr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5713039915",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5f64f29c74c572f42a2f728d4775032fc93ef6c0",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/5f64f29c74c572f42a2f728d4775032fc93ef6c0",
      "created_at": "2021-12-03T16:06:42Z"
    },
    {
      "event": "reviewed",
      "id": 828346681,
      "node_id": "PRR_kwDOABII584xX5E5",
      "url": null,
      "actor": null,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#pullrequestreview-828346681",
      "submitted_at": "2021-12-10T00:57:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
    },
    {
      "event": "reviewed",
      "id": 828350453,
      "node_id": "PRR_kwDOABII584xX5_1",
      "url": null,
      "actor": null,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": ".",
      "user": {
        "login": "alirezaayande",
        "id": 95385523,
        "node_id": "U_kgDOBa93sw",
        "avatar_url": "https://avatars.githubusercontent.com/u/95385523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alirezaayande",
        "html_url": "https://github.com/alirezaayande",
        "followers_url": "https://api.github.com/users/alirezaayande/followers",
        "following_url": "https://api.github.com/users/alirezaayande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alirezaayande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alirezaayande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alirezaayande/subscriptions",
        "organizations_url": "https://api.github.com/users/alirezaayande/orgs",
        "repos_url": "https://api.github.com/users/alirezaayande/repos",
        "events_url": "https://api.github.com/users/alirezaayande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alirezaayande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#pullrequestreview-828350453",
      "submitted_at": "2021-12-10T01:06:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
    },
    {
      "event": "comment_deleted",
      "id": 5744761483,
      "node_id": "CDE_lADOABII584_wzdOzwAAAAFWahqL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5744761483",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T01:21:22Z"
    },
    {
      "event": "comment_deleted",
      "id": 5744761842,
      "node_id": "CDE_lADOABII584_wzdOzwAAAAFWahvy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5744761842",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T01:21:25Z"
    },
    {
      "event": "referenced",
      "id": 5807337739,
      "node_id": "REFE_lADOABII584_wzdOzwAAAAFaJPEL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5807337739",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bf0ef6150fc500ed13a9ee0c5428a0ac238de642",
      "commit_url": "https://api.github.com/repos/RandyMcMillan/mempool-tab/commits/bf0ef6150fc500ed13a9ee0c5428a0ac238de642",
      "created_at": "2021-12-23T00:12:15Z"
    },
    {
      "event": "locked",
      "id": 8007160613,
      "node_id": "LOE_lADOABII584_wzdOzwAAAAHdQ5Ml",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8007160613",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T10:02:27Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761717236",
      "pull_request_review_id": 822348546,
      "id": 761717236,
      "node_id": "PRRC_kwDOABII584tZuH0",
      "diff_hunk": "@@ -36,32 +36,33 @@\n \n static RPCHelpMan validateaddress()\n {\n-    return RPCHelpMan{\"validateaddress\",\n-                \"\\nReturn information about the given bitcoin address.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+    return RPCHelpMan{\n+        \"validateaddress\",\n+        \"\\nReturn information about the given bitcoin address.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n+                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n+                {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n+                {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n+                {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n+                {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n+                {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n+                {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n+                {RPCResult::Type::ARR, \"error_locations\", /*optional=*/true, \"Indices of likely error locations in address, if known (e.g. Bech32 errors)\",",
      "path": "src/rpc/misc.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": null,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was just curious about this thing. In this section of code, two ways of commenting the argument as optional are used:\r\n1. `/* optional */`\r\n2. `/*optional=*/`\r\n\r\nI have noticed that in this PR, you have used the second way of commenting for all the comments you added and have not changed the preexisting comments.\r\nIf the second way of commenting is the right way of the two. Maybe it could be taken up in follow-up PRs to refactor the type 1 comments.",
      "created_at": "2021-12-03T08:00:59Z",
      "updated_at": "2021-12-03T08:01:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r761717236",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761717236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761737962",
      "pull_request_review_id": 822378018,
      "id": 761737962,
      "node_id": "PRRC_kwDOABII584tZzLq",
      "diff_hunk": "@@ -36,32 +36,33 @@\n \n static RPCHelpMan validateaddress()\n {\n-    return RPCHelpMan{\"validateaddress\",\n-                \"\\nReturn information about the given bitcoin address.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+    return RPCHelpMan{\n+        \"validateaddress\",\n+        \"\\nReturn information about the given bitcoin address.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n+                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n+                {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n+                {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n+                {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n+                {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n+                {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n+                {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n+                {RPCResult::Type::ARR, \"error_locations\", /*optional=*/true, \"Indices of likely error locations in address, if known (e.g. Bech32 errors)\",",
      "path": "src/rpc/misc.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 761717236,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, this is being done in https://github.com/bitcoin/bitcoin/pull/23545\r\n\r\n",
      "created_at": "2021-12-03T08:36:37Z",
      "updated_at": "2021-12-03T08:36:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r761737962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761737962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761745344",
      "pull_request_review_id": 822388236,
      "id": 761745344,
      "node_id": "PRRC_kwDOABII584tZ0_A",
      "diff_hunk": "@@ -36,32 +36,33 @@\n \n static RPCHelpMan validateaddress()\n {\n-    return RPCHelpMan{\"validateaddress\",\n-                \"\\nReturn information about the given bitcoin address.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+    return RPCHelpMan{\n+        \"validateaddress\",\n+        \"\\nReturn information about the given bitcoin address.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n+                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n+                {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n+                {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n+                {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n+                {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n+                {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n+                {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n+                {RPCResult::Type::ARR, \"error_locations\", /*optional=*/true, \"Indices of likely error locations in address, if known (e.g. Bech32 errors)\",",
      "path": "src/rpc/misc.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 761717236,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> this is being done in #23545\r\n\r\nThat's great! Just have to wait for a little to resolve PR conflicts with #23545",
      "created_at": "2021-12-03T08:48:02Z",
      "updated_at": "2021-12-03T08:48:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r761745344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761745344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766266782",
      "pull_request_review_id": 828346681,
      "id": 766266782,
      "node_id": "PRRC_kwDOABII584trE2e",
      "diff_hunk": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},",
      "path": "src/rpc/net.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When are these not provided? Looks impossible to actually happen? Maybe a rare threading race (should we even document those?)?",
      "created_at": "2021-12-10T00:57:39Z",
      "updated_at": "2021-12-10T00:57:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r766266782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766266782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766462464",
      "pull_request_review_id": 828578174,
      "id": 766462464,
      "node_id": "PRRC_kwDOABII584tr0oA",
      "diff_hunk": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},",
      "path": "src/rpc/net.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 766266782,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am happy to review a pull request that always provides them.",
      "created_at": "2021-12-10T08:17:38Z",
      "updated_at": "2021-12-10T08:17:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r766462464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766462464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766843537",
      "pull_request_review_id": 829131817,
      "id": 766843537,
      "node_id": "PRRC_kwDOABII584ttRqR",
      "diff_hunk": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},",
      "path": "src/rpc/net.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 766266782,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My point is that the current code appears to already always provide them.",
      "created_at": "2021-12-10T17:08:28Z",
      "updated_at": "2021-12-10T17:08:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r766843537",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766843537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767128916",
      "pull_request_review_id": 829512764,
      "id": 767128916,
      "node_id": "PRRC_kwDOABII584tuXVU",
      "diff_hunk": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},",
      "path": "src/rpc/net.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 766266782,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They are not if `fStateStats` is false.\r\n\r\nAgain, if you find a way to remove the `fStateStats` bool, please ping me for review.",
      "created_at": "2021-12-11T08:29:49Z",
      "updated_at": "2021-12-11T08:29:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r767128916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767128916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767164526",
      "pull_request_review_id": 829540225,
      "id": 767164526,
      "node_id": "PRRC_kwDOABII584tugBu",
      "diff_hunk": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},",
      "path": "src/rpc/net.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 766266782,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When can it be false?",
      "created_at": "2021-12-11T15:21:27Z",
      "updated_at": "2021-12-11T15:21:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r767164526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767164526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767165301",
      "pull_request_review_id": 829540792,
      "id": 767165301,
      "node_id": "PRRC_kwDOABII584tugN1",
      "diff_hunk": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},",
      "path": "src/rpc/net.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "original_commit_id": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "in_reply_to_id": 766266782,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> When can it be false?\r\n\r\nYou answered this in your first comment:\r\n\r\n> threading race (should we even document those?)?\r\n\r\nI'd say yes, not only to clarify the interface, but also to avoid applications from crashing due to unexpected KeyError",
      "created_at": "2021-12-11T15:30:09Z",
      "updated_at": "2021-12-11T15:30:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23652#discussion_r767165301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/767165301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23652"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    }
  ]
}