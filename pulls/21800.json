{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
    "id": 625496527,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjI1NDk2NTI3",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21800",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21800.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21800.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/accf3d5868460b4b14ab607fd66ac985b086fbb3",
    "number": 21800,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "mempool/validation: mempool ancestor/descendant limits for packages",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR implements a function to calculate mempool ancestors for a package and enforces ancestor/descendant limits on them as a whole. It reuses a portion of `CalculateMemPoolAncestors()`; there's also a small refactor to move the reused code into a generic helper function. Instead of calculating ancestors and descendants on every single transaction in the package and their ancestors, we use a \"worst case\" heuristic, treating every transaction in the package as each other's ancestor and descendant. This may overestimate everyone's counts, but is still pretty accurate in the our main package use cases, in which at least one of the transactions in the package is directly related to all the others (e.g. 1 parent + 1 child, multiple parents with 1 child, or chains).\r\n\r\nNote on Terminology: While \"package\" is often used to describe groups of related transactions _within_ the mempool, here, I only use package to mean the group of not-in-mempool transactions we are currently validating.\r\n\r\n#### Motivation\r\n\r\nIt would be a potential DoS vector to allow submission of packages to mempool without a proper guard for mempool ancestors/descendants. In general, the purpose of mempool ancestor/descendant limits is to limit the computational complexity of dealing with families during removals and additions. We want to be able to validate multiple transactions on top of the mempool, but also avoid these scenarios:\r\n\r\n- We underestimate the ancestors/descendants during package validation and end up with extremely complex families in our mempool (potentially a DoS vector).\r\n- We expend an unreasonable amount of resources calculating everyone's ancestors and descendants during package validation.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-04-28T19:28:31Z",
    "updated_at": "2022-08-19T08:15:51Z",
    "closed_at": "2021-08-09T04:24:35Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-08-09T04:24:35Z",
    "merge_commit_sha": "21438d55d553ae5bf3be7c0d4431aaf136db6c6b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "glozow:package-mempool-ancestors",
      "ref": "package-mempool-ancestors",
      "sha": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 225090,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T10:00:34Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2022-01-07T17:55:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d67330d11245b11fbdd5e2dd5343ee451186931e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 709,
    "deletions": 82,
    "changed_files": 9,
    "commits": 9,
    "review_comments": 112,
    "comments": 24
  },
  "events": [
    {
      "event": "labeled",
      "id": 4659136109,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTkxMzYxMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4659136109",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T20:42:15Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4659136112,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTkxMzYxMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4659136112",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T20:42:15Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "labeled",
      "id": 4659136113,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTkxMzYxMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4659136113",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T20:42:15Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 4659136118,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTkxMzYxMTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4659136118",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T20:42:15Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4659136120,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTkxMzYxMjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4659136120",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T20:42:15Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "labeled",
      "id": 4659136122,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NTkxMzYxMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4659136122",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T20:42:15Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 828948454,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyODk0ODQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828948454",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-29T05:26:15Z",
      "updated_at": "2021-08-06T17:10:30Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22582](https://github.com/bitcoin/bitcoin/pull/22582) (test: a test to check descendant limits by ritickgoenka)\n* [#22543](https://github.com/bitcoin/bitcoin/pull/22543) (test: Use MiniWallet in mempool_limit.py by ShubhamPalriwala)\n* [#22290](https://github.com/bitcoin/bitcoin/pull/22290) (Package Mempool Submission with Package Fee-Bumping by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-828948454",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4806854609,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgwNjg1NDYwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4806854609",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T16:02:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4814085058,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgxNDA4NTA1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4814085058",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-28T18:15:34Z"
    },
    {
      "event": "renamed",
      "id": 4824299091,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDgyNDI5OTA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824299091",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T09:46:50Z",
      "rename": {
        "from": "[WIP] mempool/validation: mempool ancestor/descendant limits for packages",
        "to": "mempool/validation: mempool ancestor/descendant limits for packages"
      }
    },
    {
      "event": "ready_for_review",
      "id": 4824299327,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0ODI0Mjk5MzI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824299327",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T09:46:53Z"
    },
    {
      "event": "unlabeled",
      "id": 4824621962,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgyNDYyMTk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824621962",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T10:52:57Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 4824621966,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgyNDYyMTk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824621966",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T10:52:57Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 4824621969,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgyNDYyMTk2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824621969",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T10:52:57Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 4824621970,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgyNDYyMTk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824621970",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T10:52:57Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "labeled",
      "id": 4824621973,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ4MjQ2MjE5NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4824621973",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-01T10:52:57Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 4846496181,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ4NDY0OTYxODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4846496181",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-05T10:28:30Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 856107966,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjEwNzk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856107966",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-07T17:03:39Z",
      "updated_at": "2021-06-07T17:03:39Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Treating every transaction in the package as each other's ancestor and descendant is a good, conservative heuristic to use, since it can never underestimate the true number of ancestors/descendants. If it's too limiting, we could potentially implement looser limits in future.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856107966",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "reviewed",
      "id": 678037341,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4MDM3MzQx",
      "url": null,
      "actor": null,
      "commit_id": "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.  The simplification taken of assuming each transaction has as many more ancestors and descendants as there are transactions in the package is a clever way to avoid writing/repurposing a bunch of code that's not necessary for the ultimate purpose of allowing package relay.\r\n\r\nHowever, the more the results returned by TMPA diverge from the results we'd get from submitting each transaction to our mempool individually, the more I think package validation should be using a different interface than individual transaction validation (e.g., a different parameter to TMPA or a different RPC altogether).\r\n\r\nReviewed all the code, ran the functional tests, and tweaked the tests to see if I could get something unexpected to happen (nothing did).  I have one minor inline comment below about using a different error string when we're using different evaluation criteria.\r\n\r\nI tried to think of additional tests, but the only thing I've got is that it might be nice to either replicate or convert the CPFP carve out tests from `test/functional/mempool_package_onemore.py` to use TMPA, e.g. as a variation of the current \"A-shaped test\" (I actually tried to do this real quick but couldn't get it to work; it was clearly my fault as I got the same error whether I used `submitrawtransaction` or TMPA).\r\n\r\nOverall, this PR LGTM.  Thanks!",
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-678037341",
      "submitted_at": "2021-06-08T08:40:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "commented",
      "id": 856597823,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjU5NzgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856597823",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T09:07:07Z",
      "updated_at": "2021-06-08T09:07:07Z",
      "author_association": "MEMBER",
      "body": "@harding thank you for the review!!!\r\n\r\n> However, the more the results returned by TMPA diverge from the results we'd get from submitting each transaction to our mempool individually, the more I think package validation should be using a different interface than individual transaction validation (e.g., a different parameter to TMPA or a different RPC altogether).\r\n\r\nI agree, and they will likely continue to diverge if we add `bypass_timelocks` and such... Perhaps we can have a regtest-only rawpackage RPC with a `test_accept` parameter (in my opinion users should never have to interact with packages)? And testmempoolaccept can be for users / L2 testing?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856597823",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 4857051177,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg1NzA1MTE3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4857051177",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T09:07:07Z"
    },
    {
      "event": "subscribed",
      "id": 4857051182,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NTcwNTExODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4857051182",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T09:07:07Z"
    },
    {
      "event": "commented",
      "id": 856986331,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1Njk4NjMzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856986331",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T18:13:19Z",
      "updated_at": "2021-06-08T18:13:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "@glozow \r\n\r\n> Perhaps we can have a regtest-only rawpackage RPC with a `test_accept` parameter (in my opinion users should never have to interact with packages)?\r\n\r\nThere's certainly no need for users to interact with packages before there's a reliable package relay mechanism, so starting with regtest-only seems like a good idea to me.  If someone later comes along with a reason it should be user-facing, they can put in the (probably trivial) amount of work to make the RPC available on mainnet and the other networks.\r\n\r\n>  And testmempoolaccept can be for users / L2 testing?\r\n\r\nFor users, yes.  I don't think anyone is using it today for L2 testing and I'm not sure it's really well suited to that---testmempoolaccept tells you whether your transaction would be accepted into the current mempool, but L2 testers really want to know whether the transaction will be accepted into a future mempool; a failure now is a reliable harbinger of failure later, but a success now doesn't guarantee success in the future (even ignoring that relay policy can be made more restrictive).",
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856986331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 4860224612,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg2MDIyNDYxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4860224612",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T18:13:19Z"
    },
    {
      "event": "subscribed",
      "id": 4860224616,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NjAyMjQ2MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4860224616",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-08T18:13:19Z"
    },
    {
      "event": "commented",
      "id": 857845044,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1Nzg0NTA0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857845044",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T16:21:17Z",
      "updated_at": "2021-06-09T16:23:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> For users, yes. I don't think anyone is using it today for L2 testing and I'm not sure it's really well suited to that---testmempoolaccept tells you whether your transaction would be accepted into the current mempool, but L2 testers really want to know whether the transaction will be accepted into a future mempool; a failure now is a reliable harbinger of failure later, but a success now doesn't guarantee success in the future (even ignoring that relay policy can be made more restrictive).\r\n\r\nI'm not convinced this is true. It is impossible for L2 testers to know whether the package would be accepted into a future mempool as fee levels could theoretically be anything up to infinite. So there is nothing to test. The L2 testing would be for checking that the package would be accepted at the current fee levels (e.g. possibly just before broadcasting the package or for general testing at current fee levels) ",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-857845044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "reviewed",
      "id": 679872945,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc5ODcyOTQ1",
      "url": null,
      "actor": null,
      "commit_id": "5496b25b6a75f3c4cd65e298f841c7e8b316046f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-679872945",
      "submitted_at": "2021-06-09T23:26:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4870573161,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg3MDU3MzE2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4870573161",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-10T10:47:00Z"
    },
    {
      "event": "commented",
      "id": 858522666,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODUyMjY2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/858522666",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-10T10:55:47Z",
      "updated_at": "2021-06-10T10:55:47Z",
      "author_association": "MEMBER",
      "body": "Incorporated doc suggestions from #22084 (to make it mergeable) and some review comments here, working on adding more edge casey tests that were discussed in PR Review Club last night.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-858522666",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4870706072,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg3MDcwNjA3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4870706072",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-10T11:14:59Z"
    },
    {
      "event": "reviewed",
      "id": 679813692,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc5ODEzNjky",
      "url": null,
      "actor": null,
      "commit_id": "b80cd250411579fa160fbe635111f5d52b6349a4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/21800/commits/1061cf457b021ccf24f394dbb5cc00af575598ba\r\n\r\nOverall the idea of overestimating package ancestor and descendant seems reasonable to me. \r\n\r\nStepped through the functional test, covering A and V shaped mempool ancestry. All tests passing. ",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-679813692",
      "submitted_at": "2021-06-10T13:19:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "reviewed",
      "id": 682446051,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgyNDQ2MDUx",
      "url": null,
      "actor": null,
      "commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think this PR around mempool ancestors/descendants limits illustrates well current limitations of our approach with implementing package-relay, namely the uncertainty about types of packages we want to support.\r\n\r\nUnion-based evaluation of ancestors/descendants limits doesn't work well as an API from a L2 protocol dev viewpoint. Let's say you implement [domino bumping](https://gnusha.org/lightning-dev/2021-05-14.log) to close in emergency multiple lightning channels, where the bumping utxo is reused across a CPFP chain:\r\n\r\n```\r\n        A         E         I\r\n          \\         \\         \\\r\n           B -- D -- F -- H -- J -- K\r\n               /        /          /\r\n             C        G          L \r\n```\r\n\r\nWhere root vertices are commitment transactions.\r\n\r\nIf you already have {A,B,C,D} in the mempools, and try to broadcast {E,F,G,H,I,J,K,L) in a single package it's going to be rejected (4 * 8 > DEFAULT_ANCESTOR_LIMITS), though if you broadcast components by pair, it will be accepted.\r\n\r\nAlso, to the best of my knowledge, all deployed or in deployment L2s (LN, Revault, Lightning Pool) have the shared need of 2-sized package but not beyond. Honestly deploying a 2-txn sized package relay to solve the safety-critical issue about pre-signed feerate transactions under mempool min feerate would already be a huge win. Once done, we can consider loosening package API, as there is a need emerging in the ecosystem for other types of packages.\r\n\r\nFurther, from a base-layer viewpoint, once we have p2p packages, it doesn't seem reasonable to allow mempool traversals for chain of transactions with 25 elements. It's far easier to reason about DoS concerns with 2-txn sized packages.\r\n\r\nSo what do you think about ?\r\n\r\n* screwing up MAX_PACKAGE_COUNT to 2 transactions for the initial deployement of package-relay\r\n* implementing \"intersection-dedup\" evaluation, where duplicated ancestors/descendants aren't accounted for package limits ?\r\n\r\nI think code changes should be limited as you can account the second package element as one-more descendant and substract it, including its size, to the `CalculateMemPoolAncestors`'s `limitDescendant*` argument of the first package element ?\r\n",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-682446051",
      "submitted_at": "2021-06-13T23:10:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "commented",
      "id": 860283889,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDI4Mzg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860283889",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-13T23:15:38Z",
      "updated_at": "2021-06-13T23:28:24Z",
      "author_association": "MEMBER",
      "body": "> I agree, and they will likely continue to diverge if we add bypass_timelocks and such... Perhaps we can have a regtest-only rawpackage RPC with a test_accept parameter (in my opinion users should never have to interact with packages)? And testmempoolaccept can be for users / L2 testing?\r\n\r\nSounds a good idea to introduce a `rawpackage` test-only RPC. I believe switching it to mainet is going to be function of which p2p package version we decide on (either sender-initiated or relay-initiated). W.r.t to `bypass_timelocks`/`bypass_feerate` I think that's ultimately different from the package interface as you can be interested by the mempool acceptance of individual transactions, so we can leave them on `testmempoolaccept` for now ?\r\n\r\n@michaelfolkson \r\n\r\n> I'm not convinced this is true. It is impossible for L2 testers to know whether the package would be accepted into a future mempool as fee levels could theoretically be anything up to infinite. So there is nothing to test. The L2 testing would be for checking that the package would be accepted at the current fee levels (e.g. possibly just before broadcasting the package or for general testing at current fee levels)\r\n\r\nYour point is valid, but note in #20833 we had the discussion to introduce `bypass_feerate` to remedy this pitfall (somewhere in the GH comments, yeah I know it's messy...)",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-860283889",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 4882752883,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg4Mjc1Mjg4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4882752883",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-13T23:15:38Z"
    },
    {
      "event": "subscribed",
      "id": 4882752884,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4ODI3NTI4ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4882752884",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-13T23:15:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4886551891,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg4NjU1MTg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4886551891",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-14T15:51:18Z"
    },
    {
      "event": "commented",
      "id": 860846503,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDg0NjUwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860846503",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-14T17:08:25Z",
      "updated_at": "2021-06-14T17:08:25Z",
      "author_association": "MEMBER",
      "body": "@ariard thanks for the review, I'm very much looking forward to the IRC discussions to better understand what packages we want to support. In your domino bumping example, I'm not entirely sure why we couldn't use several packages of size 2 to bump them?\r\n\r\n> MAX_PACKAGE_COUNT to 2 transactions for the initial deployement of package-relay\r\n\r\nWe're still a few PRs from package accept with submission to mempool - will put some things up soon - and then a few PRs from package relay but sounds good to me. I personally believe that the P2P requirements can be more stringent than individual transaction mempool policy - I also think it's fine for peers to negotiate their maximum package size they're willing to receive in a `SENDPACKAGES` message. Starting with a default of 2 sounds good to me. However, I don't think package ancestor/descendant limits should be explicitly less than individual ones within a node, because I think it could give an adversary the chance to prevent a package from being accepted by submitting a very large descendant to the top transaction.\r\n\r\n> implementing \"intersection-dedup\" evaluation, where duplicated ancestors/descendants aren't accounted for package limits ?\r\n\r\nI'm not sure I understand, could you elaborate? The `setAncestors` used in `CalculateMemPoolAncestors()` is not duplicated between transactions. I am working on a branch to \"trim\" packages when it overlaps with mempool (i.e. one or more transactions are already in the mempool), and will add test cases for ancestor/descendant limits with it.\r\n\r\n(Recent push addresses inline review comments)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-860846503",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 4886940973,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg4Njk0MDk3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4886940973",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-14T17:08:26Z"
    },
    {
      "event": "subscribed",
      "id": 4886940981,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4ODY5NDA5ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4886940981",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-14T17:08:26Z"
    },
    {
      "event": "commented",
      "id": 862616983,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjYxNjk4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862616983",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-16T18:34:35Z",
      "updated_at": "2021-06-16T18:34:35Z",
      "author_association": "MEMBER",
      "body": "> If you already have {A,B,C,D} in the mempools, and try to broadcast {E,F,G,H,I,J,K,L) in a single package it's going to be rejected (4 * 8 > DEFAULT_ANCESTOR_LIMITS), though if you broadcast components by pair, it will be accepted.\r\n\r\n@ariard: I don't understand the reasoning that leads to \"4 * 8\" here.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-862616983",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 4899729773,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg5OTcyOTc3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4899729773",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-16T18:34:35Z"
    },
    {
      "event": "subscribed",
      "id": 4899729777,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4OTk3Mjk3Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4899729777",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-16T18:34:36Z"
    },
    {
      "event": "commented",
      "id": 874921861,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDkyMTg2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/874921861",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-06T16:49:58Z",
      "updated_at": "2021-07-06T16:49:58Z",
      "author_association": "MEMBER",
      "body": "Bump, this is the next step for package validation logic.\r\n\r\nThe heuristic used in this implementation still results in an exact calculation of in-mempool and in-package ancestors for packages of parent + child (the MVP/basic package use case as discussed in the IRC meetings). It can be slightly more restrictive in scenarios such as batched fee bumping, but is extensible if we want to implement something more granular in the future.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-874921861",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "reviewed",
      "id": 700830368,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwODMwMzY4",
      "url": null,
      "actor": null,
      "commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-700830368",
      "submitted_at": "2021-07-07T11:21:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "reviewed",
      "id": 701408475,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxNDA4NDc1",
      "url": null,
      "actor": null,
      "commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-701408475",
      "submitted_at": "2021-07-07T20:14:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "reviewed",
      "id": 701408997,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxNDA4OTk3",
      "url": null,
      "actor": null,
      "commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-701408997",
      "submitted_at": "2021-07-07T20:15:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "reviewed",
      "id": 701410882,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxNDEwODgy",
      "url": null,
      "actor": null,
      "commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-701410882",
      "submitted_at": "2021-07-07T20:17:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4995228479,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk5NTIyODQ3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4995228479",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T14:10:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5000113131,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwMDExMzEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5000113131",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T12:29:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5001399254,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAwMTM5OTI1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5001399254",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-09T17:00:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5023530321,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAyMzUzMDMyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5023530321",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-15T06:58:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5023562924,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAyMzU2MjkyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5023562924",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-15T07:06:07Z"
    },
    {
      "event": "reviewed",
      "id": 712704251,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEyNzA0MjUx",
      "url": null,
      "actor": null,
      "commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This looks great. The tests are excellent.\r\n\r\nI have a few suggestions inline.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-712704251",
      "submitted_at": "2021-07-22T13:57:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "added_to_project",
      "id": 5057605199,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ1MDU3NjA1MTk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5057605199",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-22T19:05:38Z",
      "project_card": {
        "id": 65493169,
        "url": "https://api.github.com/projects/columns/cards/65493169",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 886239343,
      "node_id": "IC_kwDOABII58400vBv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886239343",
      "actor": {
        "login": "ritickgoenka",
        "id": 32807799,
        "node_id": "MDQ6VXNlcjMyODA3Nzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ritickgoenka",
        "html_url": "https://github.com/ritickgoenka",
        "followers_url": "https://api.github.com/users/ritickgoenka/followers",
        "following_url": "https://api.github.com/users/ritickgoenka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ritickgoenka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ritickgoenka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
        "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
        "repos_url": "https://api.github.com/users/ritickgoenka/repos",
        "events_url": "https://api.github.com/users/ritickgoenka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-25T18:18:43Z",
      "updated_at": "2021-07-25T18:18:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK \r\n\r\nRan the tests locally and also tried to tweak the tests to make sure everything was working fine. \r\n\r\nWhile checking for ancestors limit for a transaction we are checking the total number of ancestors including itself should be within 25, but when we are checking for descendants limit for a transaction we are checking the total number of descendants excluding itself should be within 25. Is this the expected behavior? Or do we want to include the transaction also while checking the descendant limits?\r\n\r\nTo test that the transaction itself is excluded when checking descendants limit I changed the 'A' shaped test a little, I reduced the number of in mempool transactions in the left limb from 12 to 11 (total 26 transactions, 24 in mempool and 2 in package) and kept everything else the same and the test failed.\r\n\r\nSimilarly, to test that the transaction itself is included when checking ancestor limit I changed the 'V' shaped test, I reduced the number of in mempool transactions in the left limb from 12 to 11 (total 26 transactions, 23 in mempool and 3 in package) and kept everything else the same and the test Passed.\r\n\r\n\r\nTested 27986f8 on Ubuntu 18.04 ",
      "user": {
        "login": "ritickgoenka",
        "id": 32807799,
        "node_id": "MDQ6VXNlcjMyODA3Nzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ritickgoenka",
        "html_url": "https://github.com/ritickgoenka",
        "followers_url": "https://api.github.com/users/ritickgoenka/followers",
        "following_url": "https://api.github.com/users/ritickgoenka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ritickgoenka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ritickgoenka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
        "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
        "repos_url": "https://api.github.com/users/ritickgoenka/repos",
        "events_url": "https://api.github.com/users/ritickgoenka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-886239343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5067594591,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA2NzU5NDU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5067594591",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:44:35Z"
    },
    {
      "event": "commented",
      "id": 886588979,
      "node_id": "IC_kwDOABII58402EYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886588979",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:45:21Z",
      "updated_at": "2021-07-26T10:45:21Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review @ritickgoenka!\r\n\r\n> While checking for ancestors limit for a transaction we are checking the total number of ancestors including itself should be within 25, but when we are checking for descendants limit for a transaction we are checking the total number of descendants excluding itself should be within 25. \r\n\r\nI don't think this is true. Descendant limits are also inclusive of the transaction.\r\n\r\n> To test that the transaction itself is excluded when checking descendants limit I changed the 'A' shaped test a little, I reduced the number of in mempool transactions in the left limb from 12 to 11 (total 26 transactions, 24 in mempool and 2 in package) and kept everything else the same and the test failed.\r\n\r\nI looked into this, and realized that I mislabeled the transactions in the diagram - my bad. The current test has 24 transactions in the mempool and 2 in the package, so if you reduced the mempool transactions, it's 23+2 which is within limits. That's why the test would fail. I've updated the comment and added assertions for the number of transactions in mempool and package.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-886588979",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 5067598092,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTA2NzU5ODA5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5067598092",
      "actor": {
        "login": "ritickgoenka",
        "id": 32807799,
        "node_id": "MDQ6VXNlcjMyODA3Nzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ritickgoenka",
        "html_url": "https://github.com/ritickgoenka",
        "followers_url": "https://api.github.com/users/ritickgoenka/followers",
        "following_url": "https://api.github.com/users/ritickgoenka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ritickgoenka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ritickgoenka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
        "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
        "repos_url": "https://api.github.com/users/ritickgoenka/repos",
        "events_url": "https://api.github.com/users/ritickgoenka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:45:21Z"
    },
    {
      "event": "subscribed",
      "id": 5067598101,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUwNjc1OTgxMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5067598101",
      "actor": {
        "login": "ritickgoenka",
        "id": 32807799,
        "node_id": "MDQ6VXNlcjMyODA3Nzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ritickgoenka",
        "html_url": "https://github.com/ritickgoenka",
        "followers_url": "https://api.github.com/users/ritickgoenka/followers",
        "following_url": "https://api.github.com/users/ritickgoenka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ritickgoenka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ritickgoenka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
        "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
        "repos_url": "https://api.github.com/users/ritickgoenka/repos",
        "events_url": "https://api.github.com/users/ritickgoenka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:45:21Z"
    },
    {
      "event": "commented",
      "id": 886589456,
      "node_id": "IC_kwDOABII58402EgQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886589456",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:46:09Z",
      "updated_at": "2021-07-26T10:46:09Z",
      "author_association": "MEMBER",
      "body": "Addressed @jnewbery's comments and added another test",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-886589456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 5067601340,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTA2NzYwMTM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5067601340",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:46:09Z"
    },
    {
      "event": "subscribed",
      "id": 5067601343,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUwNjc2MDEzNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5067601343",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-26T10:46:09Z"
    },
    {
      "event": "reviewed",
      "id": 714744880,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0NzQ0ODgw",
      "url": null,
      "actor": null,
      "commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 6d8f687bfc\r\n\r\nNew test looks good",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-714744880",
      "submitted_at": "2021-07-26T11:48:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "commented",
      "id": 887506781,
      "node_id": "IC_kwDOABII58405kdd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887506781",
      "actor": {
        "login": "ritickgoenka",
        "id": 32807799,
        "node_id": "MDQ6VXNlcjMyODA3Nzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ritickgoenka",
        "html_url": "https://github.com/ritickgoenka",
        "followers_url": "https://api.github.com/users/ritickgoenka/followers",
        "following_url": "https://api.github.com/users/ritickgoenka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ritickgoenka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ritickgoenka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
        "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
        "repos_url": "https://api.github.com/users/ritickgoenka/repos",
        "events_url": "https://api.github.com/users/ritickgoenka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-27T13:20:25Z",
      "updated_at": "2021-07-27T13:20:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 6d8f687\r\n\r\nTested the new test which was added. \r\nAlso, wrote a new test to check the overestimation of descendant limits and it was working fine.\r\n\r\nTested on Ubuntu 18.04",
      "user": {
        "login": "ritickgoenka",
        "id": 32807799,
        "node_id": "MDQ6VXNlcjMyODA3Nzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ritickgoenka",
        "html_url": "https://github.com/ritickgoenka",
        "followers_url": "https://api.github.com/users/ritickgoenka/followers",
        "following_url": "https://api.github.com/users/ritickgoenka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ritickgoenka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ritickgoenka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
        "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
        "repos_url": "https://api.github.com/users/ritickgoenka/repos",
        "events_url": "https://api.github.com/users/ritickgoenka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-887506781",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "commented",
      "id": 889569576,
      "node_id": "IC_kwDOABII5841BcEo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/889569576",
      "actor": {
        "login": "tryphe",
        "id": 8435003,
        "node_id": "MDQ6VXNlcjg0MzUwMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8435003?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tryphe",
        "html_url": "https://github.com/tryphe",
        "followers_url": "https://api.github.com/users/tryphe/followers",
        "following_url": "https://api.github.com/users/tryphe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tryphe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tryphe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tryphe/subscriptions",
        "organizations_url": "https://api.github.com/users/tryphe/orgs",
        "repos_url": "https://api.github.com/users/tryphe/repos",
        "events_url": "https://api.github.com/users/tryphe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tryphe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-30T01:51:15Z",
      "updated_at": "2021-07-30T01:51:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nReally nice work!",
      "user": {
        "login": "tryphe",
        "id": 8435003,
        "node_id": "MDQ6VXNlcjg0MzUwMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8435003?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tryphe",
        "html_url": "https://github.com/tryphe",
        "followers_url": "https://api.github.com/users/tryphe/followers",
        "following_url": "https://api.github.com/users/tryphe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tryphe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tryphe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tryphe/subscriptions",
        "organizations_url": "https://api.github.com/users/tryphe/orgs",
        "repos_url": "https://api.github.com/users/tryphe/repos",
        "events_url": "https://api.github.com/users/tryphe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tryphe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-889569576",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "reviewed",
      "id": 720847603,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIwODQ3NjAz",
      "url": null,
      "actor": null,
      "commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK - the changes here look fairly straight forward. Need to properly review the test.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-720847603",
      "submitted_at": "2021-08-03T07:42:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "reviewed",
      "id": 722403138,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIyNDAzMTM4",
      "url": null,
      "actor": null,
      "commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-722403138",
      "submitted_at": "2021-08-04T16:32:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTViYmY1OGFhZjcyYWFiOGE5YzU4MjdiMWYxNjJmM2I4YWMzOGY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
      "tree": {
        "sha": "a33edc1aba255f3766b0c6f718d684540b0913e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33edc1aba255f3766b0c6f718d684540b0913e6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3308c61091b6b7cb22569f3abadea6d001295c90",
          "sha": "3308c61091b6b7cb22569f3abadea6d001295c90",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3308c61091b6b7cb22569f3abadea6d001295c90"
        }
      ],
      "message": "misc package validation doc improvements",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:12:29Z"
      },
      "sha": "f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2RkMWM3MjlkMmJiZWRmOTUyN2I5MTRjMGNjODI2N2I4YTdjMjFi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
      "tree": {
        "sha": "d9629de3c92a5ca4f02dc6632a1d2875c69671a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9629de3c92a5ca4f02dc6632a1d2875c69671a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
          "sha": "f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4"
        }
      ],
      "message": "MOVEONLY: add helper function for calculating ancestors and checking limits",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T05:54:36Z"
      },
      "sha": "97dd1c729d2bbedf9527b914c0cc8267b8a7c21b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTUxODQxZDNlYzA4MGEyZDdhNzk4OGM3YjM1MDg4ZGZmNmM1ODMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f551841d3ec080a2d7a7988c7b35088dff6c5830",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f551841d3ec080a2d7a7988c7b35088dff6c5830",
      "tree": {
        "sha": "fa79ebcd5d58be4c5cc7bfbfb05864d6c61c753a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa79ebcd5d58be4c5cc7bfbfb05864d6c61c753a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
          "sha": "97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b"
        }
      ],
      "message": "[refactor] pass size/count instead of entry to CalculateAncestorsAndCheckLimits\n\nThis does not change existing behavior.\nThe ancestor/descendant limits are inclusive of the entries themselves,\nbut CalculateAncestorsAndCheckLimits() does not need access to them.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:09:22Z"
      },
      "sha": "f551841d3ec080a2d7a7988c7b35088dff6c5830"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmUwMTZhYTEzOWM4MzYzZTliMzhiYmMxYmEwZGNhNTU3MDBiOGE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
      "tree": {
        "sha": "961309b2b056b1fdb25284b8e1f9371fc269883f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/961309b2b056b1fdb25284b8e1f9371fc269883f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f551841d3ec080a2d7a7988c7b35088dff6c5830",
          "sha": "f551841d3ec080a2d7a7988c7b35088dff6c5830",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f551841d3ec080a2d7a7988c7b35088dff6c5830"
        }
      ],
      "message": "[mempool] check ancestor/descendant limits for packages\n\nWhen calculating ancestor/descendant counts for transactions in the\npackage, as a heuristic, count every transaction in the package as an\nancestor and descendant of every other transaction in the package.\n\nThis may overestimate, but will not underestimate, the\nancestor/descendant counts. This shortcut still produces an accurate\ncount for packages of 1 parent + 1 child.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:18:18Z"
      },
      "sha": "c6e016aa139c8363e9b38bbc1ba0dca55700b8a7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5118809285,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTExODgwOTI4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5118809285",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-05T17:20:41Z"
    },
    {
      "event": "commented",
      "id": 893704289,
      "node_id": "IC_kwDOABII5841RNhh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893704289",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-05T18:57:47Z",
      "updated_at": "2021-08-05T18:57:47Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 5d513c0698dfe088e6dcd77ade59a0b34d92efbd",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-893704289",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "commented",
      "id": 893902886,
      "node_id": "IC_kwDOABII5841R-Am",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893902886",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T00:02:09Z",
      "updated_at": "2021-08-06T00:02:09Z",
      "author_association": "MEMBER",
      "body": "https://cirrus-ci.com/task/6628050143019008:\r\n```bash\r\nRun tx_pool_standard with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/tx_pool_standard']INFO: Seed: 517370066\r\nINFO: Loaded 1 modules   (547316 inline 8-bit counters): 547316 [0x556b20760ed8, 0x556b207e68cc), \r\nINFO: Loaded 1 PC tables (547316 PCs): 547316 [0x556b207e68d0,0x556b21040810), \r\nINFO:     3949 files found in /tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/tx_pool_standard\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 1048576 bytes\r\nINFO: seed corpus: files: 3949 min: 1b max: 1048576b total: 95048838b rss: 213Mb\r\n#128\tpulse  cov: 17131 ft: 25503 corp: 122/895b exec/s: 64 rss: 225Mb\r\n#256\tpulse  cov: 17352 ft: 36520 corp: 244/2752b exec/s: 64 rss: 247Mb\r\n#512\tpulse  cov: 23370 ft: 57316 corp: 399/6397b exec/s: 56 rss: 292Mb\r\n#1024\tpulse  cov: 25687 ft: 82402 corp: 673/19Kb exec/s: 44 rss: 400Mb\r\nfuzz: test/fuzz/tx_pool.cpp:232: auto (anonymous namespace)::tx_pool_standard_fuzz_target(FuzzBufferType)::(anonymous class)::operator()() const: Assertion `\"it != result_package.m_tx_results.end()\" && check' failed.\r\n==24597== ERROR: libFuzzer: deadly signal\r\n    #0 0x556b1cad4ab1  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x278fab1)\r\n    #1 0x556b1ca1fc08  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26dac08)\r\n    #2 0x556b1ca04d53  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26bfd53)\r\n    #3 0x7f50944353bf  (/lib/x86_64-linux-gnu/libpthread.so.0+0x153bf)\r\n    #4 0x7f509407918a  (/lib/x86_64-linux-gnu/libc.so.6+0x4618a)\r\n    #5 0x7f5094058858  (/lib/x86_64-linux-gnu/libc.so.6+0x25858)\r\n    #6 0x7f5094058728  (/lib/x86_64-linux-gnu/libc.so.6+0x25728)\r\n    #7 0x7f5094069f35  (/lib/x86_64-linux-gnu/libc.so.6+0x36f35)\r\n    #8 0x556b1cf8b787  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x2c46787)\r\n    #9 0x556b1cb00a77  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x27bba77)\r\n    #10 0x556b1e4256f7  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x40e06f7)\r\n    #11 0x556b1e4253a5  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x40e03a5)\r\n    #12 0x556b1ca06411  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c1411)\r\n    #13 0x556b1ca05b55  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c0b55)\r\n    #14 0x556b1ca08477  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c3477)\r\n    #15 0x556b1ca087d9  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c37d9)\r\n    #16 0x556b1c9f74ae  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26b24ae)\r\n    #17 0x556b1ca202f2  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26db2f2)\r\n    #18 0x7f509405a0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\r\n    #19 0x556b1c9cc24d  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x268724d)\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n0xb3,0xb3,0xb3,0xb3,0x83,0x83,0x2f,0x2f,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0xc9,0xc9,0xcb,0x1,0x0,0xcb,\r\n\\xb3\\xb3\\xb3\\xb3\\x83\\x83//\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00eeeeeeeeeee\\xc9\\xc9\\xcb\\x01\\x00\\xcb\r\nartifact_prefix='./'; Test unit written to ./crash-8bc5eec8ddffef064fc1834346b11548218b6153\r\nBase64: s7Ozs4ODLy/Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLCwAAAAAAAABlZWVlZWVlZWVlZcnJywEAyw==Run tx_pool_standard with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/tx_pool_standard']INFO: Seed: 517370066\r\nINFO: Loaded 1 modules   (547316 inline 8-bit counters): 547316 [0x556b20760ed8, 0x556b207e68cc), \r\nINFO: Loaded 1 PC tables (547316 PCs): 547316 [0x556b207e68d0,0x556b21040810), \r\nINFO:     3949 files found in /tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/tx_pool_standard\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 1048576 bytes\r\nINFO: seed corpus: files: 3949 min: 1b max: 1048576b total: 95048838b rss: 213Mb\r\n#128\tpulse  cov: 17131 ft: 25503 corp: 122/895b exec/s: 64 rss: 225Mb\r\n#256\tpulse  cov: 17352 ft: 36520 corp: 244/2752b exec/s: 64 rss: 247Mb\r\n#512\tpulse  cov: 23370 ft: 57316 corp: 399/6397b exec/s: 56 rss: 292Mb\r\n#1024\tpulse  cov: 25687 ft: 82402 corp: 673/19Kb exec/s: 44 rss: 400Mb\r\nfuzz: test/fuzz/tx_pool.cpp:232: auto (anonymous namespace)::tx_pool_standard_fuzz_target(FuzzBufferType)::(anonymous class)::operator()() const: Assertion `\"it != result_package.m_tx_results.end()\" && check' failed.\r\n==24597== ERROR: libFuzzer: deadly signal\r\n    #0 0x556b1cad4ab1  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x278fab1)\r\n    #1 0x556b1ca1fc08  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26dac08)\r\n    #2 0x556b1ca04d53  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26bfd53)\r\n    #3 0x7f50944353bf  (/lib/x86_64-linux-gnu/libpthread.so.0+0x153bf)\r\n    #4 0x7f509407918a  (/lib/x86_64-linux-gnu/libc.so.6+0x4618a)\r\n    #5 0x7f5094058858  (/lib/x86_64-linux-gnu/libc.so.6+0x25858)\r\n    #6 0x7f5094058728  (/lib/x86_64-linux-gnu/libc.so.6+0x25728)\r\n    #7 0x7f5094069f35  (/lib/x86_64-linux-gnu/libc.so.6+0x36f35)\r\n    #8 0x556b1cf8b787  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x2c46787)\r\n    #9 0x556b1cb00a77  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x27bba77)\r\n    #10 0x556b1e4256f7  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x40e06f7)\r\n    #11 0x556b1e4253a5  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x40e03a5)\r\n    #12 0x556b1ca06411  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c1411)\r\n    #13 0x556b1ca05b55  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c0b55)\r\n    #14 0x556b1ca08477  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c3477)\r\n    #15 0x556b1ca087d9  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26c37d9)\r\n    #16 0x556b1c9f74ae  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26b24ae)\r\n    #17 0x556b1ca202f2  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x26db2f2)\r\n    #18 0x7f509405a0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\r\n    #19 0x556b1c9cc24d  (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz+0x268724d)\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n0xb3,0xb3,0xb3,0xb3,0x83,0x83,0x2f,0x2f,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xcb,0xb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0xc9,0xc9,0xcb,0x1,0x0,0xcb,\r\n\\xb3\\xb3\\xb3\\xb3\\x83\\x83//\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\xcb\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00eeeeeeeeeee\\xc9\\xc9\\xcb\\x01\\x00\\xcb\r\nartifact_prefix='./'; Test unit written to ./crash-8bc5eec8ddffef064fc1834346b11548218b6153\r\nBase64: s7Ozs4ODLy/Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLCwAAAAAAAABlZWVlZWVlZWVlZcnJywEAyw==\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-893902886",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Q2NjNhNWQzM2FhN2VmODc5OTRlNDUyYmNlZDdmMTkyZDAyMWEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd663a5d33aa7ef87994e452bced7f192d021a0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd663a5d33aa7ef87994e452bced7f192d021a0",
      "tree": {
        "sha": "553f35c6dc33d1bcf7a402c6fe8e5653553dc883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/553f35c6dc33d1bcf7a402c6fe8e5653553dc883"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
          "sha": "c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7"
        }
      ],
      "message": "[policy] ancestor/descendant limits for packages",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:29:19Z"
      },
      "sha": "3cd663a5d33aa7ef87994e452bced7f192d021a0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODI1M2Q2OWQ2ZjAyODUwOTk1YTExZWViNzFmZWRjMjJlNmY2NTc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8253d69d6f02850995a11eeb71fedc22e6f6575",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8253d69d6f02850995a11eeb71fedc22e6f6575",
      "tree": {
        "sha": "dbfdaa167353aaa8a6352bf46298963363629bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbfdaa167353aaa8a6352bf46298963363629bc5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd663a5d33aa7ef87994e452bced7f192d021a0",
          "sha": "3cd663a5d33aa7ef87994e452bced7f192d021a0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd663a5d33aa7ef87994e452bced7f192d021a0"
        }
      ],
      "message": "extract/rename helper functions from rpc_packages.py\n\nMOVEONLY; no change in behavior. Rename because there is another helper\nfunciton in chain_transaction in test_framework.util.py",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T14:30:43Z"
      },
      "sha": "f8253d69d6f02850995a11eeb71fedc22e6f6575"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTNjMDlmN2I3YmVkZGZkYjc0YzI4NDcyMGQyMDljODFkZmRiOTRm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/313c09f7b7beddfdb74c284720d209c81dfdb94f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/313c09f7b7beddfdb74c284720d209c81dfdb94f",
      "tree": {
        "sha": "750fca2d02074c83ea7083daa677085494bf204a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/750fca2d02074c83ea7083daa677085494bf204a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8253d69d6f02850995a11eeb71fedc22e6f6575",
          "sha": "f8253d69d6f02850995a11eeb71fedc22e6f6575",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8253d69d6f02850995a11eeb71fedc22e6f6575"
        }
      ],
      "message": "[test] helper function to increase transaction weight",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T13:01:51Z"
      },
      "sha": "313c09f7b7beddfdb74c284720d209c81dfdb94f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjZiMjZlNTdjMjRkMmYwYWJkNDQyYzFjMzMwOThlMzEyMTU3MmNl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
      "tree": {
        "sha": "1452720e1ea43be43537a0a068b8ed509fd1f4e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1452720e1ea43be43537a0a068b8ed509fd1f4e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/313c09f7b7beddfdb74c284720d209c81dfdb94f",
          "sha": "313c09f7b7beddfdb74c284720d209c81dfdb94f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/313c09f7b7beddfdb74c284720d209c81dfdb94f"
        }
      ],
      "message": "[test] parameterizable fee for make_chain and create_child_with_parents",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T14:30:25Z"
      },
      "sha": "2b6b26e57c24d2f0abd442c1c33098e3121572ce"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2NmM2Q1ODY4NDYwYjRiMTRhYjYwN2ZkNjZhYzk4NWIwODZmYmIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "tree": {
        "sha": "ad914a1dde0bb2a822c7914fade509a6c97a2e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad914a1dde0bb2a822c7914fade509a6c97a2e74"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
          "sha": "2b6b26e57c24d2f0abd442c1c33098e3121572ce",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6b26e57c24d2f0abd442c1c33098e3121572ce"
        }
      ],
      "message": "[test] mempool package ancestor/descendant limits",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:29:26Z"
      },
      "sha": "accf3d5868460b4b14ab607fd66ac985b086fbb3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5121859650,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEyMTg1OTY1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5121859650",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T09:20:57Z"
    },
    {
      "event": "commented",
      "id": 894129689,
      "node_id": "IC_kwDOABII5841S1YZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894129689",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T09:23:25Z",
      "updated_at": "2021-08-06T12:12:25Z",
      "author_association": "MEMBER",
      "body": "Thanks @fanquake. I've pushed a fix for what I expect is the culprit - single transaction ancestor/descendant limits can sometimes be slightly looser due to CPFP carve out; the decision to not return any tx results here would have caused that crash. I've gated `CheckPackageLimits()` to only run when there's more than one transaction.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-894129689",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 5121871533,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyMTg3MTUzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5121871533",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T09:23:25Z"
    },
    {
      "event": "subscribed",
      "id": 5121871537,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjE4NzE1Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5121871537",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T09:23:25Z"
    },
    {
      "event": "commented",
      "id": 894217264,
      "node_id": "IC_kwDOABII5841TKww",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894217264",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T12:11:38Z",
      "updated_at": "2021-08-06T12:11:38Z",
      "author_association": "MEMBER",
      "body": "Addressed review comments and added tests for size limits (thanks @ariard for motivating) Ready for review again! ",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-894217264",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 5122567342,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyMjU2NzM0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5122567342",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T12:11:38Z"
    },
    {
      "event": "subscribed",
      "id": 5122567347,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjI1NjczNDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5122567347",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-06T12:11:38Z"
    },
    {
      "event": "reviewed",
      "id": 724887771,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI0ODg3Nzcx",
      "url": null,
      "actor": null,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK accf3d5. \r\n\r\nThe conservative limits check for package acceptance as implemented by this PR sounds correct to me to comply to the package limits as currently evaluated per-transaction and also verified test coverage.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-724887771",
      "submitted_at": "2021-08-08T10:53:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "commented",
      "id": 894829834,
      "node_id": "IC_kwDOABII5841VgUK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894829834",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T17:33:40Z",
      "updated_at": "2021-08-08T17:33:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK accf3d5\r\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-894829834",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "merged",
      "id": 5127597674,
      "node_id": "MDExOk1lcmdlZEV2ZW50NTEyNzU5NzY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5127597674",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21438d55d553ae5bf3be7c0d4431aaf136db6c6b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21438d55d553ae5bf3be7c0d4431aaf136db6c6b",
      "created_at": "2021-08-09T04:24:35Z"
    },
    {
      "event": "closed",
      "id": 5127597680,
      "node_id": "MDExOkNsb3NlZEV2ZW50NTEyNzU5NzY4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5127597680",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T04:24:35Z"
    },
    {
      "event": "reviewed",
      "id": 725103466,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1MTAzNDY2",
      "url": null,
      "actor": null,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "`CheckPackageLimits` (and `CheckPackage` did too) computes the virtual size without taking the number of signature operations.\r\nIt's not an issue for now as `PreChecks` (which does) is always called before any code path that result in `CheckPackageLimits` or `CheckPackage`, but we need to be careful to not introduce a DOS vector in the future.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-725103466",
      "submitted_at": "2021-08-09T07:50:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "commented",
      "id": 895044275,
      "node_id": "IC_kwDOABII5841WUqz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895044275",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T08:32:48Z",
      "updated_at": "2021-08-09T08:32:48Z",
      "author_association": "MEMBER",
      "body": "@darosior good point. I agree sigop limits should be properly enforced for packages. At the moment, since the sigops limit is checked in `PreChecks` as you said, the limit is essentially `MAX_STANDARD_TX_SIGOPS_COST` * `MAX_PACKAGE_COUNT`, or 25x the single transaction size. Should that be changed?\r\n\r\nFor `CheckPackageLimits`, I'm not sure that sigops are relevant for mempool DoS protections. We mostly care about the serialized transaction size because we don't want really large transactions to exhaust space in our mempool and we care about feerates. But we don't verify signatures after a transaction has been added to the mempool or removed from it, and don't need to know how many sigops are in our ancestors/descendants, so sigop limits probably don't make a difference?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-895044275",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "mentioned",
      "id": 5128349340,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyODM0OTM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128349340",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T08:32:48Z"
    },
    {
      "event": "subscribed",
      "id": 5128349344,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjgzNDkzNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128349344",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T08:32:48Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 5128408711,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ1MTI4NDA4NzEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128408711",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T08:46:26Z"
    },
    {
      "event": "commented",
      "id": 895052140,
      "node_id": "IC_kwDOABII5841WWls",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895052140",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T08:47:14Z",
      "updated_at": "2021-08-09T08:47:14Z",
      "author_association": "MEMBER",
      "body": "> For CheckPackageLimits, I'm not sure that sigops are relevant for mempool DoS protections\r\n\r\nThe signature ops check is not about avoiding checking too many signatures in the mempool, but to keep the mempool consistent with what could be included in the next blocks by rational miners.\r\nMiners have a size budget (and therefore we care about feerate) but also a signature ops budget and we must take care about them too as otherwise our mempool could \"diverge\" (the top of the mempool wouldn't represent what would likely be included in the next block). Mixing the sig op with the feerate was a neat way to avoid the multidimensional optimization problem, since only ill-crafted transactions could get near that budget.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-895052140",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "commented",
      "id": 895117719,
      "node_id": "IC_kwDOABII5841WmmX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895117719",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T10:34:52Z",
      "updated_at": "2021-08-09T10:36:54Z",
      "author_association": "MEMBER",
      "body": "> The signature ops check is not about avoiding checking too many signatures in the mempool, but to keep the mempool consistent with what could be included in the next blocks by rational miners.\r\nMiners have a size budget (and therefore we care about feerate) but also a signature ops budget and we must take care about them too as otherwise our mempool could \"diverge\" (the top of the mempool wouldn't represent what would likely be included in the next block). Mixing the sig op with the feerate was a neat way to avoid the multidimensional optimization problem, since only ill-crafted transactions could get near that budget.\r\n\r\nMy takeaway from this is that thinking of feerate as `fee / max(sigops size, serialized size)` the same way virtual size is `max(sigops size, serialized size)` is a heuristic to address the fact that blocks are constrained by both size and sigops, which would be 2D knapsack. (I still don't think it's a DoS attack but that might just be me being nitpicky). So, what I should do is go through the validation code and make sure that the correct virtual size (including sigops) is used for checks and recorded in the mempool entries.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-895117719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "reviewed",
      "id": 725180293,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1MTgwMjkz",
      "url": null,
      "actor": null,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK accf3d5868\r\n\r\nI've left a bunch of small comments. None are critical, so feel free to ignore or take them in a follow-up PR.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#pullrequestreview-725180293",
      "submitted_at": "2021-08-09T12:47:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
    },
    {
      "event": "referenced",
      "id": 5133406647,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMzM0MDY2NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5133406647",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eacf3f89e050941140a17d29df3c9824e9d1bb78",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/eacf3f89e050941140a17d29df3c9824e9d1bb78",
      "created_at": "2021-08-10T05:45:56Z"
    },
    {
      "event": "commented",
      "id": 896457688,
      "node_id": "IC_kwDOABII5841btvY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896457688",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-11T02:47:55Z",
      "updated_at": "2021-08-11T02:47:55Z",
      "author_association": "MEMBER",
      "body": "> I've left a bunch of small comments. None are critical, so feel free to ignore or take them in a follow-up PR.\r\n\r\nI think there's enough here to warrant a followup.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-896457688",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21800"
    },
    {
      "event": "removed_from_project",
      "id": 5151488658,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NTE1MTQ4ODY1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5151488658",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T18:49:16Z",
      "project_card": {
        "id": 65493169,
        "url": "https://api.github.com/projects/columns/cards/65493169",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 5278635437,
      "node_id": "REFE_lADOABII584z31a5zwAAAAE6oZWt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5278635437",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fac71810914497611c7e23c02ef035098e478359",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac71810914497611c7e23c02ef035098e478359",
      "created_at": "2021-09-09T13:43:09Z"
    },
    {
      "event": "referenced",
      "id": 5287190445,
      "node_id": "REFE_lADOABII584z31a5zwAAAAE7JB-t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5287190445",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "59d084d3f50aba290fba8ccd54aeac081f3f049d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/59d084d3f50aba290fba8ccd54aeac081f3f049d",
      "created_at": "2021-09-11T04:34:24Z"
    },
    {
      "event": "locked",
      "id": 7220272297,
      "node_id": "LOE_lADOABII584z31a5zwAAAAGuXJyp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7220272297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T08:15:51Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647068181",
      "pull_request_review_id": 678037341,
      "id": 647068181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzA2ODE4MQ==",
      "diff_hunk": "@@ -187,10 +201,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + total_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);",
      "path": "src/txmempool.cpp",
      "position": 54,
      "original_position": 86,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"[mempool] extend CalculateMemPoolAncestors for packages\"\r\n\r\nFeels a bit wrong to me to return the same \"too many (ancestors|descendants) for tx %s [limit: %u]\" error message when we're basing that conclusion on a heuristic rather than a full evaluation.  Maybe return a slightly different string like \"too many *possible* (ancestors|descendants)...\" if `total_count > 1`.  ",
      "created_at": "2021-06-08T02:39:50Z",
      "updated_at": "2021-06-08T08:40:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r647068181",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647068181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 178,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648467544",
      "pull_request_review_id": 679872945,
      "id": 648467544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQ2NzU0NA==",
      "diff_hunk": "@@ -472,8 +472,10 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n-        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */\n-        const bool disallow_mempool_conflicts;\n+        /** Whether we allow transactions to replace mempool transactions by BIP125 rules. If false,\n+         * any transaction spending the same inputs as a transaction in the mempool is considered\n+         * a conflict. */\n+        const bool m_allow_bip125_replacement{true};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "5496b25b6a75f3c4cd65e298f841c7e8b316046f",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, double negations are real brain teasers.",
      "created_at": "2021-06-09T16:13:53Z",
      "updated_at": "2021-06-09T23:26:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648467544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648467544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648471295",
      "pull_request_review_id": 679872945,
      "id": 648471295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQ3MTI5NQ==",
      "diff_hunk": "@@ -151,33 +152,46 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Optionally, in the same vein as @harding mentioned in his review:\r\n```suggestion\r\n                        errString = strprintf(\"potentially too many unconfirmed parents [limit: %u]\", limitAncestorCount);\r\n```",
      "created_at": "2021-06-09T16:18:40Z",
      "updated_at": "2021-06-09T23:26:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648471295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648471295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648484989",
      "pull_request_review_id": 679872945,
      "id": 648484989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQ4NDk4OQ==",
      "diff_hunk": "@@ -14,6 +15,7 @@\n static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n /** Default maximum total virtual size of transactions in a package in KvB. */\n static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+static_assert(MAX_PACKAGE_SIZE * 4 * 1000 >= MAX_STANDARD_TX_WEIGHT);",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 12,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "0feb2a65e4ca55f9b469c31d3d7d94287328c5f9",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it fair to assume that all instances of `SIZE` now refer to virtualsize? Otherwise, this should perhaps be explicitly \"vsize\".",
      "created_at": "2021-06-09T16:36:17Z",
      "updated_at": "2021-06-09T23:26:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648484989",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648484989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073219",
      "pull_request_review_id": 680634416,
      "id": 649073219,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTA3MzIxOQ==",
      "diff_hunk": "@@ -187,10 +201,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + total_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);",
      "path": "src/txmempool.cpp",
      "position": 54,
      "original_position": 86,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "in_reply_to_id": 647068181,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a \"possibly\" to the beginning of the error strings, gated on `total_count > 1`, so that the existing tests that assert expected error messages don't need to be changed.",
      "created_at": "2021-06-10T10:53:44Z",
      "updated_at": "2021-06-10T10:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 178,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073470",
      "pull_request_review_id": 680634737,
      "id": 649073470,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTA3MzQ3MA==",
      "diff_hunk": "@@ -151,33 +152,46 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "in_reply_to_id": 648471295,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, see https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219",
      "created_at": "2021-06-10T10:54:06Z",
      "updated_at": "2021-06-10T10:54:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649848551",
      "pull_request_review_id": 681656247,
      "id": 649848551,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg0ODU1MQ==",
      "diff_hunk": "@@ -14,6 +15,7 @@\n static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n /** Default maximum total virtual size of transactions in a package in KvB. */\n static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+static_assert(MAX_PACKAGE_SIZE * 4 * 1000 >= MAX_STANDARD_TX_WEIGHT);",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 12,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "0feb2a65e4ca55f9b469c31d3d7d94287328c5f9",
      "in_reply_to_id": 648484989,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You may find #22097 of interest :)",
      "created_at": "2021-06-11T09:52:37Z",
      "updated_at": "2021-06-11T09:52:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649848551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649848551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579050",
      "pull_request_review_id": 682446051,
      "id": 650579050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTA1MA==",
      "diff_hunk": "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.\n+     * @param[in]       limitAncestorCount      Max number of txns including ancestors.\n+     * @param[in]       limitAncestorSize       Max virtual size including ancestors.\n+     * @param[in]       limitDescendantCount    Max number of txns including descendants.\n+     * @param[in]       limitDescendantSize     Max virtual size including descendants.\n+     * @param[out]      errString               Populated with error reason if a limit is hit.\n+     * @param[in]       fSearchForParents       Whether to search for entries' in-mempool parents.\n+     *                                          Must be true if any entries are not already in mempool.\n+     */\n+    bool CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 18,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you think about `CalculateMemPoolAncestorsSet` to disambiguate clearly from `CalculateMemPoolAncestors` ? Also add a param comment for `entries` (and the fact they might not been inter-dependent) ?",
      "created_at": "2021-06-13T21:21:41Z",
      "updated_at": "2021-06-13T23:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 703,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579493",
      "pull_request_review_id": 682446051,
      "id": 650579493,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTQ5Mw==",
      "diff_hunk": "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "by \"inclusive\" do you mean \"for package limits evaluation, assume that the union of ancestors/descendants of each transaction is an ancestor/descendant of every transaction\" or something else?",
      "created_at": "2021-06-13T21:26:41Z",
      "updated_at": "2021-06-13T23:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579493",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 685,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579921",
      "pull_request_review_id": 682446051,
      "id": 650579921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTkyMQ==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you mean `PreChecks()` and under?",
      "created_at": "2021-06-13T21:30:36Z",
      "updated_at": "2021-06-13T23:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579949",
      "pull_request_review_id": 682446051,
      "id": 650579949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTk0OQ==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `package_ancestors` to dissociate?",
      "created_at": "2021-06-13T21:30:52Z",
      "updated_at": "2021-06-13T23:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650580150",
      "pull_request_review_id": 682446051,
      "id": 650580150,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU4MDE1MA==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;\n+        std::string err_string;\n+        if (!m_pool.CalculateMemPoolAncestors(_entries,\n+                                              _ancestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                              m_limit_descendant_size, err_string, /* fSearchForParents */ true)) {\n+            // All transactions must have individually passed mempool ancestor and descendant limits\n+            // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+            // be implementation-dependent, and it's likely to be multiple transactions because we\n+            // evaluated all of them together. Return the same failure for all transactions.\n+            for (auto& ws : workspaces) {\n+                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", err_string);\n+                results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            }\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-long-mempool-chain\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reject reason could be `package-ancestors/descendants limits`? I think \"too-long\" masks that it can be also a size issue.",
      "created_at": "2021-06-13T21:32:41Z",
      "updated_at": "2021-06-13T23:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650580150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650580150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650994842",
      "pull_request_review_id": 682978497,
      "id": 650994842,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDk5NDg0Mg==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": 650579921,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I should clarify this comment - I mean when we call `addUnchecked` in real package mempool accept, we'll need to recalculate the ancestors for each one as input",
      "created_at": "2021-06-14T14:23:44Z",
      "updated_at": "2021-06-14T14:23:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650994842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650994842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651017757",
      "pull_request_review_id": 683009636,
      "id": 651017757,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTAxNzc1Nw==",
      "diff_hunk": "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": 650579493,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's documenting the way we apply the limits, e.g. if `ancestorcount` is 25, it means the total number of ancestors, including itself, must be within 25.",
      "created_at": "2021-06-14T14:49:04Z",
      "updated_at": "2021-06-14T14:49:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651017757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651017757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 685,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072189",
      "pull_request_review_id": 683082102,
      "id": 651072189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3MjE4OQ==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": 650579949,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-06-14T15:52:21Z",
      "updated_at": "2021-06-14T15:52:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072541",
      "pull_request_review_id": 683082585,
      "id": 651072541,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3MjU0MQ==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;\n+        std::string err_string;\n+        if (!m_pool.CalculateMemPoolAncestors(_entries,\n+                                              _ancestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                              m_limit_descendant_size, err_string, /* fSearchForParents */ true)) {\n+            // All transactions must have individually passed mempool ancestor and descendant limits\n+            // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+            // be implementation-dependent, and it's likely to be multiple transactions because we\n+            // evaluated all of them together. Return the same failure for all transactions.\n+            for (auto& ws : workspaces) {\n+                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", err_string);\n+                results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            }\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-long-mempool-chain\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": 650580150,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "changed the tx error to `exceeds-ancestor-descendant-limits` and the package error `package-mempool-limits`",
      "created_at": "2021-06-14T15:52:47Z",
      "updated_at": "2021-06-14T15:52:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073468",
      "pull_request_review_id": 683083800,
      "id": 651073468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3MzQ2OA==",
      "diff_hunk": "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.\n+     * @param[in]       limitAncestorCount      Max number of txns including ancestors.\n+     * @param[in]       limitAncestorSize       Max virtual size including ancestors.\n+     * @param[in]       limitDescendantCount    Max number of txns including descendants.\n+     * @param[in]       limitDescendantSize     Max virtual size including descendants.\n+     * @param[out]      errString               Populated with error reason if a limit is hit.\n+     * @param[in]       fSearchForParents       Whether to search for entries' in-mempool parents.\n+     *                                          Must be true if any entries are not already in mempool.\n+     */\n+    bool CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 18,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": 650579050,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added doxygen comment for `entries` param, but my intention was to overload the `CalculateMemPoolAncestors` function (the fact that the first argument is a vector instead of a single entry should suffice?)",
      "created_at": "2021-06-14T15:53:53Z",
      "updated_at": "2021-06-14T15:53:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 703,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073759",
      "pull_request_review_id": 683084170,
      "id": 651073759,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3Mzc1OQ==",
      "diff_hunk": "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "in_reply_to_id": 650579921,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2021-06-14T15:54:14Z",
      "updated_at": "2021-06-14T15:54:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665238840",
      "pull_request_review_id": 700830368,
      "id": 665238840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTIzODg0MA==",
      "diff_hunk": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 9,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This generic helper function is used for more than mempool acceptance (eg the `getmempoolancestors` RPC calls `CalculateMempoolAncestors(const CTxMemPoolEntry& entry, ...)`, which calls `CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries, ...)`. I suggest you remove the reference to \"acceptance to mempool\" here.",
      "created_at": "2021-07-07T10:17:29Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665238840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665238840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 688,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665239317",
      "pull_request_review_id": 700830368,
      "id": 665239317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTIzOTMxNw==",
      "diff_hunk": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 10,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand the \"if there are multiple\" part of this sentence. This function can be called with a single tx, and in that case the tx must not already be in the mempool.",
      "created_at": "2021-07-07T10:18:12Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665239317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665239317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665240182",
      "pull_request_review_id": 700830368,
      "id": 665240182,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI0MDE4Mg==",
      "diff_hunk": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.\n+     *                                          They need not be direct ancestors/descendants of\n+     *                                          each other, though they will be treated as such.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is actually just an out param. The caller shouldn't be calling this function with `setAncestors` already populated. Perhaps an assert should be added to the top of the function that `setAncestors` is empty?",
      "created_at": "2021-07-07T10:19:32Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665240182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665240182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 693,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665258130",
      "pull_request_review_id": 700830368,
      "id": 665258130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI1ODEzMA==",
      "diff_hunk": "@@ -187,6 +190,178 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 84,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's a silent merge conflict with master: `CTransaction` is no longer imported into rpc_packages.py (since 2ce7b47958c4a10ba20dc86c011d71cda4b070a5).\r\n\r\nThis should fix it:\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_packages.py b/test/functional/rpc_packages.py\r\nindex 447c3cb08f..a084d0d9cb 100755\r\n--- a/test/functional/rpc_packages.py\r\n+++ b/test/functional/rpc_packages.py\r\n@@ -12,6 +12,7 @@ from test_framework.test_framework import BitcoinTestFramework\r\n from test_framework.messages import (\r\n     BIP125_SEQUENCE_NUMBER,\r\n     COIN,\r\n+    CTransaction,\r\n     CTxInWitness,\r\n     tx_from_hex,\r\n )\r\n@@ -256,7 +257,7 @@ class RPCPackagesTest(BitcoinTestFramework):\r\n         parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\r\n         parent_tx = CTransaction()\r\n         assert parent_signed[\"complete\"]\r\n-        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\r\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\r\n         parent_txid = parent_tx.rehash()\r\n         node.sendrawtransaction(parent_signed[\"hex\"])\r\n \r\n@@ -278,7 +279,7 @@ class RPCPackagesTest(BitcoinTestFramework):\r\n         value = parent_value - Decimal(\"0.0001\")\r\n         rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\r\n         tx_child_b = CTransaction() # M2b\r\n-        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\r\n+        tx_child_b = tx_from_hex(rawtx_b)\r\n         tx_child_b.wit.vtxinwit = [CTxInWitness()]\r\n         tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\r\n         tx_child_b_hex = tx_child_b.serialize().hex()\r\n```",
      "created_at": "2021-07-07T10:47:29Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665258130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665258130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665264021",
      "pull_request_review_id": 700830368,
      "id": 665264021,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI2NDAyMQ==",
      "diff_hunk": "@@ -187,14 +202,22 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this (and other instances) would need to be:\r\n\r\n```suggestion\r\n                                  total_count > 1 ? \"possibly \" : \"\",\r\n```\r\n\r\notherwise the log would be `possiblyexceeds descendant ...`",
      "created_at": "2021-07-07T10:57:00Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665264021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665264021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665268971",
      "pull_request_review_id": 700830368,
      "id": 665268971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI2ODk3MQ==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);\n+        txiter it = mapTx.iterator_to(entries[0].get());\n+        staged_ancestors = it->GetMemPoolParents();",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What happened to the `Const` here? This used to be `GetMemPoolParentsConst()`.",
      "created_at": "2021-07-07T11:05:06Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665268971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665268971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665272611",
      "pull_request_review_id": 700830368,
      "id": 665272611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI3MjYxMQ==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that `CalculateMemPoolAncestors()` was already doing too much, and this adds just a little bit more complication. Instead of overloading CMPA and having CMPA(tx) call CMPA(package), what do you think about the splitting it into two parts:\r\n\r\n- calculate parents (two different functions - one for a single transaction which may have fSearchForParents=false, and one for a package)\r\n- check package limits (everything from `while (!staged_ancestors.empty())` downwards, which is the same function for an individual transaction and a package if parametrized correctly)\r\n\r\nand then roughly:\r\n\r\n```\r\nCMPA(tx) {\r\n    set_ancestors = CalculateParents(tx);\r\n    CheckPackageLimits(set_ancestors);\r\n}\r\n\r\nCMPA(package) {\r\n    set_ancestors = CalculateParents(package);\r\n    CheckPackageLimits(set_ancestors);\r\n}\r\n```",
      "created_at": "2021-07-07T11:11:03Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665272611",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665272611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665275481",
      "pull_request_review_id": 700830368,
      "id": 665275481,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI3NTQ4MQ==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you think about not making these const, and then decrementing from them and checking that we don't go below zero? That would avoid the need for the local variables and make the logic for individual txs and packages more similar.",
      "created_at": "2021-07-07T11:15:50Z",
      "updated_at": "2021-07-07T11:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665275481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665275481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665671316",
      "pull_request_review_id": 701401155,
      "id": 665671316,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3MTMxNg==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665272611,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: use function signatures with spans when passing a const vec, removes the need to allocate for passing a single tx (can span without allocating from pointer).",
      "created_at": "2021-07-07T20:05:17Z",
      "updated_at": "2021-07-07T20:05:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665671316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665671316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665674868",
      "pull_request_review_id": 701405814,
      "id": 665674868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NDg2OA==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665275481,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is clearer to make these as const personally, decrement until 0 is always confusing to me (is it at 0 or below zero that the error comes in? These are currently uint64_t, so we'd also need to either convert to int64_t or detect wraparound...).",
      "created_at": "2021-07-07T20:11:00Z",
      "updated_at": "2021-07-07T20:11:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665674868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665674868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665676930",
      "pull_request_review_id": 701408475,
      "id": 665676930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NjkzMA==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Never? Why is this new constraint present? I thought it's safe to use as long as we aren't searching for parents?",
      "created_at": "2021-07-07T20:14:31Z",
      "updated_at": "2021-07-07T20:14:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665676930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665676930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677347",
      "pull_request_review_id": 701408997,
      "id": 665677347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NzM0Nw==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this assert is pretty scary? why do we not permit >1?",
      "created_at": "2021-07-07T20:15:14Z",
      "updated_at": "2021-07-07T20:15:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677948",
      "pull_request_review_id": 701409789,
      "id": 665677948,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3Nzk0OA==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665272611,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: @jnewbery's feedback to split, I think that might be right if fsearchforparents should never be used as false with a package? the asserts confuse me...",
      "created_at": "2021-07-07T20:16:18Z",
      "updated_at": "2021-07-07T20:16:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678189",
      "pull_request_review_id": 701410097,
      "id": 665678189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3ODE4OQ==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665677347,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What if it's a package of size 1? Is this code safe? Or only if it's called in non package contexts?",
      "created_at": "2021-07-07T20:16:42Z",
      "updated_at": "2021-07-07T20:16:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678189",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678766",
      "pull_request_review_id": 701410882,
      "id": 665678766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3ODc2Ng==",
      "diff_hunk": "@@ -216,6 +240,17 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors,\n+                                           uint64_t limitAncestorCount, uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount, uint64_t limitDescendantSize,\n+                                           std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> entry_vec{std::cref(entry)};",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if you update to a span, you get rid of an allocation here!",
      "created_at": "2021-07-07T20:17:39Z",
      "updated_at": "2021-07-07T20:17:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235253",
      "pull_request_review_id": 702121199,
      "id": 666235253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzNTI1Mw==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665677347,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, I've clarified this now. CMPA for a vector of transactions always searches for parents. If we call CMPA with multiple transactions (also handling the case if called with a vector of size 1), those transactions shouldn't already be in the mempool.",
      "created_at": "2021-07-08T14:15:57Z",
      "updated_at": "2021-07-08T14:15:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235587",
      "pull_request_review_id": 702121652,
      "id": 666235587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzNTU4Nw==",
      "diff_hunk": "@@ -216,6 +240,17 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors,\n+                                           uint64_t limitAncestorCount, uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount, uint64_t limitDescendantSize,\n+                                           std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> entry_vec{std::cref(entry)};",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665678766,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GONE! 👐 ",
      "created_at": "2021-07-08T14:16:18Z",
      "updated_at": "2021-07-08T14:16:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666236601",
      "pull_request_review_id": 702123026,
      "id": 666236601,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzNjYwMQ==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665676930,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Same idea) if we're calling this with multiple transactions, they shouldn't already be in the mempool.",
      "created_at": "2021-07-08T14:17:24Z",
      "updated_at": "2021-07-08T14:17:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666236601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666236601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238907",
      "pull_request_review_id": 702126182,
      "id": 666238907,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzODkwNw==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665272611,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, with Span :D\r\n\r\nI've made it so that the CMPA with a vector of transactions doesn't have a `fSearchForParents` param, we just always search for parents. The only call site (other than tests) should be in `MemPoolAccept::AcceptMultipleTransactions()` so the transactions shouldn't already be in the mempool. It wouldn't make sense to use this heuristic on transactions that are already in the mempool, since it's potentially stricter.",
      "created_at": "2021-07-08T14:19:59Z",
      "updated_at": "2021-07-08T14:19:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238986",
      "pull_request_review_id": 702126290,
      "id": 666238986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzODk4Ng==",
      "diff_hunk": "@@ -187,14 +202,22 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665264021,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-07-08T14:20:04Z",
      "updated_at": "2021-07-08T14:20:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239406",
      "pull_request_review_id": 702126827,
      "id": 666239406,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzOTQwNg==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);\n+        txiter it = mapTx.iterator_to(entries[0].get());\n+        staged_ancestors = it->GetMemPoolParents();",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665268971,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-07-08T14:20:29Z",
      "updated_at": "2021-07-08T14:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239507",
      "pull_request_review_id": 702126993,
      "id": 666239507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzOTUwNw==",
      "diff_hunk": "@@ -187,6 +190,178 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 84,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665258130,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-07-08T14:20:37Z",
      "updated_at": "2021-07-08T14:20:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239846",
      "pull_request_review_id": 702127482,
      "id": 666239846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzOTg0Ng==",
      "diff_hunk": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.\n+     *                                          They need not be direct ancestors/descendants of\n+     *                                          each other, though they will be treated as such.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665240182,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right it's just an out param, fixed.",
      "created_at": "2021-07-08T14:20:59Z",
      "updated_at": "2021-07-08T14:20:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 693,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666240721",
      "pull_request_review_id": 702128628,
      "id": 666240721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjI0MDcyMQ==",
      "diff_hunk": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 9,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665238840,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Took it out. Also kind of different now that the two CMPAs are slightly different",
      "created_at": "2021-07-08T14:21:54Z",
      "updated_at": "2021-07-08T14:21:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666240721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666240721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 688,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667063611",
      "pull_request_review_id": 703203578,
      "id": 667063611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzA2MzYxMQ==",
      "diff_hunk": "@@ -187,14 +202,22 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665264021,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "did you tho? looks same",
      "created_at": "2021-07-09T16:12:38Z",
      "updated_at": "2021-07-09T16:12:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r667063611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667063611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670187216",
      "pull_request_review_id": 706991489,
      "id": 670187216,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDE4NzIxNg==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665677347,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed this condition",
      "created_at": "2021-07-15T06:58:52Z",
      "updated_at": "2021-07-15T06:58:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670187216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670187216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670187368",
      "pull_request_review_id": 706991683,
      "id": 670187368,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDE4NzM2OA==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665676930,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed this constraint",
      "created_at": "2021-07-15T06:59:08Z",
      "updated_at": "2021-07-15T06:59:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670187368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670187368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670191602",
      "pull_request_review_id": 706997151,
      "id": 670191602,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDE5MTYwMg==",
      "diff_hunk": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 10,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665239317,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, removed",
      "created_at": "2021-07-15T07:06:37Z",
      "updated_at": "2021-07-15T07:06:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670191602",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670191602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670193900",
      "pull_request_review_id": 706999888,
      "id": 670193900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDE5MzkwMA==",
      "diff_hunk": "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "ef6004ca88f8033074898687b18dc0b156702dc6",
      "in_reply_to_id": 665275481,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another problem with editing these variables is we'd need to change the error logging (current log would use the decremented count instead of actual limit), so I've left it as is.",
      "created_at": "2021-07-15T07:10:07Z",
      "updated_at": "2021-07-15T07:10:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670193900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670193900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674769853",
      "pull_request_review_id": 712704251,
      "id": 674769853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDc2OTg1Mw==",
      "diff_hunk": "@@ -151,34 +151,17 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::calculateAncestorsAndCheckLimits(size_t entry_size,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Current project style is to name functions and methods with UpperCaseCamel:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/36aee0f3538ec3399a3838041ea5993aba5f518b/doc/developer-notes.md#L92",
      "created_at": "2021-07-22T12:55:55Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674769853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674769853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674772033",
      "pull_request_review_id": 712704251,
      "id": 674772033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDc3MjAzMw==",
      "diff_hunk": "@@ -585,6 +586,25 @@ class CTxMemPool\n      */\n     std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+\n+    /**\n+     * Helper function to calculate all in-mempool ancestors of staged_ancestors and apply\n+     * ancestor/descendant limits. Inclusive of entry_size and entry_count.\n+     * param@[in]   entry_size          Virtual size to include in the limits.\n+     * param@[in]   entry_count         How many entries to include in the limits.\n+     * param@[in]   staged_ancestors    Should contain entries in the mempool.\n+     * param@[out]  setAncestors        Will be populated with all mempool ancestors.\n+     */\n+    bool calculateAncestorsAndCheckLimits(size_t entry_size,\n+                                          size_t entry_count,\n+                                          setEntries& setAncestors,\n+                                          CTxMemPoolEntry::Parents &staged_ancestors,",
      "path": "src/txmempool.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                                          CTxMemPoolEntry::Parents& staged_ancestors,\r\n```",
      "created_at": "2021-07-22T12:58:56Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674772033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674772033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 601,
      "original_line": 601,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674782488",
      "pull_request_review_id": 712704251,
      "id": 674782488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDc4MjQ4OA==",
      "diff_hunk": "@@ -585,6 +586,25 @@ class CTxMemPool\n      */\n     std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+\n+    /**\n+     * Helper function to calculate all in-mempool ancestors of staged_ancestors and apply",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * Helper function to calculate all in-mempool ancestors of staged_ancestors (including staged_ancestors themselves) and apply\r\n```\r\n\r\nor similar to document that setAncestors will include the transactions in staged_ancestors.",
      "created_at": "2021-07-22T13:12:45Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674782488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674782488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674785456",
      "pull_request_review_id": 712704251,
      "id": 674785456,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDc4NTQ1Ng==",
      "diff_hunk": "@@ -585,6 +586,25 @@ class CTxMemPool\n      */\n     std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+\n+    /**\n+     * Helper function to calculate all in-mempool ancestors of staged_ancestors and apply\n+     * ancestor/descendant limits. Inclusive of entry_size and entry_count.\n+     * param@[in]   entry_size          Virtual size to include in the limits.\n+     * param@[in]   entry_count         How many entries to include in the limits.\n+     * param@[in]   staged_ancestors    Should contain entries in the mempool.\n+     * param@[out]  setAncestors        Will be populated with all mempool ancestors.\n+     */\n+    bool calculateAncestorsAndCheckLimits(size_t entry_size,\n+                                          size_t entry_count,\n+                                          setEntries& setAncestors,",
      "path": "src/txmempool.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `&` jumps from right to left between commits. Perhaps just have this as `setEntries& setAncestors` in commit _MOVEONLY: add helper function for calculating ancestors and checking limits_",
      "created_at": "2021-07-22T13:16:28Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674785456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674785456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 600,
      "original_line": 600,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674801171",
      "pull_request_review_id": 712704251,
      "id": 674801171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDgwMTE3MQ==",
      "diff_hunk": "@@ -187,14 +170,20 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  entry_count > 1 ? \"possibly \" : \"\",",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These conditional log changes make the function less generic (it now knows something semantic about the caller). If you really want this \"possibly \" prefix, you could prepend it in the calling function:\r\n\r\n```diff\r\n     // When multiple transactions are passed in, the ancestors and descendants of all transactions\r\n     // considered together must be within limits even if they are not interdependent. This may be\r\n     // stricter than the limits for each individual transaction.\r\n-    return calculateAncestorsAndCheckLimits(total_size, package.size(),\r\n-                                            setAncestors, staged_ancestors,\r\n-                                            limitAncestorCount, limitAncestorSize,\r\n-                                            limitDescendantCount, limitDescendantSize, errString);\r\n+    auto ret = calculateAncestorsAndCheckLimits(total_size, package.size(),\r\n+                                                setAncestors, staged_ancestors,\r\n+                                                limitAncestorCount, limitAncestorSize,\r\n+                                                limitDescendantCount, limitDescendantSize, errString);\r\n+\r\n+    errString.insert(0, \"possibly \");\r\n+    return ret;\r\n }\r\n```\r\n\r\nAlthough I don't think you really need it. If someone is submitting packages through the RPC, then presumably they're a sophisticated user and they'll be able to understand that a heuristic is being used to calculate ancestor/descendant limits.\r\n\r\nYou could also update the only place that this string is used:\r\n\r\n```diff\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1094,7 +1094,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\r\n             // be implementation-dependent, and it's likely to be multiple transactions because we\r\n             // evaluated all of them together. Return the same failure for all transactions.\r\n             for (auto& ws : workspaces) {\r\n-                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"exceeds-ancestor-descendant-limits\", err_string);\r\n+                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"exceeds-ancestor-descendant-limits-heuristic\", err_string);\r\n                 results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\r\n             }\r\n             package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\");\r\n```",
      "created_at": "2021-07-22T13:35:25Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674801171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674801171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674803415",
      "pull_request_review_id": 712704251,
      "id": 674803415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDgwMzQxNQ==",
      "diff_hunk": "@@ -216,6 +207,69 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const Package& package,\n+                                           setEntries& setAncestors,\n+                                           uint64_t limitAncestorCount,\n+                                           uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount,\n+                                           uint64_t limitDescendantSize,\n+                                           std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    return calculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                            setAncestors, staged_ancestors,\n+                                            limitAncestorCount, limitAncestorSize,\n+                                            limitDescendantCount, limitDescendantSize, errString);\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    if (fSearchForParents) {\n+        // Get parents of this transaction that are in the mempool\n+        // GetMemPoolParents() is only valid for entries in the mempool, so we\n+        // iterate mapTx to find parents.\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    } else {\n+        // If we're not searching for parents, we require this to already be an\n+        // entry in the mempool and use the entry's cached parents.\n+        txiter it = mapTx.iterator_to(entry);\n+        staged_ancestors = it->GetMemPoolParentsConst();\n+    }\n+\n+    return calculateAncestorsAndCheckLimits(entry.GetTxSize(), 1, setAncestors, staged_ancestors,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Document basic type arguments:\r\n\r\n```suggestion\r\n    return calculateAncestorsAndCheckLimits(entry.GetTxSize(), /* entry_count */ 1, setAncestors, staged_ancestors,\r\n```",
      "created_at": "2021-07-22T13:38:07Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674803415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674803415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674806029",
      "pull_request_review_id": 712704251,
      "id": 674806029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDgwNjAyOQ==",
      "diff_hunk": "@@ -216,6 +207,69 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const Package& package,\n+                                           setEntries& setAncestors,\n+                                           uint64_t limitAncestorCount,\n+                                           uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount,\n+                                           uint64_t limitDescendantSize,\n+                                           std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": 89,
      "original_position": 108,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to have an early exit here if `total_size` exceeds `limitAncestorSize` (similar to if the ancestor count exceeds `limitAncestorCount`)?",
      "created_at": "2021-07-22T13:41:11Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674806029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674806029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674810604",
      "pull_request_review_id": 712704251,
      "id": 674810604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDgxMDYwNA==",
      "diff_hunk": "@@ -216,6 +207,69 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const Package& package,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function doesn't need to have a `setAncestors` out param, since the only place that it's called doesn't use it. In fact, you could rename this function to something like `CheckPackageLimits()` to better document what it's used for.",
      "created_at": "2021-07-22T13:46:26Z",
      "updated_at": "2021-07-22T13:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674810604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674810604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674848246",
      "pull_request_review_id": 712856832,
      "id": 674848246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDg0ODI0Ng==",
      "diff_hunk": "@@ -216,6 +207,69 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const Package& package,\n+                                           setEntries& setAncestors,\n+                                           uint64_t limitAncestorCount,\n+                                           uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount,\n+                                           uint64_t limitDescendantSize,\n+                                           std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": 89,
      "original_position": 108,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674806029,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure. In practice, it wouldn't happen since we would have checked the package limits already",
      "created_at": "2021-07-22T14:25:17Z",
      "updated_at": "2021-07-22T14:25:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674848246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674848246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493060",
      "pull_request_review_id": 714700738,
      "id": 676493060,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ5MzA2MA==",
      "diff_hunk": "@@ -216,6 +207,69 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const Package& package,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674810604,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point - done :)",
      "created_at": "2021-07-26T10:46:20Z",
      "updated_at": "2021-07-26T10:46:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493060",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493156",
      "pull_request_review_id": 714701084,
      "id": 676493156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ5MzE1Ng==",
      "diff_hunk": "@@ -216,6 +207,69 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const Package& package,\n+                                           setEntries& setAncestors,\n+                                           uint64_t limitAncestorCount,\n+                                           uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount,\n+                                           uint64_t limitDescendantSize,\n+                                           std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    return calculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                            setAncestors, staged_ancestors,\n+                                            limitAncestorCount, limitAncestorSize,\n+                                            limitDescendantCount, limitDescendantSize, errString);\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    if (fSearchForParents) {\n+        // Get parents of this transaction that are in the mempool\n+        // GetMemPoolParents() is only valid for entries in the mempool, so we\n+        // iterate mapTx to find parents.\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    } else {\n+        // If we're not searching for parents, we require this to already be an\n+        // entry in the mempool and use the entry's cached parents.\n+        txiter it = mapTx.iterator_to(entry);\n+        staged_ancestors = it->GetMemPoolParentsConst();\n+    }\n+\n+    return calculateAncestorsAndCheckLimits(entry.GetTxSize(), 1, setAncestors, staged_ancestors,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674803415,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2021-07-26T10:46:30Z",
      "updated_at": "2021-07-26T10:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493617",
      "pull_request_review_id": 714702344,
      "id": 676493617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ5MzYxNw==",
      "diff_hunk": "@@ -187,14 +170,20 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  entry_count > 1 ? \"possibly \" : \"\",",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674801171,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, added the \"possibly \" prefix outside",
      "created_at": "2021-07-26T10:47:07Z",
      "updated_at": "2021-07-26T10:47:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493830",
      "pull_request_review_id": 714702492,
      "id": 676493830,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ5MzgzMA==",
      "diff_hunk": "@@ -585,6 +586,25 @@ class CTxMemPool\n      */\n     std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+\n+    /**\n+     * Helper function to calculate all in-mempool ancestors of staged_ancestors and apply",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674782488,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-07-26T10:47:17Z",
      "updated_at": "2021-07-26T10:47:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676493830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676494012",
      "pull_request_review_id": 714702609,
      "id": 676494012,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ5NDAxMg==",
      "diff_hunk": "@@ -585,6 +586,25 @@ class CTxMemPool\n      */\n     std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+\n+    /**\n+     * Helper function to calculate all in-mempool ancestors of staged_ancestors and apply\n+     * ancestor/descendant limits. Inclusive of entry_size and entry_count.\n+     * param@[in]   entry_size          Virtual size to include in the limits.\n+     * param@[in]   entry_count         How many entries to include in the limits.\n+     * param@[in]   staged_ancestors    Should contain entries in the mempool.\n+     * param@[out]  setAncestors        Will be populated with all mempool ancestors.\n+     */\n+    bool calculateAncestorsAndCheckLimits(size_t entry_size,\n+                                          size_t entry_count,\n+                                          setEntries& setAncestors,",
      "path": "src/txmempool.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674785456,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-07-26T10:47:27Z",
      "updated_at": "2021-07-26T10:47:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676494012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676494012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 600,
      "original_line": 600,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676494133",
      "pull_request_review_id": 714702689,
      "id": 676494133,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ5NDEzMw==",
      "diff_hunk": "@@ -151,34 +151,17 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::calculateAncestorsAndCheckLimits(size_t entry_size,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "27986f86c6fce4ceef232b0955bfbaef80a18977",
      "in_reply_to_id": 674769853,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-07-26T10:47:35Z",
      "updated_at": "2021-07-26T10:47:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676494133",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676494133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676527653",
      "pull_request_review_id": 714744880,
      "id": 676527653,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjUyNzY1Mw==",
      "diff_hunk": "@@ -181,6 +185,232 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+        node.generate(1)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 132,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for these new calls to `generate(1)`.",
      "created_at": "2021-07-26T11:41:42Z",
      "updated_at": "2021-07-26T11:48:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676527653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676527653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676530625",
      "pull_request_review_id": 714744880,
      "id": 676530625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjUzMDYyNQ==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    if (!ret) errString.insert(0, \"possibly \");",
      "path": "src/txmempool.cpp",
      "position": 101,
      "original_position": 100,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be worth commenting why you're prefixing the error string with \"possibly\" here.",
      "created_at": "2021-07-26T11:46:39Z",
      "updated_at": "2021-07-26T11:48:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676530625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676530625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681490129",
      "pull_request_review_id": 720847603,
      "id": 681490129,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTQ5MDEyOQ==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    if (!ret) errString.insert(0, \"possibly \");",
      "path": "src/txmempool.cpp",
      "position": 101,
      "original_position": 100,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 676530625,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree",
      "created_at": "2021-08-03T07:03:16Z",
      "updated_at": "2021-08-03T07:42:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r681490129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681490129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682704976",
      "pull_request_review_id": 722403138,
      "id": 682704976,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcwNDk3Ng==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the future, if packages are allowed to replace in-mempool transactions do we have concerns of the same transaction accounted _twice_ falsifying this check ?\r\n\r\nLet's say you have in-mempool { Tx_A } and in-package { Tx_A, Tx_B } where Tx_A is parent of Tx_B. Within this configuration, Tx_A is going to be counted twice, firstly as a `staged_ancestors` member and secondly as a `package` member. \r\n\r\nIf this reasoning holds, one solution to be future-proof could be to proceed to the evaluation against `limitAncestorCount` after the for iteration, and once dedup between `staged_ancestors` and `package` has been done.",
      "created_at": "2021-08-04T15:05:31Z",
      "updated_at": "2021-08-04T16:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682704976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682704976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682714869",
      "pull_request_review_id": 722403138,
      "id": 682714869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxNDg2OQ==",
      "diff_hunk": "@@ -1084,6 +1084,22 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits.\n+    std::string err_string;\n+    if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                   m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and descendant limits\n+        // inside of PreChecks(). Figuring out which transaction to attribute this failure to may be\n+        // implementation-dependent, and it's likely to be multiple transactions because we\n+        // evaluated all of them together. Return the same failure for all transactions.\n+        for (auto& ws : workspaces) {\n+            ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"exceeds-ancestor-descendant-limits\", err_string);\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note, I think for the other package policy checks in `CheckPackage` we only return a `PackageValidationResult` without per-transaction results. If we want the package acceptance interface to be consistent, I believe we can leave `results` empty. As such, package policy failure overrides transaction policy one ?\r\n\r\nAt least `m_tx_results` doc in `src/validation.h` L216 could be clearer on this point. ",
      "created_at": "2021-08-04T15:16:25Z",
      "updated_at": "2021-08-04T16:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682714869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682714869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1097,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682734547",
      "pull_request_review_id": 722403138,
      "id": 682734547,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjczNDU0Nw==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;",
      "path": "src/txmempool.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this check doesn't have new coverage in `rpc_package.py ? I got a success for the following diff:\r\n```\r\ndiff --git a/src/txmempool.cpp b/src/txmempool.cpp\r\nindex 85911e15d..c7fa9fc62 100644\r\n--- a/src/txmempool.cpp\r\n+++ b/src/txmempool.cpp\r\n@@ -173,7 +173,7 @@ bool CTxMemPool::CalculateAncestorsAndCheckLimits(size_t entry_size,\r\n \r\n         if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\r\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\r\n-            return false;\r\n+            return true;\r\n         } else if (stageit->GetCountWithDescendants() + entry_count > limitDescendantCount) {\r\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);\r\n             return false;\r\n```",
      "created_at": "2021-08-04T15:38:52Z",
      "updated_at": "2021-08-04T16:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682734547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682734547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682776019",
      "pull_request_review_id": 722403138,
      "id": 682776019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mjc3NjAxOQ==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + entry_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);\n             return false;\n         } else if (totalSizeWithAncestors > limitAncestorSize) {",
      "path": "src/txmempool.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we have topologies of in-mempool transactions and packages bypassing this limit.\r\n\r\nLet's say you have in-mempool, independent Tx_A and Tx_B where their virtual sizes are 30 KvB each.\r\nLet's say you have packages transactions Tx_C and _Tx_D where Tx_C is a child of A and B and Tx_D is a child of Tx_C their virtual sizes are 30 KvB each.\r\n\r\nIn `CheckPackageLimits`, Tx_C isn't already in the mempool (`mapTx` is only updated in `Finalize`) and as such shouldn't part of `staged_ancestors`. This set should be composed of Tx_A and Tx_B only.\r\n\r\nIn `CalculateAncestorsAndCheckLimits`, `totalSizeWithAncestors` is the union Tx_A and Tx_B and its sum of 60 KvB is inferior to 101 KvB. After Tx_C and Tx_D are added to the mempool, the chain of transactions ABCD is of the sum 120 KvB.\r\n\r\nFurther, I don't think it's rejected by the check against `limitDescendantSize`, as Tx_A and Tx_B are evaluated independently, and not as a single cluster as they should be (Tx_A + Tx_C + Tx_D or Tx_B + Tx_C + Tx_D)\r\n\r\nNote, you need to replace Tx by chain of transactions because of `MAX_STANDARD_TX_WEIGHT` but I think this reasoning holds ?",
      "created_at": "2021-08-04T16:29:23Z",
      "updated_at": "2021-08-04T16:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682776019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682776019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683256913",
      "pull_request_review_id": 723096659,
      "id": 683256913,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzI1NjkxMw==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682704976,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, this is absolutely a consideration for replacements and duplicates in packages in the future. I agree, we'll want to de-duplicate first (CMPA and CheckPackageLimits wouldn't be called for transactions already in the mempool, since PreChecks looks for `txn-already-in-mempool` before this). Additionally, we'll want to subtract the size/count of transactions being replaced from descendant limits before calling this function.",
      "created_at": "2021-08-05T08:48:24Z",
      "updated_at": "2021-08-05T08:48:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683256913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683256913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683258608",
      "pull_request_review_id": 723098852,
      "id": 683258608,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzI1ODYwOA==",
      "diff_hunk": "@@ -1084,6 +1084,22 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits.\n+    std::string err_string;\n+    if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                   m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and descendant limits\n+        // inside of PreChecks(). Figuring out which transaction to attribute this failure to may be\n+        // implementation-dependent, and it's likely to be multiple transactions because we\n+        // evaluated all of them together. Return the same failure for all transactions.\n+        for (auto& ws : workspaces) {\n+            ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"exceeds-ancestor-descendant-limits\", err_string);\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682714869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a good point - perhaps it would be better to copy the error string from the `TxValidationState` into the `PackageValidationState` and always return results empty when we have a package-wide error.",
      "created_at": "2021-08-05T08:50:34Z",
      "updated_at": "2021-08-05T08:50:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683258608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683258608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1097,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683259424",
      "pull_request_review_id": 723099871,
      "id": 683259424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzI1OTQyNA==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;",
      "path": "src/txmempool.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682734547,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This error should be caught in the mempool_tests unit test?\r\n\r\nIt's true, though, that I didn't write tests for the size limits, just did count limits. I can add size limit tests.",
      "created_at": "2021-08-05T08:51:32Z",
      "updated_at": "2021-08-05T09:03:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683259424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683259424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683263216",
      "pull_request_review_id": 723104604,
      "id": 683263216,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzI2MzIxNg==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682704976,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(I will note this down for the future - I think we're on the same page about this, and it's not yet applicable for this PR)",
      "created_at": "2021-08-05T08:56:15Z",
      "updated_at": "2021-08-05T08:56:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683263216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683263216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683647947",
      "pull_request_review_id": 723615008,
      "id": 683647947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzY0Nzk0Nw==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    if (!ret) errString.insert(0, \"possibly \");",
      "path": "src/txmempool.cpp",
      "position": 101,
      "original_position": 100,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 676530625,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-08-05T17:22:24Z",
      "updated_at": "2021-08-05T17:22:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683647947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683647947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683648206",
      "pull_request_review_id": 723615365,
      "id": 683648206,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzY0ODIwNg==",
      "diff_hunk": "@@ -181,6 +185,232 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+        node.generate(1)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 132,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 676527653,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point :P removed. Added asserts for empty mempool in each of the subtests.",
      "created_at": "2021-08-05T17:22:45Z",
      "updated_at": "2021-08-05T17:22:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683648206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683648206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683648914",
      "pull_request_review_id": 723616276,
      "id": 683648914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzY0ODkxNA==",
      "diff_hunk": "@@ -1084,6 +1084,22 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits.\n+    std::string err_string;\n+    if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                   m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and descendant limits\n+        // inside of PreChecks(). Figuring out which transaction to attribute this failure to may be\n+        // implementation-dependent, and it's likely to be multiple transactions because we\n+        // evaluated all of them together. Return the same failure for all transactions.\n+        for (auto& ws : workspaces) {\n+            ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"exceeds-ancestor-descendant-limits\", err_string);\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682714869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the suggestion - I got rid of the tx results when there's a package-wide error, and added a comment explaining what to expect for `m_tx_results` in validation.h",
      "created_at": "2021-08-05T17:23:44Z",
      "updated_at": "2021-08-05T17:23:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683648914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683648914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1097,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683649480",
      "pull_request_review_id": 723617106,
      "id": 683649480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzY0OTQ4MA==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;",
      "path": "src/txmempool.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682734547,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a functional test for size limits - `test_desc_size_limits()` will fail if you apply this diff",
      "created_at": "2021-08-05T17:24:38Z",
      "updated_at": "2021-08-05T17:24:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683649480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683649480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683651128",
      "pull_request_review_id": 723619273,
      "id": 683651128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzY1MTEyOA==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + entry_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);\n             return false;\n         } else if (totalSizeWithAncestors > limitAncestorSize) {",
      "path": "src/txmempool.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682776019,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I don't think this case bypasses the algorithm. I've implemented this test in the latest push (see `test_anc_size_limits()`) and it passes for me. It's possible I misunderstood your description, but it seems like we're good here?",
      "created_at": "2021-08-05T17:27:00Z",
      "updated_at": "2021-08-05T17:27:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683651128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683651128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683700379",
      "pull_request_review_id": 723681762,
      "id": 683700379,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzcwMDM3OQ==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    if (!ret) errString.insert(0, \"possibly \");",
      "path": "src/txmempool.cpp",
      "position": 101,
      "original_position": 100,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 676530625,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's somewhat surprising to have an existing error message prefixed with 'possibly', I checked that it works for the current messages in `CalculateAncestorsAndCheckLimits`, but the validity of this text manipulation seems to be hard to guarantee over future changes to the code.\r\nBut I don't know a better solution to this, The grammatical correctness of the error message is not super critical.",
      "created_at": "2021-08-05T18:39:18Z",
      "updated_at": "2021-08-05T18:39:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683700379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683700379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684743188",
      "pull_request_review_id": 724880577,
      "id": 684743188,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc0MzE4OA==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682704976,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Additionally, we'll want to subtract the size/count of transactions being replaced from descendant limits before calling this function.\r\n\r\nExactly, this is another limit case to be aware of. And even trickier one like an ancestor of a second-stage package member being replaced by a first-stage package member and thus failing the whole package acceptance.\r\n\r\nYes, not yet applicable for this PR, good to not forget about it!",
      "created_at": "2021-08-08T09:16:11Z",
      "updated_at": "2021-08-08T09:16:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684743188",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684743188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684747959",
      "pull_request_review_id": 724883690,
      "id": 684747959,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc0Nzk1OQ==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;",
      "path": "src/txmempool.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682734547,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This error should be caught in the mempool_tests unit test?\r\n\r\nIt should but I don't' get an error for any `mempool_*` unit tests. Won't be surprised there is a hole coverage before to this PR. \r\n\r\n> Added a functional test for size limits - test_desc_size_limits() will fail if you apply this diff\r\n\r\nThanks for adding one, there is at least one behavior change to cover introduce with this PR, `entry_size` can be > 1.",
      "created_at": "2021-08-08T09:56:15Z",
      "updated_at": "2021-08-08T09:56:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684747959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684747959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752492",
      "pull_request_review_id": 724886623,
      "id": 684752492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1MjQ5Mg==",
      "diff_hunk": "@@ -187,10 +171,10 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + entry_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);\n             return false;\n         } else if (totalSizeWithAncestors > limitAncestorSize) {",
      "path": "src/txmempool.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682776019,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for writing the test, I noticed where my reasoning was flawed! \r\n\r\n>  totalSizeWithAncestors is the union Tx_A and Tx_B and its sum of 60 KvB is inferior to 101 KvB. \r\n\r\nWe init `totalSizeWithAncestors` with the whole package size from now, instead of the entry only (L164 in `src/txmempool.cpp`). So we have A+B+C+D  and the check against `limitAncestorSize` rejects the package. Maybe the variable could be renamed `packageSizeWithAncestors`, but that's a nit.",
      "created_at": "2021-08-08T10:31:18Z",
      "updated_at": "2021-08-08T10:31:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684752492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684754153",
      "pull_request_review_id": 724887771,
      "id": 684754153,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1NDE1Mw==",
      "diff_hunk": "@@ -1079,6 +1079,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n+    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual",
      "path": "src/validation.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note, I still wonder if we need to make CPFP carve-out composable with package acceptance in the future. Otherwise a counterparty can build a branch of descendants from an output A on a multi-party unconfirmed ancestor to block package acceptance on an output B.\r\n\r\nI don't think this is required for current LN safety, as least as long as implementation backends don't try to chain their commitment+CPFP transactions. But it might be useful for other second-layers applications (e.g Lightning Pool's batch execution+commitment txn).",
      "created_at": "2021-08-08T10:45:21Z",
      "updated_at": "2021-08-08T10:53:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684754153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684754153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684789387",
      "pull_request_review_id": 724912756,
      "id": 684789387,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc4OTM4Nw==",
      "diff_hunk": "@@ -1079,6 +1079,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n+    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual",
      "path": "src/validation.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": 684754153,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we use packages to just remove the carve out?",
      "created_at": "2021-08-08T15:13:07Z",
      "updated_at": "2021-08-08T15:13:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684789387",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684789387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684806036",
      "pull_request_review_id": 724923248,
      "id": 684806036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDgwNjAzNg==",
      "diff_hunk": "@@ -216,6 +200,79 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "6d8f687bfc0fde94a98a8bc9ad013e99987b0b8b",
      "in_reply_to_id": 682704976,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i think a simpler API would be to have staged always contain all the entries themselves? is there a reason not to (I think the epoch algorithm is relatively lightweight for this).",
      "created_at": "2021-08-08T17:33:13Z",
      "updated_at": "2021-08-08T17:33:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684806036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684806036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685040048",
      "pull_request_review_id": 725180293,
      "id": 685040048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA0MDA0OA==",
      "diff_hunk": "@@ -216,6 +200,80 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    // It's possible to overestimate the ancestor/descendant totals.",
      "path": "src/txmempool.cpp",
      "position": 100,
      "original_position": 100,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now that this errString is only used for the `PackageMempoolAcceptResult`, I think you can just drop the \"possibly\" prefix. It may have been useful on individual `MempoolAcceptResult` to disambiguate between failure because a single transaction definitely exceeded the limits and failure because a transaction was in a package that possibly exceeded limits. Now that we're not using it there, I think it should just be removed.",
      "created_at": "2021-08-09T09:25:42Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685040048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685040048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685056148",
      "pull_request_review_id": 725180293,
      "id": 685056148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA1NjE0OA==",
      "diff_hunk": "@@ -148,20 +133,7 @@ def test_independent(self):\n     def test_chain(self):\n         node = self.nodes[0]\n         first_coin = self.coins.pop()\n-\n-        # Chain of 25 transactions\n-        parent_locking_script = None\n-        txid = first_coin[\"txid\"]\n-        chain_hex = []\n-        chain_txns = []\n-        value = first_coin[\"amount\"]\n-\n-        for _ in range(25):\n-            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n-            txid = tx.rehash()\n-            chain_hex.append(txhex)\n-            chain_txns.append(tx)\n-\n+        (chain_hex, chain_txns) = create_raw_chain(node, first_coin, self.address, self.privkeys)",
      "path": "test/functional/rpc_packages.py",
      "position": 57,
      "original_position": 57,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for these parens. You can just assign to the individual variables:\r\n\r\n```suggestion\r\n        chain_hex, chain_txns = create_raw_chain(node, first_coin, self.address, self.privkeys)\r\n```\r\n\r\nSame for several other assignments below.",
      "created_at": "2021-08-09T09:50:51Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685056148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685056148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685061119",
      "pull_request_review_id": 725180293,
      "id": 685061119,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA2MTExOQ==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())",
      "path": "test/functional/test_framework/wallet.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to construct a tuple here. In python you can just use an [expression list](https://docs.python.org/3.9/reference/expressions.html#grammar-token-expression-list) in a return statement:\r\n\r\n```suggestion\r\n    return tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex()\r\n```\r\n\r\nHowever, both of these are dangerous interfaces with an untyped language like Python, since users of this function could easily assign the return expressions to the wrong variables. A safer interface would be to return a [named tuple](https://docs.python.org/3.9/library/collections.html?highlight=namedtuple#collections.namedtuple) so that the caller needs to explicitly unpack the wanted values from the return object.",
      "created_at": "2021-08-09T09:58:40Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685061119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685061119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 203,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685084219",
      "pull_request_review_id": 725180293,
      "id": 685084219,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA4NDIxOQ==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n+    \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    num_parents = len(parents_tx)\n+    total_value = sum(values)\n+    inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+    outputs = {address : total_value - fee}\n+    rawtx_child = node.createrawtransaction(inputs, outputs)\n+    prevtxs = []\n+    for i in range(num_parents):\n+        prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+    signedtx_child = node.signrawtransactionwithkey(hexstring=rawtx_child, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx_child[\"complete\"]\n+    return signedtx_child[\"hex\"]\n+\n+def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):",
      "path": "test/functional/test_framework/wallet.py",
      "position": 70,
      "original_position": 70,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the default `chain_length` parameter seems too specific to the specific packages test. Perhaps remove it and call the function with that specific value:\r\n\r\n```suggestion\r\ndef create_raw_chain(node, first_coin, address, privkeys, chain_length):\r\n```",
      "created_at": "2021-08-09T10:37:54Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685084219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685084219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685091478",
      "pull_request_review_id": 725180293,
      "id": 685091478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA5MTQ3OA==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):",
      "path": "test/functional/test_framework/wallet.py",
      "position": 36,
      "original_position": 36,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`make_chain()` doesn't seem like the right name for this function. I'd expect such a function to return a _chain_ of transactions, rather than an individual transaction.\r\n\r\nIt looks like the `n` parameter isn't ever used by any of the callers. Perhaps remove it and update the function documentation to say that the function spends the first output. The function can always be updated in future to allow n to be different.",
      "created_at": "2021-08-09T10:50:31Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685091478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685091478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685096946",
      "pull_request_review_id": 725252760,
      "id": 685096946,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA5Njk0Ng==",
      "diff_hunk": "@@ -1079,6 +1079,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n+    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual",
      "path": "src/validation.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": 684754153,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ideally yes, carve-out don't scale for multi-party (n > 2) fee-bumping.\r\n\r\nThough extending the carve-out to safely chain CPFPs was argued by Matt on the LDK side (see here https://lightningdevkit.slack.com/archives/CTBLT3CAU/p1625786787422100). Personally, I think this approach is a bit doomed as we can assume first-stage of the CPFP-chain can always be replaced by a valid claim of a counterparty, thus downgrading the feerate of your other broadcasted commitments and I prefer the concurrent domino fee-bumping approach even if it's more complexity swallowed by the LN backend.\r\n\r\nFurther, I think there is another multi-party contract issue we have to solve. Namely, the first-stage state transaction can be symmetric but the second-stage states asymmetric-though-composable. E.g a CTV tree with a root transaction with branch A/branch B spending 2 isolated outputs. Alice broadcast root+branch A and Bob broadcast root+branch B, thus accidentally or maliciously evicting Alice's branch. I think we would like the mempool logic to aggregate those in-flight packages by conserving the highest-feerate subgraphs and that would require some form of carve-out to avoid package limits interfering ?",
      "created_at": "2021-08-09T11:00:20Z",
      "updated_at": "2021-08-09T11:00:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685096946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685096946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685098476",
      "pull_request_review_id": 725180293,
      "id": 685098476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA5ODQ3Ng==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n+    \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    num_parents = len(parents_tx)\n+    total_value = sum(values)\n+    inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+    outputs = {address : total_value - fee}\n+    rawtx_child = node.createrawtransaction(inputs, outputs)\n+    prevtxs = []\n+    for i in range(num_parents):\n+        prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+    signedtx_child = node.signrawtransactionwithkey(hexstring=rawtx_child, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx_child[\"complete\"]\n+    return signedtx_child[\"hex\"]\n+\n+def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):\n+    \"\"\"Helper function: create a \"chain\" of chain_length transactions. The nth transaction in the\n+    chain is a child of the n-1th transaction and parent of the n+1th transaction.\n+    \"\"\"\n+    parent_locking_script = None\n+    txid = first_coin[\"txid\"]\n+    chain_hex = []\n+    chain_txns = []\n+    value = first_coin[\"amount\"]\n+\n+    for _ in range(chain_length):\n+        (tx, txhex, value, parent_locking_script) = make_chain(node, address, privkeys, txid, value, 0, parent_locking_script)\n+        txid = tx.rehash()\n+        chain_hex.append(txhex)\n+        chain_txns.append(tx)\n+\n+    return (chain_hex, chain_txns)\n+\n+def bulk_transaction(tx, node, target_weight, privkeys, prevtxs=None):\n+    \"\"\"Pad a transaction with extra outputs until it reaches a target weight (or higher).\n+    returns CTransaction object\n+    \"\"\"\n+    tx_heavy = deepcopy(tx)\n+    assert_greater_than_or_equal(target_weight, tx_heavy.get_weight())\n+    while tx_heavy.get_weight() < target_weight:\n+        random_spk = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n+        for _ in range(512*2):\n+            random_spk += choice(\"0123456789ABCDEF\")",
      "path": "test/functional/test_framework/wallet.py",
      "position": 97,
      "original_position": 97,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do these outputs need to have different (and random) scriptPubKeys? It looks like none of the callers use any of these added outputs, so they could all just spend to the same (arbitrary) spk.",
      "created_at": "2021-08-09T11:03:05Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685098476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685098476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": 244,
      "original_start_line": 244,
      "start_side": "RIGHT",
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685099588",
      "pull_request_review_id": 725180293,
      "id": 685099588,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA5OTU4OA==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n+    \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    num_parents = len(parents_tx)\n+    total_value = sum(values)\n+    inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+    outputs = {address : total_value - fee}\n+    rawtx_child = node.createrawtransaction(inputs, outputs)\n+    prevtxs = []\n+    for i in range(num_parents):\n+        prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+    signedtx_child = node.signrawtransactionwithkey(hexstring=rawtx_child, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx_child[\"complete\"]\n+    return signedtx_child[\"hex\"]\n+\n+def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):\n+    \"\"\"Helper function: create a \"chain\" of chain_length transactions. The nth transaction in the\n+    chain is a child of the n-1th transaction and parent of the n+1th transaction.\n+    \"\"\"\n+    parent_locking_script = None\n+    txid = first_coin[\"txid\"]\n+    chain_hex = []\n+    chain_txns = []\n+    value = first_coin[\"amount\"]\n+\n+    for _ in range(chain_length):\n+        (tx, txhex, value, parent_locking_script) = make_chain(node, address, privkeys, txid, value, 0, parent_locking_script)\n+        txid = tx.rehash()\n+        chain_hex.append(txhex)\n+        chain_txns.append(tx)\n+\n+    return (chain_hex, chain_txns)\n+\n+def bulk_transaction(tx, node, target_weight, privkeys, prevtxs=None):\n+    \"\"\"Pad a transaction with extra outputs until it reaches a target weight (or higher).\n+    returns CTransaction object\n+    \"\"\"\n+    tx_heavy = deepcopy(tx)",
      "path": "test/functional/test_framework/wallet.py",
      "position": 92,
      "original_position": 92,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a reason that you're copying this rather than just mutating `tx` and returning it?",
      "created_at": "2021-08-09T11:05:07Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685099588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685099588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685101671",
      "pull_request_review_id": 725180293,
      "id": 685101671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEwMTY3MQ==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []\n+        for _ in range(5): # Make package transactions P0 ... P4\n+            gp_tx = []\n+            gp_values = []\n+            gp_scripts = []\n+            for _ in range(4): # Make mempool transactions M(4i+1)...M(4i+4)\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                txid = parent_coin[\"txid\"]\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n+                gp_tx.append(tx)\n+                gp_values.append(value)\n+                gp_scripts.append(spk)\n+                node.sendrawtransaction(txhex)\n+            # Package transaction Pi\n+            pi_hex = create_child_with_parents(node, self.address, self.privkeys, gp_tx, gp_values, gp_scripts)\n+            package_hex.append(pi_hex)\n+            pi_tx = tx_from_hex(pi_hex)\n+            parent_txns.append(pi_tx)\n+            parent_values.append(Decimal(pi_tx.vout[0].nValue) / COIN)\n+            scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n+        # Package transaction PC\n+        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, scripts))\n+\n+        assert_equal(20, node.getmempoolinfo()[\"size\"])\n+        assert_equal(6, len(package_hex))\n+        testres = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_size_limits(self):\n+        \"\"\"Test Case with 2 independent transactions in the mempool and a parent + child in the\n+        package, where the package parent is the child of both mempool transactions (30KvB each):\n+              A     B\n+               ^   ^\n+                 C\n+                 ^\n+                 D\n+        The lowest descendant, D, exceeds ancestor size limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+        target_weight = WITNESS_SCALE_FACTOR * 1000 * 30 # 30KvB\n+        high_fee = Decimal(\"0.003\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package ancestor size limits are calculated properly in packages\")\n+        # Mempool transactions A and B\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n+            node.sendrawtransaction(bulked_tx.serialize().hex())\n+            parents_tx.append(bulked_tx)\n+            values.append(Decimal(bulked_tx.vout[0].nValue) / COIN)\n+            scripts.append(bulked_tx.vout[0].scriptPubKey.hex())\n+\n+        # Package transaction C\n+        small_pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts, high_fee)\n+        pc_tx = bulk_transaction(tx_from_hex(small_pc_hex), node, target_weight, self.privkeys)\n+        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+        pc_hex = pc_tx.serialize().hex()\n+\n+        # Package transaction D\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk, high_fee)\n+        prevtxs = [{\n+            \"txid\": pc_tx.rehash(),\n+            \"vout\": 0,\n+            \"scriptPubKey\": spk,\n+            \"amount\": val,\n+        }]\n+        pd_tx = bulk_transaction(small_pd, node, target_weight, self.privkeys, prevtxs)\n+        pd_hex = pd_tx.serialize().hex()\n+\n+        assert_equal(2, node.getmempoolinfo()[\"size\"])\n+        testres_too_heavy = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_heavy:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_desc_size_limits(self):\n+        \"\"\"Create 3 mempool transactions and 2 package transactions (25KvB each):\n+              Ma\n+             ^ ^\n+            Mb  Mc\n+           ^     ^\n+          Pd      Pe\n+        The top ancestor in the package exceeds descendant size limits but only if the in-mempool\n+        and in-package descendants are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        target_weight = 21 * 1000 * WITNESS_SCALE_FACTOR\n+        high_fee = Decimal(\"0.0021\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package descendant sizes are calculated properly in packages\")\n+        # Top parent in mempool, Ma\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - high_fee) / 2 # Deduct fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE:  parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        parent_tx = bulk_transaction(tx_from_hex(rawtx), node, target_weight, self.privkeys)\n+        node.sendrawtransaction(parent_tx.serialize().hex())\n+\n+        package_hex = []\n+        for j in range(2): # Two legs (left and right)\n+            # Mempool transaction (Mb and Mc)\n+            mempool_tx = CTransaction()\n+            spk = parent_tx.vout[j].scriptPubKey.hex()\n+            value = Decimal(parent_tx.vout[j].nValue) / COIN\n+            txid = parent_tx.rehash()\n+            prevtxs = [{\n+                \"txid\": txid,\n+                \"vout\": j,\n+                \"scriptPubKey\": spk,\n+                \"amount\": value,\n+            }]\n+            if j == 0: # normal key\n+                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, j, spk, high_fee)\n+                mempool_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n+            else: # OP_TRUE\n+                inputs = [{\"txid\": txid, \"vout\": 1}]\n+                outputs = {self.address: value - high_fee}\n+                small_tx = tx_from_hex(node.createrawtransaction(inputs, outputs))\n+                mempool_tx = bulk_transaction(small_tx, node, target_weight, None, prevtxs)",
      "path": "test/functional/mempool_package_limits.py",
      "position": 447,
      "original_position": 447,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't need to pass `prevtxs` (since `privkeys` is `None`):\r\n\r\n```suggestion\r\n                mempool_tx = bulk_transaction(small_tx, node, target_weight, None, None)\r\n```\r\n\r\nYou could also make `privkeys` an optional parameter in `bulk_transaction()` that defaults to `None`.\r\n\r\nThis means that `spk` and `prevtxs` could go inside the `j == 0` branch, since they're not used in the `j == 1` branch.",
      "created_at": "2021-08-09T11:08:53Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685101671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685101671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 447,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685102052",
      "pull_request_review_id": 725180293,
      "id": 685102052,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEwMjA1Mg==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n+    \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    num_parents = len(parents_tx)\n+    total_value = sum(values)\n+    inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+    outputs = {address : total_value - fee}\n+    rawtx_child = node.createrawtransaction(inputs, outputs)\n+    prevtxs = []\n+    for i in range(num_parents):\n+        prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+    signedtx_child = node.signrawtransactionwithkey(hexstring=rawtx_child, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx_child[\"complete\"]\n+    return signedtx_child[\"hex\"]\n+\n+def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):\n+    \"\"\"Helper function: create a \"chain\" of chain_length transactions. The nth transaction in the\n+    chain is a child of the n-1th transaction and parent of the n+1th transaction.\n+    \"\"\"\n+    parent_locking_script = None\n+    txid = first_coin[\"txid\"]\n+    chain_hex = []\n+    chain_txns = []\n+    value = first_coin[\"amount\"]\n+\n+    for _ in range(chain_length):\n+        (tx, txhex, value, parent_locking_script) = make_chain(node, address, privkeys, txid, value, 0, parent_locking_script)\n+        txid = tx.rehash()\n+        chain_hex.append(txhex)\n+        chain_txns.append(tx)\n+\n+    return (chain_hex, chain_txns)\n+\n+def bulk_transaction(tx, node, target_weight, privkeys, prevtxs=None):\n+    \"\"\"Pad a transaction with extra outputs until it reaches a target weight (or higher).\n+    returns CTransaction object\n+    \"\"\"\n+    tx_heavy = deepcopy(tx)\n+    assert_greater_than_or_equal(target_weight, tx_heavy.get_weight())\n+    while tx_heavy.get_weight() < target_weight:\n+        random_spk = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n+        for _ in range(512*2):\n+            random_spk += choice(\"0123456789ABCDEF\")\n+        tx_heavy.vout.append(CTxOut(0, bytes.fromhex(random_spk)))\n+    # Re-sign the transaction\n+    if privkeys:\n+        signed = node.signrawtransactionwithkey(tx_heavy.serialize().hex(), privkeys, prevtxs)\n+        return tx_from_hex(signed[\"hex\"])\n+    # OP_TRUE\n+    tx_heavy.wit.vtxinwit = [CTxInWitness()]\n+    tx_heavy.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+    return tx_heavy",
      "path": "test/functional/test_framework/wallet.py",
      "position": 106,
      "original_position": 106,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps make this an `else` branch to make it very clear that this is the alternative to signing with provided privkeys.",
      "created_at": "2021-08-09T11:09:30Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685102052",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685102052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": 253,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685104075",
      "pull_request_review_id": 725180293,
      "id": 685104075,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEwNDA3NQ==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}",
      "path": "test/functional/test_framework/wallet.py",
      "position": 43,
      "original_position": 43,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[No need for a space after the key](https://www.python.org/dev/peps/pep-0008/#pet-peeves):\r\n\r\n```suggestion\r\n    outputs = {address: my_value}\r\n```\r\n\r\nSame in `create_child_with_parents()` below",
      "created_at": "2021-08-09T11:13:07Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685104075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685104075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685105589",
      "pull_request_review_id": 725180293,
      "id": 685105589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEwNTU4OQ==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n+    \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    num_parents = len(parents_tx)\n+    total_value = sum(values)\n+    inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+    outputs = {address : total_value - fee}\n+    rawtx_child = node.createrawtransaction(inputs, outputs)\n+    prevtxs = []\n+    for i in range(num_parents):\n+        prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})",
      "path": "test/functional/test_framework/wallet.py",
      "position": 65,
      "original_position": 65,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This implicitly assumes that `len(parents_tx)` == `len(locking_scripts)` == `len(values)`. Perhaps assert that explicitly at the top of the function, or change the function signature to take a `parents` parameter which is a list of (tx, value, locking_script) tuples.",
      "created_at": "2021-08-09T11:15:58Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685105589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685105589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": 213,
      "original_start_line": 213,
      "start_side": "RIGHT",
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685115251",
      "pull_request_review_id": 725180293,
      "id": 685115251,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTExNTI1MQ==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]",
      "path": "test/functional/mempool_package_limits.py",
      "position": 129,
      "original_position": 129,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine for both outputs to have the same scriptPubKey (and would make the test logic below simpler as well).",
      "created_at": "2021-08-09T11:32:30Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685115251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685115251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685121977",
      "pull_request_review_id": 725180293,
      "id": 685121977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEyMTk3Nw==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")",
      "path": "test/functional/mempool_package_limits.py",
      "position": 268,
      "original_position": 268,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't needed. `make_chain` already removes the fee from the output values.",
      "created_at": "2021-08-09T11:44:23Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685121977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685121977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 268,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685129826",
      "pull_request_review_id": 725180293,
      "id": 685129826,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEyOTgyNg==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")",
      "path": "test/functional/mempool_package_limits.py",
      "position": 279,
      "original_position": 279,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't need to be `0.0002` and works equally well with `0.0001` now that `create_child_with_parents()` always sets the fee to `0.0001` regardless of number of inputs.\r\n\r\nRather than using a magic number here, perhaps just grab the output amount from the transaction:\r\n\r\n```suggestion\r\n        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\r\n```",
      "created_at": "2021-08-09T11:57:30Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685129826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685129826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685132739",
      "pull_request_review_id": 725180293,
      "id": 685132739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEzMjczOQ==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []\n+        for _ in range(5): # Make package transactions P0 ... P4\n+            gp_tx = []",
      "path": "test/functional/mempool_package_limits.py",
      "position": 312,
      "original_position": 312,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have a slight preference for the previous `grandparent_` naming here (I don't think `gp` will be obvious to readers). Also perhaps change this to `txs` so it's clearer that it's multiple transactions.",
      "created_at": "2021-08-09T12:02:24Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685132739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685132739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 312,
      "original_line": 312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685133231",
      "pull_request_review_id": 725180293,
      "id": 685133231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEzMzIzMQ==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []",
      "path": "test/functional/mempool_package_limits.py",
      "position": 310,
      "original_position": 310,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why not `parent_scipts` to go with the other `parent_...` (or even `parent_spks`).",
      "created_at": "2021-08-09T12:03:18Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685133231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685133231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685140674",
      "pull_request_review_id": 725180293,
      "id": 685140674,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE0MDY3NA==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])",
      "path": "test/functional/mempool_package_limits.py",
      "position": 58,
      "original_position": 58,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it possible to make this test work without using `-acceptnonstdtxn`, perhaps by having `bulk_transaction` just add standard outputs? Since this test is all about mempool policy, it seems better to have the policy of the node being tested to be as close to realistic as possible.",
      "created_at": "2021-08-09T12:15:16Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685140674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685140674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685145567",
      "pull_request_review_id": 725180293,
      "id": 685145567,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE0NTU2Nw==",
      "diff_hunk": "@@ -216,6 +200,80 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    // It's possible to overestimate the ancestor/descendant totals.",
      "path": "src/txmempool.cpp",
      "position": 100,
      "original_position": 100,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": 685040048,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fact, I don't think this string ever gets used (in logging or returned to users). Should `testmempoolaccept` be updated to return the reject reason and debug message for the transaction result and package result (see `ValidationState::ToString()`, which indirectly gets called if `sendrawtransaction` fails).",
      "created_at": "2021-08-09T12:23:01Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685145567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685145567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685150952",
      "pull_request_review_id": 725180293,
      "id": 685150952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE1MDk1Mg==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []\n+        for _ in range(5): # Make package transactions P0 ... P4\n+            gp_tx = []\n+            gp_values = []\n+            gp_scripts = []\n+            for _ in range(4): # Make mempool transactions M(4i+1)...M(4i+4)\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                txid = parent_coin[\"txid\"]\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n+                gp_tx.append(tx)\n+                gp_values.append(value)\n+                gp_scripts.append(spk)\n+                node.sendrawtransaction(txhex)\n+            # Package transaction Pi\n+            pi_hex = create_child_with_parents(node, self.address, self.privkeys, gp_tx, gp_values, gp_scripts)\n+            package_hex.append(pi_hex)\n+            pi_tx = tx_from_hex(pi_hex)\n+            parent_txns.append(pi_tx)\n+            parent_values.append(Decimal(pi_tx.vout[0].nValue) / COIN)\n+            scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n+        # Package transaction PC\n+        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, scripts))\n+\n+        assert_equal(20, node.getmempoolinfo()[\"size\"])\n+        assert_equal(6, len(package_hex))\n+        testres = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_size_limits(self):\n+        \"\"\"Test Case with 2 independent transactions in the mempool and a parent + child in the\n+        package, where the package parent is the child of both mempool transactions (30KvB each):\n+              A     B\n+               ^   ^\n+                 C\n+                 ^\n+                 D\n+        The lowest descendant, D, exceeds ancestor size limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+        target_weight = WITNESS_SCALE_FACTOR * 1000 * 30 # 30KvB\n+        high_fee = Decimal(\"0.003\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package ancestor size limits are calculated properly in packages\")\n+        # Mempool transactions A and B\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n+            node.sendrawtransaction(bulked_tx.serialize().hex())\n+            parents_tx.append(bulked_tx)\n+            values.append(Decimal(bulked_tx.vout[0].nValue) / COIN)\n+            scripts.append(bulked_tx.vout[0].scriptPubKey.hex())\n+\n+        # Package transaction C\n+        small_pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts, high_fee)\n+        pc_tx = bulk_transaction(tx_from_hex(small_pc_hex), node, target_weight, self.privkeys)\n+        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+        pc_hex = pc_tx.serialize().hex()\n+\n+        # Package transaction D\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk, high_fee)\n+        prevtxs = [{\n+            \"txid\": pc_tx.rehash(),\n+            \"vout\": 0,\n+            \"scriptPubKey\": spk,\n+            \"amount\": val,\n+        }]\n+        pd_tx = bulk_transaction(small_pd, node, target_weight, self.privkeys, prevtxs)\n+        pd_hex = pd_tx.serialize().hex()\n+\n+        assert_equal(2, node.getmempoolinfo()[\"size\"])\n+        testres_too_heavy = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_heavy:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")",
      "path": "test/functional/mempool_package_limits.py",
      "position": 397,
      "original_position": 397,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we improved the error messages being returned to the user, we could more precisely check that the package was rejected due to _exceeds ancestor size limits_.",
      "created_at": "2021-08-09T12:31:21Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685150952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685150952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 397,
      "original_line": 397,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685152884",
      "pull_request_review_id": 725180293,
      "id": 685152884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE1Mjg4NA==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []\n+        for _ in range(5): # Make package transactions P0 ... P4\n+            gp_tx = []\n+            gp_values = []\n+            gp_scripts = []\n+            for _ in range(4): # Make mempool transactions M(4i+1)...M(4i+4)\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                txid = parent_coin[\"txid\"]\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n+                gp_tx.append(tx)\n+                gp_values.append(value)\n+                gp_scripts.append(spk)\n+                node.sendrawtransaction(txhex)\n+            # Package transaction Pi\n+            pi_hex = create_child_with_parents(node, self.address, self.privkeys, gp_tx, gp_values, gp_scripts)\n+            package_hex.append(pi_hex)\n+            pi_tx = tx_from_hex(pi_hex)\n+            parent_txns.append(pi_tx)\n+            parent_values.append(Decimal(pi_tx.vout[0].nValue) / COIN)\n+            scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n+        # Package transaction PC\n+        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, scripts))\n+\n+        assert_equal(20, node.getmempoolinfo()[\"size\"])\n+        assert_equal(6, len(package_hex))\n+        testres = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_size_limits(self):\n+        \"\"\"Test Case with 2 independent transactions in the mempool and a parent + child in the\n+        package, where the package parent is the child of both mempool transactions (30KvB each):\n+              A     B\n+               ^   ^\n+                 C\n+                 ^\n+                 D\n+        The lowest descendant, D, exceeds ancestor size limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+        target_weight = WITNESS_SCALE_FACTOR * 1000 * 30 # 30KvB\n+        high_fee = Decimal(\"0.003\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package ancestor size limits are calculated properly in packages\")\n+        # Mempool transactions A and B\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n+            node.sendrawtransaction(bulked_tx.serialize().hex())\n+            parents_tx.append(bulked_tx)\n+            values.append(Decimal(bulked_tx.vout[0].nValue) / COIN)\n+            scripts.append(bulked_tx.vout[0].scriptPubKey.hex())\n+\n+        # Package transaction C\n+        small_pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts, high_fee)\n+        pc_tx = bulk_transaction(tx_from_hex(small_pc_hex), node, target_weight, self.privkeys)\n+        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+        pc_hex = pc_tx.serialize().hex()\n+\n+        # Package transaction D\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk, high_fee)\n+        prevtxs = [{\n+            \"txid\": pc_tx.rehash(),\n+            \"vout\": 0,\n+            \"scriptPubKey\": spk,\n+            \"amount\": val,\n+        }]\n+        pd_tx = bulk_transaction(small_pd, node, target_weight, self.privkeys, prevtxs)\n+        pd_hex = pd_tx.serialize().hex()\n+\n+        assert_equal(2, node.getmempoolinfo()[\"size\"])\n+        testres_too_heavy = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_heavy:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_desc_size_limits(self):\n+        \"\"\"Create 3 mempool transactions and 2 package transactions (25KvB each):\n+              Ma\n+             ^ ^\n+            Mb  Mc\n+           ^     ^\n+          Pd      Pe\n+        The top ancestor in the package exceeds descendant size limits but only if the in-mempool\n+        and in-package descendants are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        target_weight = 21 * 1000 * WITNESS_SCALE_FACTOR\n+        high_fee = Decimal(\"0.0021\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package descendant sizes are calculated properly in packages\")\n+        # Top parent in mempool, Ma\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - high_fee) / 2 # Deduct fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE:  parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        parent_tx = bulk_transaction(tx_from_hex(rawtx), node, target_weight, self.privkeys)\n+        node.sendrawtransaction(parent_tx.serialize().hex())\n+\n+        package_hex = []\n+        for j in range(2): # Two legs (left and right)\n+            # Mempool transaction (Mb and Mc)\n+            mempool_tx = CTransaction()",
      "path": "test/functional/mempool_package_limits.py",
      "position": 430,
      "original_position": 430,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to declare variables in Python",
      "created_at": "2021-08-09T12:34:21Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685152884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685152884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 430,
      "original_line": 430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685158927",
      "pull_request_review_id": 725180293,
      "id": 685158927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE1ODkyNw==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []\n+        for _ in range(5): # Make package transactions P0 ... P4\n+            gp_tx = []\n+            gp_values = []\n+            gp_scripts = []\n+            for _ in range(4): # Make mempool transactions M(4i+1)...M(4i+4)\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                txid = parent_coin[\"txid\"]\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n+                gp_tx.append(tx)\n+                gp_values.append(value)\n+                gp_scripts.append(spk)\n+                node.sendrawtransaction(txhex)\n+            # Package transaction Pi\n+            pi_hex = create_child_with_parents(node, self.address, self.privkeys, gp_tx, gp_values, gp_scripts)\n+            package_hex.append(pi_hex)\n+            pi_tx = tx_from_hex(pi_hex)\n+            parent_txns.append(pi_tx)\n+            parent_values.append(Decimal(pi_tx.vout[0].nValue) / COIN)\n+            scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n+        # Package transaction PC\n+        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, scripts))\n+\n+        assert_equal(20, node.getmempoolinfo()[\"size\"])\n+        assert_equal(6, len(package_hex))\n+        testres = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_size_limits(self):\n+        \"\"\"Test Case with 2 independent transactions in the mempool and a parent + child in the\n+        package, where the package parent is the child of both mempool transactions (30KvB each):\n+              A     B\n+               ^   ^\n+                 C\n+                 ^\n+                 D\n+        The lowest descendant, D, exceeds ancestor size limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+        target_weight = WITNESS_SCALE_FACTOR * 1000 * 30 # 30KvB\n+        high_fee = Decimal(\"0.003\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package ancestor size limits are calculated properly in packages\")\n+        # Mempool transactions A and B\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n+            node.sendrawtransaction(bulked_tx.serialize().hex())\n+            parents_tx.append(bulked_tx)\n+            values.append(Decimal(bulked_tx.vout[0].nValue) / COIN)\n+            scripts.append(bulked_tx.vout[0].scriptPubKey.hex())\n+\n+        # Package transaction C\n+        small_pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts, high_fee)\n+        pc_tx = bulk_transaction(tx_from_hex(small_pc_hex), node, target_weight, self.privkeys)\n+        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+        pc_hex = pc_tx.serialize().hex()\n+\n+        # Package transaction D\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk, high_fee)\n+        prevtxs = [{\n+            \"txid\": pc_tx.rehash(),\n+            \"vout\": 0,\n+            \"scriptPubKey\": spk,\n+            \"amount\": val,\n+        }]\n+        pd_tx = bulk_transaction(small_pd, node, target_weight, self.privkeys, prevtxs)\n+        pd_hex = pd_tx.serialize().hex()\n+\n+        assert_equal(2, node.getmempoolinfo()[\"size\"])\n+        testres_too_heavy = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_heavy:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_desc_size_limits(self):\n+        \"\"\"Create 3 mempool transactions and 2 package transactions (25KvB each):\n+              Ma\n+             ^ ^\n+            Mb  Mc\n+           ^     ^\n+          Pd      Pe\n+        The top ancestor in the package exceeds descendant size limits but only if the in-mempool\n+        and in-package descendants are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        target_weight = 21 * 1000 * WITNESS_SCALE_FACTOR\n+        high_fee = Decimal(\"0.0021\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package descendant sizes are calculated properly in packages\")\n+        # Top parent in mempool, Ma\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - high_fee) / 2 # Deduct fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE:  parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        parent_tx = bulk_transaction(tx_from_hex(rawtx), node, target_weight, self.privkeys)\n+        node.sendrawtransaction(parent_tx.serialize().hex())\n+\n+        package_hex = []\n+        for j in range(2): # Two legs (left and right)\n+            # Mempool transaction (Mb and Mc)\n+            mempool_tx = CTransaction()\n+            spk = parent_tx.vout[j].scriptPubKey.hex()\n+            value = Decimal(parent_tx.vout[j].nValue) / COIN\n+            txid = parent_tx.rehash()\n+            prevtxs = [{\n+                \"txid\": txid,\n+                \"vout\": j,\n+                \"scriptPubKey\": spk,\n+                \"amount\": value,\n+            }]\n+            if j == 0: # normal key\n+                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, j, spk, high_fee)\n+                mempool_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n+            else: # OP_TRUE\n+                inputs = [{\"txid\": txid, \"vout\": 1}]\n+                outputs = {self.address: value - high_fee}\n+                small_tx = tx_from_hex(node.createrawtransaction(inputs, outputs))",
      "path": "test/functional/mempool_package_limits.py",
      "position": 446,
      "original_position": 446,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe choose between `tx_small` and `small_tx` and stick to it :)",
      "created_at": "2021-08-09T12:43:35Z",
      "updated_at": "2021-08-09T12:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685158927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685158927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 446,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686704354",
      "pull_request_review_id": 727317944,
      "id": 686704354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcwNDM1NA==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])",
      "path": "test/functional/mempool_package_limits.py",
      "position": 58,
      "original_position": 58,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": 685140674,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I definitely agree, it's a shame to turn off standardness in a policy-based tests. Will try to do this in a followup.",
      "created_at": "2021-08-11T10:30:28Z",
      "updated_at": "2021-08-11T10:30:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r686704354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686704354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691598949",
      "pull_request_review_id": 733345949,
      "id": 691598949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTU5ODk0OQ==",
      "diff_hunk": "@@ -176,3 +181,75 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - fee\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())",
      "path": "test/functional/test_framework/wallet.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "original_commit_id": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "in_reply_to_id": 685061119,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Users of named tuples are not forced to access them by name, because they are also tuples as the name suggests:\r\n\r\n```\r\n>>> A = namedtuple('A', ['x','y'])\r\n>>> A(1,2)\r\nA(x=1, y=2)\r\n>>> y, x = A(1,2)\r\n>>> x, y\r\n(2, 1)\r\n```\r\n\r\nDataclasses seem closer to what you want:\r\n\r\n```\r\n>>> from dataclasses import dataclass\r\n>>> @dataclass\r\n... class A:\r\n...     x: int\r\n...     y: int\r\n... \r\n>>> A(1,2)\r\nA(x=1, y=2)\r\n>>> x,y = A(1,2)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: cannot unpack non-iterable A object\r\n```",
      "created_at": "2021-08-18T20:59:08Z",
      "updated_at": "2021-08-18T20:59:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r691598949",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691598949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 203,
      "original_line": 203,
      "side": "RIGHT"
    }
  ]
}