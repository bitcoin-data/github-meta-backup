{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325",
    "id": 963791657,
    "node_id": "PR_kwDOABII5845cksp",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25325",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25325.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25325.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9f947fc3d4b779f017332135323b34e8f216f613",
    "number": 25325,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add pool based memory resource",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A memory resource similar to `std::pmr::unsynchronized_pool_resource`, but optimized for node-based containers. The goal is to be able to cache more coins with the same memory usage, and allocate/deallocate faster.\r\n\r\nThis is a reimplementation of #22702. The goal was to implement it in a way that is simpler to review & test\r\n\r\n* There is now a generic `PoolResource` for allocating/deallocating memory. This has practically the same API as `std::pmr::memory_resource`. (Unfortunately I cannot use std::pmr because libc++ simply doesn't implement that API).\r\n* Thanks to sipa there is now a fuzzer for PoolResource! On a fast machine I ran it for ~770 million executions without finding any issue.\r\n\r\n* The estimation of the correct node size is now gone, PoolResource now has multiple pools and just needs to be created large enough to have space for the unordered_map nodes.\r\n\r\nI ran benchmarks with #22702, mergebase, and this PR. Frequency locked Intel i7-8700, clang++ 13.0.1 to reindex up to block 690000.\r\n\r\n```sh\r\nbitcoind -dbcache=5000 -assumevalid=00000000000000000002a23d6df20eecec15b21d32c75833cce28f113de888b7 -reindex-chainstate -printtoconsole=0 -stopatheight=690000\r\n```\r\n\r\nThe performance is practically identical with #22702, just 0.4% slower. It's ~21% faster than master:\r\n\r\n![Progress in Million Transactions over Time(2)](https://user-images.githubusercontent.com/14386/173288685-91952ade-f304-4825-8bfb-0725a71ca17b.png)\r\n\r\n![Size of Cache in MiB over Time](https://user-images.githubusercontent.com/14386/173291421-e6b410be-ac77-479b-ad24-5fafcebf81eb.png)\r\nNote that on cache drops mergebase's memory doesnt go so far down because it does not free the `CCoinsMap` bucket array.\r\n\r\n![Size of Cache in Million tx over Time(1)](https://user-images.githubusercontent.com/14386/173288703-a80c9c9e-93c8-4a16-9df8-610c89c61cc4.png)\r\n",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      }
    ],
    "created_at": "2022-06-10T07:16:06Z",
    "updated_at": "2023-04-21T04:12:56Z",
    "closed_at": "2023-04-20T20:20:32Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-04-20T20:20:32Z",
    "merge_commit_sha": "5aa0c82ccd6ceb4a141686fc8658f679de75a787",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "martinus:2022-06-very-not-scary-NodePoolResource",
      "ref": "2022-06-very-not-scary-NodePoolResource",
      "sha": "9f947fc3d4b779f017332135323b34e8f216f613",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 107273866,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMDcyNzM4NjY=",
        "name": "bitcoin",
        "full_name": "martinus/bitcoin",
        "owner": {
          "login": "martinus",
          "id": 14386,
          "node_id": "MDQ6VXNlcjE0Mzg2",
          "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/martinus",
          "html_url": "https://github.com/martinus",
          "followers_url": "https://api.github.com/users/martinus/followers",
          "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
          "organizations_url": "https://api.github.com/users/martinus/orgs",
          "repos_url": "https://api.github.com/users/martinus/repos",
          "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/martinus/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/martinus/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/martinus/bitcoin",
        "archive_url": "https://api.github.com/repos/martinus/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/martinus/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/martinus/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/martinus/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/martinus/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/martinus/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/martinus/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/martinus/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/martinus/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/martinus/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/martinus/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/martinus/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/martinus/bitcoin/events",
        "forks_url": "https://api.github.com/repos/martinus/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/martinus/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/martinus/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/martinus/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/martinus/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/martinus/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/martinus/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/martinus/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/martinus/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/martinus/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/martinus/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/martinus/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/martinus/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/martinus/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/martinus/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/martinus/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:martinus/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/martinus/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/martinus/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/martinus/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/martinus/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/martinus/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/martinus/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/martinus/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/martinus/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/martinus/bitcoin/hooks",
        "svn_url": "https://github.com/martinus/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 231380,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-29T20:29:21Z",
        "created_at": "2017-10-17T13:40:13Z",
        "updated_at": "2022-05-07T19:38:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "23056436461a8b3af1a504b9638c48e8c8170652",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1004,
    "deletions": 24,
    "changed_files": 16,
    "commits": 5,
    "review_comments": 106,
    "comments": 37
  },
  "events": [
    {
      "event": "convert_to_draft",
      "id": 6783954200,
      "node_id": "CTDE_lADOABII585Lh0inzwAAAAGUWu0Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6783954200",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-10T08:08:57Z"
    },
    {
      "event": "labeled",
      "id": 6784376013,
      "node_id": "LE_lADOABII585Lh0inzwAAAAGUYVzN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6784376013",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-10T09:13:27Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 6784376014,
      "node_id": "LE_lADOABII585Lh0inzwAAAAGUYVzO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6784376014",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-10T09:13:27Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6787031449,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUieGZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6787031449",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-10T15:45:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6787659040,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUk3Ug",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6787659040",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-10T17:23:26Z"
    },
    {
      "event": "commented",
      "id": 1152596519,
      "node_id": "IC_kwDOABII585Eszon",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1152596519",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-10T17:46:23Z",
      "updated_at": "2023-04-20T20:11:13Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [john-moffett](https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1356988307), [jonatack](https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1357119390), [LarryRuane](https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1483180518), [achow101](https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1516886734) |\n| Stale ACK | [sipa](https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1349066025) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1152596519",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6789546291,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUsEEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789546291",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T04:18:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6789560172,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUsHds",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789560172",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T04:37:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6789579082,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUsMFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789579082",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T05:03:14Z"
    },
    {
      "event": "reviewed",
      "id": 1003429046,
      "node_id": "PRR_kwDOABII5847zxy2",
      "url": null,
      "actor": null,
      "commit_id": "ba380163e189493bc6edd12dfe1cd9ce82214305",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1003429046",
      "submitted_at": "2022-06-11T06:13:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6789642314,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUsbhK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789642314",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T06:26:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6789797864,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUtBfo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789797864",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T09:30:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6789835230,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUtKne",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789835230",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T10:14:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6790094994,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUuKCS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6790094994",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T13:52:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6790139830,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGUuU-2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6790139830",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-11T14:37:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6791724030,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGU0Xv-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6791724030",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-12T17:13:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6791828118,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGU0xKW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6791828118",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-12T19:01:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6791847327,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGU012f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6791847327",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-12T19:18:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6791860301,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGU05BN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6791860301",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-12T19:32:12Z"
    },
    {
      "event": "renamed",
      "id": 6793269914,
      "node_id": "RTE_lADOABII585Lh0inzwAAAAGU6RKa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6793269914",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-13T06:18:53Z",
      "rename": {
        "from": "[WIP] Add pool based memory resource",
        "to": "Add pool based memory resource"
      }
    },
    {
      "event": "ready_for_review",
      "id": 6793274083,
      "node_id": "RFRE_lADOABII585Lh0inzwAAAAGU6SLj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6793274083",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-13T06:19:44Z"
    },
    {
      "event": "added_to_project",
      "id": 6794816213,
      "node_id": "ATPE_lADOABII585Lh0inzwAAAAGVAKrV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6794816213",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-13T10:13:21Z",
      "project_card": {
        "id": 83116647,
        "url": "https://api.github.com/projects/columns/cards/83116647",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6834278587,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAGXWtC7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6834278587",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-19T05:13:03Z"
    },
    {
      "event": "commented",
      "id": 1159619246,
      "node_id": "IC_kwDOABII585FHmKu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1159619246",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-19T05:15:23Z",
      "updated_at": "2022-06-19T05:15:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased to 9205b60 with minor fixes in `pool.h` so it is usable in `boost::unordered_map`",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1159619246",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "unlabeled",
      "id": 7215149080,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAGuDnAY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7215149080",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T14:55:30Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 1082762327,
      "node_id": "PRR_kwDOABII585AiaRX",
      "url": null,
      "actor": null,
      "commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1082762327",
      "submitted_at": "2022-08-23T19:55:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "reviewed",
      "id": 1082773235,
      "node_id": "PRR_kwDOABII585Aic7z",
      "url": null,
      "actor": null,
      "commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1082773235",
      "submitted_at": "2022-08-23T20:04:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "commented",
      "id": 1250328856,
      "node_id": "IC_kwDOABII585KhoEY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1250328856",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-18T15:13:09Z",
      "updated_at": "2022-09-18T15:13:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "In a semi-related event, I've recently created a big benchmark of a lot of different hashmaps. See here: https://martin.ankerl.com/2022/08/27/hashmap-bench-01/\r\n\r\nSome findings that I think are relevant for this PR:\r\n\r\n* I have added the `PoolAllocator` developed here to the benchmarks and combined it with both `std::unordered_map` and `boost::unordered_map` and it works without any problems.\r\n* boost has completely reworked the hashmap and released that in version 1.80. Just changing the map to that implementation will probably provide some speedup. [More info here](https://www.boost.org/doc/libs/1_80_0/libs/unordered/doc/html/unordered.html#benchmarks).\r\n* Both `boost::unordered_map` and `std::unordered_map` benefit a lot memory-wise from the `PoolAllocator`.\r\n* Boost has it's own pool allocator: `boost::container::pmr::unsynchronized_pool_resource` It behaves relatively similar to PoolAllocator, although slower in my benchmarks. So this might be an alternative to the `PoolAllocator`.\r\n* Other implementations like `gtl::parallel_flat_hash_map` are much faster and have low memory overhead, so they might be a good choice performance wise, although they carry much more risk because usage is not so widespread.",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1250328856",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7451418963,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAG8I6FT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7451418963",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-24T06:10:44Z"
    },
    {
      "event": "commented",
      "id": 1256876909,
      "node_id": "IC_kwDOABII585K6mtt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256876909",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-24T06:11:40Z",
      "updated_at": "2022-09-24T06:11:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased to [f1b20f0](https://github.com/bitcoin/bitcoin/commit/f1b20f04644ddc07bd9bbfc066f9701d54139d52) to fix copyright header in `xoroshiro128plusplus.h`. Nothing else changed.",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1256876909",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "labeled",
      "id": 7619634714,
      "node_id": "LE_lADOABII585Lh0inzwAAAAHGKmYa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7619634714",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-19T09:31:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7641917505,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAHHfmhB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7641917505",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T15:56:03Z"
    },
    {
      "event": "commented",
      "id": 1287155740,
      "node_id": "IC_kwDOABII585MuHAc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1287155740",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T15:58:23Z",
      "updated_at": "2022-10-21T17:22:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebase to 509d97a fixes merge conflict in `Makefile.test_util.include`, fixes a comment, adds benchmark priority, fix Win64 64bit shift warning.",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1287155740",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "unlabeled",
      "id": 7642053450,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAHHgHtK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7642053450",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T16:15:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7642458976,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAHHhqtg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7642458976",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T17:21:12Z"
    },
    {
      "event": "reviewed",
      "id": 1154271326,
      "node_id": "PRR_kwDOABII585EzMhe",
      "url": null,
      "actor": null,
      "commit_id": "509d97a7a97dfbf83bdd7d723e68159ce83ff5dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The code looks good but it is spooky to review.\r\nI have benchmarked the PR by running `bitcoind -dbcache=5000 -assumevalid=00000000000000000002a23d6df20eecec15b21d32c75833cce28f113de888b7 -reindex-chainstate -printtoconsole=0` and compared the time elapsed between the reindexing of blocks between height=165618 and height=686269 on both master and this PR on mainnet.\r\n\r\nMaster took 18h06mins and this PR took 13h46mins, corresponding to a reduction of ~24% which matches the PR description.",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1154271326",
      "submitted_at": "2022-10-25T08:09:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "reviewed",
      "id": 1154619863,
      "node_id": "PRR_kwDOABII585E0hnX",
      "url": null,
      "actor": null,
      "commit_id": "509d97a7a97dfbf83bdd7d723e68159ce83ff5dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I have also verified that using the default cache (`450MB`), this PR reindexes the chainstate faster than on master.\r\n\r\n### Master\r\n`./src/bitcoind -testnet -reindex-chainstate  -stopatheight=1000000 -printtoconsole=0`\r\nreal\t10m6.978s\r\nuser\t9m4.140s\r\nsys\t1m34.479s\r\n\r\n### PR\r\n`./src/bitcoind -testnet -reindex-chainstate  -stopatheight=1000000 -printtoconsole=0`\r\nreal\t9m32.270s\r\nuser\t8m29.061s\r\nsys\t1m26.911s",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1154619863",
      "submitted_at": "2022-10-25T11:15:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "labeled",
      "id": 7848557915,
      "node_id": "LE_lADOABII585Lh0inzwAAAAHTz31b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7848557915",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-19T01:44:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 7860104758,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAHUf642",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7860104758",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T18:22:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7917763480,
      "node_id": "LE_lADOABII585Lh0inzwAAAAHX73uY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7917763480",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T01:21:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7924505341,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAHYVlr9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7924505341",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T17:59:47Z"
    },
    {
      "event": "unlabeled",
      "id": 7924699633,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAHYWVHx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7924699633",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T18:27:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1338010318,
      "node_id": "IC_kwDOABII585PwGrO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1338010318",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T19:19:48Z",
      "updated_at": "2022-12-05T19:19:48Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, this approach is much easier to be convinced about, I feel. Happy to see that most of the performance gains carry over.\r\n\r\nI've ran a partial reindex under valgrind with this PR (to height 592178, which took several days), to really stress test it. No issues. I'll do a more in-depth code review soon.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1338010318",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "reviewed",
      "id": 1262647120,
      "node_id": "PRR_kwDOABII585LQndQ",
      "url": null,
      "actor": null,
      "commit_id": "d7dd33e8db4db430925f524d6224cad1a18ebe7b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1262647120",
      "submitted_at": "2023-01-19T22:13:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8322901149,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAHwFWSd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8322901149",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-20T16:04:08Z"
    },
    {
      "event": "reviewed",
      "id": 1264557141,
      "node_id": "PRR_kwDOABII585LX5xV",
      "url": null,
      "actor": null,
      "commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewing. Verified that each commit @  80722d838f9a5fdbbbd82f97d353e45b5d375ad8 builds cleanly with unit tests green.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1264557141",
      "submitted_at": "2023-01-21T01:37:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "reviewed",
      "id": 1266351016,
      "node_id": "PRR_kwDOABII585Levuo",
      "url": null,
      "actor": null,
      "commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK apart from one comment:",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1266351016",
      "submitted_at": "2023-01-23T22:08:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "reviewed",
      "id": 1268371465,
      "node_id": "PRR_kwDOABII585LmdAJ",
      "url": null,
      "actor": null,
      "commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "WIP review of the first commit 2bbe0f8eeae274fc30, none of my comments below are blockers.\r\n\r\n<details><summary>Some minor testing and poking around</summary><p>\r\n\r\nHave been running this patch on mainnet since January 20 without issues (M1 macOS 13.1/13.2, clang 15) but not yet done the reindex described the OP.\r\n\r\nBench results of `$ ./src/bench/bench_bitcoin -filter='Pool*.*'`\r\n```diff\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|               29.85 |       33,505,082.42 |    0.3% |      0.02 | `PoolAllocator_StdUnorderedMap`\r\n|               13.03 |       76,732,499.95 |    0.4% |      0.01 | `PoolAllocator_StdUnorderedMapWithPoolResource`\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|               28.63 |       34,927,088.12 |    0.2% |      0.02 | `PoolAllocator_StdUnorderedMap`\r\n|               12.56 |       79,586,875.90 |    0.5% |      0.01 | `PoolAllocator_StdUnorderedMapWithPoolResource`\r\n```\r\n\r\nThese are the values that build on my machine (fuzz test disabled):\r\n\r\n```diff\r\n     static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\r\n     static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\r\n     static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\r\n+    static_assert(ALIGN_BYTES == 8);\r\n+    static_assert(sizeof(ListNode) == 8);\r\n+    static_assert(alignof(ListNode) == 8);\r\n+    static_assert(ELEM_ALIGN_BYTES == 8);\r\n```\r\n\r\n</p></details>\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1268371465",
      "submitted_at": "2023-01-24T22:08:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "reviewed",
      "id": 1269855171,
      "node_id": "PRR_kwDOABII585LsHPD",
      "url": null,
      "actor": null,
      "commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 80722d838f9a5fdbbbd82f97d353e45b5d375ad8 modulo open comments and questions",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1269855171",
      "submitted_at": "2023-01-25T21:50:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8376394985,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAHzRaTp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8376394985",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T19:22:53Z"
    },
    {
      "event": "commented",
      "id": 1407093805,
      "node_id": "IC_kwDOABII585T3owt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407093805",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T21:30:38Z",
      "updated_at": "2023-01-27T22:26:02Z",
      "author_association": "MEMBER",
      "body": "ACK e7158613dcafd0065a94b03c8013ee4ced8ec3e3 per `git range-diff 4b51290 80722d8 e715861`\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1407093805",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1407124835,
      "node_id": "IC_kwDOABII585T3wVj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407124835",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T22:07:31Z",
      "updated_at": "2023-01-27T22:07:31Z",
      "author_association": "MEMBER",
      "body": "ACK e7158613dcafd0065a94b03c8013ee4ced8ec3e3",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1407124835",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1407297445,
      "node_id": "IC_kwDOABII585T4ael",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407297445",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T05:24:25Z",
      "updated_at": "2023-01-28T05:24:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for reviewing @jonatack and @sipa! I've addressed all comments with e715861",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1407297445",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "mentioned",
      "id": 8378934996,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAHzbGbU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8378934996",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T05:24:25Z"
    },
    {
      "event": "subscribed",
      "id": 8378935004,
      "node_id": "SE_lADOABII585Lh0inzwAAAAHzbGbc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8378935004",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T05:24:25Z"
    },
    {
      "event": "mentioned",
      "id": 8378935013,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAHzbGbl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8378935013",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T05:24:26Z"
    },
    {
      "event": "subscribed",
      "id": 8378935016,
      "node_id": "SE_lADOABII585Lh0inzwAAAAHzbGbo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8378935016",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T05:24:26Z"
    },
    {
      "event": "commented",
      "id": 1408930176,
      "node_id": "IC_kwDOABII585T-pGA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1408930176",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T16:21:39Z",
      "updated_at": "2023-01-30T16:21:39Z",
      "author_association": "MEMBER",
      "body": "Needs (fairly trivial) rebase after merge of #17487.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1408930176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "labeled",
      "id": 8390484275,
      "node_id": "LE_lADOABII585Lh0inzwAAAAH0HKEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8390484275",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T17:05:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8390585195,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAH0Hitr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8390585195",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T17:15:33Z"
    },
    {
      "event": "commented",
      "id": 1409017964,
      "node_id": "IC_kwDOABII585T--hs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409017964",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T17:21:07Z",
      "updated_at": "2023-01-30T17:21:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased to resolve conflicts, diff should be viewable with `git range-diff 82903a7 e715861 f58a5eee6f`",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1409017964",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1409063626,
      "node_id": "IC_kwDOABII585T_JrK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409063626",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T17:53:18Z",
      "updated_at": "2023-01-30T19:00:18Z",
      "author_association": "MEMBER",
      "body": "<strike>re-ACK f58a5eee6ff69582d6e46e93dd52e07202d257a8</strike>\r\n\r\nThe unit test CI failures look unrelated -- I didn't reproduce them running `make check` locally (Clang 15 on ARM64). \r\n\r\nEdit: there are now more of the failures and some seem related.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1409063626",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1409090307,
      "node_id": "IC_kwDOABII585T_QMD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409090307",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T18:12:09Z",
      "updated_at": "2023-01-30T18:33:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hm it looks like in some environments the new check fails:\r\n```\r\ncoins_tests.cpp(984): error: in \"coins_tests/ccoins_flush_behavior\": check view->DynamicMemoryUsage() < cache_usage has failed\r\n```\r\n\r\nI think the problem is this: The test from @jamesob assumes that memory usage goes down when the cache is flushed. But the pool is internally using chunks of 262144 bytes, and when flushed this memory block will be deallocated but might be allocated again right away when the map is created, so memory usage doesn't necessarily change. E.g. in Windows some control block is immediately allocated for the map, and this makes the pool allocator allocate its first chunk",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1409090307",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "mentioned",
      "id": 8391283605,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAH0KNOV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8391283605",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T18:33:46Z"
    },
    {
      "event": "subscribed",
      "id": 8391283626,
      "node_id": "SE_lADOABII585Lh0inzwAAAAH0KNOq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8391283626",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T18:33:46Z"
    },
    {
      "event": "unlabeled",
      "id": 8391634999,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAH0LjA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8391634999",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T19:15:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1409322773,
      "node_id": "IC_kwDOABII585UAI8V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409322773",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T20:58:30Z",
      "updated_at": "2023-01-30T21:04:18Z",
      "author_association": "MEMBER",
      "body": "Fixup LGTM modulo squashing. The remaining CI failures are due to https://cirrus-ci.com/task/5963593934438400 (that seems unrelated?) and to https://github.com/bitcoin/bitcoin/issues/27001 that should be fixed in https://github.com/bitcoin/bitcoin/pull/26998.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1409322773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "labeled",
      "id": 8393540524,
      "node_id": "LE_lADOABII585Lh0inzwAAAAH0S0Os",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8393540524",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T23:33:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8395807103,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAH0bdl_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8395807103",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T06:09:06Z"
    },
    {
      "event": "commented",
      "id": 1409824656,
      "node_id": "IC_kwDOABII585UCDeQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409824656",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T06:11:59Z",
      "updated_at": "2023-01-31T06:11:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Squashed and rebased again due to #26999\r\n\r\nSee the full range-diff after the 2 rebases: `git range-diff ceb74b8 e715861 c25a754b`\r\n\r\nBiggest change was updating the method `TestFlushBehavior` in coins_test.cpp",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1409824656",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "unlabeled",
      "id": 8396442915,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAH0d40j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8396442915",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T07:52:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8396580490,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAH0eaaK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8396580490",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T08:09:57Z"
    },
    {
      "event": "commented",
      "id": 1411143425,
      "node_id": "IC_kwDOABII585UHFcB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1411143425",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T22:16:50Z",
      "updated_at": "2023-01-31T22:16:50Z",
      "author_association": "MEMBER",
      "body": "re-ACK 0007d69f249068a14b9b5a97d46ace9dabdc2c8b",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1411143425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1414360875,
      "node_id": "IC_kwDOABII585UTW8r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1414360875",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T20:56:06Z",
      "updated_at": "2023-02-02T20:56:06Z",
      "author_association": "MEMBER",
      "body": "FWIW, I rebased this on top of #27011, and am running a few CPU cores on it. No issues so far.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1414360875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "labeled",
      "id": 8505848501,
      "node_id": "LE_lADOABII585Lh0inzwAAAAH6_PK1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8505848501",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-13T15:34:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8512188124,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAH7Xa7c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8512188124",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-14T07:30:49Z"
    },
    {
      "event": "commented",
      "id": 1429293948,
      "node_id": "IC_kwDOABII585VMUt8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1429293948",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-14T08:04:10Z",
      "updated_at": "2023-02-14T08:04:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased due to #27011. Note that this adds a `/*deterministic=*/true` [here in test/fuzz/coins_view.cpp](https://github.com/bitcoin/bitcoin/pull/25325/commits/78f597be2879c39d9d2b98e21ed0120d2308de20#diff-1ef3b6a1936b50f3d5ec4a1786d9e2d63d1a3e1815b103e67f20601995f355b4R119), see `git range-diff 0007d69...78f597b`",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1429293948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "unlabeled",
      "id": 8512988580,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAH7aeWk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8512988580",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-14T09:08:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1298020717,
      "node_id": "PRR_kwDOABII585NXjlt",
      "url": null,
      "actor": null,
      "commit_id": "78f597be2879c39d9d2b98e21ed0120d2308de20",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK 78f597be2879c39d9d2b98e21ed0120d2308de20 reviewed `git range-diff 2c1fe27 0007d69 78f597b` and as a sanity check locally ran debug build and unit tests and fuzz build with briefly running the `coins_view` and `coinscache_sim` fuzzers",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1298020717",
      "submitted_at": "2023-02-14T16:58:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "review_requested",
      "id": 8517721942,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAH7sh9W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8517721942",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-14T16:58:24Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 8527541445,
      "node_id": "LE_lADOABII585Lh0inzwAAAAH8R_TF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8527541445",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T15:49:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8528845750,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAH8W9u2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8528845750",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T18:04:19Z"
    },
    {
      "event": "commented",
      "id": 1431795348,
      "node_id": "IC_kwDOABII585VV3aU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1431795348",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T18:07:47Z",
      "updated_at": "2023-02-15T18:07:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "yet another rebase, only dropping the \"Add xoroshiro128++ PRNG\" commit which has already been added in #26153 (commit 5f05b27841af0bed1b6e7de5f46ffe33e5919e4d)",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1431795348",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "unlabeled",
      "id": 8529935887,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAH8bH4P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8529935887",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T20:09:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1433537441,
      "node_id": "IC_kwDOABII585Vcguh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433537441",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T18:34:04Z",
      "updated_at": "2023-02-16T18:34:04Z",
      "author_association": "MEMBER",
      "body": "re-ACK b5eba9ad001f1035dd641bc5880cb6bb53a8b07f",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1433537441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "labeled",
      "id": 8551781934,
      "node_id": "LE_lADOABII585Lh0inzwAAAAH9udYu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8551781934",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T23:35:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1435501826,
      "node_id": "IC_kwDOABII585VkAUC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435501826",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-18T06:50:26Z",
      "updated_at": "2023-02-18T07:11:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased adds `#include <test/util/random.h>`",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1435501826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8552495718,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAH9xLpm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8552495718",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-18T06:50:43Z"
    },
    {
      "event": "unlabeled",
      "id": 8552561567,
      "node_id": "UNLE_lADOABII585Lh0inzwAAAAH9xbuf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8552561567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-18T07:48:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1435700864,
      "node_id": "IC_kwDOABII585Vkw6A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435700864",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-18T15:32:21Z",
      "updated_at": "2023-02-18T15:32:21Z",
      "author_association": "MEMBER",
      "body": "re-ACK d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1435700864",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "reviewed",
      "id": 1313921906,
      "node_id": "PRR_kwDOABII585OUNty",
      "url": null,
      "actor": null,
      "commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d\r\n\r\nTested and code reviewed. Very nice improvement.\r\n\r\nLeft tiny nits in documentation, but please ignore unless updating for other reasons.",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1313921906",
      "submitted_at": "2023-02-24T17:12:53Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "reviewed",
      "id": 1324475821,
      "node_id": "PRR_kwDOABII585O8eWt",
      "url": null,
      "actor": null,
      "commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'd like to review more, but don't let me hold you up. I'm hosting [review club on this PR](https://bitcoincore.reviews/25325) on March 8 (next week); anyone here should feel free to join since you know this PR better than I do!",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1324475821",
      "submitted_at": "2023-03-04T08:12:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "commented",
      "id": 1454703666,
      "node_id": "IC_kwDOABII585WtQQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1454703666",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-04T11:13:37Z",
      "updated_at": "2023-03-04T11:13:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@LarryRuane awesome that you'll hold a PR review club about this PR! I'll try to join, but can't yet guarantee that I'll have the time.",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1454703666",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "mentioned",
      "id": 8665837860,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAIEhjEk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8665837860",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-04T11:13:37Z"
    },
    {
      "event": "subscribed",
      "id": 8665837863,
      "node_id": "SE_lADOABII585Lh0inzwAAAAIEhjEn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8665837863",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-04T11:13:37Z"
    },
    {
      "event": "reviewed",
      "id": 1329522422,
      "node_id": "PRR_kwDOABII585PPub2",
      "url": null,
      "actor": null,
      "commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Looks good.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1329522422",
      "submitted_at": "2023-03-08T15:18:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "referenced",
      "id": 8724138804,
      "node_id": "REFE_lADOABII585Lh0inzwAAAAIH_8s0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8724138804",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c16086fe2cf63d016b2a0aa44820c59ff36f57f6",
      "commit_url": "https://api.github.com/repos/martinus/map_benchmark/commits/c16086fe2cf63d016b2a0aa44820c59ff36f57f6",
      "created_at": "2023-03-11T15:00:17Z"
    },
    {
      "event": "reviewed",
      "id": 1349066025,
      "node_id": "PRR_kwDOABII585QaR0p",
      "url": null,
      "actor": null,
      "commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1349066025",
      "submitted_at": "2023-03-20T17:18:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "review_requested",
      "id": 8797456451,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIMXohD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8797456451",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-20T17:34:45Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_request_removed",
      "id": 8797457131,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIMXorr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8797457131",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-20T17:34:49Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8797457150,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIMXor-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8797457150",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-20T17:34:49Z",
      "requested_reviewer": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8797459182,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIMXpLu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8797459182",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-20T17:35:01Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1477135406,
      "node_id": "IC_kwDOABII585YC0wu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477135406",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T00:46:06Z",
      "updated_at": "2023-03-21T00:46:06Z",
      "author_association": "MEMBER",
      "body": "Kicked off a bitcoinperf run; will have some results tomorrow.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1477135406",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "review_request_removed",
      "id": 8800435408,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIMi_zQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8800435408",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T00:46:09Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1477800508,
      "node_id": "IC_kwDOABII585YFXI8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477800508",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T13:02:45Z",
      "updated_at": "2023-03-21T13:02:45Z",
      "author_association": "MEMBER",
      "body": "Cool! Seeing a **~8% speedup** over a modern region of the chain with **lower memory usage**.\r\n\r\n---\r\n\r\n![ibd local range dbcache=8000 667200 697200](https://user-images.githubusercontent.com/73197/226613375-a9d038f5-f596-4a04-af8e-a63798ab4752.png)\r\n\r\n|                 bench name                 |                                                                                                     command                                                                                                     |\r\n|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| ibd.local.range.dbcache=8000.667200.697200 | `bitcoind -dbcache=8000 -debug=coindb -debug=bench -listen=0 -connect=0 -addnode=127.0.0.1:8888 -prune=9999999 -printtoconsole=0 -assumevalid=000000000000000000176c192f42ad13ab159fdb20198b87e7ba3c001e47b876` |\r\n\r\n\r\n### #25325 vs. $mergebase (absolute)\r\n|                         bench name                         |  x  |           #25325           |        $mergebase         |\r\n|------------------------------------------------------------|----:|----------------------------|---------------------------|\r\n| ibd.local.range.dbcache=8000.667200.697200.total_secs      |   3 | 4205.0444 (± 23.6683)      | 4536.8536 (± 7.9194)      |\r\n| ibd.local.range.dbcache=8000.667200.697200.peak_rss_KiB    |   3 | 4428684.0000 (± 3557.8525) | 4806934.6667 (± 108.7791) |\r\n| ibd.local.range.dbcache=8000.667200.697200.cpu_kernel_secs |   3 | 210.8233 (± 1.0422)        | 209.8300 (± 0.9361)       |\r\n| ibd.local.range.dbcache=8000.667200.697200.cpu_user_secs   |   3 | 26000.4633 (± 15.5244)     | 26412.5367 (± 8.9365)     |\r\n\r\n\r\n### #25325 vs. $mergebase (relative)\r\n|                         bench name                         |  x  | #25325 | $mergebase |\r\n|------------------------------------------------------------|----:|-------:|-----------:|\r\n| ibd.local.range.dbcache=8000.667200.697200.total_secs      |   3 |   1.00 |      1.079 |\r\n| ibd.local.range.dbcache=8000.667200.697200.peak_rss_KiB    |   3 |   1.00 |      1.085 |\r\n| ibd.local.range.dbcache=8000.667200.697200.cpu_kernel_secs |   3 |   1.00 |      1.000 |\r\n| ibd.local.range.dbcache=8000.667200.697200.cpu_user_secs   |   3 |   1.00 |      1.016 |\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1477800508",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1477921746,
      "node_id": "IC_kwDOABII585YF0vS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477921746",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T14:18:06Z",
      "updated_at": "2023-03-21T14:18:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the benchmark @jamesob! There was no cache flush in the benchmark, that's why the memory usage was lower. When flushes would happen with e.g. lower dbcache size or longer range of blocks memory usage should be about equal, but then there should be an even larger performance benefit for this PR because it can cache more data with the same memory.",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1477921746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "mentioned",
      "id": 8806216691,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAIM5DPz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8806216691",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T14:18:06Z"
    },
    {
      "event": "subscribed",
      "id": 8806216724,
      "node_id": "SE_lADOABII585Lh0inzwAAAAIM5DQU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8806216724",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T14:18:07Z"
    },
    {
      "event": "commented",
      "id": 1477939852,
      "node_id": "IC_kwDOABII585YF5KM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477939852",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T14:28:01Z",
      "updated_at": "2023-03-21T14:28:01Z",
      "author_association": "MEMBER",
      "body": "> When flushes would happen with e.g. lower dbcache size or longer range of blocks memory usage should be about equal, but then there should be an even larger performance benefit for this PR because it can cache more data with the same memory.\r\n\r\nYup - I started another run with dbcache=1000.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1477939852",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1478663359,
      "node_id": "IC_kwDOABII585YIpy_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478663359",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T22:16:19Z",
      "updated_at": "2023-03-21T22:16:19Z",
      "author_association": "MEMBER",
      "body": "Light ACK d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d\r\n\r\nNot particularly well versed in allocators, but the logic of the allocator and its tests makes sense, and the benchmarks seem to show there is a noticeable improvement.\r\n\r\nOne thing I did notice though is that when configured with `--enable-debug`, the benchmark `PoolAllocator_StdUnorderedMapWithPoolResource` is a little bit slower than `PoolAllocator_StdUnorderedMap`. Without `--enable-debug`, it's quite a bit faster. I didn't measure the effect of this in actual IBD, but configuring with `--enable-debug` is already known to make things slower, so it shouldn't matter much.\r\n\r\nWith `--enable-debug`:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|              239.73 |        4,171,384.12 |    0.1% |        2,516.56 |         401.94 |    0.1% |      0.14 | `PoolAllocator_StdUnorderedMap`\r\n|              277.15 |        3,608,128.61 |    0.1% |        2,792.06 |         432.32 |    0.1% |      0.17 | `PoolAllocator_StdUnorderedMapWithPoolResource`\r\n\r\nWithout `--enable-debug`:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|               21.53 |       46,436,178.12 |    0.3% |          279.84 |          59.34 |    0.4% |      0.01 | `PoolAllocator_StdUnorderedMap`\r\n|               10.45 |       95,674,714.97 |    0.2% |           82.34 |          13.71 |    0.8% |      0.01 | `PoolAllocator_StdUnorderedMapWithPoolResource`",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1478663359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1478764099,
      "node_id": "IC_kwDOABII585YJCZD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478764099",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T00:34:05Z",
      "updated_at": "2023-03-22T00:34:05Z",
      "author_association": "MEMBER",
      "body": "Back with results for dbcache=1000; less noticeable speedup (5%) and increased memory usage (11%).\r\n\r\n---\r\n\r\n![ibd local range dbcache=1000 667200 697200](https://user-images.githubusercontent.com/73197/226771758-dc8f9974-8304-472e-a9fb-15c2e493d5f2.png)\r\n\r\n|                 bench name                 |                                                                                                     command                                                                                                     |\r\n|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| ibd.local.range.dbcache=1000.667200.697200 | `bitcoind -dbcache=1000 -debug=coindb -debug=bench -listen=0 -connect=0 -addnode=127.0.0.1:8888 -prune=9999999 -printtoconsole=0 -assumevalid=000000000000000000176c192f42ad13ab159fdb20198b87e7ba3c001e47b876` |\r\n\r\n\r\n### #25325 vs. $mergebase (absolute)\r\n|                         bench name                         |  x  |           #25325            |         $mergebase         |\r\n|------------------------------------------------------------|----:|-----------------------------|----------------------------|\r\n| ibd.local.range.dbcache=1000.667200.697200.total_secs      |   3 | 4721.4819 (± 11.2932)       | 4990.6752 (± 19.7466)      |\r\n| ibd.local.range.dbcache=1000.667200.697200.peak_rss_KiB    |   3 | 2906596.0000 (± 86412.3208) | 2607876.0000 (± 4288.9414) |\r\n| ibd.local.range.dbcache=1000.667200.697200.cpu_kernel_secs |   3 | 499.0333 (± 4.3527)         | 581.9333 (± 4.1179)        |\r\n| ibd.local.range.dbcache=1000.667200.697200.cpu_user_secs   |   3 | 26882.3333 (± 17.6349)      | 27490.5000 (± 12.0885)     |\r\n\r\n\r\n### #25325 vs. $mergebase (relative)\r\n|                         bench name                         |  x  | #25325 | $mergebase |\r\n|------------------------------------------------------------|----:|-------:|-----------:|\r\n| ibd.local.range.dbcache=1000.667200.697200.total_secs      |   3 |   1.00 |      1.057 |\r\n| ibd.local.range.dbcache=1000.667200.697200.peak_rss_KiB    |   3 |   1.11 |      1.000 |\r\n| ibd.local.range.dbcache=1000.667200.697200.cpu_kernel_secs |   3 |   1.00 |      1.166 |\r\n| ibd.local.range.dbcache=1000.667200.697200.cpu_user_secs   |   3 |   1.00 |      1.023 |\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1478764099",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "reviewed",
      "id": 1351433045,
      "node_id": "PRR_kwDOABII585QjTtV",
      "url": null,
      "actor": null,
      "commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "All comments are non-blocking, except I am concerned about zero-length allocations.\r\n\r\nI stepped through `pool_tests.cpp` in the debugger and all was as expected. I didn't run or review the fuzz test or the other modified unit tests, but I'll try to get to those in the next couple of days.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1351433045",
      "submitted_at": "2023-03-22T01:42:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "commented",
      "id": 1479679004,
      "node_id": "IC_kwDOABII585YMhwc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479679004",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T14:33:52Z",
      "updated_at": "2023-03-22T14:33:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1479679004",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1479975523,
      "node_id": "IC_kwDOABII585YNqJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479975523",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T17:23:55Z",
      "updated_at": "2023-03-22T17:23:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jamesob interesting that it didn't see a bigger speedup, but I guess it depends on a lot of other factors as well. How fast is your harddisk, and how much RAM does your computer have?",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1479975523",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "mentioned",
      "id": 8819480396,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAINrpdM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8819480396",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T17:23:56Z"
    },
    {
      "event": "subscribed",
      "id": 8819480426,
      "node_id": "SE_lADOABII585Lh0inzwAAAAINrpdq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8819480426",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T17:23:56Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI4NDAxYzMyODE5NzhiZWVkNjE5OGIyZjk3ODJiNmE4ZGQzNWNiZDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8401c3281978beed6198b2f9782b6a8dd35cbd7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b8401c3281978beed6198b2f9782b6a8dd35cbd7",
      "tree": {
        "sha": "fb740536de54eb5bc056b52da7430c9137b0edd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb740536de54eb5bc056b52da7430c9137b0edd2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23056436461a8b3af1a504b9638c48e8c8170652",
          "sha": "23056436461a8b3af1a504b9638c48e8c8170652",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/23056436461a8b3af1a504b9638c48e8c8170652"
        }
      ],
      "message": "Add pool based memory resource & allocator\n\nA memory resource similar to std::pmr::unsynchronized_pool_resource, but\noptimized for node-based containers.\n\nCo-Authored-By: Pieter Wuille <pieter@wuille.net>",
      "committer": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2023-03-23T18:38:38Z"
      },
      "author": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2022-06-11T07:23:51Z"
      },
      "sha": "b8401c3281978beed6198b2f9782b6a8dd35cbd7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUxOTk0M2YwNDllZDhhYTRmMzJhMWQ4NDQwYTlmYmYxNjAzNjdmMGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e19943f049ed8aa4f32a1d8440a9fbf160367f0f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e19943f049ed8aa4f32a1d8440a9fbf160367f0f",
      "tree": {
        "sha": "ad5c684a7b0188649c620754635db9a630a25c41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad5c684a7b0188649c620754635db9a630a25c41"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8401c3281978beed6198b2f9782b6a8dd35cbd7",
          "sha": "b8401c3281978beed6198b2f9782b6a8dd35cbd7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b8401c3281978beed6198b2f9782b6a8dd35cbd7"
        }
      ],
      "message": "Calculate memory usage correctly for unordered_maps that use PoolAllocator\n\nExtracts the resource from a PoolAllocator and uses it for\ncalculation of the node's memory usage.",
      "committer": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2023-03-23T18:38:38Z"
      },
      "author": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2022-06-11T07:28:13Z"
      },
      "sha": "e19943f049ed8aa4f32a1d8440a9fbf160367f0f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFhZmNhNmI2NjNiYjU0MDIyYWZmZjE5M2ZkOWQ4Mzg1NjYwNmIxODk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1afca6b663bb54022afff193fd9d83856606b189",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1afca6b663bb54022afff193fd9d83856606b189",
      "tree": {
        "sha": "f38acbcf3e224a0d6c5625d723449c62c6ffe65c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f38acbcf3e224a0d6c5625d723449c62c6ffe65c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e19943f049ed8aa4f32a1d8440a9fbf160367f0f",
          "sha": "e19943f049ed8aa4f32a1d8440a9fbf160367f0f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e19943f049ed8aa4f32a1d8440a9fbf160367f0f"
        }
      ],
      "message": "Add PoolResource fuzzer\n\nFuzzes PoolResource with random allocations/deallocations, and multiple\nasserts.\n\nCo-Authored-By: Pieter Wuille <pieter@wuille.net>",
      "committer": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2023-03-23T18:38:38Z"
      },
      "author": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2022-06-11T08:48:35Z"
      },
      "sha": "1afca6b663bb54022afff193fd9d83856606b189"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVlNGFjNWFiZjU0ZjhlNmQ2MzMwZGYwYzczMTE5YWEwY2NhNGMxMDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e4ac5abf54f8e6d6330df0c73119aa0cca4c103",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5e4ac5abf54f8e6d6330df0c73119aa0cca4c103",
      "tree": {
        "sha": "5a5310f5fdf6302a89ee35127e6cf4c9b02b1b8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a5310f5fdf6302a89ee35127e6cf4c9b02b1b8a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1afca6b663bb54022afff193fd9d83856606b189",
          "sha": "1afca6b663bb54022afff193fd9d83856606b189",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1afca6b663bb54022afff193fd9d83856606b189"
        }
      ],
      "message": "Call ReallocateCache() on each Flush()\n\nThis frees up all associated memory with the map, not only the nodes.\nThis is necessary in preparation for using the PoolAllocator for\nCCoinsMap, which does not actually free any memory on clear().",
      "committer": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2023-03-23T18:38:38Z"
      },
      "author": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2022-06-11T09:00:53Z"
      },
      "sha": "5e4ac5abf54f8e6d6330df0c73119aa0cca4c103"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlmOTQ3ZmMzZDRiNzc5ZjAxNzMzMjEzNTMyM2IzNGU4ZjIxNmY2MTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f947fc3d4b779f017332135323b34e8f216f613",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9f947fc3d4b779f017332135323b34e8f216f613",
      "tree": {
        "sha": "49244aeb19a2d6cf2f76eb75bf384bd6c6b31b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49244aeb19a2d6cf2f76eb75bf384bd6c6b31b96"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e4ac5abf54f8e6d6330df0c73119aa0cca4c103",
          "sha": "5e4ac5abf54f8e6d6330df0c73119aa0cca4c103",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5e4ac5abf54f8e6d6330df0c73119aa0cca4c103"
        }
      ],
      "message": "Use PoolAllocator for CCoinsMap\n\nIn my benchmarks, using this pool allocator for CCoinsMap gives about\n20% faster `-reindex-chainstate` with -dbcache=5000 with practically the\nsame memory usage. The change in max RSS changed was 0.3%.\n\nThe `validation_flush_tests` tests need to be updated because\nmemory allocation is now done in large pools instead of one node at a\ntime, so the limits need to be updated accordingly.",
      "committer": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2023-03-23T18:38:38Z"
      },
      "author": {
        "name": "Martin Leitner-Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2022-06-11T09:27:38Z"
      },
      "sha": "9f947fc3d4b779f017332135323b34e8f216f613"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8831530560,
      "node_id": "HRFPE_lADOABII585Lh0inzwAAAAIOZnZA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8831530560",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T19:26:08Z"
    },
    {
      "event": "commented",
      "id": 1481782854,
      "node_id": "IC_kwDOABII585YUjZG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1481782854",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T19:34:26Z",
      "updated_at": "2023-03-24T05:46:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated  d87cb99 -> 9f947fc3d4b779f017332135323b34e8f216f613 ([pr25325.1](https://github.com/martinus/bitcoin/commits/pr25325.1) -> [pr25325.2](https://github.com/martinus/bitcoin/commits/pr25325.2))\r\n\r\nThere is a single behavior change in pool.h, now `NumElemAlignBytes` adds `+ (bytes == 0)` so that allocations of 0 bytes work with the PoolAllocator.\r\n\r\nOther than that, updated tests to include allocation of 0 bytes, and fixed all the nits.\r\n\r\nI tried to to benchmark to see any diffference with the new `+ (bytes == 0)` check or with the `bytes > 0 ?` variant, and all behave exactly the same in the `PoolAllocator_StdUnorderedMapWithPoolResource` benchmark. Exactly the same number of instructions, same number of branches, and the time fluctuates only due to measurement precision:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|               40.69 |       24,575,107.54 |    0.1% |          151.20 |          129.46 |  1.168 |          23.54 |    2.1% |      1.10 | old d87cb99bb3\r\n|               40.70 |       24,568,640.94 |    0.2% |          151.20 |          129.48 |  1.168 |          23.54 |    2.0% |      1.10 | `bytes > 0 ?`\r\n|               40.47 |       24,707,366.33 |    0.7% |          151.20 |          128.74 |  1.174 |          23.54 |    2.1% |      1.10 | new  9f947fc3d4: `+ (bytes == 0)`\r\n",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1481782854",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "reviewed",
      "id": 1356988307,
      "node_id": "PRR_kwDOABII585Q4f-T",
      "url": null,
      "actor": null,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 9f947fc3d4b779f017332135323b34e8f216f613\r\n\r\nVerified the changes with `range-diff`:\r\n\r\n```diff\r\n1:  45508ec79 ! 1:  b8401c328 Add pool based memory resource & allocator\r\n    @@ src/support/allocators/pool.h (new)\r\n-     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\r\n+     * whenever it is accessed, but `m_available_memory_end` caches this for clarity and efficiency.\r\n    @@ src/support/allocators/pool.h (new)\r\n-     * into m_free_lists.\r\n+     * into m_free_lists. Round up for the special case when bytes==0.\r\n    @@ src/support/allocators/pool.h (new)\r\n-        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\r\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES + (bytes == 0);\r\n    @@ src/support/allocators/pool.h (new)\r\n-        // if there is still any available memory is left, put it into the freelist.\r\n+        // if there is still any available memory left, put it into the freelist.\r\n    @@ src/test/pool_tests.cpp (new)\r\n-    block = resource.Allocate(8, 1);\r\n+    void* b = resource.Allocate(8, 1);\r\n+    BOOST_TEST(b == block); // we got the same block of memory as before\r\n    @@ src/test/pool_tests.cpp (new)\r\n-    // can't use chunk because alignment is too big\r\n-    block = resource.Allocate(8, 16);\r\n+    // can't use resource because alignment is too big, allocate system memory\r\n+    b = resource.Allocate(8, 16);\r\n+    BOOST_TEST(b != block);\r\n+    block = b;\r\n    @@ src/test/pool_tests.cpp (new)\r\n+\r\n+    // it's possible that 0 bytes are allocated, make sure this works. In that case the call is forwarded to operator new\r\n+    // 0 bytes takes one entry from the first freelist\r\n+    void* p = resource.Allocate(0, 1);\r\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\r\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\r\n+\r\n+    resource.Deallocate(p, 0, 1);\r\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\r\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\r\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\r\n    @@ src/test/pool_tests.cpp (new)\r\n-    auto counts = PoolResourceTester::FreeListSizes(resource);\r\n    @@ src/test/pool_tests.cpp (new)\r\n-    for (uint8_t num_bytes = 1; num_bytes < num_allocs; +num_bytes) {\r\n+    for (uint8_t num_bytes = 0; num_bytes < num_allocs; +num_bytes) {\r\n    @@ src/test/pool_tests.cpp (new)\r\n-        // set each byte to i\r\n+        // set each byte to num_bytes\r\n    @@ src/test/pool_tests.cpp (new)\r\n-    uint8_t val = 1;\r\n+    uint8_t val = 0;\r\n    @@ src/test/pool_tests.cpp (new)\r\n-            std::size_t alignment = std::size_t{1} << InsecureRandRange(7);           // 1, 2, ..., 128\r\n-            std::size_t size = (InsecureRandRange(2000) / alignment + 1) * alignment; // multiple of alignment\r\n+            std::size_t alignment = std::size_t{1} << InsecureRandRange(8);          // 1, 2, ..., 128\r\n+            std::size_t size = (InsecureRandRange(200) / alignment + 1) * alignment; // multiple of alignment\r\n    @@ src/test/util/poolresourcetester.h (new)\r\n-        for (std::byte* ptr : resource.m_allocated_chunks) {\r\n+        for (const std::byte* ptr : resource.m_allocated_chunks) {\r\n    @@ src/test/util/poolresourcetester.h (new)\r\n-            assert(free_block.size <= chunk_size_remaining);                 // ensure we no overflow\r\n+            assert(free_block.size <= chunk_size_remaining);                 // ensure no overflow\r\n    @@ src/test/util/poolresourcetester.h (new)\r\n-        assert(chunk_ptr_remaining == chunks.back().ptr + chunks.back().size); // ensure we are t the end of the chunks\r\n+        // ensure we are at the end of the chunks\r\n+        assert(chunk_ptr_remaining == chunk_it->ptr + chunk_it->size);\r\n+    +chunk_it;\r\n+        assert(chunk_it == chunks.end());\r\n2:  ed2e1cbe8 = 2:  e19943f04 Calculate memory usage correctly for unordered_maps that use PoolAllocator\r\n3:  477e16dbf = 3:  1afca6b66 Add PoolResource fuzzer\r\n4:  d6b85474d = 4:  5e4ac5abf Call ReallocateCache() on each Flush()\r\n5:  d87cb99bb ! 5:  9f947fc3d Use PoolAllocator for CCoinsMap\r\n    @@ src/coins.h: struct CCoinsCacheEntry\r\n+/**\r\n+ * PoolAllocator's MAX_BLOCK_SIZE_BYTES parameter here uses sizeof the data, and adds the size\r\n+ * of 4 pointers. We do not know the exact node size used in the std::unordered_node implementation\r\n+ * because it is implementation defined. Most implementations have an overhead of 1 or 2 pointers,\r\n+ * so nodes can be connected in a linked list, and in some cases the hash value is stored as well.\r\n+ * Using an additional sizeof(void*)*4 for MAX_BLOCK_SIZE_BYTES should thus be sufficient so that\r\n+ * all implementations can allocate the nodes from the PoolAllocator.\r\n+ */\r\n\r\n```",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1356988307",
      "submitted_at": "2023-03-24T15:48:45Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "review_requested",
      "id": 8840310148,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO7G2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8840310148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T15:48:52Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8840310160,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO7G2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8840310160",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T15:48:52Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8840310208,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO7G3A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8840310208",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T15:48:52Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8840310232,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO7G3Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8840310232",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T15:48:52Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_request_removed",
      "id": 8841019827,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIO90Gz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841019827",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:03:52Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8841019984,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO90JQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841019984",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:03:53Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_request_removed",
      "id": 8841024633,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIO91R5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841024633",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:04:23Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8841024819,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO91Uz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841024819",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:04:24Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1357119390,
      "node_id": "PRR_kwDOABII585Q4_-e",
      "url": null,
      "actor": null,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Nice review work, @LarryRuane.\r\n\r\nre-ACK 9f947fc3d4b779f017332135323b34e8f216f613",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#pullrequestreview-1357119390",
      "submitted_at": "2023-03-24T17:05:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
    },
    {
      "event": "review_request_removed",
      "id": 8841031336,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIO926o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841031336",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:05:07Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 8841031499,
      "node_id": "RRE_lADOABII585Lh0inzwAAAAIO929L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841031499",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:05:08Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1483180518,
      "node_id": "IC_kwDOABII585YZ4nm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1483180518",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:40:22Z",
      "updated_at": "2023-03-24T17:40:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 9f947fc3d4b779f017332135323b34e8f216f613",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1483180518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "review_request_removed",
      "id": 8841329326,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIO-_qu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8841329326",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T17:40:28Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1486343844,
      "node_id": "IC_kwDOABII585Yl86k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1486343844",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-28T07:21:26Z",
      "updated_at": "2023-03-28T07:21:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa could you have another look after my update from d87cb99 -> 9f947fc3d4b779f017332135323b34e8f216f613?",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1486343844",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "mentioned",
      "id": 8861639518,
      "node_id": "MEE_lADOABII585Lh0inzwAAAAIQMeNe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8861639518",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-28T07:21:26Z"
    },
    {
      "event": "subscribed",
      "id": 8861639534,
      "node_id": "SE_lADOABII585Lh0inzwAAAAIQMeNu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8861639534",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-28T07:21:26Z"
    },
    {
      "event": "referenced",
      "id": 8928092322,
      "node_id": "REFE_lADOABII585Lh0inzwAAAAIUJ-Ci",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8928092322",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "319adf5b4d8d43855c130b54e8a030b2cdd4129c",
      "commit_url": "https://api.github.com/repos/martinus/map_benchmark/commits/319adf5b4d8d43855c130b54e8a030b2cdd4129c",
      "created_at": "2023-04-04T19:32:33Z"
    },
    {
      "event": "commented",
      "id": 1516886734,
      "node_id": "IC_kwDOABII585aadrO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1516886734",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T20:11:08Z",
      "updated_at": "2023-04-20T20:11:08Z",
      "author_association": "MEMBER",
      "body": "re-ACK 9f947fc3d4b779f017332135323b34e8f216f613",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1516886734",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "review_request_removed",
      "id": 9061160787,
      "node_id": "RRRE_lADOABII585Lh0inzwAAAAIcFldT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9061160787",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T20:11:14Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "merged",
      "id": 9061235384,
      "node_id": "ME_lADOABII585Lh0inzwAAAAIcF3q4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9061235384",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5aa0c82ccd6ceb4a141686fc8658f679de75a787",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aa0c82ccd6ceb4a141686fc8658f679de75a787",
      "created_at": "2023-04-20T20:20:32Z"
    },
    {
      "event": "closed",
      "id": 9061235468,
      "node_id": "CE_lADOABII585Lh0inzwAAAAIcF3sM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9061235468",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T20:20:33Z"
    },
    {
      "event": "commented",
      "id": 1516910306,
      "node_id": "IC_kwDOABII585aajbi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1516910306",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T20:32:53Z",
      "updated_at": "2023-04-20T20:32:53Z",
      "author_association": "MEMBER",
      "body": "Posthumous utACK 9f947fc3d4b779f017332135323b34e8f216f613",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1516910306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "commented",
      "id": 1517233030,
      "node_id": "IC_kwDOABII585abyOG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517233030",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T04:12:56Z",
      "updated_at": "2023-04-21T04:12:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Wohoo :tada: Thanks everyone for making this happen!",
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#issuecomment-1517233030",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325"
    },
    {
      "event": "referenced",
      "id": 9070256673,
      "node_id": "REFE_lADOABII585Lh0inzwAAAAIcoSIh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9070256673",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "634c900ebdb87b272abbe8ed3085f0a04fe47e6b",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/634c900ebdb87b272abbe8ed3085f0a04fe47e6b",
      "created_at": "2023-04-21T18:56:20Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953055591",
      "pull_request_review_id": 1082762327,
      "id": 953055591,
      "node_id": "PRRC_kwDOABII5844znln",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_XOROSHIRO128PLUSPLUS_H\n+#define BITCOIN_TEST_UTIL_XOROSHIRO128PLUSPLUS_H\n+\n+#include <cstdint>\n+#include <limits>\n+\n+/** xoroshiro128++ PRNG. Extremely fast, not appropriate for cryptographic purposes.\n+ *\n+ * Memory footprint is 128bit, period is 2^128 - 1.\n+ * This class is not thread-safe.\n+ *\n+ * Reference implementation available at https://prng.di.unimi.it/xoroshiro128plusplus.c\n+ * See https://prng.di.unimi.it/\n+ */\n+class XoRoShiRo128PlusPlus\n+{\n+    uint64_t m_s0;\n+    uint64_t m_s1;\n+\n+    [[nodiscard]] constexpr static uint64_t rotl(uint64_t x, int n)\n+    {\n+        return (x << n) | (x >> (64 - n));\n+    }\n+\n+    [[nodiscard]] constexpr static uint64_t SplitMix64(uint64_t& seedval) noexcept",
      "path": "src/test/util/xoroshiro128plusplus.h",
      "position": null,
      "original_position": 30,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for passing `seedval` by reference.",
      "created_at": "2022-08-23T19:55:02Z",
      "updated_at": "2022-08-23T19:55:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r953055591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953055591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062958",
      "pull_request_review_id": 1082773235,
      "id": 953062958,
      "node_id": "PRRC_kwDOABII5844zpYu",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto",
      "path": "src/test/util/xoroshiro128plusplus.h",
      "position": null,
      "original_position": 1,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pretty sure this was not written by Satoshi, or in 2010.",
      "created_at": "2022-08-23T20:04:37Z",
      "updated_at": "2022-08-23T20:04:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r953062958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953067528",
      "pull_request_review_id": 1082780041,
      "id": 953067528,
      "node_id": "PRRC_kwDOABII5844zqgI",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_XOROSHIRO128PLUSPLUS_H\n+#define BITCOIN_TEST_UTIL_XOROSHIRO128PLUSPLUS_H\n+\n+#include <cstdint>\n+#include <limits>\n+\n+/** xoroshiro128++ PRNG. Extremely fast, not appropriate for cryptographic purposes.\n+ *\n+ * Memory footprint is 128bit, period is 2^128 - 1.\n+ * This class is not thread-safe.\n+ *\n+ * Reference implementation available at https://prng.di.unimi.it/xoroshiro128plusplus.c\n+ * See https://prng.di.unimi.it/\n+ */\n+class XoRoShiRo128PlusPlus\n+{\n+    uint64_t m_s0;\n+    uint64_t m_s1;\n+\n+    [[nodiscard]] constexpr static uint64_t rotl(uint64_t x, int n)\n+    {\n+        return (x << n) | (x >> (64 - n));\n+    }\n+\n+    [[nodiscard]] constexpr static uint64_t SplitMix64(uint64_t& seedval) noexcept",
      "path": "src/test/util/xoroshiro128plusplus.h",
      "position": null,
      "original_position": 30,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "in_reply_to_id": 953055591,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually this it is necessary because `seedval` is modified, see the constructor in line 42 where `m_s0` and `m_s1` are initialized. I could use a pointer instead of reference or add a comment to make that more clear?",
      "created_at": "2022-08-23T20:10:49Z",
      "updated_at": "2022-08-23T20:10:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r953067528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953067528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953069117",
      "pull_request_review_id": 1082783050,
      "id": 953069117,
      "node_id": "PRRC_kwDOABII5844zq49",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_XOROSHIRO128PLUSPLUS_H\n+#define BITCOIN_TEST_UTIL_XOROSHIRO128PLUSPLUS_H\n+\n+#include <cstdint>\n+#include <limits>\n+\n+/** xoroshiro128++ PRNG. Extremely fast, not appropriate for cryptographic purposes.\n+ *\n+ * Memory footprint is 128bit, period is 2^128 - 1.\n+ * This class is not thread-safe.\n+ *\n+ * Reference implementation available at https://prng.di.unimi.it/xoroshiro128plusplus.c\n+ * See https://prng.di.unimi.it/\n+ */\n+class XoRoShiRo128PlusPlus\n+{\n+    uint64_t m_s0;\n+    uint64_t m_s1;\n+\n+    [[nodiscard]] constexpr static uint64_t rotl(uint64_t x, int n)\n+    {\n+        return (x << n) | (x >> (64 - n));\n+    }\n+\n+    [[nodiscard]] constexpr static uint64_t SplitMix64(uint64_t& seedval) noexcept",
      "path": "src/test/util/xoroshiro128plusplus.h",
      "position": null,
      "original_position": 30,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "in_reply_to_id": 953055591,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, no, I just didn't pay attention to how it was used. My mistake.",
      "created_at": "2022-08-23T20:13:00Z",
      "updated_at": "2022-08-23T20:13:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r953069117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953069117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/973734050",
      "pull_request_review_id": 1111554848,
      "id": 973734050,
      "node_id": "PRRC_kwDOABII5846CgCi",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto",
      "path": "src/test/util/xoroshiro128plusplus.h",
      "position": null,
      "original_position": 1,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "in_reply_to_id": 953062958,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's how rumors start! Maybe it was Satoshi? ;-) I'll update that.",
      "created_at": "2022-09-18T15:00:16Z",
      "updated_at": "2022-09-18T15:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r973734050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/973734050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979171391",
      "pull_request_review_id": 1119175139,
      "id": 979171391,
      "node_id": "PRRC_kwDOABII5846XPg_",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto",
      "path": "src/test/util/xoroshiro128plusplus.h",
      "position": null,
      "original_position": 1,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "afa98fe23088f6cdc9ae1f234926517d63307a91",
      "in_reply_to_id": 953062958,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-09-24T06:11:46Z",
      "updated_at": "2022-09-24T06:11:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r979171391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979171391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004102333",
      "pull_request_review_id": 1154271326,
      "id": 1004102333,
      "node_id": "PRRC_kwDOABII58472WK9",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final",
      "path": "src/support/allocators/pool.h",
      "position": 70,
      "original_position": 70,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "de694ed10bfa623596a41e35c95c13e757787b07",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "de694ed10bfa623596a41e35c95c13e757787b07: consider deleting copy ctor and copy assignment operators\r\n```diff\r\ndiff --git a/src/support/allocators/pool.h b/src/support/allocators/pool.h\r\nindex 5c04bb31e..00bd1ed90 100644\r\n--- a/src/support/allocators/pool.h\r\n+++ b/src/support/allocators/pool.h\r\n@@ -269,6 +269,9 @@ public:\r\n     {\r\n         return m_chunk_size_bytes;\r\n     }\r\n+\r\n+    PoolResource(const PoolResource&) = delete;\r\n+    PoolResource& operator=(const PoolResource&) = delete;\r\n };\r\n```",
      "created_at": "2022-10-25T07:27:36Z",
      "updated_at": "2022-10-25T08:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1004102333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004102333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004112858",
      "pull_request_review_id": 1154271326,
      "id": 1004112858,
      "node_id": "PRRC_kwDOABII58472Yva",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)",
      "path": "src/support/allocators/pool.h",
      "position": 142,
      "original_position": 142,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "de694ed10bfa623596a41e35c95c13e757787b07",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "de694ed10bfa623596a41e35c95c13e757787b07: maybe use templates instead of `void*`?\r\n```diff\r\ndiff --git a/src/support/allocators/pool.h b/src/support/allocators/pool.h\r\nindex 5c04bb31e..38c5f9d62 100644\r\n--- a/src/support/allocators/pool.h\r\n+++ b/src/support/allocators/pool.h\r\n@@ -139,7 +139,8 @@ class PoolResource final\r\n     /**\r\n      * Replaces node with placement constructed ListNode that points to the previous node\r\n      */\r\n-    void PlacementAddToList(void* p, ListNode*& node)\r\n+    template <typename T>\r\n+    void PlacementAddToList(T* p, ListNode*& node)\r\n     {\r\n         node = new (p) ListNode{node};\r\n     }\r\n@@ -232,7 +233,8 @@ public:\r\n     /**\r\n      * Returns a block to the freelists, or deletes the block when it did not come from the cunks.\r\n      */\r\n-    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\r\n+    template <typename T>\r\n+    void Deallocate(T* p, std::size_t bytes, std::size_t alignment) noexcept\r\n     {\r\n         if (IsFreeListUsable(bytes, alignment)) {\r\n             const std::size_t num_alignments = NumElemAlignBytes(bytes);\r\n```",
      "created_at": "2022-10-25T07:38:21Z",
      "updated_at": "2022-10-25T08:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1004112858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004112858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004137199",
      "pull_request_review_id": 1154271326,
      "id": 1004137199,
      "node_id": "PRRC_kwDOABII58472erv",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};",
      "path": "src/support/allocators/pool.h",
      "position": 101,
      "original_position": 101,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "509d97a7a97dfbf83bdd7d723e68159ce83ff5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "de694ed10bfa623596a41e35c95c13e757787b07: might slightly improve performance but haven't benchmarked\r\n```suggestion\r\n    std::vector<std::byte*> m_allocated_chunks{};\r\n```",
      "created_at": "2022-10-25T08:02:29Z",
      "updated_at": "2022-10-25T08:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1004137199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004137199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009306384",
      "pull_request_review_id": 1161718255,
      "id": 1009306384,
      "node_id": "PRRC_kwDOABII5848KMsQ",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)",
      "path": "src/support/allocators/pool.h",
      "position": 142,
      "original_position": 142,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "de694ed10bfa623596a41e35c95c13e757787b07",
      "in_reply_to_id": 1004112858,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's better to leave this as void*, because I don't want any overloaded operator new or operator delete called depending on the type.",
      "created_at": "2022-10-31T11:25:10Z",
      "updated_at": "2022-10-31T11:25:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1009306384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009306384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1036283541",
      "pull_request_review_id": 1199784602,
      "id": 1036283541,
      "node_id": "PRRC_kwDOABII5849xG6V",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final",
      "path": "src/support/allocators/pool.h",
      "position": 70,
      "original_position": 70,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "de694ed10bfa623596a41e35c95c13e757787b07",
      "in_reply_to_id": 1004102333,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll add these when I rebase to fix the merge conflict :+1: ",
      "created_at": "2022-11-30T17:55:51Z",
      "updated_at": "2022-11-30T17:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1036283541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1036283541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1036285674",
      "pull_request_review_id": 1199787521,
      "id": 1036285674,
      "node_id": "PRRC_kwDOABII5849xHbq",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};",
      "path": "src/support/allocators/pool.h",
      "position": 101,
      "original_position": 101,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "509d97a7a97dfbf83bdd7d723e68159ce83ff5dd",
      "in_reply_to_id": 1004137199,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought std::list is more fitting here, because I don't need random access, and only every once in a while one element is added. The list is only iterated once when bitcoind shutsdown. So it's not at all performance relevant here",
      "created_at": "2022-11-30T17:57:55Z",
      "updated_at": "2022-11-30T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1036285674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1036285674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081878044",
      "pull_request_review_id": 1262647120,
      "id": 1081878044,
      "node_id": "PRRC_kwDOABII585AfCYc",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 64,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: space before `3`",
      "created_at": "2023-01-19T21:22:38Z",
      "updated_at": "2023-01-19T22:13:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081878044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081878044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081883320",
      "pull_request_review_id": 1262647120,
      "id": 1081883320,
      "node_id": "PRRC_kwDOABII585AfDq4",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};",
      "path": "src/support/allocators/pool.h",
      "position": 107,
      "original_position": 107,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Allocators don't need to be able to handle allocations of size 0, so I think the `+ 1` could be dropped here (shifting the indices down by 1).",
      "created_at": "2023-01-19T21:27:33Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081883320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081883320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081894944",
      "pull_request_review_id": 1262647120,
      "id": 1081894944,
      "node_id": "PRRC_kwDOABII585AfGgg",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;",
      "path": "src/support/allocators/pool.h",
      "position": 193,
      "original_position": 193,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know there are rules that make move constructors/assignment operators not automatically appear when copy equivalents are specified, but I'd still prefer explicitly disabling those too.",
      "created_at": "2023-01-19T21:38:52Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081894944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081894944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081903348",
      "pull_request_review_id": 1262647120,
      "id": 1081903348,
      "node_id": "PRRC_kwDOABII585AfIj0",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 215,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems this comment would be more appropriate if put a few lines higher. The placement here makes it look like it's related to the freelist empty test.",
      "created_at": "2023-01-19T21:47:10Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081903348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081903348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081909031",
      "pull_request_review_id": 1262647120,
      "id": 1081909031,
      "node_id": "PRRC_kwDOABII585AfJ8n",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.",
      "path": "src/support/allocators/pool.h",
      "position": 223,
      "original_position": 223,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment seems like it should be moved up as well.",
      "created_at": "2023-01-19T21:52:49Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081909031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081909031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 223,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081909200",
      "pull_request_review_id": 1262647120,
      "id": 1081909200,
      "node_id": "PRRC_kwDOABII585AfJ_Q",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),",
      "path": "src/support/allocators/pool.h",
      "position": 230,
      "original_position": 230,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "And this one too.",
      "created_at": "2023-01-19T21:53:03Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081909200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081909200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081909913",
      "pull_request_review_id": 1262647120,
      "id": 1081909913,
      "node_id": "PRRC_kwDOABII585AfKKZ",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => forward allocation to the upstream resource.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 234,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think there is an upstream resource; it's just handled by the default allocator.",
      "created_at": "2023-01-19T21:53:45Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081909913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081909913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081910140",
      "pull_request_review_id": 1262647120,
      "id": 1081910140,
      "node_id": "PRRC_kwDOABII585AfKN8",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => forward allocation to the upstream resource.\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the cunks.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 239,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: `cunks`.",
      "created_at": "2023-01-19T21:54:01Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081910140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081910140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081910577",
      "pull_request_review_id": 1262647120,
      "id": 1081910577,
      "node_id": "PRRC_kwDOABII585AfKUx",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => forward allocation to the upstream resource.\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the cunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to the upstream resource.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 249,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Likewise, no upstream resource here?",
      "created_at": "2023-01-19T21:54:37Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081910577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081910577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081913776",
      "pull_request_review_id": 1262647120,
      "id": 1081913776,
      "node_id": "PRRC_kwDOABII585AfLGw",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }\n+        }\n+        // also add whatever has not yet been used for blocks\n+        auto num_available_bytes = resource.m_available_memory_end - resource.m_available_memory_it;\n+        if (num_available_bytes > 0) {\n+            free_blocks.emplace_back(resource.m_available_memory_it, num_available_bytes);\n+        }\n+\n+        // collect all chunks\n+        std::vector<PtrAndBytes> chunks;\n+        for (std::byte* ptr : resource.m_allocated_chunks) {\n+            chunks.emplace_back(ptr, resource.ChunkSizeBytes());\n+        }\n+\n+        // now we have all the data from all freelists on the one hand side, and all chunks on the other hand side.\n+        // To check if all of them match, sort by address and iterate.\n+        std::sort(free_blocks.begin(), free_blocks.end());\n+        std::sort(chunks.begin(), chunks.end());\n+\n+        auto chunk_it = chunks.begin();\n+        auto chunk_ptr_remaining = chunk_it->ptr;\n+        auto chunk_size_remaining = chunk_it->size;\n+        for (const auto& free_block : free_blocks) {\n+            if (chunk_size_remaining == 0) {\n+                assert(chunk_it != chunks.end());\n+                ++chunk_it;\n+                assert(chunk_it != chunks.end());\n+                chunk_ptr_remaining = chunk_it->ptr;\n+                chunk_size_remaining = chunk_it->size;\n+            }\n+            // std::cout << \"free_block=(\" << (void*)free_block.ptr << \", \" << free_block.size << \"), chunk=(\" << (void*)chunk_ptr_remaining << \", \" << chunk_size_remaining << \")\" << std::endl;",
      "path": "src/test/util/poolresourcetester.h",
      "position": null,
      "original_position": 115,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems like a debugging leftover.",
      "created_at": "2023-01-19T21:58:43Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081913776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081913776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081922160",
      "pull_request_review_id": 1262647120,
      "id": 1081922160,
      "node_id": "PRRC_kwDOABII585AfNJw",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};",
      "path": "src/support/allocators/pool.h",
      "position": 101,
      "original_position": 101,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this use `std::forward_list`?",
      "created_at": "2023-01-19T22:09:09Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081922160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081922160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081923544",
      "pull_request_review_id": 1262647120,
      "id": 1081923544,
      "node_id": "PRRC_kwDOABII585AfNfY",
      "diff_hunk": "@@ -166,6 +167,23 @@ static inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n+template <class Key, class T, class Hash, class Pred, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+static inline size_t DynamicUsage(const std::unordered_map<Key,\n+                                                           T,\n+                                                           Hash,\n+                                                           Pred,\n+                                                           PoolAllocator<std::pair<const Key, T>,\n+                                                                         MAX_BLOCK_SIZE_BYTES,\n+                                                                         ALIGN_BYTES>>& m)\n+{\n+    auto* pool_resource = m.get_allocator().resource();\n+\n+    size_t estimated_list_node_size = MallocUsage(sizeof(void*) * 3);",
      "path": "src/memusage.h",
      "position": 25,
      "original_position": 23,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "ecc73d72c72287b8e630266dc5bd08786dc85780",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A comment to explain where this estimation formula comes from would be useful (or encapsulate the `sizeof(void*) * 3` constant as a static member of the resource?).",
      "created_at": "2023-01-19T22:10:36Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081923544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081923544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 183,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081925749",
      "pull_request_review_id": 1262647120,
      "id": 1081925749,
      "node_id": "PRRC_kwDOABII585AfOB1",
      "diff_hunk": "@@ -217,7 +226,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * declared as \"const\".\n      */\n     mutable uint256 hashBlock;\n-    mutable CCoinsMap cacheCoins;\n+    mutable CCoinsMapMemoryResource cacheCoinsMemoryResource{};",
      "path": "src/coins.h",
      "position": null,
      "original_position": 30,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d7dd33e8db4db430925f524d6224cad1a18ebe7b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: use variable names following the style guide when introducing new ones (e.g. `m_cache_coins_memory_resource`).",
      "created_at": "2023-01-19T22:12:55Z",
      "updated_at": "2023-01-19T22:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1081925749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081925749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082378917",
      "pull_request_review_id": 1263376994,
      "id": 1082378917,
      "node_id": "PRRC_kwDOABII585Ag8ql",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};",
      "path": "src/support/allocators/pool.h",
      "position": 107,
      "original_position": 107,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081883320,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not 100% sure that is the case\r\n\r\nIn https://eel.is/c++draft/allocator.requirements#general-39 it states that \"the return value is unspecified\", so it it seems to me that it can be any value, but it doesn't say that the behavior is unspecified. So it could return any pointer or even `nullptr`\r\n\r\nIn http://eel.is/c++draft/basic.stc.dynamic.allocation#2 it says \"The effect of indirecting through a pointer returned from a request for zero size is undefined\", so one might return any value, but it must not be dereferenced (which seems logic, with 0 elements there's nothing to dereference). The footnote here says \"C++ differs from C in requiring a zero request to return a non-null pointer\", so this too seems like a pointer should be returned\r\n\r\nSo I think `allocate(0)` is not forbidden",
      "created_at": "2023-01-20T11:15:37Z",
      "updated_at": "2023-01-20T11:15:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082378917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082378917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082384437",
      "pull_request_review_id": 1263391388,
      "id": 1082384437,
      "node_id": "PRRC_kwDOABII585Ag-A1",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 215,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081903348,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll remove the comment, it doesn't make much sense",
      "created_at": "2023-01-20T11:22:43Z",
      "updated_at": "2023-01-20T11:22:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082384437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082384437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082385811",
      "pull_request_review_id": 1263395000,
      "id": 1082385811,
      "node_id": "PRRC_kwDOABII585Ag-WT",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.",
      "path": "src/support/allocators/pool.h",
      "position": 223,
      "original_position": 223,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081909031,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The location seems ok to me, when that line is reached we know the freelist is empty so we need to get memory from the chunk",
      "created_at": "2023-01-20T11:24:27Z",
      "updated_at": "2023-01-20T11:24:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082385811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082385811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 223,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082387056",
      "pull_request_review_id": 1263398108,
      "id": 1082387056,
      "node_id": "PRRC_kwDOABII585Ag-pw",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),",
      "path": "src/support/allocators/pool.h",
      "position": 230,
      "original_position": 230,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081909200,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that line fits too, this comments on  the `m_available_memory_it + round_bytes`",
      "created_at": "2023-01-20T11:25:56Z",
      "updated_at": "2023-01-20T11:25:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082387056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082387056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082577659",
      "pull_request_review_id": 1263645793,
      "id": 1082577659,
      "node_id": "PRRC_kwDOABII585AhtL7",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};",
      "path": "src/support/allocators/pool.h",
      "position": 101,
      "original_position": 101,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081922160,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could, but itt would be less convenient, because forward_list doesn't even have a `size()` which I use in `NumAllocatedChunks()`",
      "created_at": "2023-01-20T14:03:44Z",
      "updated_at": "2023-01-20T14:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082577659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082577659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082640705",
      "pull_request_review_id": 1263736203,
      "id": 1082640705,
      "node_id": "PRRC_kwDOABII585Ah8lB",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};",
      "path": "src/support/allocators/pool.h",
      "position": 107,
      "original_position": 107,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081883320,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fair enough.",
      "created_at": "2023-01-20T14:45:49Z",
      "updated_at": "2023-01-20T14:45:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082640705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082640705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082683009",
      "pull_request_review_id": 1263783313,
      "id": 1082683009,
      "node_id": "PRRC_kwDOABII585AiG6B",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};",
      "path": "src/support/allocators/pool.h",
      "position": 101,
      "original_position": 101,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081922160,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see; it'd reduce memory usage very slightly, but if it comes with extra complexity it's probably not worth it.",
      "created_at": "2023-01-20T15:12:56Z",
      "updated_at": "2023-01-20T15:12:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082683009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082683009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082685605",
      "pull_request_review_id": 1263787310,
      "id": 1082685605,
      "node_id": "PRRC_kwDOABII585AiHil",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.",
      "path": "src/support/allocators/pool.h",
      "position": 223,
      "original_position": 223,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081909031,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, it's just a tiny nit of course. Given the somewhat out of place comment above I wondered if perhaps a few more comments somehow got misplaced.",
      "created_at": "2023-01-20T15:15:15Z",
      "updated_at": "2023-01-20T15:15:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082685605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082685605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 223,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082685801",
      "pull_request_review_id": 1263787539,
      "id": 1082685801,
      "node_id": "PRRC_kwDOABII585AiHlp",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),",
      "path": "src/support/allocators/pool.h",
      "position": 230,
      "original_position": 230,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081909200,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok.",
      "created_at": "2023-01-20T15:15:22Z",
      "updated_at": "2023-01-20T15:15:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1082685801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082685801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083220507",
      "pull_request_review_id": 1264557141,
      "id": 1083220507,
      "node_id": "PRRC_kwDOABII585AkKIb",
      "diff_hunk": "@@ -112,6 +112,7 @@ BITCOIN_TESTS =\\\n   test/net_peer_eviction_tests.cpp \\\n   test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n+  test/pool_tests.cpp \\",
      "path": "src/Makefile.test.include",
      "position": null,
      "original_position": 4,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Noticed while running `make check` and looking for `pool_tests` in the output: the following minor change in the first commit  2bbe0f8eeae274fc30d924c6762cbb7a392f3b32 will run the tests in the expected order.\r\n\r\n<details><summary>suggestion</summary><p>\r\n\r\n```diff\r\n   test/net_tests.cpp \\\r\n   test/netbase_tests.cpp \\\r\n-  test/pool_tests.cpp \\\r\n   test/orphanage_tests.cpp \\\r\n   test/pmt_tests.cpp \\\r\n   test/policy_fee_tests.cpp \\\r\n   test/policyestimator_tests.cpp \\\r\n+  test/pool_tests.cpp \\\r\n   test/pow_tests.cpp \\\r\n```\r\n\r\ncurrently\r\n\r\n```\r\nRunning tests: net_peer_eviction_tests from test/net_peer_eviction_tests.cpp\r\nRunning tests: net_tests from test/net_tests.cpp\r\nRunning tests: netbase_tests from test/netbase_tests.cpp\r\nRunning tests: pool_tests from test/pool_tests.cpp\r\nRunning tests: orphanage_tests from test/orphanage_tests.cpp\r\nRunning tests: pmt_tests from test/pmt_tests.cpp\r\nRunning tests: policy_fee_tests from test/policy_fee_tests.cpp\r\n```\r\n\r\nafter\r\n\r\n```\r\nRunning tests: pmt_tests from test/pmt_tests.cpp\r\nRunning tests: policy_fee_tests from test/policy_fee_tests.cpp\r\nRunning tests: policyestimator_tests from test/policyestimator_tests.cpp\r\nRunning tests: pool_tests from test/pool_tests.cpp\r\nRunning tests: pow_tests from test/pow_tests.cpp\r\nRunning tests: prevector_tests from test/prevector_tests.cpp\r\nRunning tests: raii_event_tests from test/raii_event_tests.cpp\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-01-21T01:33:47Z",
      "updated_at": "2023-01-21T01:43:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083220507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083220507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083249932",
      "pull_request_review_id": 1264592811,
      "id": 1083249932,
      "node_id": "PRRC_kwDOABII585AkRUM",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 64,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081878044,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in rebase to 80722d8",
      "created_at": "2023-01-21T06:09:41Z",
      "updated_at": "2023-01-21T06:09:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083249932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083249932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083249938",
      "pull_request_review_id": 1264592818,
      "id": 1083249938,
      "node_id": "PRRC_kwDOABII585AkRUS",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 215,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081903348,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in rebase to 80722d8",
      "created_at": "2023-01-21T06:09:49Z",
      "updated_at": "2023-01-21T06:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083249938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083249938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083249976",
      "pull_request_review_id": 1264592846,
      "id": 1083249976,
      "node_id": "PRRC_kwDOABII585AkRU4",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => forward allocation to the upstream resource.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 234,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081909913,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in rebase to 80722d8",
      "created_at": "2023-01-21T06:10:05Z",
      "updated_at": "2023-01-21T06:10:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083249976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083249976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250008",
      "pull_request_review_id": 1264592853,
      "id": 1083250008,
      "node_id": "PRRC_kwDOABII585AkRVY",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => forward allocation to the upstream resource.\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the cunks.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 239,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081910140,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in rebase to 80722d8",
      "created_at": "2023-01-21T06:10:12Z",
      "updated_at": "2023-01-21T06:10:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083250008",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250013",
      "pull_request_review_id": 1264592861,
      "id": 1083250013,
      "node_id": "PRRC_kwDOABII585AkRVd",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+\n+            // If alignment is lower than BLOCK_ALIGNMENT_BYTES, we need to allocate a bit more.\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => forward allocation to the upstream resource.\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the cunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to the upstream resource.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 249,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081910577,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in rebase to 80722d8",
      "created_at": "2023-01-21T06:10:18Z",
      "updated_at": "2023-01-21T06:10:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083250013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250035",
      "pull_request_review_id": 1264592876,
      "id": 1083250035,
      "node_id": "PRRC_kwDOABII585AkRVz",
      "diff_hunk": "@@ -217,7 +226,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * declared as \"const\".\n      */\n     mutable uint256 hashBlock;\n-    mutable CCoinsMap cacheCoins;\n+    mutable CCoinsMapMemoryResource cacheCoinsMemoryResource{};",
      "path": "src/coins.h",
      "position": null,
      "original_position": 30,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d7dd33e8db4db430925f524d6224cad1a18ebe7b",
      "in_reply_to_id": 1081925749,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in rebase to 80722d8",
      "created_at": "2023-01-21T06:10:29Z",
      "updated_at": "2023-01-21T06:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083250035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250755",
      "pull_request_review_id": 1264593480,
      "id": 1083250755,
      "node_id": "PRRC_kwDOABII585AkRhD",
      "diff_hunk": "@@ -112,6 +112,7 @@ BITCOIN_TESTS =\\\n   test/net_peer_eviction_tests.cpp \\\n   test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n+  test/pool_tests.cpp \\",
      "path": "src/Makefile.test.include",
      "position": null,
      "original_position": 4,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1083220507,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting that the order here has any effect on the order of tests, I would have expected that the test suite orders alphabetically. I'll add this to my next update",
      "created_at": "2023-01-21T06:18:17Z",
      "updated_at": "2023-01-21T06:18:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083250755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250811",
      "pull_request_review_id": 1264593524,
      "id": 1083250811,
      "node_id": "PRRC_kwDOABII585AkRh7",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }\n+        }\n+        // also add whatever has not yet been used for blocks\n+        auto num_available_bytes = resource.m_available_memory_end - resource.m_available_memory_it;\n+        if (num_available_bytes > 0) {\n+            free_blocks.emplace_back(resource.m_available_memory_it, num_available_bytes);\n+        }\n+\n+        // collect all chunks\n+        std::vector<PtrAndBytes> chunks;\n+        for (std::byte* ptr : resource.m_allocated_chunks) {\n+            chunks.emplace_back(ptr, resource.ChunkSizeBytes());\n+        }\n+\n+        // now we have all the data from all freelists on the one hand side, and all chunks on the other hand side.\n+        // To check if all of them match, sort by address and iterate.\n+        std::sort(free_blocks.begin(), free_blocks.end());\n+        std::sort(chunks.begin(), chunks.end());\n+\n+        auto chunk_it = chunks.begin();\n+        auto chunk_ptr_remaining = chunk_it->ptr;\n+        auto chunk_size_remaining = chunk_it->size;\n+        for (const auto& free_block : free_blocks) {\n+            if (chunk_size_remaining == 0) {\n+                assert(chunk_it != chunks.end());\n+                ++chunk_it;\n+                assert(chunk_it != chunks.end());\n+                chunk_ptr_remaining = chunk_it->ptr;\n+                chunk_size_remaining = chunk_it->size;\n+            }\n+            // std::cout << \"free_block=(\" << (void*)free_block.ptr << \", \" << free_block.size << \"), chunk=(\" << (void*)chunk_ptr_remaining << \", \" << chunk_size_remaining << \")\" << std::endl;",
      "path": "src/test/util/poolresourcetester.h",
      "position": null,
      "original_position": 115,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "4ee892b57cdae1272f329b2ee9e765cbf453db9b",
      "in_reply_to_id": 1081913776,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed in rebase to 80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "created_at": "2023-01-21T06:18:49Z",
      "updated_at": "2023-01-21T06:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1083250811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083250811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084564591",
      "pull_request_review_id": 1266351016,
      "id": 1084564591,
      "node_id": "PRRC_kwDOABII585ApSRv",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 225,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "2bbe0f8eeae274fc30d924c6762cbb7a392f3b32",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this is technically speaking UB: it may construct an out-of-bounds pointer; even without dereferencing, doing so is UB (unless it's the exactly-one-past-the-end pointer). It's of course fine in practice, but I think the proper way to write it is `round_bytes > m_available_memory_end - m_available_memory_it`.\r\n\r\nFrom https://en.cppreference.com/w/cpp/language/operator_arithmetic:\r\n\r\n> If the pointer `P` points to the ith element of an array, then the expressions `P + n`, `n + P`, and `P - n` are pointers of the same type that point to the i+nth, i+nth, and i-nth element of the same array, respectively. The result of pointer addition may also be a one-past-the-end pointer (that is, pointer `P` such that the expression `P - 1` points to the last element of the array). Any other situations (that is, attempts to generate a pointer that isn't pointing at an element of the same array or one past the end) invoke undefined behavior. \r\n\r\n",
      "created_at": "2023-01-23T21:16:40Z",
      "updated_at": "2023-01-23T22:16:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1084564591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084564591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085963632",
      "pull_request_review_id": 1268371465,
      "id": 1085963632,
      "node_id": "PRRC_kwDOABII585Aun1w",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 261,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2bbe0f8eeae274f Is the public helper member `PoolResource::IsEqual()` intended to be used (it's currently not)?",
      "created_at": "2023-01-24T21:37:32Z",
      "updated_at": "2023-01-24T22:08:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1085963632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085963632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085967553",
      "pull_request_review_id": 1268371465,
      "id": 1085967553,
      "node_id": "PRRC_kwDOABII585AuozB",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 117,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2bbe0f8eeae274 it looks like `CHUNK_SIZE_BYTES` should be `m_chunk_size_bytes` or `ChunkSizeBytes()`\r\n```suggestion\r\n     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() +  m_chunk_size_bytes`\r\n```\r\n",
      "created_at": "2023-01-24T21:41:52Z",
      "updated_at": "2023-01-24T22:10:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1085967553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085967553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085970688",
      "pull_request_review_id": 1268371465,
      "id": 1085970688,
      "node_id": "PRRC_kwDOABII585AupkA",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 105,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2bbe0f8eeae274f `BLOCK_ALIGNMENT_BYTES` is undefined (maybe `n * block alignment bytes`?)",
      "created_at": "2023-01-24T21:44:45Z",
      "updated_at": "2023-01-25T21:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1085970688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085970688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086981056",
      "pull_request_review_id": 1269855171,
      "id": 1086981056,
      "node_id": "PRRC_kwDOABII585AygPA",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }\n+\n+    /**\n+     * Number of allocated chunks\n+     */\n+    [[nodiscard]] std::size_t NumAllocatedChunks() const\n+    {\n+        return m_allocated_chunks.size();\n+    }\n+\n+    /**\n+     * Size in bytes to allocate per chunk, currently hardcoded to a fixed size.\n+     */\n+    [[nodiscard]] size_t ChunkSizeBytes() const\n+    {\n+        return m_chunk_size_bytes;\n+    }\n+};\n+\n+\n+/**\n+ * Forwards all allocations/deallocations to the PoolResource.\n+ */\n+template <class T, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolAllocator\n+{\n+    PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>* m_resource;\n+\n+    template <typename U, std::size_t M, std::size_t A>\n+    friend class PoolAllocator;\n+\n+public:\n+    using value_type = T;\n+    using ResourceType = PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+\n+    /**\n+     * Not explicit so we can easily construct it with the correct resource\n+     */\n+    PoolAllocator(ResourceType* resource) noexcept\n+        : m_resource(resource)\n+    {\n+    }\n+\n+    PoolAllocator(const PoolAllocator& other) noexcept = default;\n+    PoolAllocator& operator=(const PoolAllocator& other) noexcept = default;",
      "path": "src/support/allocators/pool.h",
      "position": 296,
      "original_position": 305,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/2bbe0f8eeae274fc30d924c6762cbb7a392f3b32 Question, are these user-defined copy-constructor and copy-assignment operators actually needed, and if yes, should the move operators be specified as well? \r\n\r\n<details><summary>Rationale</summary><p>\r\n\r\nPer https://en.cppreference.com/w/cpp/language/rule_of_three#rule-of-five, \"Because the presence of a user-defined destructor, copy-constructor, or copy-assignment operator prevents implicit definition of the [move constructor](https://en.cppreference.com/w/cpp/language/move_constructor) and the [move assignment operator](https://en.cppreference.com/w/cpp/language/move_operator), any class for which move semantics are desirable, has to declare all five special member functions. Unlike Rule of Three, failing to provide move constructor and move assignment is usually not an error, but a missed optimization opportunity.\"\r\n\r\n</p></details>\r\n",
      "created_at": "2023-01-25T17:57:15Z",
      "updated_at": "2023-01-25T21:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1086981056",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086981056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 296,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086988389",
      "pull_request_review_id": 1269855171,
      "id": 1086988389,
      "node_id": "PRRC_kwDOABII585AyiBl",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }\n+\n+    /**\n+     * Number of allocated chunks\n+     */\n+    [[nodiscard]] std::size_t NumAllocatedChunks() const\n+    {\n+        return m_allocated_chunks.size();\n+    }\n+\n+    /**\n+     * Size in bytes to allocate per chunk, currently hardcoded to a fixed size.\n+     */\n+    [[nodiscard]] size_t ChunkSizeBytes() const\n+    {\n+        return m_chunk_size_bytes;\n+    }\n+};\n+\n+\n+/**\n+ * Forwards all allocations/deallocations to the PoolResource.\n+ */\n+template <class T, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolAllocator\n+{\n+    PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>* m_resource;\n+\n+    template <typename U, std::size_t M, std::size_t A>\n+    friend class PoolAllocator;\n+\n+public:\n+    using value_type = T;\n+    using ResourceType = PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+\n+    /**\n+     * Not explicit so we can easily construct it with the correct resource\n+     */\n+    PoolAllocator(ResourceType* resource) noexcept\n+        : m_resource(resource)\n+    {\n+    }\n+\n+    PoolAllocator(const PoolAllocator& other) noexcept = default;\n+    PoolAllocator& operator=(const PoolAllocator& other) noexcept = default;\n+\n+    template <class U>\n+    PoolAllocator(const PoolAllocator<U, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& other) noexcept\n+        : m_resource(other.resource())\n+    {\n+    }\n+\n+    /**\n+     * The rebind struct here is mandatory because we use non type template arguments for\n+     * PoolAllocator. See https://en.cppreference.com/w/cpp/named_req/Allocator#cite_note-2\n+     */\n+    template <typename U>\n+    struct rebind {\n+        using other = PoolAllocator<U, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+    };\n+\n+    /**\n+     * Forwards each call to the resource.\n+     */\n+    T* allocate(size_t n)\n+    {\n+        return static_cast<T*>(m_resource->Allocate(n * sizeof(T), alignof(T)));\n+    }\n+\n+    /**\n+     * Forwards each call to the resource.\n+     */\n+    void deallocate(T* p, size_t n) noexcept\n+    {\n+        m_resource->Deallocate(p, n * sizeof(T), alignof(T));\n+    }\n+\n+    ResourceType* resource() const noexcept\n+    {\n+        return m_resource;\n+    }\n+};\n+\n+template <class T1, class T2, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+bool operator==(const PoolAllocator<T1, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& a,\n+                const PoolAllocator<T2, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& b) noexcept\n+{\n+    return a.resource() == b.resource();\n+}\n+\n+template <class T1, class T2, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+bool operator!=(const PoolAllocator<T1, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& a,\n+                const PoolAllocator<T2, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& b) noexcept\n+{",
      "path": "src/support/allocators/pool.h",
      "position": 345,
      "original_position": 354,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/2bbe0f8eeae274fc30d924c6762cbb7a392f3b32 Noting that these two `==` and `!=` template methods don't appear to be otherwise used in this PR.",
      "created_at": "2023-01-25T18:02:41Z",
      "updated_at": "2023-01-25T21:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1086988389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086988389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 345,
      "original_line": 345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087172548",
      "pull_request_review_id": 1269855171,
      "id": 1087172548,
      "node_id": "PRRC_kwDOABII585AzO_E",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {\n+        uint8_t* bytes = new (resource.Allocate(num_bytes, 1)) uint8_t[num_bytes];\n+        BOOST_TEST(bytes != nullptr);\n+        data.emplace_back(bytes, num_bytes);\n+\n+        // set each byte to i\n+        std::fill(bytes, bytes + num_bytes, num_bytes);\n+    }\n+\n+    // now that we got all allocated, test if all still have the correct values, and give everything back to the allocator\n+    uint8_t val = 1;\n+    for (auto const& span : data) {\n+        for (auto x : span) {\n+            BOOST_TEST(val == x);\n+        }\n+        std::destroy(span.data(), span.data() + span.size());\n+        resource.Deallocate(span.data(), span.size(), 1);\n+        ++val;\n+    }\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+}\n+\n+BOOST_AUTO_TEST_CASE(random_allocations)\n+{\n+    struct PtrSizeAlignment {\n+        void* ptr;\n+        size_t bytes;\n+        size_t alignment;\n+    };\n+\n+    // makes a bunch of random allocations and gives all of them back in random order.\n+    auto resource = PoolResource<128, 8>(65536);\n+    std::vector<PtrSizeAlignment> ptr_size_alignment{};\n+    for (size_t i = 0; i < 1000; ++i) {\n+        // make it a bit more likely to allocate than deallocate\n+        if (ptr_size_alignment.empty() || 0 != InsecureRandRange(4)) {\n+            // allocate a random item\n+            std::size_t alignment = std::size_t{1} << InsecureRandRange(7);           // 1, 2, ..., 128\n+            std::size_t size = (InsecureRandRange(2000) / alignment + 1) * alignment; // multiple of alignment\n+            void* ptr = resource.Allocate(size, alignment);\n+            BOOST_TEST(ptr != nullptr);\n+            BOOST_TEST((reinterpret_cast<uintptr_t>(ptr) & (alignment - 1)) == 0);\n+            ptr_size_alignment.push_back({ptr, size, alignment});\n+        } else {\n+            // deallocate a random item\n+            auto& x = ptr_size_alignment[InsecureRandRange(ptr_size_alignment.size())];\n+            resource.Deallocate(x.ptr, x.bytes, x.alignment);\n+            x = ptr_size_alignment.back();\n+            ptr_size_alignment.pop_back();\n+        }\n+    }\n+\n+    // deallocate all the rest\n+    for (auto const& x : ptr_size_alignment) {\n+        resource.Deallocate(x.ptr, x.bytes, x.alignment);\n+    }\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+}\n+\n+BOOST_AUTO_TEST_CASE(memusage_test)\n+{\n+    auto std_map = std::unordered_map<int, int>{};\n+\n+    using Map = std::unordered_map<int,\n+                                   int,\n+                                   std::hash<int>,\n+                                   std::equal_to<int>,\n+                                   PoolAllocator<std::pair<const int, int>,\n+                                                 sizeof(std::pair<const int, int>) + sizeof(void*) * 4,\n+                                                 alignof(void*)>>;\n+    auto resource = Map::allocator_type::ResourceType(1024);\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    {\n+        auto resource_map = Map{0, std::hash<int>{}, std::equal_to<int>{}, &resource};\n+\n+        // can't have the same resource usage\n+        BOOST_TEST(memusage::DynamicUsage(std_map) != memusage::DynamicUsage(resource_map));\n+\n+        for (size_t i = 0; i < 10000; ++i) {\n+            std_map[i];\n+            resource_map[i];\n+        }\n+\n+        // Eventually the resource_map should have a much lower memory usage because it has less malloc overhead\n+        BOOST_TEST(memusage::DynamicUsage(resource_map) <= memusage::DynamicUsage(std_map) * 90 / 100);",
      "path": "src/test/pool_tests.cpp",
      "position": 184,
      "original_position": 170,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice. (In practice on my particular system, `86 / 100` is the lowest value that passes.)",
      "created_at": "2023-01-25T21:07:15Z",
      "updated_at": "2023-01-25T21:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1087172548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087172548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089264098",
      "pull_request_review_id": 1273173146,
      "id": 1089264098,
      "node_id": "PRRC_kwDOABII585A7Nni",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 225,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "2bbe0f8eeae274fc30d924c6762cbb7a392f3b32",
      "in_reply_to_id": 1084564591,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nice find, I'll change the `if`",
      "created_at": "2023-01-27T18:02:27Z",
      "updated_at": "2023-01-27T18:02:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089264098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089264098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089267866",
      "pull_request_review_id": 1273179379,
      "id": 1089267866,
      "node_id": "PRRC_kwDOABII585A7Oia",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 261,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1085963632,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, this is unused; I originally used this in the `operator==`. I'll remove it",
      "created_at": "2023-01-27T18:06:59Z",
      "updated_at": "2023-01-27T18:07:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089267866",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089267866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089285815",
      "pull_request_review_id": 1273216602,
      "id": 1089285815,
      "node_id": "PRRC_kwDOABII585A7S63",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 117,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1085967553,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "right, also the .get() is no more",
      "created_at": "2023-01-27T18:26:03Z",
      "updated_at": "2023-01-27T18:26:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089285815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089285815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089290030",
      "pull_request_review_id": 1273228793,
      "id": 1089290030,
      "node_id": "PRRC_kwDOABII585A7T8u",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 105,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1085970688,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should be `n*ELEM_ALIGN_BYTES`",
      "created_at": "2023-01-27T18:31:02Z",
      "updated_at": "2023-01-27T18:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089290030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089290030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089291634",
      "pull_request_review_id": 1273232771,
      "id": 1089291634,
      "node_id": "PRRC_kwDOABII585A7UVy",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {\n+        uint8_t* bytes = new (resource.Allocate(num_bytes, 1)) uint8_t[num_bytes];\n+        BOOST_TEST(bytes != nullptr);\n+        data.emplace_back(bytes, num_bytes);\n+\n+        // set each byte to i\n+        std::fill(bytes, bytes + num_bytes, num_bytes);\n+    }\n+\n+    // now that we got all allocated, test if all still have the correct values, and give everything back to the allocator\n+    uint8_t val = 1;\n+    for (auto const& span : data) {\n+        for (auto x : span) {\n+            BOOST_TEST(val == x);\n+        }\n+        std::destroy(span.data(), span.data() + span.size());\n+        resource.Deallocate(span.data(), span.size(), 1);\n+        ++val;\n+    }\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+}\n+\n+BOOST_AUTO_TEST_CASE(random_allocations)\n+{\n+    struct PtrSizeAlignment {\n+        void* ptr;\n+        size_t bytes;\n+        size_t alignment;\n+    };\n+\n+    // makes a bunch of random allocations and gives all of them back in random order.\n+    auto resource = PoolResource<128, 8>(65536);\n+    std::vector<PtrSizeAlignment> ptr_size_alignment{};\n+    for (size_t i = 0; i < 1000; ++i) {\n+        // make it a bit more likely to allocate than deallocate\n+        if (ptr_size_alignment.empty() || 0 != InsecureRandRange(4)) {\n+            // allocate a random item\n+            std::size_t alignment = std::size_t{1} << InsecureRandRange(7);           // 1, 2, ..., 128\n+            std::size_t size = (InsecureRandRange(2000) / alignment + 1) * alignment; // multiple of alignment\n+            void* ptr = resource.Allocate(size, alignment);\n+            BOOST_TEST(ptr != nullptr);\n+            BOOST_TEST((reinterpret_cast<uintptr_t>(ptr) & (alignment - 1)) == 0);\n+            ptr_size_alignment.push_back({ptr, size, alignment});\n+        } else {\n+            // deallocate a random item\n+            auto& x = ptr_size_alignment[InsecureRandRange(ptr_size_alignment.size())];\n+            resource.Deallocate(x.ptr, x.bytes, x.alignment);\n+            x = ptr_size_alignment.back();\n+            ptr_size_alignment.pop_back();\n+        }\n+    }\n+\n+    // deallocate all the rest\n+    for (auto const& x : ptr_size_alignment) {\n+        resource.Deallocate(x.ptr, x.bytes, x.alignment);\n+    }\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+}\n+\n+BOOST_AUTO_TEST_CASE(memusage_test)\n+{\n+    auto std_map = std::unordered_map<int, int>{};\n+\n+    using Map = std::unordered_map<int,\n+                                   int,\n+                                   std::hash<int>,\n+                                   std::equal_to<int>,\n+                                   PoolAllocator<std::pair<const int, int>,\n+                                                 sizeof(std::pair<const int, int>) + sizeof(void*) * 4,\n+                                                 alignof(void*)>>;\n+    auto resource = Map::allocator_type::ResourceType(1024);\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    {\n+        auto resource_map = Map{0, std::hash<int>{}, std::equal_to<int>{}, &resource};\n+\n+        // can't have the same resource usage\n+        BOOST_TEST(memusage::DynamicUsage(std_map) != memusage::DynamicUsage(resource_map));\n+\n+        for (size_t i = 0; i < 10000; ++i) {\n+            std_map[i];\n+            resource_map[i];\n+        }\n+\n+        // Eventually the resource_map should have a much lower memory usage because it has less malloc overhead\n+        BOOST_TEST(memusage::DynamicUsage(resource_map) <= memusage::DynamicUsage(std_map) * 90 / 100);",
      "path": "src/test/pool_tests.cpp",
      "position": 184,
      "original_position": 170,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1087172548,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the savings are a bit less than 86/100 on 32bit due to 32bit alignment, that's why I have the number a bit on the high side here",
      "created_at": "2023-01-27T18:32:56Z",
      "updated_at": "2023-01-27T18:32:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089291634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089291634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089308331",
      "pull_request_review_id": 1273277158,
      "id": 1089308331,
      "node_id": "PRRC_kwDOABII585A7Yar",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }\n+\n+    /**\n+     * Number of allocated chunks\n+     */\n+    [[nodiscard]] std::size_t NumAllocatedChunks() const\n+    {\n+        return m_allocated_chunks.size();\n+    }\n+\n+    /**\n+     * Size in bytes to allocate per chunk, currently hardcoded to a fixed size.\n+     */\n+    [[nodiscard]] size_t ChunkSizeBytes() const\n+    {\n+        return m_chunk_size_bytes;\n+    }\n+};\n+\n+\n+/**\n+ * Forwards all allocations/deallocations to the PoolResource.\n+ */\n+template <class T, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolAllocator\n+{\n+    PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>* m_resource;\n+\n+    template <typename U, std::size_t M, std::size_t A>\n+    friend class PoolAllocator;\n+\n+public:\n+    using value_type = T;\n+    using ResourceType = PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+\n+    /**\n+     * Not explicit so we can easily construct it with the correct resource\n+     */\n+    PoolAllocator(ResourceType* resource) noexcept\n+        : m_resource(resource)\n+    {\n+    }\n+\n+    PoolAllocator(const PoolAllocator& other) noexcept = default;\n+    PoolAllocator& operator=(const PoolAllocator& other) noexcept = default;\n+\n+    template <class U>\n+    PoolAllocator(const PoolAllocator<U, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& other) noexcept\n+        : m_resource(other.resource())\n+    {\n+    }\n+\n+    /**\n+     * The rebind struct here is mandatory because we use non type template arguments for\n+     * PoolAllocator. See https://en.cppreference.com/w/cpp/named_req/Allocator#cite_note-2\n+     */\n+    template <typename U>\n+    struct rebind {\n+        using other = PoolAllocator<U, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+    };\n+\n+    /**\n+     * Forwards each call to the resource.\n+     */\n+    T* allocate(size_t n)\n+    {\n+        return static_cast<T*>(m_resource->Allocate(n * sizeof(T), alignof(T)));\n+    }\n+\n+    /**\n+     * Forwards each call to the resource.\n+     */\n+    void deallocate(T* p, size_t n) noexcept\n+    {\n+        m_resource->Deallocate(p, n * sizeof(T), alignof(T));\n+    }\n+\n+    ResourceType* resource() const noexcept\n+    {\n+        return m_resource;\n+    }\n+};\n+\n+template <class T1, class T2, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+bool operator==(const PoolAllocator<T1, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& a,\n+                const PoolAllocator<T2, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& b) noexcept\n+{\n+    return a.resource() == b.resource();\n+}\n+\n+template <class T1, class T2, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+bool operator!=(const PoolAllocator<T1, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& a,\n+                const PoolAllocator<T2, MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& b) noexcept\n+{",
      "path": "src/support/allocators/pool.h",
      "position": 345,
      "original_position": 354,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1086988389,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not actually used anywhere currently, but this is needed when move-assigning containers that use the allocator. The containers need to check in a move-assignment if the allocators `operator==` returns true or false, and if they return true it means that both containers use the same resource and they can just destroy lhs and then move the pointers of rhs to lhs without copying elements. When they don't compare equal when the resource is different, all the objects in rhs need to be recreated.\r\n\r\nThe best explanation that I found for this stuff is this post from Howard Hinnant (he wrote `std::chrono` among other things) : https://stackoverflow.com/a/27472502/48181",
      "created_at": "2023-01-27T18:52:43Z",
      "updated_at": "2023-01-27T18:52:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089308331",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089308331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 345,
      "original_line": 345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089464988",
      "pull_request_review_id": 1273528688,
      "id": 1089464988,
      "node_id": "PRRC_kwDOABII585A7-qc",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }\n+\n+    /**\n+     * Number of allocated chunks\n+     */\n+    [[nodiscard]] std::size_t NumAllocatedChunks() const\n+    {\n+        return m_allocated_chunks.size();\n+    }\n+\n+    /**\n+     * Size in bytes to allocate per chunk, currently hardcoded to a fixed size.\n+     */\n+    [[nodiscard]] size_t ChunkSizeBytes() const\n+    {\n+        return m_chunk_size_bytes;\n+    }\n+};\n+\n+\n+/**\n+ * Forwards all allocations/deallocations to the PoolResource.\n+ */\n+template <class T, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolAllocator\n+{\n+    PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>* m_resource;\n+\n+    template <typename U, std::size_t M, std::size_t A>\n+    friend class PoolAllocator;\n+\n+public:\n+    using value_type = T;\n+    using ResourceType = PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+\n+    /**\n+     * Not explicit so we can easily construct it with the correct resource\n+     */\n+    PoolAllocator(ResourceType* resource) noexcept\n+        : m_resource(resource)\n+    {\n+    }\n+\n+    PoolAllocator(const PoolAllocator& other) noexcept = default;\n+    PoolAllocator& operator=(const PoolAllocator& other) noexcept = default;",
      "path": "src/support/allocators/pool.h",
      "position": 296,
      "original_position": 305,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1086981056,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moving is useless for this class, as all it holds is a pointer as member variable. Copying and moving a pointer is the same.",
      "created_at": "2023-01-27T21:45:25Z",
      "updated_at": "2023-01-27T21:45:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089464988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089464988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 296,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089475233",
      "pull_request_review_id": 1273544582,
      "id": 1089475233,
      "node_id": "PRRC_kwDOABII585A8BKh",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }\n+\n+    /**\n+     * Number of allocated chunks\n+     */\n+    [[nodiscard]] std::size_t NumAllocatedChunks() const\n+    {\n+        return m_allocated_chunks.size();\n+    }\n+\n+    /**\n+     * Size in bytes to allocate per chunk, currently hardcoded to a fixed size.\n+     */\n+    [[nodiscard]] size_t ChunkSizeBytes() const\n+    {\n+        return m_chunk_size_bytes;\n+    }\n+};\n+\n+\n+/**\n+ * Forwards all allocations/deallocations to the PoolResource.\n+ */\n+template <class T, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolAllocator\n+{\n+    PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>* m_resource;\n+\n+    template <typename U, std::size_t M, std::size_t A>\n+    friend class PoolAllocator;\n+\n+public:\n+    using value_type = T;\n+    using ResourceType = PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+\n+    /**\n+     * Not explicit so we can easily construct it with the correct resource\n+     */\n+    PoolAllocator(ResourceType* resource) noexcept\n+        : m_resource(resource)\n+    {\n+    }\n+\n+    PoolAllocator(const PoolAllocator& other) noexcept = default;\n+    PoolAllocator& operator=(const PoolAllocator& other) noexcept = default;",
      "path": "src/support/allocators/pool.h",
      "position": 296,
      "original_position": 305,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1086981056,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks. I wondered if the move constructor is used, because while this branch compiles for me (Clang 15 on ARM64) with the move assignment disabled (`PoolAllocator& operator=(PoolAllocator&&) noexcept = delete;`), it doesn't build with the move constructor disabled (`PoolAllocator(PoolAllocator&&) noexcept = delete;`).\r\n\r\n```\r\n./coins.h:230:33: note: in instantiation of member function 'std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to<COutPoint>, PoolAllocator<std::pair<const COutPoint, CCoinsCacheEntry>, 128, 8>>::unordered_map' requested here\r\n    mutable CCoinsMap cacheCoins{0, CCoinsMap::hasher{}, CCoinsMap::key_equal{}, &m_cache_coins_memory_resource};\r\n                                ^\r\n./support/allocators/pool.h:297:5: note: 'PoolAllocator' has been explicitly marked deleted here\r\n    PoolAllocator(PoolAllocator&&) noexcept = delete;\r\n    ^\r\n1 error generated.\r\n```",
      "created_at": "2023-01-27T21:59:55Z",
      "updated_at": "2023-01-27T21:59:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089475233",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089475233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 296,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646554",
      "pull_request_review_id": 1273801553,
      "id": 1089646554,
      "node_id": "PRRC_kwDOABII585A8q_a",
      "diff_hunk": "@@ -112,6 +112,7 @@ BITCOIN_TESTS =\\\n   test/net_peer_eviction_tests.cpp \\\n   test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n+  test/pool_tests.cpp \\",
      "path": "src/Makefile.test.include",
      "position": null,
      "original_position": 4,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1083220507,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in e7158613dcafd0065a94b03c8013ee4ced8ec3e3",
      "created_at": "2023-01-28T05:19:16Z",
      "updated_at": "2023-01-28T05:19:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089646554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646562",
      "pull_request_review_id": 1273801557,
      "id": 1089646562,
      "node_id": "PRRC_kwDOABII585A8q_i",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 225,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "2bbe0f8eeae274fc30d924c6762cbb7a392f3b32",
      "in_reply_to_id": 1084564591,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in e7158613dcafd0065a94b03c8013ee4ced8ec3e3",
      "created_at": "2023-01-28T05:19:22Z",
      "updated_at": "2023-01-28T05:19:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089646562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646577",
      "pull_request_review_id": 1273801564,
      "id": 1089646577,
      "node_id": "PRRC_kwDOABII585A8q_x",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 261,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1085963632,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in e7158613dcafd0065a94b03c8013ee4ced8ec3e3",
      "created_at": "2023-01-28T05:19:28Z",
      "updated_at": "2023-01-28T05:19:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089646577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646584",
      "pull_request_review_id": 1273801573,
      "id": 1089646584,
      "node_id": "PRRC_kwDOABII585A8q_4",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 117,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1085967553,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in e7158613dcafd0065a94b03c8013ee4ced8ec3e3",
      "created_at": "2023-01-28T05:19:35Z",
      "updated_at": "2023-01-28T05:19:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089646584",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646608",
      "pull_request_review_id": 1273801589,
      "id": 1089646608,
      "node_id": "PRRC_kwDOABII585A8rAQ",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 105,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1085970688,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in e7158613dcafd0065a94b03c8013ee4ced8ec3e3",
      "created_at": "2023-01-28T05:19:42Z",
      "updated_at": "2023-01-28T05:19:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089646608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089646608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089647580",
      "pull_request_review_id": 1273802345,
      "id": 1089647580,
      "node_id": "PRRC_kwDOABII585A8rPc",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*BLOCK_ALIGNMENT_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back().get() + CHUNK_SIZE_BYTES`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const size_t round_bytes = num_alignments * ELEM_ALIGN_BYTES;\n+            if (m_available_memory_it + round_bytes > m_available_memory_end) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);\n+        } else {\n+            // Can't use the pool => forward deallocation to ::operator delete().\n+            ::operator delete (p, std::align_val_t{alignment});\n+        }\n+    }\n+\n+    /**\n+     * Memory allocated by one resource cannot be deallocated by another, so return\n+     * true only for the same object.\n+     */\n+    bool IsEqual(const PoolResource& other) const noexcept\n+    {\n+        return this == &other;\n+    }\n+\n+    /**\n+     * Number of allocated chunks\n+     */\n+    [[nodiscard]] std::size_t NumAllocatedChunks() const\n+    {\n+        return m_allocated_chunks.size();\n+    }\n+\n+    /**\n+     * Size in bytes to allocate per chunk, currently hardcoded to a fixed size.\n+     */\n+    [[nodiscard]] size_t ChunkSizeBytes() const\n+    {\n+        return m_chunk_size_bytes;\n+    }\n+};\n+\n+\n+/**\n+ * Forwards all allocations/deallocations to the PoolResource.\n+ */\n+template <class T, std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolAllocator\n+{\n+    PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>* m_resource;\n+\n+    template <typename U, std::size_t M, std::size_t A>\n+    friend class PoolAllocator;\n+\n+public:\n+    using value_type = T;\n+    using ResourceType = PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>;\n+\n+    /**\n+     * Not explicit so we can easily construct it with the correct resource\n+     */\n+    PoolAllocator(ResourceType* resource) noexcept\n+        : m_resource(resource)\n+    {\n+    }\n+\n+    PoolAllocator(const PoolAllocator& other) noexcept = default;\n+    PoolAllocator& operator=(const PoolAllocator& other) noexcept = default;",
      "path": "src/support/allocators/pool.h",
      "position": 296,
      "original_position": 305,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "80722d838f9a5fdbbbd82f97d353e45b5d375ad8",
      "in_reply_to_id": 1086981056,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the problem with adding the `PoolAllocator(PoolAllocator&&) noexcept = delete;` is that it makes the function available for overload resolution, but if its chosen the compilation fails https://stackoverflow.com/a/35406415/48181",
      "created_at": "2023-01-28T05:23:43Z",
      "updated_at": "2023-01-28T05:23:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1089647580",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089647580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 296,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117323095",
      "pull_request_review_id": 1313921906,
      "id": 1117323095,
      "node_id": "PRRC_kwDOABII585CmP9X",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*ELEM_ALIGN_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back() + m_chunk_size_bytes`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 118,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_untouched_memory_end` now called `m_available_memory_end`",
      "created_at": "2023-02-24T17:01:36Z",
      "updated_at": "2023-02-24T17:12:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1117323095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117323095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117328292",
      "pull_request_review_id": 1313921906,
      "id": 1117328292,
      "node_id": "PRRC_kwDOABII585CmROk",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*ELEM_ALIGN_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back() + m_chunk_size_bytes`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.",
      "path": "src/support/allocators/pool.h",
      "position": null,
      "original_position": 155,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Extra \"is\" after \"memory\".",
      "created_at": "2023-02-24T17:04:53Z",
      "updated_at": "2023-02-24T17:12:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1117328292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117328292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124914676",
      "pull_request_review_id": 1324475821,
      "id": 1124914676,
      "node_id": "PRRC_kwDOABII585DDNX0",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");",
      "path": "src/support/allocators/pool.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this condition is guaranteed by the other static assertions, but this expression seems incorrect. In general, `A & (B-1) == 0` doesn't mean that A is a multiple of B, does it? If A=8 and B=3, then `8 & (3-1)` is zero, but 8 isn't a multiple of 3. If A=8, B=4, then `8 & (4-1)` is also zero, so we get the correct result (8 is a multiple of 4), but it's kind of by accident. To state it differently, if `MAX_BLOCK_SIZE_BYTES` is some large power of 2 (which is guaranteed above), then in binary it's `1000...0`, so ANDing with any smaller value will always produce zero.\r\n\r\nMaybe this is better:\r\n```suggestion\r\n    static_assert((MAX_BLOCK_SIZE_BYTES % ELEM_ALIGN_BYTES) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\r\n```\r\n",
      "created_at": "2023-03-03T19:18:22Z",
      "updated_at": "2023-03-04T08:12:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1124914676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124914676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125417231",
      "pull_request_review_id": 1324475821,
      "id": 1125417231,
      "node_id": "PRRC_kwDOABII585DFIEP",
      "diff_hunk": "@@ -131,7 +132,15 @@ struct CCoinsCacheEntry\n     CCoinsCacheEntry(Coin&& coin_, unsigned char flag) : coin(std::move(coin_)), flags(flag) {}\n };\n \n-typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;\n+using CCoinsMap = std::unordered_map<COutPoint,\n+                                     CCoinsCacheEntry,\n+                                     SaltedOutpointHasher,\n+                                     std::equal_to<COutPoint>,\n+                                     PoolAllocator<std::pair<const COutPoint, CCoinsCacheEntry>,\n+                                                   sizeof(std::pair<const COutPoint, CCoinsCacheEntry>) + sizeof(void*) * 4,",
      "path": "src/coins.h",
      "position": 26,
      "original_position": 18,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand the purpose of adding `sizeof(void*) * 4`; could you leave a brief comment if you get the chance? (Unless I'm just being clueless!)",
      "created_at": "2023-03-04T08:09:04Z",
      "updated_at": "2023-03-04T08:12:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1125417231",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125417231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 148,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125443783",
      "pull_request_review_id": 1324997430,
      "id": 1125443783,
      "node_id": "PRRC_kwDOABII585DFOjH",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");",
      "path": "src/support/allocators/pool.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1124914676,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In line 89 there is an assert that `ELEM_ALIGN_BYTES` is multiple of 2:\r\n```cpp\r\nstatic_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\r\n```\r\nSo given that line 91 should make sense, `ELEM_ALIGN_BYTES - 1` becomes a bitmask and actually asserts that `MAX_BLOCK_SIZE_BYTES` is multiple of `ELEM_ALIGN_BYTES`. But right, on its own that assert wouldn't be enough and using `%` is probably a bit more clear.",
      "created_at": "2023-03-04T11:10:04Z",
      "updated_at": "2023-03-04T11:10:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1125443783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125443783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125443786",
      "pull_request_review_id": 1324997436,
      "id": 1125443786,
      "node_id": "PRRC_kwDOABII585DFOjK",
      "diff_hunk": "@@ -131,7 +132,15 @@ struct CCoinsCacheEntry\n     CCoinsCacheEntry(Coin&& coin_, unsigned char flag) : coin(std::move(coin_)), flags(flag) {}\n };\n \n-typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;\n+using CCoinsMap = std::unordered_map<COutPoint,\n+                                     CCoinsCacheEntry,\n+                                     SaltedOutpointHasher,\n+                                     std::equal_to<COutPoint>,\n+                                     PoolAllocator<std::pair<const COutPoint, CCoinsCacheEntry>,\n+                                                   sizeof(std::pair<const COutPoint, CCoinsCacheEntry>) + sizeof(void*) * 4,",
      "path": "src/coins.h",
      "position": 26,
      "original_position": 18,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1125417231,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Posting here now, I can add this as a comment later: \r\n\r\nThe value here determines the maximum bytes that the `PoolAllocator` supports. When bigger blocks are allocated, this is just forwarded to `new`.\r\n\r\nThe thing with `sizeof(void*) * 4` is, it is not enough to just support up to sizes of the `std::pair<const COutPoint, CCoinsCacheEntry>`, because the different implementations of `std::unordered_map` use more memory for each node. Most implementations wrap the std::pair into a struct that contains a single pointer, so they can link them in a single linked list. But not all; e.g. Microsoft's STL uses a double linked list. Also libstd++ and libc++ wrap the pair differently, which can lead to different memory usage due to alignement, and some might store the hash value as well; depending on if the hash'es `operator()` is `noexcept` or not. All in all, correctly determining the size used for allocation is really hard and brittle because this depends on a lot of implementation details.\r\n\r\nSo with adding 4 * the size of a pointer we err on the safe side; and nodes can surely be allocated with all implementions of std::unordered_map. `m_free_lists` might be a bit larger than it needs to be and have a few pointers that never hold a freelist, but at least we can be sure that `std::unordered_map` nodes are actually allocated with the pool.",
      "created_at": "2023-03-04T11:10:05Z",
      "updated_at": "2023-03-05T08:30:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1125443786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125443786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 148,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128581100",
      "pull_request_review_id": 1329522422,
      "id": 1128581100,
      "node_id": "PRRC_kwDOABII585DRMfs",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>",
      "path": "src/support/allocators/pool.h",
      "position": 69,
      "original_position": 69,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is `std::size_t` preferred over `size_t` within this file?",
      "created_at": "2023-03-07T20:59:16Z",
      "updated_at": "2023-03-08T15:18:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1128581100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128581100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128596813",
      "pull_request_review_id": 1329522422,
      "id": 1128596813,
      "node_id": "PRRC_kwDOABII585DRQVN",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*ELEM_ALIGN_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back() + m_chunk_size_bytes`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);",
      "path": "src/support/allocators/pool.h",
      "position": 156,
      "original_position": 156,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Possibly related to https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1084564591, the first time this runs, both `m_available_memory_it` and `m_available_memory_end` are `nullptr`; is it UB to pass these to `std::distance()`? I think it's okay, just wanted to raise as a possible concern. You could do something like\r\n```suggestion\r\n        size_t remaining_available_bytes = m_available_memory_it ? std::distance(m_available_memory_it, m_available_memory_end) : 0;\r\n```",
      "created_at": "2023-03-07T21:13:46Z",
      "updated_at": "2023-03-08T15:18:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1128596813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128596813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129602006",
      "pull_request_review_id": 1329522422,
      "id": 1129602006,
      "node_id": "PRRC_kwDOABII585DVFvW",
      "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <support/allocators/pool.h>\n+\n+#include <unordered_map>\n+\n+template <typename Map>\n+void BenchFillClearMap(benchmark::Bench& bench, Map& map)\n+{\n+    size_t batch_size = 5000;\n+\n+    // make sure each iteration of the benchmark contains exactly 5000 inserts and one clear.\n+    // do this at least 10 times so we get reasonable accurate results\n+\n+    bench.batch(batch_size).minEpochIterations(10).run([&] {\n+        auto rng = ankerl::nanobench::Rng(1234);\n+        for (size_t i = 0; i < batch_size; ++i) {\n+            map[rng()];\n+        }\n+        map.clear();\n+    });",
      "path": "src/bench/pool.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This benchmark doesn't re-use memory (add to freelist then remove from freelist); maybe it would be better if it did because that's what happens with the real coins cache, maybe something like this:\r\n\r\n<details>\r\n<summary>patch</summary>\r\n\r\n```diff\r\n-    size_t batch_size = 5000;\r\n+    // The steady-state size of the map will be half of this value;\r\n+    // power-of-2 to avoid expensive mod operation during benchmark.\r\n+    constexpr size_t batch_size = 1 << 13;\r\n \r\n     // make sure each iteration of the benchmark contains exactly 5000 inserts and one clear.\r\n     // do this at least 10 times so we get reasonable accurate results\r\n \r\n     bench.batch(batch_size).minEpochIterations(10).run([&] {\r\n         auto rng = ankerl::nanobench::Rng(1234);\r\n-        for (size_t i = 0; i < batch_size; ++i) {\r\n-            map[rng()];\r\n+        for (size_t i = 0; i < batch_size * 10; ++i) {\r\n+            uint64_t r{rng()};\r\n+            // if the map has few entries, more likely add an entry, else delete\r\n+            if ((r & (batch_size-1)) < map.size()) {\r\n+                map.erase(map.begin());\r\n+            } else {\r\n+                map[r];\r\n+            }\r\n         }\r\n         map.clear();\r\n     });\r\n```\r\n</details>\r\n\r\nI don't think it matters which entry we delete, since `map.begin()` could return any entry. Deleting a truly random entry gets more complicated, and I don't think it changes the performance significantly. The loop iterates `batch_size * 10` instead of `batch_size` so we reach steady-state (about equal numbers of insertions and deletions).",
      "created_at": "2023-03-08T15:15:44Z",
      "updated_at": "2023-03-08T15:18:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1129602006",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129602006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129641656",
      "pull_request_review_id": 1330928582,
      "id": 1129641656,
      "node_id": "PRRC_kwDOABII585DVPa4",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*ELEM_ALIGN_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back() + m_chunk_size_bytes`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);",
      "path": "src/support/allocators/pool.h",
      "position": 156,
      "original_position": 156,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1128596813,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is explicitly defined in the standard here, in 5.1: http://eel.is/c++draft/expr.add#5",
      "created_at": "2023-03-08T15:41:04Z",
      "updated_at": "2023-03-08T15:41:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1129641656",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129641656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129645169",
      "pull_request_review_id": 1330932760,
      "id": 1129645169,
      "node_id": "PRRC_kwDOABII585DVQRx",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>",
      "path": "src/support/allocators/pool.h",
      "position": 69,
      "original_position": 69,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1128581100,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No real reason. Technically in C++ I believe `std::size_t` should be preferred, especially when using includes like `<cstddef>` instead of `<stddef.h>`. I personally usually use just `size_t` everywhere and never had a compile problem.",
      "created_at": "2023-03-08T15:43:20Z",
      "updated_at": "2023-03-08T15:43:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1129645169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129645169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129650014",
      "pull_request_review_id": 1330938802,
      "id": 1129650014,
      "node_id": "PRRC_kwDOABII585DVRde",
      "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <support/allocators/pool.h>\n+\n+#include <unordered_map>\n+\n+template <typename Map>\n+void BenchFillClearMap(benchmark::Bench& bench, Map& map)\n+{\n+    size_t batch_size = 5000;\n+\n+    // make sure each iteration of the benchmark contains exactly 5000 inserts and one clear.\n+    // do this at least 10 times so we get reasonable accurate results\n+\n+    bench.batch(batch_size).minEpochIterations(10).run([&] {\n+        auto rng = ankerl::nanobench::Rng(1234);\n+        for (size_t i = 0; i < batch_size; ++i) {\n+            map[rng()];\n+        }\n+        map.clear();\n+    });",
      "path": "src/bench/pool.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1129602006,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually it does reuse memory, when calling `map.clear()` all of the entries of the map are deallocated and thus the `pool_resource` gets them and puts them into the freelist. The memory is only ever released in the destructor of `pool_resource`",
      "created_at": "2023-03-08T15:46:30Z",
      "updated_at": "2023-03-08T15:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1129650014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129650014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129703688",
      "pull_request_review_id": 1331004938,
      "id": 1129703688,
      "node_id": "PRRC_kwDOABII585DVekI",
      "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <support/allocators/pool.h>\n+\n+#include <unordered_map>\n+\n+template <typename Map>\n+void BenchFillClearMap(benchmark::Bench& bench, Map& map)\n+{\n+    size_t batch_size = 5000;\n+\n+    // make sure each iteration of the benchmark contains exactly 5000 inserts and one clear.\n+    // do this at least 10 times so we get reasonable accurate results\n+\n+    bench.batch(batch_size).minEpochIterations(10).run([&] {\n+        auto rng = ankerl::nanobench::Rng(1234);\n+        for (size_t i = 0; i < batch_size; ++i) {\n+            map[rng()];\n+        }\n+        map.clear();\n+    });",
      "path": "src/bench/pool.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1129602006,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a good point, I hadn't noticed that. But perhaps it's good to make the load more realistic to get better benchmarking results. I'm assuming that when UTXOs become spent TXOs during block validation, they're removed from this unordered_map, but maybe that's not true? Just seems like doing many interleaving allocations and deallocations would be more realistic, but maybe not. But this suggestion is non-blocking.\r\n\r\nIn case anyone is wondering, I observed that the benchmark does cause allocations (and deallocations) that are too large for the pool, and these are for the hash bucket arrays. (I'm sure the fuzzer does that too, so far I've run only the benchmark.)",
      "created_at": "2023-03-08T16:17:58Z",
      "updated_at": "2023-03-08T16:17:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1129703688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129703688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144023009",
      "pull_request_review_id": 1351433045,
      "id": 1144023009,
      "node_id": "PRRC_kwDOABII585EMGfh",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }\n+        }\n+        // also add whatever has not yet been used for blocks\n+        auto num_available_bytes = resource.m_available_memory_end - resource.m_available_memory_it;\n+        if (num_available_bytes > 0) {\n+            free_blocks.emplace_back(resource.m_available_memory_it, num_available_bytes);\n+        }\n+\n+        // collect all chunks\n+        std::vector<PtrAndBytes> chunks;\n+        for (std::byte* ptr : resource.m_allocated_chunks) {\n+            chunks.emplace_back(ptr, resource.ChunkSizeBytes());\n+        }\n+\n+        // now we have all the data from all freelists on the one hand side, and all chunks on the other hand side.\n+        // To check if all of them match, sort by address and iterate.\n+        std::sort(free_blocks.begin(), free_blocks.end());\n+        std::sort(chunks.begin(), chunks.end());\n+\n+        auto chunk_it = chunks.begin();\n+        auto chunk_ptr_remaining = chunk_it->ptr;\n+        auto chunk_size_remaining = chunk_it->size;\n+        for (const auto& free_block : free_blocks) {\n+            if (chunk_size_remaining == 0) {\n+                assert(chunk_it != chunks.end());\n+                ++chunk_it;\n+                assert(chunk_it != chunks.end());\n+                chunk_ptr_remaining = chunk_it->ptr;\n+                chunk_size_remaining = chunk_it->size;\n+            }\n+            assert(free_block.ptr == chunk_ptr_remaining);                   // ensure addresses match\n+            assert(free_block.size <= chunk_size_remaining);                 // ensure we no overflow",
      "path": "src/test/util/poolresourcetester.h",
      "position": null,
      "original_position": 116,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            assert(free_block.size <= chunk_size_remaining);                 // ensure no overflow\r\n```",
      "created_at": "2023-03-21T21:48:20Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144023009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144023009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144025036",
      "pull_request_review_id": 1351433045,
      "id": 1144025036,
      "node_id": "PRRC_kwDOABII585EMG_M",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {\n+        uint8_t* bytes = new (resource.Allocate(num_bytes, 1)) uint8_t[num_bytes];\n+        BOOST_TEST(bytes != nullptr);\n+        data.emplace_back(bytes, num_bytes);\n+\n+        // set each byte to i\n+        std::fill(bytes, bytes + num_bytes, num_bytes);\n+    }\n+\n+    // now that we got all allocated, test if all still have the correct values, and give everything back to the allocator\n+    uint8_t val = 1;\n+    for (auto const& span : data) {\n+        for (auto x : span) {\n+            BOOST_TEST(val == x);\n+        }\n+        std::destroy(span.data(), span.data() + span.size());\n+        resource.Deallocate(span.data(), span.size(), 1);\n+        ++val;\n+    }\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+}\n+\n+BOOST_AUTO_TEST_CASE(random_allocations)\n+{\n+    struct PtrSizeAlignment {\n+        void* ptr;\n+        size_t bytes;\n+        size_t alignment;\n+    };\n+\n+    // makes a bunch of random allocations and gives all of them back in random order.\n+    auto resource = PoolResource<128, 8>(65536);\n+    std::vector<PtrSizeAlignment> ptr_size_alignment{};\n+    for (size_t i = 0; i < 1000; ++i) {\n+        // make it a bit more likely to allocate than deallocate\n+        if (ptr_size_alignment.empty() || 0 != InsecureRandRange(4)) {\n+            // allocate a random item\n+            std::size_t alignment = std::size_t{1} << InsecureRandRange(7);           // 1, 2, ..., 128",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 121,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            std::size_t alignment = std::size_t{1} << InsecureRandRange(8);           // 1, 2, ..., 128\r\n```",
      "created_at": "2023-03-21T21:51:08Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144025036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144025036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144025651",
      "pull_request_review_id": 1351433045,
      "id": 1144025651,
      "node_id": "PRRC_kwDOABII585EMHIz",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }\n+        }\n+        // also add whatever has not yet been used for blocks\n+        auto num_available_bytes = resource.m_available_memory_end - resource.m_available_memory_it;\n+        if (num_available_bytes > 0) {\n+            free_blocks.emplace_back(resource.m_available_memory_it, num_available_bytes);\n+        }\n+\n+        // collect all chunks\n+        std::vector<PtrAndBytes> chunks;\n+        for (std::byte* ptr : resource.m_allocated_chunks) {",
      "path": "src/test/util/poolresourcetester.h",
      "position": null,
      "original_position": 95,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        for (const std::byte* ptr : resource.m_allocated_chunks) {\r\n```",
      "created_at": "2023-03-21T21:52:02Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144025651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144025651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144026131",
      "pull_request_review_id": 1351433045,
      "id": 1144026131,
      "node_id": "PRRC_kwDOABII585EMHQT",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }\n+        }\n+        // also add whatever has not yet been used for blocks\n+        auto num_available_bytes = resource.m_available_memory_end - resource.m_available_memory_it;\n+        if (num_available_bytes > 0) {\n+            free_blocks.emplace_back(resource.m_available_memory_it, num_available_bytes);\n+        }\n+\n+        // collect all chunks\n+        std::vector<PtrAndBytes> chunks;\n+        for (std::byte* ptr : resource.m_allocated_chunks) {\n+            chunks.emplace_back(ptr, resource.ChunkSizeBytes());\n+        }\n+\n+        // now we have all the data from all freelists on the one hand side, and all chunks on the other hand side.\n+        // To check if all of them match, sort by address and iterate.\n+        std::sort(free_blocks.begin(), free_blocks.end());\n+        std::sort(chunks.begin(), chunks.end());\n+\n+        auto chunk_it = chunks.begin();\n+        auto chunk_ptr_remaining = chunk_it->ptr;\n+        auto chunk_size_remaining = chunk_it->size;\n+        for (const auto& free_block : free_blocks) {\n+            if (chunk_size_remaining == 0) {\n+                assert(chunk_it != chunks.end());\n+                ++chunk_it;\n+                assert(chunk_it != chunks.end());\n+                chunk_ptr_remaining = chunk_it->ptr;\n+                chunk_size_remaining = chunk_it->size;\n+            }\n+            assert(free_block.ptr == chunk_ptr_remaining);                   // ensure addresses match\n+            assert(free_block.size <= chunk_size_remaining);                 // ensure we no overflow\n+            assert((free_block.ptr & (resource.ELEM_ALIGN_BYTES - 1)) == 0); // ensure correct alignment\n+            chunk_ptr_remaining += free_block.size;\n+            chunk_size_remaining -= free_block.size;\n+        }\n+        assert(chunk_ptr_remaining == chunks.back().ptr + chunks.back().size); // ensure we are t the end of the chunks",
      "path": "src/test/util/poolresourcetester.h",
      "position": null,
      "original_position": 121,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, this would test slightly more\r\n```suggestion\r\n        assert(chunk_ptr_remaining == chunk_it->ptr + chunk_it->size); // ensure we are at the end of the chunks\r\n        ++chunk_it;\r\n        assert(chunk_it == chunks.end());\r\n```",
      "created_at": "2023-03-21T21:52:37Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144026131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144026131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144046537",
      "pull_request_review_id": 1351433045,
      "id": 1144046537,
      "node_id": "PRRC_kwDOABII585EMMPJ",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }",
      "path": "src/test/util/poolresourcetester.h",
      "position": 85,
      "original_position": 85,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably not important, but if a bug caused a cycle in a freelist, I think the test would allocate an unbounded amount of memory (pushing to `free_blocks`), which would be not a nice way to fail. I think you could calculate an upper bound of the number of free blocks (number of chunks times chunk size divided by this free list's blocksize), then assert if the number of iterations exceeds that number.",
      "created_at": "2023-03-21T22:20:54Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144046537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144046537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 82,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144070292",
      "pull_request_review_id": 1351433045,
      "id": 1144070292,
      "node_id": "PRRC_kwDOABII585EMSCU",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, and would this make the test too specific? I don't think so, but something to consider.\r\n```suggestion\r\n    void* b = resource.Allocate(8, 1);\r\n    BOOST_TEST(block == b);\r\n```",
      "created_at": "2023-03-21T22:59:58Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144070292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144070292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144072741",
      "pull_request_review_id": 1351433045,
      "id": 1144072741,
      "node_id": "PRRC_kwDOABII585EMSol",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // can't use resource because alignment is too big, allocate system memory\r\n    b = resource.Allocate(8, 16);\r\n    BOOST_TEST(block == b);\r\n    block = b;\r\n```",
      "created_at": "2023-03-21T23:04:47Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144072741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144072741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144076687",
      "pull_request_review_id": 1351433045,
      "id": 1144076687,
      "node_id": "PRRC_kwDOABII585EMTmP",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);",
      "path": "src/test/pool_tests.cpp",
      "position": 64,
      "original_position": 61,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // can't use resource because size is too big, allocate system memory\r\n    b = resource.Allocate(16, 8);\r\n    BOOST_TEST(block != b);\r\n    block = b;\r\n\r\n```",
      "created_at": "2023-03-21T23:12:24Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144076687",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144076687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 63,
      "original_start_line": 60,
      "start_side": "RIGHT",
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144079597",
      "pull_request_review_id": 1351433045,
      "id": 1144079597,
      "node_id": "PRRC_kwDOABII585EMUTt",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`counts` is unused",
      "created_at": "2023-03-21T23:18:14Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144079597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144079597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144084403",
      "pull_request_review_id": 1351433045,
      "id": 1144084403,
      "node_id": "PRRC_kwDOABII585EMVez",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {\n+        uint8_t* bytes = new (resource.Allocate(num_bytes, 1)) uint8_t[num_bytes];\n+        BOOST_TEST(bytes != nullptr);\n+        data.emplace_back(bytes, num_bytes);\n+\n+        // set each byte to i",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // set each byte to num_bytes\r\n```",
      "created_at": "2023-03-21T23:26:43Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144084403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144084403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144100307",
      "pull_request_review_id": 1351433045,
      "id": 1144100307,
      "node_id": "PRRC_kwDOABII585EMZXT",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This test doesn't allocate zero bytes, it allocates 1 to n bytes. It seems like zero-byte allocations should be allowed. See comments below.",
      "created_at": "2023-03-21T23:59:59Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144100307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144100307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144100854",
      "pull_request_review_id": 1351433045,
      "id": 1144100854,
      "node_id": "PRRC_kwDOABII585EMZf2",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we want to test zero-length allocations (but requires a change to `Deallocate()`, see comment there).\r\n```suggestion\r\n    for (uint8_t num_bytes = 0; num_bytes < num_allocs; ++num_bytes) {\r\n```",
      "created_at": "2023-03-22T00:01:12Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144100854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144100854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144101007",
      "pull_request_review_id": 1351433045,
      "id": 1144101007,
      "node_id": "PRRC_kwDOABII585EMZiP",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {\n+        uint8_t* bytes = new (resource.Allocate(num_bytes, 1)) uint8_t[num_bytes];\n+        BOOST_TEST(bytes != nullptr);\n+        data.emplace_back(bytes, num_bytes);\n+\n+        // set each byte to i\n+        std::fill(bytes, bytes + num_bytes, num_bytes);\n+    }\n+\n+    // now that we got all allocated, test if all still have the correct values, and give everything back to the allocator\n+    uint8_t val = 1;",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we want to test zero-length allocations (but requires a change to `Deallocate()`, see comment there).\r\n```suggestion\r\n    uint8_t val = 0;\r\n```",
      "created_at": "2023-03-22T00:01:34Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144101007",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144101007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144103123",
      "pull_request_review_id": 1351433045,
      "id": 1144103123,
      "node_id": "PRRC_kwDOABII585EMaDT",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*ELEM_ALIGN_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back() + m_chunk_size_bytes`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const std::ptrdiff_t round_bytes = static_cast<std::ptrdiff_t>(num_alignments * ELEM_ALIGN_BYTES);\n+            if (round_bytes > m_available_memory_end - m_available_memory_it) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);",
      "path": "src/support/allocators/pool.h",
      "position": 247,
      "original_position": 247,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This allows zero-byte allocations, which I think is supported by the standard allocator, so we should too (right?) I benchmarked this change and there was no difference, but my benchmark setup is not very good, so that should definitely be tested.\r\n```suggestion\r\n            if (bytes > 0) {\r\n                const std::size_t num_alignments = NumElemAlignBytes(bytes);\r\n                // put the memory block into the linked list. We can placement construct the FreeList\r\n                // into the memory since we can be sure the alignment is correct.\r\n                PlacementAddToList(p, m_free_lists[num_alignments]);\r\n            }\r\n```",
      "created_at": "2023-03-22T00:06:46Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144103123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144103123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 244,
      "original_start_line": 244,
      "start_side": "RIGHT",
      "line": 247,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144123098",
      "pull_request_review_id": 1351433045,
      "id": 1144123098,
      "node_id": "PRRC_kwDOABII585EMe7a",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work\n+BOOST_AUTO_TEST_CASE(allocate_any_byte)\n+{\n+    auto resource = PoolResource<128, 8>(1024);\n+    auto counts = PoolResourceTester::FreeListSizes(resource);\n+\n+    uint8_t num_allocs = 200;\n+\n+    auto data = std::vector<Span<uint8_t>>();\n+\n+    // allocate an increasing number of bytes\n+    for (uint8_t num_bytes = 1; num_bytes < num_allocs; ++num_bytes) {\n+        uint8_t* bytes = new (resource.Allocate(num_bytes, 1)) uint8_t[num_bytes];\n+        BOOST_TEST(bytes != nullptr);\n+        data.emplace_back(bytes, num_bytes);\n+\n+        // set each byte to i\n+        std::fill(bytes, bytes + num_bytes, num_bytes);\n+    }\n+\n+    // now that we got all allocated, test if all still have the correct values, and give everything back to the allocator\n+    uint8_t val = 1;\n+    for (auto const& span : data) {\n+        for (auto x : span) {\n+            BOOST_TEST(val == x);\n+        }\n+        std::destroy(span.data(), span.data() + span.size());\n+        resource.Deallocate(span.data(), span.size(), 1);\n+        ++val;\n+    }\n+\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+}\n+\n+BOOST_AUTO_TEST_CASE(random_allocations)\n+{\n+    struct PtrSizeAlignment {\n+        void* ptr;\n+        size_t bytes;\n+        size_t alignment;\n+    };\n+\n+    // makes a bunch of random allocations and gives all of them back in random order.\n+    auto resource = PoolResource<128, 8>(65536);\n+    std::vector<PtrSizeAlignment> ptr_size_alignment{};\n+    for (size_t i = 0; i < 1000; ++i) {\n+        // make it a bit more likely to allocate than deallocate\n+        if (ptr_size_alignment.empty() || 0 != InsecureRandRange(4)) {\n+            // allocate a random item\n+            std::size_t alignment = std::size_t{1} << InsecureRandRange(7);           // 1, 2, ..., 128\n+            std::size_t size = (InsecureRandRange(2000) / alignment + 1) * alignment; // multiple of alignment",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This change will cause the pool resource allocator to be used much more often (since the max block size is 128).\r\n```suggestion\r\n            std::size_t size = (InsecureRandRange(200) / alignment + 1) * alignment;  // multiple of alignment\r\n```",
      "created_at": "2023-03-22T00:53:33Z",
      "updated_at": "2023-03-22T01:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1144123098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144123098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145197139",
      "pull_request_review_id": 1353164917,
      "id": 1145197139,
      "node_id": "PRRC_kwDOABII585EQlJT",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144072741,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That here would be `BOOST_TEST(block != b)`, because since `b` now has to come from the `::operator new` and not from the freelist",
      "created_at": "2023-03-22T17:42:03Z",
      "updated_at": "2023-03-22T17:42:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1145197139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145197139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145200479",
      "pull_request_review_id": 1353169975,
      "id": 1145200479,
      "node_id": "PRRC_kwDOABII585EQl9f",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);",
      "path": "src/test/pool_tests.cpp",
      "position": 64,
      "original_position": 61,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144076687,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With the above change, if I'm not mistaken I don't think it's safe to check for `BOOST_TEST(block != b)` here too. This too calls `::operator new`, and because the previous memory was deallocated already, it might give out the same block of memory, depending on however malloc is implemented",
      "created_at": "2023-03-22T17:45:14Z",
      "updated_at": "2023-03-22T17:45:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1145200479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145200479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 63,
      "original_start_line": 60,
      "start_side": "RIGHT",
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145236261",
      "pull_request_review_id": 1353221884,
      "id": 1145236261,
      "node_id": "PRRC_kwDOABII585EQusl",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After having a closer look, you are right that currently allocating & freeing 0 bytes does not work with the resource. But I think I can't allow allocating 0 bytes with the resource at all, because when allocating multple 0 bytes it would always give out the same pointer, and the standard says that this is not allowed: https://cplusplus.github.io/LWG/issue9\r\n\r\nSo I think the best solution is to just add a `bytes > 0` condition to `IsFreeListUsable`, so that `::operator new` will be used in that case.",
      "created_at": "2023-03-22T18:17:48Z",
      "updated_at": "2023-03-22T18:17:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1145236261",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145236261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145435338",
      "pull_request_review_id": 1353515008,
      "id": 1145435338,
      "node_id": "PRRC_kwDOABII585ERfTK",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alternatively, just round up size 0 to be at least 1 alignment?",
      "created_at": "2023-03-22T21:38:42Z",
      "updated_at": "2023-03-22T21:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1145435338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145435338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145478812",
      "pull_request_review_id": 1353572550,
      "id": 1145478812,
      "node_id": "PRRC_kwDOABII585ERp6c",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@martinus, good catch!\r\n@sipa, good idea, this does seem to work (hope this is what you meant):\r\n```\r\n     [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\r\n     {\r\n-        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\r\n+        return bytes > 0 ? ((bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES) : 1;\r\n     }\r\n```\r\nBenchmark results are identical for me, but this should be confirmed.",
      "created_at": "2023-03-22T22:40:34Z",
      "updated_at": "2023-03-22T22:40:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1145478812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145478812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145490940",
      "pull_request_review_id": 1353605999,
      "id": 1145490940,
      "node_id": "PRRC_kwDOABII585ERs38",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, or even:\r\n\r\n```c++\r\nreturn (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES + (bytes == 0);\r\n```\r\n\r\nwhich might be a minuscule amount faster.",
      "created_at": "2023-03-22T23:01:16Z",
      "updated_at": "2023-03-22T23:01:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1145490940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1145490940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1146502076",
      "pull_request_review_id": 1355086199,
      "id": 1146502076,
      "node_id": "PRRC_kwDOABII585EVju8",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's clever! They generate similar code, but this first way is slightly less code https://godbolt.org/z/Pz77TTEd8\r\n```\r\nint f(int bytes)\r\n{\r\n    return bytes > 0 ? (bytes+8-1)/8 : 1;\r\n}\r\n```\r\n\r\nOr https://godbolt.org/z/adzasoPad\r\n```\r\nint f(int bytes)\r\n{\r\n    return (bytes+8-1)/8 + (bytes == 0);\r\n}\r\n```\r\nThat's using x86-64 gcc 11.3; results are similar for x86-64 clang 16.0.0.",
      "created_at": "2023-03-23T17:02:37Z",
      "updated_at": "2023-03-23T17:02:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1146502076",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1146502076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1146560809",
      "pull_request_review_id": 1355173295,
      "id": 1146560809,
      "node_id": "PRRC_kwDOABII585EVyEp",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The code generation is a bit different when you use unsigned types, then the `+ (bytes == 0)` version is the shortedst for me. In my microbenchmark the `+ (bytes == 0)` is also fastest, but in practice its most likely irrelevant",
      "created_at": "2023-03-23T17:37:12Z",
      "updated_at": "2023-03-23T17:37:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1146560809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1146560809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1146653864",
      "pull_request_review_id": 1355311138,
      "id": 1146653864,
      "node_id": "PRRC_kwDOABII585EWIyo",
      "diff_hunk": "@@ -0,0 +1,349 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+#define BITCOIN_SUPPORT_ALLOCATORS_POOL_H\n+\n+#include <array>\n+#include <cassert>\n+#include <cstddef>\n+#include <list>\n+#include <memory>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+/**\n+ * A memory resource similar to std::pmr::unsynchronized_pool_resource, but\n+ * optimized for node-based containers. It has the following properties:\n+ *\n+ * * Owns the allocated memory and frees it on destruction, even when deallocate\n+ *   has not been called on the allocated blocks.\n+ *\n+ * * Consists of a number of pools, each one for a different block size.\n+ *   Each pool holds blocks of uniform size in a freelist.\n+ *\n+ * * Exhausting memory in a freelist causes a new allocation of a fixed size chunk.\n+ *   This chunk is used to carve out blocks.\n+ *\n+ * * Block sizes or alignments that can not be served by the pools are allocated\n+ *   and deallocated by operator new().\n+ *\n+ * PoolResource is not thread-safe. It is intended to be used by PoolAllocator.\n+ *\n+ * @tparam MAX_BLOCK_SIZE_BYTES Maximum size to allocate with the pool. If larger\n+ *         sizes are requested, allocation falls back to new().\n+ *\n+ * @tparam ALIGN_BYTES Required alignment for the allocations.\n+ *\n+ * An example: If you create a PoolResource<128, 8>(262144) and perform a bunch of\n+ * allocations and deallocate 2 blocks with size 8 bytes, and 3 blocks with size 16,\n+ * the members will look like this:\n+ *\n+ *     m_free_lists                         m_allocated_chunks\n+ *        ┌───┐                                ┌───┐  ┌────────────-------──────┐\n+ *        │   │  blocks                        │   ├─►│    262144 B             │\n+ *        │   │  ┌─────┐  ┌─────┐              └─┬─┘  └────────────-------──────┘\n+ *        │ 1 ├─►│ 8 B ├─►│ 8 B │                │\n+ *        │   │  └─────┘  └─────┘                :\n+ *        │   │                                  │\n+ *        │   │  ┌─────┐  ┌─────┐  ┌─────┐       ▼\n+ *        │ 2 ├─►│16 B ├─►│16 B ├─►│16 B │     ┌───┐  ┌─────────────────────────┐\n+ *        │   │  └─────┘  └─────┘  └─────┘     │   ├─►│          ▲              │ ▲\n+ *        │   │                                └───┘  └──────────┬──────────────┘ │\n+ *        │ . │                                                  │    m_available_memory_end\n+ *        │ . │                                         m_available_memory_it\n+ *        │ . │\n+ *        │   │\n+ *        │   │\n+ *        │16 │\n+ *        └───┘\n+ *\n+ * Here m_free_lists[1] holds the 2 blocks of size 8 bytes, and m_free_lists[2]\n+ * holds the 3 blocks of size 16. The blocks came from the data stored in the\n+ * m_allocated_chunks list. Each chunk has bytes 262144. The last chunk has still\n+ * some memory available for the blocks, and when m_available_memory_it is at the\n+ * end, a new chunk will be allocated and added to the list.\n+ */\n+template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+class PoolResource final\n+{\n+    static_assert(ALIGN_BYTES > 0, \"ALIGN_BYTES must be nonzero\");\n+    static_assert((ALIGN_BYTES & (ALIGN_BYTES - 1)) == 0, \"ALIGN_BYTES must be a power of two\");\n+\n+    /**\n+     * In-place linked list of the allocations, used for the freelist.\n+     */\n+    struct ListNode {\n+        ListNode* m_next;\n+\n+        explicit ListNode(ListNode* next) : m_next(next) {}\n+    };\n+    static_assert(std::is_trivially_destructible_v<ListNode>, \"Make sure we don't need to manually call a destructor\");\n+\n+    /**\n+     * Internal alignment value. The larger of the requested ALIGN_BYTES and alignof(FreeList).\n+     */\n+    static constexpr std::size_t ELEM_ALIGN_BYTES = std::max(alignof(ListNode), ALIGN_BYTES);\n+    static_assert((ELEM_ALIGN_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"ELEM_ALIGN_BYTES must be a power of two\");\n+    static_assert(sizeof(ListNode) <= ELEM_ALIGN_BYTES, \"Units of size ELEM_SIZE_ALIGN need to be able to store a ListNode\");\n+    static_assert((MAX_BLOCK_SIZE_BYTES & (ELEM_ALIGN_BYTES - 1)) == 0, \"MAX_BLOCK_SIZE_BYTES needs to be a multiple of the alignment.\");\n+\n+    /**\n+     * Size in bytes to allocate per chunk\n+     */\n+    const size_t m_chunk_size_bytes;\n+\n+    /**\n+     * Contains all allocated pools of memory, used to free the data in the destructor.\n+     */\n+    std::list<std::byte*> m_allocated_chunks{};\n+\n+    /**\n+     * Single linked lists of all data that came from deallocating.\n+     * m_free_lists[n] will serve blocks of size n*ELEM_ALIGN_BYTES.\n+     */\n+    std::array<ListNode*, MAX_BLOCK_SIZE_BYTES / ELEM_ALIGN_BYTES + 1> m_free_lists{};\n+\n+    /**\n+     * Points to the beginning of available memory for carving out allocations.\n+     */\n+    std::byte* m_available_memory_it = nullptr;\n+\n+    /**\n+     * Points to the end of available memory for carving out allocations.\n+     *\n+     * That member variable is redundant, and is always equal to `m_allocated_chunks.back() + m_chunk_size_bytes`\n+     * whenever it is accessed, but `m_untouched_memory_end` caches this for clarity and efficiency.\n+     */\n+    std::byte* m_available_memory_end = nullptr;\n+\n+    /**\n+     * How many multiple of ELEM_ALIGN_BYTES are necessary to fit bytes. We use that result directly as an index\n+     * into m_free_lists.\n+     */\n+    [[nodiscard]] static constexpr std::size_t NumElemAlignBytes(std::size_t bytes)\n+    {\n+        return (bytes + ELEM_ALIGN_BYTES - 1) / ELEM_ALIGN_BYTES;\n+    }\n+\n+    /**\n+     * True when it is possible to make use of the freelist\n+     */\n+    [[nodiscard]] static constexpr bool IsFreeListUsable(std::size_t bytes, std::size_t alignment)\n+    {\n+        return alignment <= ELEM_ALIGN_BYTES && bytes <= MAX_BLOCK_SIZE_BYTES;\n+    }\n+\n+    /**\n+     * Replaces node with placement constructed ListNode that points to the previous node\n+     */\n+    void PlacementAddToList(void* p, ListNode*& node)\n+    {\n+        node = new (p) ListNode{node};\n+    }\n+\n+    /**\n+     * Allocate one full memory chunk which will be used to carve out allocations.\n+     * Also puts any leftover bytes into the freelist.\n+     *\n+     * Precondition: leftover bytes are either 0 or few enough to fit into a place in the freelist\n+     */\n+    void AllocateChunk()\n+    {\n+        // if there is still any available memory is left, put it into the freelist.\n+        size_t remaining_available_bytes = std::distance(m_available_memory_it, m_available_memory_end);\n+        if (0 != remaining_available_bytes) {\n+            PlacementAddToList(m_available_memory_it, m_free_lists[remaining_available_bytes / ELEM_ALIGN_BYTES]);\n+        }\n+\n+        void* storage = ::operator new (m_chunk_size_bytes, std::align_val_t{ELEM_ALIGN_BYTES});\n+        m_available_memory_it = new (storage) std::byte[m_chunk_size_bytes];\n+        m_available_memory_end = m_available_memory_it + m_chunk_size_bytes;\n+        m_allocated_chunks.emplace_back(m_available_memory_it);\n+    }\n+\n+    /**\n+     * Access to internals for testing purpose only\n+     */\n+    friend class PoolResourceTester;\n+\n+public:\n+    /**\n+     * Construct a new PoolResource object which allocates the first chunk.\n+     * chunk_size_bytes will be rounded up to next multiple of ELEM_ALIGN_BYTES.\n+     */\n+    explicit PoolResource(std::size_t chunk_size_bytes)\n+        : m_chunk_size_bytes(NumElemAlignBytes(chunk_size_bytes) * ELEM_ALIGN_BYTES)\n+    {\n+        assert(m_chunk_size_bytes >= MAX_BLOCK_SIZE_BYTES);\n+        AllocateChunk();\n+    }\n+\n+    /**\n+     * Construct a new Pool Resource object, defaults to 2^18=262144 chunk size.\n+     */\n+    PoolResource() : PoolResource(262144) {}\n+\n+    /**\n+     * Disable copy & move semantics, these are not supported for the resource.\n+     */\n+    PoolResource(const PoolResource&) = delete;\n+    PoolResource& operator=(const PoolResource&) = delete;\n+    PoolResource(PoolResource&&) = delete;\n+    PoolResource& operator=(PoolResource&&) = delete;\n+\n+    /**\n+     * Deallocates all memory allocated associated with the memory resource.\n+     */\n+    ~PoolResource()\n+    {\n+        for (std::byte* chunk : m_allocated_chunks) {\n+            std::destroy(chunk, chunk + m_chunk_size_bytes);\n+            ::operator delete ((void*)chunk, std::align_val_t{ELEM_ALIGN_BYTES});\n+        }\n+    }\n+\n+    /**\n+     * Allocates a block of bytes. If possible the freelist is used, otherwise allocation\n+     * is forwarded to ::operator new().\n+     */\n+    void* Allocate(std::size_t bytes, std::size_t alignment)\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            if (nullptr != m_free_lists[num_alignments]) {\n+                // we've already got data in the pool's freelist, unlink one element and return the pointer\n+                // to the unlinked memory. Since FreeList is trivially destructible we can just treat it as\n+                // uninitialized memory.\n+                return std::exchange(m_free_lists[num_alignments], m_free_lists[num_alignments]->m_next);\n+            }\n+\n+            // freelist is empty: get one allocation from allocated chunk memory.\n+            const std::ptrdiff_t round_bytes = static_cast<std::ptrdiff_t>(num_alignments * ELEM_ALIGN_BYTES);\n+            if (round_bytes > m_available_memory_end - m_available_memory_it) {\n+                // slow path, only happens when a new chunk needs to be allocated\n+                AllocateChunk();\n+            }\n+\n+            // Make sure we use the right amount of bytes for that freelist (might be rounded up),\n+            return std::exchange(m_available_memory_it, m_available_memory_it + round_bytes);\n+        }\n+\n+        // Can't use the pool => use operator new()\n+        return ::operator new (bytes, std::align_val_t{alignment});\n+    }\n+\n+    /**\n+     * Returns a block to the freelists, or deletes the block when it did not come from the chunks.\n+     */\n+    void Deallocate(void* p, std::size_t bytes, std::size_t alignment) noexcept\n+    {\n+        if (IsFreeListUsable(bytes, alignment)) {\n+            const std::size_t num_alignments = NumElemAlignBytes(bytes);\n+            // put the memory block into the linked list. We can placement construct the FreeList\n+            // into the memory since we can be sure the alignment is correct.\n+            PlacementAddToList(p, m_free_lists[num_alignments]);",
      "path": "src/support/allocators/pool.h",
      "position": 247,
      "original_position": 247,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144103123,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll implement the ` + (bytes == 0)` for NumElemAlignBytes",
      "created_at": "2023-03-23T18:30:28Z",
      "updated_at": "2023-03-23T18:30:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1146653864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1146653864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 244,
      "original_start_line": 244,
      "start_side": "RIGHT",
      "line": 247,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147123753",
      "pull_request_review_id": 1356009221,
      "id": 1147123753,
      "node_id": "PRRC_kwDOABII585EX7gp",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+#define BITCOIN_TEST_UTIL_POOLRESOURCETESTER_H\n+\n+#include <support/allocators/pool.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+/**\n+ * Helper to get access to private parts of PoolResource. Used in unit tests and in the fuzzer\n+ */\n+class PoolResourceTester\n+{\n+    struct PtrAndBytes {\n+        uintptr_t ptr;\n+        std::size_t size;\n+\n+        PtrAndBytes(const void* p, std::size_t s)\n+            : ptr(reinterpret_cast<uintptr_t>(p)), size(s)\n+        {\n+        }\n+\n+        /**\n+         * defines a sort ordering by the pointer value\n+         */\n+        friend bool operator<(PtrAndBytes const& a, PtrAndBytes const& b)\n+        {\n+            return a.ptr < b.ptr;\n+        }\n+    };\n+\n+public:\n+    /**\n+     * Extracts the number of elements per freelist\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::vector<std::size_t> FreeListSizes(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        auto sizes = std::vector<std::size_t>();\n+        for (const auto* ptr : resource.m_free_lists) {\n+            size_t size = 0;\n+            while (ptr != nullptr) {\n+                ++size;\n+                ptr = ptr->m_next;\n+            }\n+            sizes.push_back(size);\n+        }\n+        return sizes;\n+    }\n+\n+    /**\n+     * How many bytes are still available from the last allocated chunk\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static std::size_t AvailableMemoryFromChunk(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        return resource.m_available_memory_end - resource.m_available_memory_it;\n+    }\n+\n+    /**\n+     * Once all blocks are given back to the resource, tests that the freelists are consistent:\n+     *\n+     * * All data in the freelists must come from the chunks\n+     * * Memory doesn't overlap\n+     * * Each byte in the chunks can be accounted for in either the freelist or as available bytes.\n+     */\n+    template <std::size_t MAX_BLOCK_SIZE_BYTES, std::size_t ALIGN_BYTES>\n+    static void CheckAllDataAccountedFor(const PoolResource<MAX_BLOCK_SIZE_BYTES, ALIGN_BYTES>& resource)\n+    {\n+        // collect all free blocks by iterating all freelists\n+        std::vector<PtrAndBytes> free_blocks;\n+        for (std::size_t freelist_idx = 0; freelist_idx < resource.m_free_lists.size(); ++freelist_idx) {\n+            std::size_t bytes = freelist_idx * resource.ELEM_ALIGN_BYTES;\n+            auto* ptr = resource.m_free_lists[freelist_idx];\n+            while (ptr != nullptr) {\n+                free_blocks.emplace_back(ptr, bytes);\n+                ptr = ptr->m_next;\n+            }",
      "path": "src/test/util/poolresourcetester.h",
      "position": 85,
      "original_position": 85,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144046537,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've left that out on purpose, I didn't want to complicate this code any further. So far this case never happened",
      "created_at": "2023-03-24T05:09:44Z",
      "updated_at": "2023-03-24T05:09:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1147123753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147123753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": 82,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147124025",
      "pull_request_review_id": 1356009620,
      "id": 1147124025,
      "node_id": "PRRC_kwDOABII585EX7k5",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've implemented the `+ (bytes == 0)` version in 9f947fc3d4b779f017332135323b34e8f216f613",
      "created_at": "2023-03-24T05:10:24Z",
      "updated_at": "2023-03-24T05:10:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1147124025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147124025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147852238",
      "pull_request_review_id": 1357116645,
      "id": 1147852238,
      "node_id": "PRRC_kwDOABII585EatXO",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 16);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because size is too big\n+    block = resource.Allocate(16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 16, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+}\n+\n+// Allocates from 0 to n bytes were n > the PoolResource's data, and each should work",
      "path": "src/test/pool_tests.cpp",
      "position": 86,
      "original_position": 72,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144100307,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The code generation is a bit different when you use unsigned types, then the `+ (bytes == 0)` version is the shortedst for me. In my microbenchmark the `+ (bytes == 0)` is also fastest, but in practice its most likely irrelevant\r\n\r\nYes, it seems to be one instruction shorter after updating @LarryRuane's examples (thanks for doing them) to `size_t` and checking with gcc 12.2 and clang 16.",
      "created_at": "2023-03-24T17:03:47Z",
      "updated_at": "2023-03-24T17:03:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1147852238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147852238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147852733",
      "pull_request_review_id": 1357117819,
      "id": 1147852733,
      "node_id": "PRRC_kwDOABII585Eate9",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memusage.h>\n+#include <support/allocators/pool.h>\n+#include <test/util/poolresourcetester.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <unordered_map>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(pool_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(basic_allocating)\n+{\n+    auto resource = PoolResource<8, 8>();\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+\n+    // first chunk is already allocated\n+    size_t expected_bytes_available = resource.ChunkSizeBytes();\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // chunk is used, no more allocation\n+    void* block = resource.Allocate(8, 8);\n+    expected_bytes_available -= 8;\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    resource.Deallocate(block, 8, 8);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+\n+    // alignment is too small, but the best fitting freelist is used. Nothing is allocated.\n+    block = resource.Allocate(8, 1);\n+    BOOST_TEST(0 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    resource.Deallocate(block, 8, 1);\n+    PoolResourceTester::CheckAllDataAccountedFor(resource);\n+    BOOST_TEST(1 == PoolResourceTester::FreeListSizes(resource)[1]);\n+    BOOST_TEST(expected_bytes_available == PoolResourceTester::AvailableMemoryFromChunk(resource));\n+\n+    // can't use chunk because alignment is too big\n+    block = resource.Allocate(8, 16);",
      "path": "src/test/pool_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "9f947fc3d4b779f017332135323b34e8f216f613",
      "original_commit_id": "d87cb99bb37637e26a9e00b9f7de4bc6f44cb79d",
      "in_reply_to_id": 1144072741,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Only if you have to retouch, or maybe in a follow-up), perhaps add this comment:\r\n\r\n```cpp\r\nBOOST_TEST(b != block); // as `b` has to come from `::operator new` and not from the freelist",
      "created_at": "2023-03-24T17:04:18Z",
      "updated_at": "2023-03-24T17:04:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25325#discussion_r1147852733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1147852733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    }
  ]
}